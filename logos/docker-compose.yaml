services:
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.secure8080.address=:8080"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=admin@tum.de"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--api.dashboard=true"
    ports:
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    networks:
      - internal
      - extern

  logos-server:
    build:
      context: ../
      dockerfile: ./logos/Dockerfile
    container_name: logos-server
    restart: unless-stopped
    depends_on:
      logos-db:
        condition: service_healthy
    volumes:
      - data_volume:/src/logos
    environment:
      PROVIDER_NAME:
      BASE_URL:
    expose:
      - "8080"
      - "50051:50051"
    labels:
      - "traefik.enable=true"

      # === Routing: /v1 ===
      - "traefik.http.routers.logos-server-v1.rule=PathPrefix(`/v1`)"
      - "traefik.http.routers.logos-server-v1.entrypoints=secure8080"
      - "traefik.http.routers.logos-server-v1.tls=true"
      - "traefik.http.routers.logos-server-v1.tls.certresolver=letsencrypt"
      - "traefik.http.routers.logos-server-v1.service=logos-server"
      - "traefik.http.routers.logos-server-v1.priority=100"

      # === Routing: /logosdb ===
      - "traefik.http.routers.logos-server-logosdb.rule=PathPrefix(`/logosdb`)"
      - "traefik.http.routers.logos-server-logosdb.entrypoints=secure8080"
      - "traefik.http.routers.logos-server-logosdb.tls=true"
      - "traefik.http.routers.logos-server-logosdb.tls.certresolver=letsencrypt"
      - "traefik.http.routers.logos-server-logosdb.service=logos-server"
      - "traefik.http.routers.logos-server-logosdb.priority=100"

      # === Routing: /docs ===
      - "traefik.http.routers.logos-server-docs.rule=PathPrefix(`/docs`) || PathPrefix(`/openapi.json`)"
      - "traefik.http.routers.logos-server-docs.entrypoints=secure8080"
      - "traefik.http.routers.logos-server-docs.tls=true"
      - "traefik.http.routers.logos-server-docs.tls.certresolver=letsencrypt"
      - "traefik.http.routers.logos-server-docs.service=logos-server"
      - "traefik.http.routers.logos-server-docs.priority=100"

      # Service-Port
      - "traefik.http.services.logos-server.loadbalancer.server.port=8080"
    networks:
      - internal

  logos-db:
    image: postgres:17
    container_name: logos-db
    restart: unless-stopped
    user: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: logosdb
      POSTGRES_HOST: localhost
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "--username=postgres"]
      interval: 1s
      timeout: 5s
      retries: 10
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data
    networks:
      - internal

  logos-ui:
    build:
      context: ../
      dockerfile: ./logos/logos-ui/Dockerfile
    container_name: logos-ui
    restart: unless-stopped
    expose:
      - "80"
    labels:
      - "traefik.enable=true"

      # === Dev (https://localhost:8080) ===
      - "traefik.http.routers.internal-ui-dev.rule=Host(`localhost`) && PathPrefix(`/`)"
      - "traefik.http.routers.internal-ui-dev.entrypoints=secure8080"
      - "traefik.http.routers.internal-ui-dev.tls=true"
      - "traefik.http.routers.internal-ui-dev.tls.certresolver=letsencrypt"
      - "traefik.http.routers.internal-ui-dev.service=internal-ui-svc"
      - "traefik.http.routers.internal-ui-dev.priority=0"

      # === Prod (https://logos.ase.cit.tum.de:8080) ===
      - "traefik.http.routers.internal-ui-prod.rule=Host(`logos.ase.cit.tum.de`) && PathPrefix(`/`)"
      - "traefik.http.routers.internal-ui-prod.entrypoints=secure8080"
      - "traefik.http.routers.internal-ui-prod.tls=true"
      - "traefik.http.routers.internal-ui-prod.tls.certresolver=letsencrypt"
      - "traefik.http.routers.internal-ui-prod.service=internal-ui-svc"
      - "traefik.http.routers.internal-ui-prod.priority=0"

      # Shared service definition
      - "traefik.http.services.internal-ui-svc.loadbalancer.server.port=80"
    networks:
      - internal

  landing-page:
    build:
      context: ../
      dockerfile: ./logos/logos-landing/Dockerfile
    container_name: logos-landing
    restart: unless-stopped
    environment:
      - NODE_OPTIONS=--max-old-space-size=1024
    expose:
      - "80"
    labels:
      - "traefik.enable=true"

      # === Prod (https://logos.ase.cit.tum.de) ===
      - "traefik.http.routers.landing-prod.rule=Host(`logos.ase.cit.tum.de`) && PathPrefix(`/`)"
      - "traefik.http.routers.landing-prod.entrypoints=websecure"
      - "traefik.http.routers.landing-prod.tls=true"
      - "traefik.http.routers.landing-prod.tls.certresolver=letsencrypt"
      - "traefik.http.routers.landing-prod.service=landing-svc"
      - "traefik.http.routers.landing-prod.priority=1"

      # === Dev (https://localhost) ===
      - "traefik.http.routers.landing-dev.rule=Host(`localhost`) && PathPrefix(`/`)"
      - "traefik.http.routers.landing-dev.entrypoints=websecure"
      - "traefik.http.routers.landing-dev.tls=true"
      - "traefik.http.routers.landing-dev.tls.certresolver=letsencrypt"
      - "traefik.http.routers.landing-dev.service=landing-svc"
      - "traefik.http.routers.landing-dev.priority=1"

      # Shared service definition
      - "traefik.http.services.landing-svc.loadbalancer.server.port=80"
    networks:
      - extern

volumes:
  data_volume:
  postgres_data:

networks:
  internal:
    driver: bridge
  extern:
    driver: bridge
