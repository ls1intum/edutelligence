name: Athena - Tests
on:
  push:
    branches:
      - main
    paths:
      - "athena/**"
      - ".github/workflows/athena_test.yml"
  pull_request:
    branches:
      - main
    paths:
      - "athena/**"
      - ".github/workflows/athena_test.yml"
jobs:
  module-unit-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - module_name: programming_llm
            module_path: modules/programming/module_programming_llm
            test_path: tests/modules/programming/module_programming_llm
          - module_name: text_llm
            module_path: modules/text/module_text_llm
            test_path: tests/modules/text/module_text_llm
          - module_name: modeling_llm
            module_path: modules/modeling/module_modeling_llm
            test_path: tests/modules/modeling/module_modeling_llm
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Install poetry
        run: pipx install poetry
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "poetry"
          cache-dependency-path: ${{ matrix.module_path }}/poetry.lock
      - name: Configure Poetry for in-project virtual environments
        run: poetry config virtualenvs.in-project true
      - name: Install module dependencies
        run: poetry -C ${{ matrix.module_path }} install --with test
      - name: Run module tests
        run: |
          mkdir -p test-results
          poetry -C ${{ matrix.module_path }} run pytest --junitxml=test-results/${{ matrix.module_name }}.xml ${{ matrix.test_path }}
      - name: Upload JUnit Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-results-${{ matrix.module_name }}
          path: test-results/${{ matrix.module_name }}.xml
  report:
    runs-on: ubuntu-latest
    if: always()
    needs: [module-unit-tests]
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Download all JUnit results
        uses: actions/download-artifact@v4
        with:
          pattern: junit-results-*
          path: all-test-results
          merge-multiple: true
      - name: Test Report Summary
        id: test-report
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: "all-test-results/**/*.xml"
          check_name: "Athena Test Report (All Modules)"
          require_tests: true
          require_passed_tests: false
          detailed_summary: true
          include_time_in_summary: true
          group_suite: false
      - name: Comment test results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `### Athena Test Results Summary\n\n${{ steps.test-report.outputs.summary }}\n\n#### Failing Tests Summary\n\n${{ steps.test-report.outputs.detailed_summary }}`;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: summary
            });
