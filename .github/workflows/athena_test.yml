name: Athena - Tests
on:
  push:
    branches:
      - main
    paths:
      - "athena/**"
      - ".github/workflows/athena_test.yml"
  pull_request:
    branches:
      - main
    paths:
      - "athena/**"
      - ".github/workflows/athena_test.yml"
jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Install poetry
        run: pipx install poetry
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "poetry"
          cache-dependency-path: athena/poetry.lock
      - name: Configure Poetry for in-project virtual environments
        run: poetry config virtualenvs.in-project true
      - name: Install athena dependencies
        run: poetry -C athena install --with dev
      - name: Install all modules
        run: |
          cd athena
          poetry run python scripts/install_modules.py
      - name: Run tests
        run: |
          cd athena
          mkdir -p test-results
          # Run tests directly from the main athena environment
          poetry run pytest tests/modules/programming/module_programming_llm/mock --junitxml=test-results/programming_llm.xml
          poetry run pytest tests/modules/text/module_text_llm/mock --junitxml=test-results/text_llm.xml
          poetry run pytest tests/modules/modeling/module_modeling_llm/mock --junitxml=test-results/modeling_llm.xml
        continue-on-error: true
      - name: Run linting
        run: |
          cd athena
          # Run prospector on the main modules from the athena environment
          poetry run prospector --profile .prospector.yaml athena/
          poetry run prospector --profile .prospector.yaml modules/programming/module_programming_llm/
          poetry run prospector --profile .prospector.yaml modules/text/module_text_llm/
          poetry run prospector --profile .prospector.yaml modules/modeling/module_modeling_llm/
        continue-on-error: true
      - name: Upload JUnit Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-results
          path: athena/test-results/
  report:
    runs-on: ubuntu-latest
    if: always()
    needs: [test-and-lint]
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Download all JUnit results
        uses: actions/download-artifact@v4
        with:
          name: junit-results
          path: all-test-results
      - name: Test Report Summary
        id: test-report
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: "all-test-results/**/*.xml"
          check_name: "Athena Test Report"
          require_tests: true
          require_passed_tests: false
          detailed_summary: true
      - name: Comment test results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `### Athena Test Results Summary\n\n${{ steps.test-report.outputs.summary }}\n\n#### Failing Tests Summary\n\n${{ steps.test-report.outputs.detailed_summary }}`;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: summary
            });
