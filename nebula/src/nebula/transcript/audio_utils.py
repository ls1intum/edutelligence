import logging
import os
import subprocess  # nosec B404

logger = logging.getLogger(__name__)


def split_audio_ffmpeg(audio_path, output_dir, chunk_duration=60):
    os.makedirs(output_dir, exist_ok=True)

    # Clean old chunks
    for f in os.listdir(output_dir):
        if f.endswith(".wav"):
            os.remove(os.path.join(output_dir, f))

    filename_base = os.path.splitext(os.path.basename(audio_path))[0]
    output_template = os.path.join(output_dir, f"{filename_base}_%03d.wav")

    command = [
        "ffmpeg",
        "-i",
        audio_path,
        "-f",
        "segment",
        "-segment_time",
        str(chunk_duration),
        "-acodec",
        "pcm_s16le",  # WAV format for Azure Whisper
        "-ar",
        "16000",  # 16 kHz sampling rate
        "-ac",
        "1",  # mono channel
        output_template,
        "-y",
    ]

    logger.info("üî™ Splitting audio using FFmpeg: %s", audio_path)
    result = subprocess.run(
        command, shell=False, capture_output=True, text=True, check=True  # nosec B603
    )

    if result.returncode != 0:
        raise RuntimeError("FFmpeg split failed: %s" % result.stderr)

    chunk_files = sorted(
        [
            os.path.join(output_dir, f)
            for f in os.listdir(output_dir)
            if f.endswith(".wav")
        ]
    )

    if not chunk_files:
        raise RuntimeError("‚ùå No chunks were generated by FFmpeg.")

    logger.info("‚úÖ Created %s chunks in %s", len(chunk_files), output_dir)
    return chunk_files
