events {
    worker_connections 1024;
}

http {
    map $http_authorization $api_key_valid {
        default 0;
        "nebula-secret" 1; # CHANGE THIS TO YOUR ACTUAL API KEY
    }

    upstream transcriber_backend {
        server transcriber:5000;
    }

    upstream faq_backend {
        server faq:5000;
    }

    # Single server block handling both HTTP and HTTPS
    server {
        listen 80;
        listen 443 ssl http2;
        server_name localhost; # CHANGE THIS TO YOUR ACTUAL DOMAIN

        # SSL Certificate configuration (only used when listening on 443)
        ssl_certificate /path/to/your/certificate.crt; # CHANGE THIS TO YOUR CERT PATH
        ssl_certificate_key /path/to/your/private.key; # CHANGE THIS TO YOUR KEY PATH

        # Modern SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK;
        ssl_prefer_server_ciphers on;

        # SSL session configuration
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_stapling on;
        ssl_stapling_verify on;

        # Optional: Redirect HTTP to HTTPS (uncomment to enforce HTTPS)
        # if ($scheme = http) {
        #     return 301 https://$server_name$request_uri;
        # }

        # Optional: Add HSTS header to enforce HTTPS (uncomment if desired)
        # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Health check endpoint (no API key required)
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # API key validation for protected endpoints
        location ~ ^/(transcribe|faq)/ {
            # Check if API key is valid
            if ($api_key_valid = 0) {
                return 401 '{"error": "Unauthorized - Valid API key required in Authorization header"}\n';
            }

            # Route to transcriber service
            if ($uri ~ ^/transcribe/) {
                proxy_pass http://transcriber_backend;
            }

            # Route to FAQ service
            if ($uri ~ ^/faq/) {
                proxy_pass http://faq_backend;
            }

            # Common proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;

            # Timeout settings for long-running operations
            proxy_connect_timeout 6000s;
            proxy_send_timeout 6000s;
            proxy_read_timeout 6000s;
        }

        # Root path - public information (no API key required)
        location / {
            return 200 "Nebula API Gateway\nAvailable services:\n- /transcribe/ (requires API key)\n- /faq/ (requires API key)\n- /health (public)\n\nSend API key in 'Authorization' header\n";
            add_header Content-Type text/plain;
        }

        # Error pages
        error_page 404 /404.html;
        location = /404.html {
            return 404 "Not Found\n";
            add_header Content-Type text/plain;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            return 500 "Internal Server Error\n";
            add_header Content-Type text/plain;
        }
    }

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Basic security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy strict-origin-when-cross-origin;
}
