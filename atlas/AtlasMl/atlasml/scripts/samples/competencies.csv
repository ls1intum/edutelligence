id,description,title,course_id,taxonomy,mastery_threshold,soft_due_date,optional,linked_standardized_competency_id,discriminator,linked_course_competency_id
181,"Du kannst mit Variablen umgehen.  
  Du kannst Methoden erstellen und aufrufen.  
  Du kennst Konstruktoren und weißt wofür sie da sind.  
  Du weißt wie Objekte gespeichert werden und wie sich Referenzen auf diese verhalten",Klassen und Objekte,299,U,80,,False,,C,
182,"Du verstehst den Aufbau vom Stack und was darauf gespeichert wird.  
  Du verstehst den Aufbau vom Heap und was darauf gespeichert wird.",Speicherkonzepte,299,U,80,,False,,C,
183,"Du kennst die verschiedenen Keywords wie public und deren Bedeutung.  
  Du verstehst das Prinzip von Gettern und Settern und wofür Datenkapselung da ist.  
  Du kannst mittel-schwere Ansätze selbstständig implementieren.",Zugriffsmodifier und Kapselung,299,U,80,,False,,C,
184,"Du kannst Klassen und ihren Inhalt in UML darstellen.  
  Du weißt wie Beziehungen von Klassen in UML dargestellt werden.  
  Du kannst eigenständig UML-Diagramme erstellen und lesen.",UML,299,U,80,,False,,C,
185,Du verstehst das Kurzschlussverhalten von && und || im Vergleich zu & und |.,Logische Operatoren,299,R,80,,False,,C,
186,"Du bist dazu in der Lage einfach verkettete Listen selbst zu implementieren.  
  Du bist dazu in der Lage doppelt verkettete Listen selbst zu implementieren.  
  Du kennst sowohl iterative als auch rekursive Ansätze um durch Listen zu iterieren.",Listen,299,Y,80,,False,,C,
187,"Du bist dazu in der Lage Strings mithilfe von Listen zu implementieren.  
  Du bist dazu in der Lage Stacks, Queues und Deques mithilfe von Listen zu implementieren.",Datenstrukturen basierend auf Listen,299,Y,80,,False,,C,
188,"Du weißt wie Vererbungen in UML dargestellt werden.  
  Du bist dazu in der Lage Vererbungen im Code zu implementieren.  
  Du kannst die Keywords protected und super anwenden.  
  Du kannst Methoden in Unterklassen überschreiben.",Vererbung,299,Y,80,,False,,C,
191,"Du verstehst das Konzept von abstrakten Methoden.  
  Du weißt welche Modifier implizit bei Interfaces in Java dabei sind.  
  Du kannst Default-Methoden in Interfaces erstellen.  
  Du kannst anonyme Klassen erstellen.",Abstrakte Klassen und Interfaces,299,U,80,,False,,C,
192,"Du verstehst das Konzept von statischen und dynamischen Typen.  
  Du verstehst das Konzept von überschriebenen Methoden.  
  Du kennst den Dynamic Dispatch und weißt wann er stattfindet.  
  Du kennst das Prinzip der Verschattung von Variablen.  
  Du verstehst das Konzept von Casts und weißt wie du das Keyword instanceof verwendest.",Polymorphie,299,U,80,,False,,C,
193,"Du kannst innere Klassen erstellen.  
  Du weißt in welchen Situationen innere Klassen sinnvoll sind.",Innere Klassen,299,R,80,,False,,C,
194,"Du verstehst das Konzept von Enums.  
  Du weißt in welchen Situationen das Erstellen von eigenen Enums sinnvoll ist.",Enums,299,R,80,,False,,C,
196,"Du bist dazu in der Lage Klassen um Generics zu erweitern und kannst sie z.B. für Attribute verwenden.  
  Du kannst einzelne Methoden durch Generics erweitern.",Generics,299,Y,80,,False,,C,
197,"Du bist dazu in der Lage die von Java bereitgestellten Listen zu verwenden.  
  Du bist dazu in der Lage die von Java bereitgestellten Sets zu verwenden.  
  Du bist dazu in der Lage die von Java bereitgestellten Maps zu verwenden.",Standard Library: Collections,299,R,80,,False,,C,
198,"Du verstehst das Konzept von Iteratoren.  
  Du bist dazu in der Lage erweiterte for-Schleifen in Verbindung mit Iteratoren zu nutzen.",Iteratoren,299,U,100,,False,,C,
199,"Du kennst eine Auswahl von häufig benutzen Exceptions.  
  Du kennst die Keywords throw und throws und weißt wie man sie im Code benutzt.  
  Du verstehst wann und wie man try-catch verwendet.  
  Du kannst eigenständig neue individuelle Exceptions erstellen.",Exceptions,299,Y,80,,False,,C,
200,"Du verstehst das Konzept von Funktionalen Interfaces.  
  Du kennst fundamentale Funktionale Interfaces aus der Standartbibliothek.",Funktionen als Objekte,299,U,80,,False,,C,
201,"Du bist in der Lage dazu Dateien einzulesen.  
  Du kannst Dateien erstellen.  
  Du kannst neue Inhalte in Dateien schreiben.",I/O,299,Y,80,,False,,C,
202,"Du kannst Streams von Arrays, Collections und Dateien erstellen.  
  Du kennst verschiedene fundamentale Methoden von Streams.",Streams,299,Y,80,,False,,C,
203,"Du kennst die Klasse Thread und kannst von ihr erbende Klassen schreiben.  
  Du kennst das Interface Runnable und kannst dafür implementierende Klassen schreiben.  
  Du kennst die verschiedenen Zustände von Threads.",Threads,299,U,80,,False,,C,
204,"Du verstehst das Konzept von Sockets.  
  Du kannst ServerSockets erstellen und damit Verbindungen annehmen.  
  Du kannst mithilfe der Sockets Nachrichten senden und empfangen.",Netzwerkprogrammierung,299,Y,80,,False,,C,
440,"Du kannst mit Variablen umgehen.  
  Du kannst Methoden erstellen und aufrufen.  
  Du kennst Konstruktoren und weißt wofür sie da sind.  
  Du weißt wie Objekte gespeichert werden und wie sich Referenzen.",Klassen und Objekte,404,U,80,2024-11-03 22:59:00.000,False,,C,
441,"Du kannst Klassen und ihren Inhalt in UML darstellen.  
  Du weißt wie Beziehungen von Klassen in UML dargestellt werden.  
  Du kannst eigenständig UML-Diagramme erstellen und lesen.",UML,404,U,80,2024-11-03 22:59:00.000,False,,C,
457,"- Du verstehst grundlegende Kontrollstrukturen.
- Du weißt, wie Schleifen und Bedingungen zur Steuerung des Programmflusses genutzt werden können.
- Du kannst einfache und geschachtelte Kontrollstrukturen anwenden.",Kontrollstrukturen,404,U,80,2024-11-17 17:00:00.000,False,,C,
485,"- Du kennst die verschiedenen Keywords wie public, private, etc. und deren Bedeutung.
- Du verstehst das Prinzip von Gettern und Settern und wofür Datenkapselung da ist.
- Du kannst mittel-schwere Ansätze selbstständig implementieren",Zugriffsmodifier und Kapselung,404,U,80,2024-11-10 17:00:00.000,False,,C,
486,- Du verstehst das Kurzschlussverhalten von && und || im vergleich zu & und |.,Logische Operatoren,404,R,80,2024-11-10 17:00:00.000,False,,C,
487,"- Du kennst die verschiedenen Basistypen von Java und ihre Größenordnungen.
- Du weißt was Overflows und Underflows bedeuten, bzw wann diese auftreten können.
- Du kennst die Hierarchie der Basistypen und weißt wann und wo Datenverluste auftreten können.
- Du kennst den Unterschied zwischen impliziten und expliziten Casts.",Basistypen,404,U,80,2024-11-10 17:00:00.000,False,,C,
488,- Du verstehst den Unterschied zwischen Call-by-Value und Call-by-Reference.,Call-by-Value,404,U,80,2024-11-10 17:00:00.000,False,,C,
489,"- Du kennst die verschiedenen Testannotationen wie @Test, @BeforeAll, @BeforeEach.
- Du kannst mit den Assertions (assertEquals, assertNotNull, ...) von JUnit 5 umgehen und damit eigene Testmethoden schreiben.",JUnit Testing,404,U,80,2024-11-10 17:00:00.000,False,,C,
527,"- Du kannst Arrays erstellen.
- Du kannst auf Elemente im Array zugreifen.
- Du weißt, wie man IndexOutOfBoundsExceptions verhindert.
- Du kannst die Konzepte auch auf mehrdimensionale Arrays anwenden.",Arrays,404,Y,100,2024-11-24 17:00:00.000,False,,C,
528,"- Du verstehst, wie die Operatoren >>, <<, |, & und ^ funktionieren
- Du verstehst, wie sich Zahlen auf Bitebene verhalten
- Du kennst den Unterschied zwischen >> und >>>",Bitweise Operatoren,404,U,100,2024-11-24 17:00:00.000,False,,C,
529,"- Du bist dazu in der Lage einfach verkettete Listen selbst zu implementieren.
- Du bist dazu in der Lage doppelt verkettete Listen selbst zu implementieren.
- Du kennst sowohl iterative als auch rekursive Ansätze um durch Listen zu iterieren.",Listen,404,Y,100,2024-12-14 23:00:00.000,False,,C,
530,"- Du bist dazu in der Lage Stacks und Queues mithilfe von Listen zu implementieren.
- Du kannst Listen mit anderen Datenstrukturen kombinieren, um komplexere Datenstrukturen umzusetzen",Datenstrukturen basierend auf Listen,404,Y,100,2024-11-30 23:00:00.000,False,,C,
531,"- Du weißt wie Vererbungen in UML dargestellt werden.
- Du bist dazu in der Lage Vererbungen im Code zu implementieren.
- Du kannst das Keyword super anwenden.
- Du kannst Methoden in Unterklassen überschreiben.",Vererbung Basics,404,Y,100,2024-11-30 23:00:00.000,False,,C,
536,"* Du verstehst Rekursion als Methode zur Lösung komplexer Probleme durch Zerlegung in Teilprobleme.
* Du kannst Basis- und Rekursionsfälle definieren und umsetzen.
* Du erkennst, wann Rekursion effizienter ist als Iteration.",Rekursion,404,Y,100,2024-12-13 23:00:00.000,False,,C,
537,"* Du verstehst verschiedene Baumarten (z. B. binäre Bäume) und deren Anwendungen.
* Du kannst rekursive Algorithmen zur Baumdurchquerung (Pre-order, In-order, Post-order) implementieren.
* Du bist in der Lage, Algorithmen für das Hinzufügen, Suchen und Löschen von Knoten in einem Baum zu entwickeln.",Rekursive Datenstrukturen,404,Y,100,2024-12-13 23:00:00.000,False,,C,
538,"* Du verstehst Merge Sort als einen Divide-and-Conquer-Algorithmus und kannst die einzelnen Schritte detailliert erklären.
* Du weißt, wie Merge Sort mit anderen Sortieralgorithmen (z. B. Quick Sort, Heap Sort) verglichen wird und kannst die beste Wahl für ein gegebenes Problem treffen. 
* Du kannst die iterativen und rekursiven Sortierverfahren vergleichen und erklären.",Rekursives Sortieren ,404,Y,100,2024-12-13 23:00:00.000,False,,C,
546,"- Du verstehst das Konzept von Iteratoren.
- Du bist dazu in der Lage erweiterte for-Schleifen in Verbindung mit Iteratoren zu nutzen.",Iteratoren,404,U,100,2024-12-21 23:00:00.000,False,,C,
547,"- Du kennst eine Auswahl von häufig benutzen Exceptions.
- Du kennst die Keywords throw und throws und weißt wie man sie im Code benutzt.
- Du verstehst wann und wie man try-catch verwendet.
- Du kannst eigenständig neue individuelle Exceptions erstellen.",Exceptions,404,Y,100,2024-12-21 23:00:00.000,False,,C,
548,"- Du verstehst das Konzept von Funktionalen Interfaces.
- Du kennst fundamentale Funktionale Interfaces aus der Standartbibliothek.",Funktionen als Objekte,404,U,100,2024-12-21 23:00:00.000,False,,C,
549,"- Du verstehst das Konzept von abstrakten Methoden.
- Du weißt welche Modifier implizit bei Interfaces in Java dabei sind.
- Du kannst Default-Methoden in Interfaces erstellen.
- Du kannst anonyme Klassen erstellen.",Abstrakte Klassen und Interfaces,404,U,100,2024-12-07 23:00:00.000,False,,C,
550,"- Du verstehst das Konzept von statischen und dynamischen Typen.
- Du verstehst das Konzept von überschriebenen Methoden.
- Du kennst den Dynamic Dispatch und weißt wann er stattfindet.
- Du kennst das Prinzip der Verschattung von Variablen.
- Du verstehst das Konzept von Casts und weißt wie du das Keyword instanceof verwendest.",Polymorphie,404,U,100,2024-12-07 23:00:00.000,False,,C,
551,"- Du kannst innere Klassen erstellen.
- Du weißt in welchen Situationen innere Klassen sinnvoll sind.",Innere Klassen,404,R,100,2024-12-07 23:00:00.000,False,,C,
552,"- Du verstehst das Konzept von Enums.
- Du weißt in welchen Situationen das Erstellen von eigenen Enums sinnvoll ist.",Enums,404,R,100,2024-12-07 23:00:00.000,False,,C,
553,"- Du bist dazu in der Lage Klassen um Generics zu erweitern und kannst sie z.B. für Attribute verwenden.
- Du kannst einzelne Methoden durch Generics erweitern.",Generics,404,Y,100,2024-12-07 23:00:00.000,False,,C,
608,"- Describe the role of  assertions  and logical reasoning in  program correctness 
- Articulate the relationship between assertions and  program state 
- Explain how verification differs from  testing",Fundamentals of Imperative Program Verification,443,U,60,2025-05-22 22:00:00.000,False,,C,
609,"- Transform postconditions into  minimal necessary preconditions  after certain statements
- Construct precise assertions for preconditions and postconditions
- Verify  local consistency  of assertions
- Apply  weakest precondition calculations  to verify program segments (assignments, conditionals, loops) 
- Prove the  correctness  of simple imperative programs",Pre-/Postconditions,443,A,60,2025-05-22 22:00:00.000,False,,C,
610,"- Formulate loop invariants that capture the  intended state  before, during, and after loop execution
- Identify appropriate termination  indicator values  that decrease with each iteration to guarantee termination
- Prove that loops execute a  finite  number of times under given conditions",Loop Invariants,443,A,60,2025-05-29 22:00:00.000,False,,C,
611,"- Explain the concepts of  immutability  and  variable binding 
- Distinguish between variable redefinition and variable  shadowing","Basics: Expressions, Values and Variables",443,U,60,2025-06-12 22:00:00.000,False,,C,
612,"- Explain the concept of function  evaluation  and  locally defined  functions
- Differentiate between  recursive  and non-recursive function
- Understand  mutually recursive  functions",Basics: Functions,443,U,60,2025-06-12 22:00:00.000,False,,C,
613,"- Write expressions and definitions in OCaml's syntax
- Work effectively with  OCaml's type system  and inference
- Use the OCaml  interpreter environment  for testing",OCaml Syntax and Semantics,443,Y,90,2025-06-12 22:00:00.000,False,,C,
614,"- Utilize  built-in data types  (lists, tuples, records, enums) to model and structure data effectively
- Implement precise pattern matching to  deconstruct  complex data types
- Create and manipulate  user-defined data types",Data Structures and Pattern Matching,443,Y,90,2025-06-19 22:00:00.000,False,,C,
615,"- Implement solutions using pure functions without  side effects 
- Write effective  recursive functions  for various problems
- Optimize recursive functions through  tail recursion",Functional Programming Paradigms,443,Y,90,,False,,C,
616,"- Differentiate between named and  anonymous  functions
- Create and apply  higher-order functions  that accept and return other functions
- Apply  currying  and  partial application  techniques",Higher-Order Functions,443,Y,90,,False,,C,
617,"- Understand the concept of polymorphism and instantiation
- Implement polymorphic  functions  and  data types  to write general-purpose and reusable code",Polymorphism,443,Y,90,,False,,C,
618,"- Design modules with clear, well-defined  interfaces 
- Implement  information hiding  through abstract types to separate module specifications from implementations
- Create and use  functors  for parametrized reusable modules
- Structure larger programs using modular components",Module System and Abstraction,443,C,90,,False,,C,
619,"- Implement  complex  data structures (e.g. trees)
- Design efficient implementations of abstract data types using concepts like  lazy evaluation 
- Define  operations  on complex data structures",Efficient Functional Data Structures,443,C,100,,False,,C,
620,"- Use and handle  exceptions  appropriately
- Implement  FileIO  and general  textual In/Output  in Ocaml
- Use and Evaluate the  Sequence Operator  in the context of a functional language",Practical Features,443,Y,90,,False,,C,
621,"- Understand thread communication mechanisms
- Implement concurrent solutions using  channels 
- Apply  selective  communication techniques
- Avoid common  concurrency issues  like deadlocks",Concurrent Programming,443,Y,90,,False,,C,
622,- Understand the semantics of functional programs in  MiniOcaml,Fundamentals of Functional Program Verification,443,U,60,,False,,C,
623,"- Use  axoims  to verify the evaluation of expressions 
- Develop formal proofs using  big-step operational semantics  to justify program behavior
- Use big-step semantics for  termination analysis",Big-Step Semantics,443,E,60,,False,,C,
624,"- Use the  substitution lemma  and rewrite rules to verify the  equivalence  of functionally transformed expressions 
- Asses the (preservation of) semantics of functional programs after program transformations
- Apply  equational reasoning  to verify program properties
- Prove correctness of functional programs using  induction",Equational Reasoning,443,E,60,,False,,C,
625,"- Understand and use basic and complex  logical operators  (AND, OR, NOT, IMPLICATION etc)
- Understand and use  quantifiers  (All, Exists)
- Use rules of logical algebra to  simplify logical expressions",Logic,443,Y,15,2025-05-08 22:00:00.000,False,,C,
570,"- Abstract Data Type (ADT) and operations on an ADT
    - Dictionary operations (insert, delete, find)
- Records/Structs/Tuples and Objects
- Sets",Data Structures (Basics),453,E,100,,False,,C,
571,"- Performance-energy evaluation (introduction): performance, power consumption, memory, and communication costs
- Branch prediction, speculative execution, out-of-order execution",Performance and Energy Efficiency,453,E,100,,False,,C,
572,"- Overview and history of computer architecture
- Bits, bytes, and words
- Unsigned, signed and two’s complement representations
- Numeric data representation and number bases
    - Fixed-point
    - Floating-point
- Representation of non-numeric data
- Representation of records, arrays and UTF data types",Machine-Level Data Representation,453,Y,100,,False,,C,
573,"- A type as a set of values together with a set of operations:
    - Primitive types (e.g., numbers, Booleans).
    - Compound types built from other types (e.g., records/structs, unions, arrays, lists, functions, references using set operations).
- Association of types to variables, arguments, results, and fields.
- Type safety as an aspect of program correctness.
- Type safety and errors caused by using values inconsistently given their intended types.
- Goals and limitations of static and dynamic typing:
    - Detecting and eliminating errors as early as possible.
- Generic types (parametric polymorphism):
    - Definition and advantages of polymorphism: parametric, subtyping, overloading and coercion.
    - Comparison of monomorphic and polymorphic types.
    - Comparison with ad-hoc polymorphism (overloading) and subtype polymorphism.
    - Generic parameters and typing.
    - Use of generic libraries such as collections.
    - Comparison with ad hoc polymorphism (overloading) and subtype polymorphism.
    - Prescriptive vs descriptive polymorphism.
    - Implementation models of polymorphic types.
        - Subtyping.",Type Systems,453,C,100,,False,,C,
574,"- Data structures for translation, execution, translation and code mobility such as stack, heap, aliasing (sharing using pointers), indexed sequence and string.
- Direct, indirect, and indexed access to memory location.
- Run-time representation of data abstractions such as variables, arrays, vectors, records, pointer-based data elements such as linked-lists and trees, and objects.
- Abstract low-level machine with simple instruction, stack and heap to explain translation and execution.
- Run-time layout of memory: activation record (with various pointers), static data, call-stack, heap:
    - Translating selection and iterative constructs to control-flow diagrams.
    - Translating control-flow diagrams to low level abstract code.
    - Implementing loops, recursion, and tail calls.
    - Translating function/procedure calls and return from calls, including different parameter-passing mechanisms using an abstract machine.
- Memory management:
    - Low level allocation and accessing of high-level data structures such as basic data types, n-dimensional array, vector, record, and objects.
    - Return from procedure as automatic deallocation mechanism for local data elements in the stack.
    - Manual memory management: allocating, de-allocating, and reusing heap memory.
    - Automated memory management: garbage collection as an automated technique using the notion of reachability.",Systems Execution and Memory  Model,453,C,100,,False,,C,
575,"- Review of physical memory, address translation and memory management hardware
- Impact of memory hierarchy including cache concept, cache lookup, etc. on operating system mechanisms and policy
- Logical and physical addressing, address space virtualization
- Concepts of paging, page replacement, thrashing and allocation of pages and frames
- Allocation/deallocation/storage techniques (algorithms and data structure) performance and flexibility
- Memory caching and cache coherence and the effect of flushing the cache to avoid speculative execution vulnerabilities
- Security mechanisms and concepts in memory management including sandboxing, protection, isolation, and relevant vectors of attack",Memory Management,453,U,100,,False,,C,
576,"- Basic concepts such as variables, primitive data types, and expression evaluation.
- How imperative programs work: state and state transitions on execution of statements, flow of control
- Basic constructs such as assignment statements, conditional and iterative statements, basic I/O
- Key modularity constructs such as functions and related concepts like parameter passing, scope, abstraction, data encapsulation, etc.
- Input and output using files and APIs
- Structured data types available in the chosen programming language like sequences, associative containers, others and when and how to use them
- Libraries and frameworks provided by the language (when/where applicable)
- Recursion",Fundamental Programming Concepts and Practices (Develop),453,C,100,,False,,C,
577,"- Basic testing including test case design 
- Use of a general-purpose IDE, including its debugger 
- Programming style that improves readability
- Specifying functionality of a module in a natural language",Software Development Practices,453,C,100,,False,,C,
578,"- Common vulnerabilities and weaknesses
- Input validation and data sanitization
- Type safety and type-safe languages
- Buffer overflows, stack smashing, and integer overflows",Secure Coding,453,C,100,,False,,C,
579,"- Performance figures of merit
- Workloads and representative benchmarks, and methods of collecting and analyzing performance figures of merit
- CPI (Cycles per Instruction) equation as a tool for understanding tradeoffs in the design of instruction sets, processor pipelines, and memory system organizations.
- Amdahl’s Law: the part of the computation that cannot be sped up limits the effect of the parts that can
- Order of magnitude analysis (Big O notation)
- Analysis of slow and fast paths of a system
- Events on their effect on performance (e.g., instruction stalls, cache misses, page faults)",Performance Evaluation,453,E,100,,False,,C,
580,"- Combinational vs sequential logic/field programmable gate arrays (FPGAs)
    - Fundamental combinational
    - Sequential logic building block 
- Simulation using SystemC
- Physical constraints
    - Gate delays
    - Fan-in and fan-out
    - Energy/power",Logic and Systems,453,E,100,,False,,C,
581,"- Memory hierarchy: the importance of temporal and spatial locality
- Main memory organization and operations
- Latency, cycle time, bandwidth",Memory Hierarchy,453,U,100,,False,,C,
582,"- Imperative programming as a subset of object-oriented programming.
- Object-oriented design:
    - Decomposition into objects carrying state and having behavior.
- Definition of classes: fields, methods, and constructors.
- Collection classes, iterators, and other common library components.
- Abstraction",Object-Oriented Programming,453,C,100,,False,,C,
583,"- Effective communication
- Common causes of team conflict, and approaches for conflict resolution
- Cooperative programming 
- Roles and responsibilities in a software team
- Team processes 
- Importance of team diversity and inclusion 
- Interfacing with stakeholders, as a team
- Risks associated with physical, distributed, hybrid and virtual teams",Teamwork,453,Y,100,,False,,C,
584,"- Software configuration management and version control
- Testing tools
- Design and communication tools (docs, diagrams)
- Tool integration concepts and mechanisms
- Use of modern IDE facilities - debugging, refactoring, searching/indexing, etc.",Tools and Environments,453,U,100,,False,,C,
585,"- System design principles
- Software architecture
- Programming in the large vs programming in the small
- Code smells and other indications of code quality, distinct from correctness.",Software Design,453,U,100,,False,,C,
586,"- Different types of resources (e.g., processor share, memory, disk, net bandwidth)
- Common resource allocation/scheduling algorithms (e.g., first-come-first-serve, priority-based scheduling, fair scheduling and preemptive scheduling)
- Advantages and disadvantages of common scheduling algorithms",Resource Management,453,U,100,,False,,C,
587,"- Common criteria of system design (e.g., liveness, safety, robustness, scalability and security)
- Designs of representative systems (RISC-V)",System Design,453,C,100,,False,,C,
588,"- Basic building blocks and components of a computer (gates, flip-flops, registers, interconnections; datapath + control + memory)
- Hardware as a computational paradigm: Fundamental logic building blocks; Logic expressions, minimization, sum of product forms
- Programming abstractions, interfaces, and use of libraries",Overview of Computer Systems,453,U,100,,False,,C,
