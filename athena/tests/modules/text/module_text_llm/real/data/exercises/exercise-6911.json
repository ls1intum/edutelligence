{
  "id": 6911,
  "meta": {},
  "type": "text",
  "title": "H06E03 Inheritance vs. Delegation (SS22)",
  "course_id": 169,
  "max_points": 6,
  "submissions": [
    {
      "id": 5586804,
      "meta": {},
      "text": "Inheritance in Java programming is the process by which one class takes the property of another other class.  The new classes, known as derived or child class, take over the attributes and behavior of the pre-existing classes, which are referred to as base classes or super or parent class.\nDelegation is simply passing a duty off to someone/something else.\nDelegation can be viewed as a relationship between objects where one object forwards certain method calls to another object, called its delegate.\nThe primary advantage of delegation is run-time flexibility – the delegate can easily be changed at run-time. ",
      "score": 33.3,
      "language": "ENGLISH"
    },
    {
      "id": 5589431,
      "meta": {},
      "text": "The difference between inheritance and delegation is that inheritance allows the programmer to extend a class and offer its ENTIRE functionality and if desired add something on top of that.\nDelegation is a method where the programmer creates a receiver that takes requests from a client and then delegates them to the delegate. The receiver might only offer parts of the functionality of the delegate.\n\nAdvantages:\nDelegation helps to ensure that a client cannot misuse some functionality of the delegate.\nInheritance is easy and fast to implement and supported in (almost) all Programming Languages.\n\nDisadvantages:\nInheritance might expose some functionality that we don't want the subclass to have. A malicious or unknowing user/caller might then abuse this class.\nWith delegation the receiver and the delegate needs to be instantiated. That leads to slight overhead.\n\nSmartphone Apps use inheritance. There would be an abstract app class and different Subclasses like System Apps, PlayStore Apps and 3rdParty Apps that share common functionality.\n\nSmartphones also use delegation. There is the normal user mode and the superuser mode. By default only normal mode can be accessed which redirects all the requests to the superuser.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594134,
      "meta": {},
      "text": "In case of delegation a class delegates a method call to another, independent class. In case of inheritance the subclass isn't independent of its superclass because it has inherited its members. Instead, it extends or overrides the functionality of its superclass.\n\nThat's why inheritance can lead to unwanted behaviour: the client can still call the (public and not overridden) methods of the superclass and bypass the subclass and its intended behaviour. On the other hand, inheritance is very easy to implement, in Java e.g. you only have to use the \"extends\" keyword.\n\nDelegation isn't that easy to implement because beside the object of the delegating class you have to create an object of the delegate. This is more inefficient than only using one object in case of inheritance. But delegation is in general more flexible and \"secure\" because the client can't directly access the delegate, and therefor can't expose the intended behaviour.\n\nMost smartphones offer the functionality to take photos: The user has to click a button in the GUI which then delegates the photo shooting to the camera. Using inheritance doesn't make sense because the camera shouldn't e.g. offer a functionality for restarting the phone.\nOften, a smartphone has internal storage as well as a SD card. Both could inherit from a (abstract) class Storage because both types of storage offer the same functionality. Delegating storage actions to the class Storage doesn't make sense because the SD card respectively internal storage is already the actual storage, the class Storage isn't mapped to physical material.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594962,
      "meta": {},
      "text": "When using inheritance, the new subclass will inherit all the functionality from the parent class, which can also be changed by overriding the methods if needed. This is different to delegation, where the new class has an instance of the other class and uses its funcitonality by sending method calls to it.\n\nAn advantage of inheritance is that it's easy to use and makes sense when we want to purely extend a class. However, we have to keep in mind that by using inheritance we might expose some functionality that we do not want other people to use, since they could run into issues by misusing them.\n\nAn advantage of delegation is that it prevents unwanted access to the functionality of the used class by delegating the methods in an understandable and mistake-proof way. Nevertheless, delegation can be costly  since we have to instantiate new objects every time.\n\nAn example in terms of smartphones for inheritance would be an App class. There are things that all kinds of apps are supposed to be able to do, such as start up, shut down, request permissions etc. All classes need this functionality so they could inherit from this class.\n\nDelegation can be used for security (e.g. proxy pattern). An example could be accessing the phone after restarting it, where we would have to enter a password / SIM code. We should not be authorized beforehand, so the delegate class would prevent accessing the phone content before entering the required credentials.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594993,
      "meta": {},
      "text": "Inheritance means that one class (child class) takes the properties of another class (parent class), these can be attributes or methods/behaviors. This is also called white box reuse, where a new class is created by subclassing an exiting class, functionalities from the parent class are reused but new functionalities can be added as well. An advantage is that new functionalities in the child class are easy to implement, however this also means that methods from the parent can be exposed unintentionally. Assuming there is a base class \"iPhone 12\" which has all the basic functionalities needed to use the phone. The class \"iPhone 12 pro\" inherits all the functionalities of the parent class, but has additional functionalities added.\n\nDelegation means that a task is handed over to another class, here, functionalities are reused from an existing object, this works by catching a task and transferring it to another object. Delegation is the more flexible approach however in comparison to inheritance, this also might be less efficient, since in order to fulfil the task, the creation of an object instance is needed.\nExample: Apple's iOS commonly uses delegation, an example would be UITableView class, where the table view only has the task to recognise user activities like pressing the exit button, so the table view gives a notification to the delegate that the click happened. The delegate then has the rules and decision power on what happens after the event. This is how responsibilities are separated.\n\n\n\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595080,
      "meta": {},
      "text": "Der Unterschied zwischen inheritance und delegation wenn es darum geht bereits implementiertes wiederzuverwendenden liegt darin, das bei Inheritance die Operationen der Oberklasse überschrieben werden können. Bei beiden kann neues hinzugefügt werden. Bei Inheritance kann aber die Oberklasse auch ungewollt benutzt werden, weil alle Methoden die in der Oberklasse zugänglich sind, auch in der Unterklasse zugänglich sind. Wenn in der Oberklasse sich Funktionalität ändert, ändert das unweigerlich auch die Unterklasse. \nIm Gegensatz dazu kann bei Delegation ungewollter Zugriff verhindert werden und auch viele Funktionen drumherum, wie z. B. Access Control einfacher implementiert werden. Schlecht an Delegation, im vergleich zu Inheritance ist, das die Effizienz darunter leidet, da alle Daten weitergegeben werden müssen und dazu noch ein Objekt erstellt wird.\n\nMit Inheritance lässt sich ein Objekt sehr gut beschreiben und einschränken, wobei das mit Delegation nicht sein muss.\n\nBeispiel Smartphone:\nWenn man eine Kamera-App entwickelt, lohnt es sich, Inheritance von zum Beispiel der Standard App zu benutzen, da viele Grundfunktionen bereits implementiert sind, es aber auch leicht ist, Operationen, welche charakteristisch für die eigene App sind, zu überschreiben und so Beispielsweise einen wärmeren Weißabgleich oder einen anderen Autofokus zu bekommen. Hier ist es also wichtig tiefer in die Funktionalität einzugreifen.\n\nWenn es darum geht für diese App Push-Notifications hinzuzufügen, wäre Delegation besser, da die bereits implementierten Operationen völlig ausreichen, vieles vielleicht auch nicht gebraucht wird und eine Instanz des Push-Services deutlich kleiner ist, als beispielsweise eine Kamera-App. Es müssen also nur Nachrichten an den Push-Service weitergeleitet werden.",
      "score": 66.7,
      "language": "GERMAN"
    },
    {
      "id": 5595907,
      "meta": {},
      "text": "Inharitance is used to expand on an existing structure without overriding it.\nDelegation is used to implement a new concept with the help of an existing structure.\n\npros:\n-inharitance is often a simple expansion of the existing structure and therefore easy to implement.\n-delegation has more controll over the wanted behavior and features.\n\ncons:\n-inharitance always shows the original behavior to the using class\n-delegation is usually harder to implement and therefore more prone to failure\n\n",
      "score": 50,
      "language": "ENGLISH"
    },
    {
      "id": 5596294,
      "meta": {},
      "text": "Inheritance means that a given set of functionalities has to be refined/implemented according to a hierarchical structure . Delegation means that a given set of functionalities is dependent on the functionalities of other systems/classes. \n\nInheritance:\n\tPro: Systems built around inheritance have inherent polymorphism, which means that a great deal of code is avoided (delegation implies that a delegate be chosen, which means a sort of control structure)\n\tCon: This can make the understanding of the side-effects of a system complicated and is sometimes error-prone\n\nDelegation:\n\tPro: Run-Time Flexiblity - A delegate can be chosen according to the system's/user's needs\n\tCon: The code gets dense and is less readable. \n\nAn example for Inheritance: \n\n",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596329,
      "meta": {},
      "text": "Inheritance involves the usages of subclasses from an implementation(super class) and will reuse almost the same implmeneted  functionalities in the superclass. \n\nAdvantage: It is straightforward to use as it implementes the new functionality in the subclass easily.\nDisadvantage: It exposes some (unwanted) methods in the parent class which might contradict intented functionalities\n\nIn the context of the smartphone, we will use inheritance for a Mobile devices such as displaying the details of the phone, checking if the battery is needed to be charged. These functionalities should all be inherited from the mobile device as it is part of the essentail functions of a Mobile Devices\n\nDelegation catches an operation(or invoke an instance) and sends it to another object where it is already implemented.\nAdvantage: It is more flexible as you simply need to invoke the existing methods or class to another object whenever needed.\nDisadvantage: It might be inefficient as an object instance has to be created everything during delegation.\n\nFor delegation, the opening of unique applications and browser tabs in the smartphones should be a form of delegation. This is due to them being only invoke when needed and sending it to another object(such as the screen) where it has already been implemented. You do not want to use all the functionality when opening the tabs or applications as it might be cause wastage of RAM.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596714,
      "meta": {},
      "text": "Delegation: when you request one subsystem to get something done, it can delegate request to another subsystem in which all tools to solve this request are already implemented. \n\" + \" You don't have to implement the same thing in second, completely different system.\nExample: google chrome delegates request of finding a place with given address to google maps app.\n\n\nInheritance - extension of one class/subsystem/app. Has all functionalities of 'parent app' plus some extra functionalities.\n\" + \" results don't have to be send between different subsystems\nExample: google maps with update containing street view feature still has all functionalities of original google maps",
      "score": 58.3,
      "language": "ENGLISH"
    },
    {
      "id": 5584805,
      "meta": {},
      "text": "Inheritance allows the programmer to create a subclass extending an existing implementation where the functionality can then be used or even changed as required.  So inheritance means, that the operation is performed in the subclass, which is able the use the functionality of the superclass, but could also extend and override it. This means, one advantage is that it's pretty easy to customize the used implementation. In the context of smartphones, or rather in app development, you can inherit from prebuild widgets, like the navigation drawer, which would provide the functionality and the subclass can customize everything like the look and the content, but it can also override the functionality if required.\n\nDelegation is used by instantiating a object of a class of an existing implementation, which offers the implemented functionality through the object's methods. So delegation means, forwarding an operation to an object of a implementation, and thus not handling it yourself. This means, one advantage is it's ease of use, because you only have to instantiate an object and are then able to simply call the provided methods of the implementation. In App development, one example can be a the native file picker dialog, which can simply be opened by calling a method on an object. Here, the functionality of opening the dialog, choosing the file and so on is handled (= delegated) by another package / module, for example from the operating system.\n\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585580,
      "meta": {},
      "text": "Inheritance creates new classes with subclassing and reuses functionalities from the superclass, or the subclasses implement the functionalities specified in the superclass that are yet to be implemented. We can implement additional functionalities which makes it easy to add new functionalities to the existing subclass. Inheritance is also supported by a lot of programming languages. The disadvantage is that it exposes some methods from the superclass to the subclass and changes in the superclass can cause unwanted behaviour in the subclasses.\n\nDelegation creates new classes through aggregation of existing classes. That means that delegation uses an object of another class as an instance variable and then when a method is called it forwards the message to the instance where the called methods are actually implemented. An advantage is that it is a relatively flexible, small changes to the class doesn't cause unwanted behaviour. However, it is a disadvantage that an object has to be created because it may cause the program to be less efficient.\n\nExample\nInheritance: different types of existing smartphones (Iphone, Android phones) all have common basic functions like calling, texting or phone number book. These common functions can be generalized into a superclass of these different types of smartphone subclasses\nDelegation: when a smartphone has different ringtones to easily add more ringtones without effecting the smartphone's other function we need to implement the ringtones seperately to reduce coupling\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5586030,
      "meta": {},
      "text": "In inheritance a class, the subclass, \"inherits\" the properties of another class, its superclass. More precisely the subclass automatically implements all the attributes and methods of the superclass but can be extended with additional attributes and methods that have no direct effect on the superclass. This is different to delegation, for which you take an object of another class using object instantiation and send messages to the instance.\nSo unlike to inhertiance you don't need to extend the classes with new/ overriding operations, but you just catch an operation and message it to another one.\n\nThe adavantage of delagtion is that it is more flexible since the delegate can easily be modified during runtime. However it can be a more \"expensive\" operation since an object instance must be generated.\nAn advantage of inhertance is that it's not very complex and can be easily implemented in most programming languages. However, inheritance can hand over some unwanted methods from the parent class to the subclass, which can lead to unwanted behavior.\n\nIn a smartphone context it may make sense to implement inheritance if the manufacturer decides to roll out a \"pro\" series of an exisiting series. For example if you have an Iphone10 and you want to create an Iphone10 pro, the pro version takes over all the functionality of the original version and can be extended with additional features. Since in that case you just want to extend the behavior but not change it, inheritance is the way to go. If you compare inbetween series however, delegation makes more sense. The Iphone11 may take use of some behavior of the Iphone10 but a lot of the old behavior is not wanted anyomer. With delegation you are much more flexible to choose what behavior you want to overtake and which not.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5588413,
      "meta": {},
      "text": "The main difference between inheritance and delegation is, that in inheritance, one extends a base by a new operation or by overriding an existing operation, while in delegation, the operation is caught and sent to another object (see slide 27). Meaning in delegation, a new object would be initialized and a method called on this object, while in inheritance, the method call would either be made by using the superclass, or by extending with a new subclass.\n\nAn advantage of inheritance is that it is supported by many programming languages, making it easier for developers to switch between languages and use the concept.\nA disadvantage of inheritance is that its structure can force changes in subclasses, if the parent class changes, which can make things complicated, especially if there are many levels of inheritance\n\nAn advantage of delegation is, that it is very flexible, especially compared to inheritance.\nA disadvantage of delegation is, that using it can lead to a more inefficient code since an object instance needs to be created.\n\nAn example of inheritance in the context of smartphones is the organization of apps on an iPhone. All apps are displayed in the same way and offer some shared functionality, like moving them around your home screen or deleting them. All behave in the same way, like child classes of a \"parent app\" class.\n\nAn example of delegation in the context of smartphones is calling someone. Here your phone delegates the calling function to the network provider.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589709,
      "meta": {},
      "text": "Differences between inheritance and delegation:\nWhen using delegation the class does not get all the methods and attributes from another class (which would be the case when using inheritance) but can call the methods through an reciever (an object of the Delegate class). \n\nAdvantages:\n-Delegation is more flexible and makes sure that the client cannot \"misuse\" the delegate\n-Inheritance is easy to understand and to implement\n\nDisadvantages:\n-Delegation might be not as efficient as inheritance because you have to create an object instance\n-When using inheritance changes in the superclass may force you to change the subclasses as well\n\nSmartphone example, Deligation:\nWhen using the reminder app on the smartphone you can set a date and time for the reminder. In this case it would be smart to use deligation rather than inheritance to get the needed funtionallity from the calender app because you just need a little part of the calender app's functionallity and do want not expose unwanted methods.\n\nSmartphone example, Inheritance:\nWhen using the settings app on your smartphone i would use inheritance to program each sub category of the settings. All the sub categories have very common features (A name, certain number of buttons...). So it is easy to let these sub categories inherit the attributes and methods from one superclass.\n",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5590771,
      "meta": {},
      "text": "Eine Vererbung ist dann sinnvoll, wenn zwei oder mehr Klassen einige gleiche Methoden haben sollen und ein paar weitere Methoden, zwar in den Klasse vorhanden sind, aber unterschiedlichen Inhalt haben. \nDer Vorteil hierbei ist, dass die gleichen Methoden nur einmal geschrieben werden müssen. \nEin Nachteil ist allerdings, dass nur Klassen von Klassen erben können.\nWäre ein Smartphone eine Klasse, könnten diese beispilesweise sehr gut voneinander erben. Jedes Smartphone hat eine Kamera, eine Taschenlampe und die gleichen Grundfunktionen, je nach Marke funktionieren aber ein paar Sachen ein wenig anders, wie zum Beispiel der AppStore bzw. Google Play etc. \n\n\nDie Delegation, nutzt hingegen nicht denselben Prototyp, sondern, verweist bei manchen Aufgaben auf die Methoden anderer Klassen.\nDer Vorteil hierbei ist, dass diese Konzept mehr Datensicherheit bietet, da die Methode an sich nicht bekannt sein muss, sondern nur die Schnittstellen.\nEin Nachteil der Delegation ist, dass der Entwickler schnell den Überblick verlieren könnte, wo der Source-Code der Methoden steht.\nHierfür ein Beispiel ist, wie App Hersteller ihren Code beschützen können, indem sie dem Nutzer nur die Schnittstellen auf ihrem Spmartphone angeben.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5591833,
      "meta": {},
      "text": "Inheritance and delegation are two different ways to avoid duplicate code. \n\nInheritance is the process by which one class inherits, i.e. takes over, the attributes and behaviour of another class (parent class). \nA big advantage of inheritance is, that it is easy to use, and you can express relationships between different classes in an intuitive way.\nOn the other hand, inheritance has the disadvantage that it might disclose methods of the parent class that you don't want in the child class, e.g. when you only want to reuse a specific functionality of a class. \nI would use inheritance, if I want to make minor adjustments to an existing program. E.g. the iPhone 13 Pro inherits the camera app of the iPhone 13, but with an extension in the lens options, as the 13 Pro has more cameras than the 13. All other functionalities are the same and needed by both, so it makes sense to inherit. \n\nDelegation means you have an object of another class as an instance variable and you direct operations to this instance, where they are already implemented.\nAdvantage: delegation is more flexible because it doesn't force you to use all the methods of the other class - like it would be the case with inheritance - but you can provide only the methods that you really need. \nOne disadvantage is, that delegation might be less efficient than inheritance because you have to create an instance variable, which is costly. \nI would use delegation, if I only need one small unadjusted aspect of another app. E.g. when I want to control my music via Runtastic, I don't inherit the whole music app, but only delegate the small play/pause functionality.\n",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5594285,
      "meta": {},
      "text": "In inheritnace,  a class, known as the child class, takes all the functionility of the parent class and is derieved from it whereas in delegation a new class is made with just the required methods are passed, like with passing the class as an object. \nInheritance is easier to build since it takes most of the functionality from the parent class but is prone to errors and changes from the parent class. \nDelegation might be better in many cases sincce it does not force us to accept the methods of a so called parent class. On the other, creating a new instance may turn out to be inefficient. \nApple had first released a smartphone which had delegations of an iPod in 2007, i.e. it had the features of an iPod built into it. This made it a popular device since it had the features of mutiple devices. \nInheritance can be understood by the example the OS updates as built upon the last OS version. It inherits the methods from the parent OS. This also means that many times the bugs of the parent OS continues for some time like the battery issues that iPhones had faced for some time. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5586876,
      "meta": {},
      "text": "Delegation: Wiederverwendung der Funktionalität eines schon implementierten Objektes \n--> Vorteil: flexiblere Anwendung möglich als bei Inheritance: Objekte können bei run-Time noch ersetzt werden \n\t\tBsp:  Smartphone entscheidet den Sound in Abhängigkeit der Mittleitung (Sound-Funktion ist als immer vorhanden; Smartphone entscheidet über die Art des Sounds)\n\n--> Nachteil: nicht sehr effizient, da die Objekte alle zusammengefasst sind \n\t\tBsp: Sounds sind für alles auswählbar\n\n\n\nInheritance: Situation, in der die Klasse B (Kindklasse), die Methoden und Eigenschaften erbt, die in der Klasse A (Elternklasse) bezeichnet wird, deklariert sind.\nIdee hinter der Vererbung: Vermeidung von doppeltem Code \n\n-->Vorteil:  einfache Implementierung von neuen Methoden/Funktionalitäten bei den Subklassen \n\t\tBsp: Die Subklasse AboSmartphone von Smartphone soll die  Möglichkeit haben, exclusive Sounds spielen zu können\n\n--> Nachteil: wird die Oberklasse geändert, so hat das Konsequenzen für jede Unterklasse wodurch Änderungen vorgenommen werden müssen \n\t\tBsp: Wird AboSmartphone vom Konzern abgeschafft, so hat das Folgen für die Sounds die nun in den \t\t\n\t\t\tUnterklassen neu besetzt werden müssen\n\n",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5587107,
      "meta": {},
      "text": "Inheritance is when you create a subclass from a class and that subclass can reuse the implemented functionality in the superclass. \nAnd Advantage for this is that it is straightforward to use and supported by many programming languages but  an disadvantage is that changes is the superclass can force changes is the subclass as well. \nDelegation is when you catch an operation and you delegate is to another object where it is already implemented.\nthe advantage is that is is more flexible, but it is also might be more inefficient, because maybe another object instance needs to be created. \n\nin the context of smartphones, an example for inheritance might be the quick settings option, where you are not actually in the settings, but can turn bluetooth on and off. This could be delegated to the actual settings class. This would make sense, because the method is already implemented there and you could easily reuse it. \n\nAn example for delegation is that you can access some functionalities even when the phone is locked. There I would use delegation, because the functions are already implemented, but I would not use inheritance because it might exposes some unwanted features of the superclass from where we could also reuse the functionality. \n\n \n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5588854,
      "meta": {},
      "text": "Bei Inheritance erweitert die Child Klasse die Parent Klasse, wodurch alle Methoden des Parents dem Kind zur Verfügung stehen. \nEin Vorteil von Inheritance ist, dass es einfach zu verstehen und nutzen ist. \nEin Nachteil von Inheritance ist, dass durch das Erben aller Methoden und aller Attributen auch Dinge geerbt werden können, die das Child gar nicht haben soll. In diesen Fällen ist dann Inheritance nicht die richtige Wahl für die Implementierung.\nIm Kontext von Smartphones gäbe es beispielsweise eine Oberklasse App und dann verschiedene Arten von Apps als Unterklassen wie Spieleapps, Systemapps, Bücher, Messenger Apps etc. \nUm zu vermeiden, dass Funktionalitäten unnötig mehrfach implementiert werden müssen und um auf alle Arten von Apps unter dem Unterpunkt App zugreifen zu können macht es Sinn hier Inheritance zu verwenden.\n\nBei Delegation werden für die Implementation von Methoden andere Klassen instanziiert um dort ausgewählte Methoden aufzurufen ohne das der Endnutzer sie für einen nicht gewollten Zweck ausnutzen kann.\nEin Vorteil von Delegation ist, dass man sehr flexibel ist bei der Implementierung, da man frei auf die Methoden anderer Klassen zugreifen kann ohne diese dem Endnutzer zu offenbaren. \nEin Nachteil von Delegation ist, dass um die Methoden anderer Klassen zu nutzen Objekte der entsprechenden Klasse erstellt werden müssen und die Instanziierung zu Effizienzverlusten führen kann.\nUm direkt in einer Messenger App eine Sprachnachricht aufnehmen zu können würde die Aufnahme an das Mikrofon des Smartphones delegated werden, um dann nur die fertige Nachricht als Audiodatei zu senden. Da das Mikrofon je nach Smartphone unterschiedlich ist und diese App ja für verschiedene Smartphones funktionieren soll ist hier Delegation der Way to go.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5592161,
      "meta": {},
      "text": "Both inheritance And Delegation can be used to reuse functionality. Inheritance means to form subclasses (childclasses) which can also use the \nAttributes and the functions in the preexisting Parent classes. Thun implementier functionality from the parentclass (superclass) is reused. Ohne advantage of inheritance is that the Relations of Objects are shown (x is a y) And is very easy to use. On the other Hand inheritance Might Expose some functions which are unwanted which leads to unintended behavior. If you are Programming a smartphone App in an agile process it is very easy to use inheritance because it is Supported By many Programming Languages And new functionality can be implemented in subclasses very easily.\nDelegation simple means passing off operations to another object /class\nwhere the required functionality is already implemented. Thun implemented functionality of an existing object is reused. One advantage of delegation is runtime flexibility. A disadvantage is, That ist is More inefficient, because new Objects Must be created for delegating operations to other classes. In the Sense of being in the process of Supporting an Smartphone App in a Bigger Team And you Want to consistantly change a Published api Delegation is helpful since you dont have to change the published api when you just change a public method (in contrast to inheritance). In this Sense Delegation is More flexible.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593085,
      "meta": {},
      "text": "Inheritance describes the concept of creating hierachies among objects of a system like in biology when it comes to classifying animals and describing their relationship to each other. So inheritance attempts to find similarities among objects. On the other hand delegation describes the process of catching a function and sending it to another object. As one might see delegation happens on a horizontal basis whereas inheritance creates vertical structures.\nAn advantage for the concept of inheritance is that it is pretty straightforward to use and also supported by many programming languages. On the other hand one has to mention that inheritance influences the visibility of methods and attributes and therefore may expose some details.\nAn advantage of delegation is that is pretty flexible in general, but it is very often inefficient as it takes more time.\n\nPretending I would develop a smartphone alarm app which features a timer which rings after a certain amount of time and a classic alarm clock which rings at a specific time. I would not make timer inherit from alarm clock as their behavior is a little bit different, but I would for example delegate the function makeRingtone() from timer to alarm clock as in this case their behavior is the same.\n ",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5593561,
      "meta": {},
      "text": "Inheritance is a structure in which one parent class provides attributes and methods which can then be used, extended, changed or added onto by its child classes. Delegation is the passing over of a certain action or duty to another object. The difference between inheritance and delegation is that inheritance is a hierarchical structure, whilst delegation is a redistribution of tasks to other objects. Furthermore, through inheritance the child class has access to everything that is defined in the parent class. With delegation, the class that delegates the task only accesses certain functionalities of the class that is delegated towards. Through inheritance it is easy to create a more specialized version of a general concept by adding functionalities to a subclass. On the other hand, delegation can be more flexible and \"safe\" since changes in one class don't directly affect the other and unwanted functionalities of one aren't reachable by the other. On the contary, delegation can be less efficient due to the needed instantiation of objects. Inheritance requires an understanding of the parent-class, which makes it difficult for a programmer who is not in charge of such to implement its subclass. It also creates a strong dependency. Smartphones for example all have a camera and touchscreen. These basic parts are inherited from one generation to another, each one adding new additional features (inheritance). Smartphone also use delegation, for example when saving a photo on a phone that is connected to the iCloud, the act of saving the picture is delegated towards the cloud.  \n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595944,
      "meta": {},
      "text": "Inheritance und Delegation sind Konzepte wie man bei der Implementation einer neuen Klasse alte Klassen wieder verwenden kann.\n\nInheritance:\nHier erbt die neu zu implemntierende Klasse von einer bereits implentierten Klasse (Abstract, Interface oder Class) bzw von mehreren. Dabei könenn in der neuen Klasse die geerbten Methoden wiederverwendet werden, überschrieben werden oder neue Methoden hinzugefügt werden (gleiches gillt für Attribute). \nMerkmal ->  nach Außen hin sind alle öffentlichen Methoden der Elternklasse sichtbar sind. \n\nDelegation:\nHier wird jedoch nicht von anderen Klassen geerbt, sondern diese werden instanziert und als Attribute, meist privat, gespeichert und benutzt.\nDadurch sind die Methoden der wiederverwenden Klassen nicht Sichtbar und könen gleichzeitg innerhalb der neue Klasse verwendet werden. \nMerkmal ->  Methoden können innerhalb der neuen Klasse verwendet werden ohne dass diese Sichtbar sind.\n\nBeispiele anhand von Smartphones:\n\nInheritance: \nDas Apfel Unternehmen ist mittlerweile bekannt dafür, dass ihr neue Smartphones im Prinzip nur eine Kopie des vorgänger Modells sind von dem lediglich einzelne Komponenten ausgetauscht werden und eine paar neue Sachen dazu kommen. Wenn man den Fall ausschließt, dass alte Komponenten bei neuen Smartphones teilweise auch wegfallen können (Aux Anschluss), dann kann man hier deutlich das Konzept von Inheritance feststellen.\nDas neue Smartphone \"erbt\" also die Komponenten eines alten Smartphones, und \"überschreibt\" teile davon und es kommen neue Komponenten dazu.\nWarum Inheritance? Vorteil hiervon ist, dass man das Produkt dadurch laufend verbessern kann.\nDelegation:\nWenn man zum Beispeil ein neues Smartphone bauen will und man beim Designen der Hardware Komponenten feststellt, dasss manche geplante Komponenten bereits in anderen gebauten Smartphones enthalten sind, dann bietet es sich an Teiler dieses Smartphone wiederzuverwenden.\nWarum Delegation? Man designed ein neues Smartphone und ist der Lage Komponenten von alten Smartphones zu nutzen.\n\n\n\n\n",
      "score": 66.7,
      "language": "GERMAN"
    },
    {
      "id": 5596257,
      "meta": {},
      "text": "In order to make use of reusing existing classes, there are several options to choose from. \nOne of them being inheritance, thereby a subclass is created from an already existing implemented class. In that case one can reuse the implemented methods of the superclass. An advantage of using inheritance is that new functionalities can be easily added to the reused functionalities by simply adding further methods. However, using inheritance might result in exhibiting unwanted behaviour as one can use inherited methods from the superclass that do not meet the requirements of the wanted behaviours in the subclass. \nA further possibility for reusing functionalities is by applying delegation. Thereby an operation is caught and send to another object where it is already implemented. Hereby an advantage is the flexibility that comes with delegation; however, an object needs to be instanciated which leads to less efficiency.\nAn example for inheritance in the context of smartphones would be implementing the functionalities of WhatsApp. As it implements the functionalities of a more basic messenging app, such as sending and receiving a text message, putting a profile picture..., one could create a new subclass for whatsapp and inherit those functionalities from the superclass. Compared to a previous, more basic messanging app WhatsApp allows for additional functionalities such as putting a status or doing a video call - inheritance gives the possibility to easily add those functionalities to Whatsapp.\nAn example for delegation in the context of smartphones would be implementing the functionalities of Instagram. In many cases the functionalities of Facebook can be reused when implementing Instagram, however Facebook allows some functionalities that Instagram should not have, such as sharing newspaper articles (Instagram only allows to share pictures or short videos). If inheritance was used it could cause unwanted behaviour of the subclass Instagram, therefor delegation should be used in this case.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596421,
      "meta": {},
      "text": "Inheritence is present, if a subclass has been created, which takes all the attributes and methods from the superclass and either overrides them or directly uses them as they are. The superclass might be static or even be an interface, so it doesn't necessarily have to be instantiatable. Hence, you can directly start from the get-go and implement new functionality in the subclasses. On the other hand, you might have to modify your implementation quite often due to changes in the superclass. This direct dependence is especially apparent if we take a look at Apple's browser engine WebKit. Apple's mobile operating system iOS forces every browser to use Apple's engine, thus making them directly inherit its functionality. But with every major iOS update that brought along significant changes to WebKit, all browsers had to adapt and release updates to comply with those changes.\nThe other approach is delegation. Here, a method call on one object is simply forwarded to another object. This avoids the jarring dependency problem of inheritance, which leads to delegation's greater flexibility. On the downside, both objects must be instantiated, thus additional overhead comes into play. A prime example for delegation is Apple's QR code scanner, which was built into the iPhone's preinstalled camera app from iOS 11 onward. The delegation's great flexibilty is immediately apparent: Got a WiFI QR code? Delegate the scanned data to settings and connect to the network. Got a website QR code? Delegate URL to Safari. QR codes coupled with delegation offer endless possibilities.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5584917,
      "meta": {},
      "text": "Delegation reuses implemented functionality in an existing object, while inheritance reuses a specified or implemented functionality from a super class.\n \nAn advantage of delegation is that it is more flexible to use. However, delegation is not directly supported by all well-known object-oriented languages. An example would be the client incomingCall that calls the receiver which delegates to the Delegate ringtone.\n\nAn advantage of inheritance is that it is very straightforward and easy to implement.However, if you change the signature of the superclass, all the subclasses have to be recompiled. An example would be extending a base class like ringtone by a new ringtone type.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5586127,
      "meta": {},
      "text": "1. Delegation means you can use an object of another class as an instance variable and forward message by calling methods in another class.\n+ Advantage: it makes you choose the methods you want to use in another class with more flexibility instead of inheriting all the methods from super class.\n- Disadvantage: only the methods that are supported by another class can be called and some methods may not be allowed to get used except for subclasses, e.g. protected methods.\n\n2. Inheritance means parent classes can be inherited by subclasses, in which the methods of the parent classes can be or should be overwriten.\n+ Advatage: methods provided by parent class can be overwritten and become static and easy to use at run-time.\n- Disadvantage: subclass becomes dependent on the parent class implementation. Inherited methods cannot be changed at run-time.\n\n3. Example:\na. Delegation: If I want to save an appointment received via E-mail, I need to call in the E-mail class the save method provided by the calendar class of my smarphone. So it is appropriate to use delegation here because there is no need to overwrite this method.\n\nb. Inheritance: Smartphoes are able to play different kinds of mulitmedia player, e.g. music and movie. Each multimedia player has its own way to play a specific multimedia. Also they can have common functions in their own classes. So I will choose inheritance in this case by making multimedia player as a parent class and music and movie player as its subclasses.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5591362,
      "meta": {},
      "text": "The main difference between inheritance and delegation is that inheritance reuses the existing implementation of a class for its child-classes, while delegation simply creates a new instance of a different class which then executes a functionality. One can imagine inheritance as a family tree, where each class inherits aspects from their parent, but with additional attributes and functionalities. Delegation, as the name suggests is just as if your boss delegates a task to you.\n\nOne of the advantages of inheritance is that it is very easy to create variants of one main type (e.g. fast cars vs. slow cars). A disadvantage would be that the children always have to take over aspects from their parent, even though they might not need them.\n\nAn advantage of delegation is the added security layer, as the \"requestor\" only has direct access to a receiver and not to the class which executes the request. A disadvantage is that delegation is oftentimes more \"expensive\" in terms of computations, as there has to be a receiver as well as the executor.\n\nOne example of inheritance in smartphones are the apps. Every app on, e.g. iOS, has to fulfill certain requirements, which are the same, so that it can be used on an Apple device. The actual functionality is what makes each app (\"child\") unique.\n\nAn example of delegation in smartphones would be selecting a photo that you want to send via text. Here you only have the option of browsing through the photos (receiver) and selecting them, but you don't have direct access to the functionalities of the photo-app (executor).",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5591431,
      "meta": {},
      "text": "In Inheritance we use a super class and we enhace the functionality by extending it with sub classes and specified functionality.\nadvantage:\nIf you want to use a method which only allows you to use a class A, then it makes sense to use inheritance by creating a subclass of A with the some new functionality.\ndisadvantage:\nif you want to change your implementation of you super class it may has negative effects on your sub class implementation.\nIn Delegation a receiver gets a  message and you use an object of another class as an instance variable, and forward the messages to the instance.\nadvantage:\nif you want the functionality of a method and do not want to override the method then you should choose delegation because you are more flexible.\ndisadvantage:\nit can be less efficient, because with delegation you have to create whole new objects which can be very costly.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5591764,
      "meta": {},
      "text": "When we inherit a class, we create a subclass form an existing class, and this new  subclass reueses the functionality of his superclass, whereas delegation is to use an object of another class as an instance variable, and forward messages to the instance.\n\nAdvantage & Disadvantage :\nDelegation is more flexible, because unlike inheritance, it doesn't force you to accept all the methods of the superclass.\nThe primary advantage of delegation is run-time flexibility – the delegate can easily be changed at run-time. But unlike inheritance, delegation is not directly supported by many programming languages, and it doesn’t facilitate dynamic polymorphism.\n\nExample of Inheritance:\nAssume that there is two types of smartphones names P10 and P20 that is produced by the same company. P20 is more advanced, it has all the functionality of P10 and it offers some extra features that P10 doesn't have. In this case, P20 inherit from P10 because P20 has all of the functionalities of P10.\n\nExample of Delegation:\nWhen the company wants to enhance the P20 phone by adding a new Application A that has several functionalities. The user of the P20 phone cannot directly use the functionality. But the user can tell the phone to start A, and the phone in turn tells A to start the wanted functionality. In this case, I think it's a delegation because the user only wants to use one or more functionalities of the App, but not all of them.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593497,
      "meta": {},
      "text": "In inheritance, abstract classes or interfaces are used to override or extend a classes attributes or methods. The biggest problem with inheritance is that the inheriting classes can feature functionality from the old class that might not be needed anymore and creates confusion. Exactly the reusability of \"old\" methods and attributes can be of advantage, depending on the context. It might be more efficient in many cases to just inherit functionality for additions to the code. \nA form of inheritance in smartphones could be found in the different apps. There might be one mother class that specifies how a basic app works. Subclasses might define system apps that cannot be deleted, or third-party apps that need to be installed through the app store and have different restrictions than system apps. Through standardization through inheritance, each app has its own functionality, but different administrative rights. Having a new separate class for each app would be more complicated.\nIn delegation on the other hand, a method is invoking a method from a totally different class that provides the desired functionality. This can be useful when you want to restrict the functionality of another class more strictly. If applied wrongly, this can lead to more code duplication.\nDifferent apps using the camera (Snapchat or Instagram) could build a unique UI around their camera functionality, but could delegate basic camera features to the same background mechanisms of the standard camera implemented by the OEM.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593553,
      "meta": {},
      "text": "Delegation: An object needs the functionality of another object, so it is captured and sent to another object for a function call.\nExample: Smartphones need to be assembled in a factory, and since smartphones themselves don't have the ability to assemble, it's not appropriate to delegate assembly to smartphones, so we delegate the smartphone to a method in the factory (class). This is delegation.\nAdvantage: Avoid excessive subclassing and coupling of subclasses to their parents.\nDisadvantage: More code to write.\n\nInheritance: Get elements and methods of a base class.\nExample: If you write \"ring\" in a smartphone (class) and ring in an iPhone (class), you get the reuse of this method using extends in an iPhone (class). This is inheritance.\nAdvantage: Improved code maintainability (only parent class changes required).\nDisadvantage: Classes are too closely related to each other. (Enhanced coupling).",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5595112,
      "meta": {},
      "text": "In inheritance, there is a superclass-subclass hierarchy in which the subclass inherits the functionality of the superclass. Whereas, in the delegation, the functionality of an existing object is used. Inheritance posits an \"is-a\" relationship, but delegation defines a \"has-a\" relationship.\n\n-Advantage of inheritance is that Inheritance is more straightforward to think about and implement that's why it is more used than delegation.\n- Disadvantage of inheritance is, that the changes in the superclass impose changes in the subclasses. For instance, if a new abstract method is added to the superclass, subclasses must implement it. \n- Advantage of delegation is it is much more flexible since you can use the object in any way you want. \n- Disadvantage of delegation is that the actual object needs to be instantiated, that's why delegation might be more inefficient than inheritance.\n\nExample:\n\tInheritance: The operating system of the phones describes inheritance. Android phone is a superclass that different phones inherit. There are certain aspects that android gives, for instance, kernel. But the subclasses can have additional software. Xiaomi is an android phone, that's why it has all the capabilities of an android phone, but also it has mi store which is specific to Xiaomi. This makes sense because creating an android instance for each phone, and using it as a separate delegate makes things harder to implement. \n\t\n\tDelegation: Iphone does not have built-in weather prediction systems. That's why its weather prediction UI is using an instance of another application. The code is probably something like WeatherAPI weather = new WeatherAPI(\"token\"); I would choose to implement it like this because it does not make sense to inherit an API, that would mean every change in the superclass would require a change in the subclass. \n\t\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595855,
      "meta": {},
      "text": "In inheritance you have a desired class, which extends a class (superclass) and you use the methods of the superclass to make for example new methods or you override these methods. So you can use the methods of the superclass. In Delegation you have a method, which is executed by another Object. Or only a part of a method is delegated to another object.\nAdvantage for Inheritance is that you can use the inheritance in many programming languages. And a disadvantage of inheritance is that if you change something in the superclass, this change can force the subclass to change something too.\nAdvantage of delegation is that it is more flexible than the inheritance. \nAnd a disadvantage is that another object instance has to be created, because you need this other object in delegation. So it cost you efficiency.\nExample for inheritance in smartphones is that you have a game \"part2\" as an App, which is a subclass of game \"part1\"(APP) and game \"part2\" uses all functions of \"part1\" and more, which are partly created of the functions of \"part1\". For Example \"HILL CLIMB RACING\" and \"HILL CLIMB RACING 2\". Here I would choose also inheritance, because you want to do a \"part2\" from the \"part1\".\nExample for delegation in smartphones is that: I have a Nutrition app, called \"Yazio\" which delegates the task to calculate how many steps I go in one day to the app \"AppleHealth\". After that \"Yazio\" uses this information to calculate how many calories I burned. Here I would choose also delegation, because I don't want to know more other things of \"AppleHealth\". ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596097,
      "meta": {},
      "text": "Inheritance is subclassing from an Implementation, it reuses the functional implementation of the superclass. Delegation on the other hand caches operation and sends them to other objects that are already implemented. So the difference is that inheritance is strictly for the subclasses, while delegation can be used between any classes and therefore make it easier to reuse code, however, inheritance makes it easy to reuse a large number of methods quickly in many similar classes. So the advantage of delegation is that it is generally more flexible, however, its disadvantage is that because an object instance must be created, it may be more inefficient. On the other hand, inheritance has the advantage that it is straightforward to use and is supported by many programming languages. It is also easy to implement new functionality in the subclass. However, inheritance has the disadvantages of exposing some of the parent class's undesired methods and forcing the subclass to alter in response to changes in the parent class.\n\nAn example of delegation would be if an app needs to convert its content to the display, the app would delegate its formation to the phone which would size it correctly to fit the screen. An example on your phone for inheritance would be if you would download a torch app, it would inherit the torch functions from your phone and maybe add some elements to it.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596108,
      "meta": {},
      "text": "Inheritance is the passing down of properties from a \"parent\" to a \"child\" of that parent. In Java this is the transfer of attributes and methods from a parent class to a child class. Eg : In my mobile phone, the Email Widget uses inheritance to pass down email data from the \"parent\" Email app into the \"child\" widget. \n\nDelegation is the passing of responsibility from one person to another. In Java this can be seen as the use of methods of one class by another class, by using the second class as an attribute of the first class, when that second class has predefined functionality, that the first class might want to use. Eg : The google messages app uses the SMS service provided by my sim card to send and receive SMSs through my Sim Card, without actually having to implement that functionality itself.\n\n",
      "score": 33.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596180,
      "meta": {},
      "text": "1. Inheritance\nWe distinguish between superclasses and childclasses. The superclass provides methods and functionalities which are inherited by the child classes.\n\nAdvantage: Inheritance is very easy to use and supported by many programming languages (Lecture Slides)\nDisadvantage: If I change the functionalities of the superclass I might be forced to change the child classes too\n\nExample:\nI have the parent class Smartphone. Smartphones have different functionalities (e.g. ringing, locking, camera etc.) I have different child classes (different types of smartphones), which all have the same functionalities. \n\n2. Delegation\nIn contrary when talking about delegation, we do not have superclasses and childclasses. We have delegates and receivers. Receivers are not able to reuse all the delegates functionalities. They can only use the functionalities that were send to them. These are implemented in an existing object.\n\nAdvantage: I can use delegation very flexibly (Lecture Slides)\nDisadvantage: Might not be that straightforward, since I first need to create an object instance \n\nExample: \nReceiving messages and phone calls is only possible if the smartphon is not in \"do not disturb\" mode. The receiver sends a request \"reciveMessage\" / \"receiveCall\" to the delegate. The delegate only sends the requested funcitionalities if the phone is not in the mode \"do not disturb\"",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596691,
      "meta": {},
      "text": "Delegation means catching an operation that is already implemented in another object and executing the operation through that object. This reuses the functionality of another object. \n\nInheritance means that a particular specification is subclassed. For this purpose, the specification represents an abstract class in which various operations exist but are not yet implemented. Here, in contrast to delegation, the specified functionality of the super class is reused.\n\nDelegation pro: An advantage of delegation is that you are really flexible with it. It is also possible to use and mix functionality from many different objects, which makes it easy to implement new classes if there are already a lot of other objects with different functionality.\n\nDelegation con: Of course the efficiency suffers from always creating new object instances to reuse their operations.\n\nInheritance pro: With inheritance after creating a super class it's easy and also way more clear and structured to implement new functionality in the subclass.\n\nInheritance con: Because the sub classes have access to the methods of the parent class they can use methods which they shouldn't be allowed to actually use. \n\nExample Delegation:\nDifferent Apps on a smartphone are using the camera. Therefore they can just request access to it and then use it without any circumstances. But of course the app shouldn't get automatically access to the camera.\n\nExample Inheritance:\nIn the settings of a smartphone functionalities can be specified through a super class and similar setting branches can access them.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5586680,
      "meta": {},
      "text": "Inheritance goes by the principle of the IS-A relationship, which inherits all the code from the parent class, while Delegation goes by the HAS-A reference and delegates tasks to the reused task instead of handling it itself. \n\nPro Inheritance: provides a clear model structure which is easy to understand and implement.\nCon Inheritance: The classes are tightly linked together and can not be used independently from each other. \n\nPro Delegation: provides more flexibility and the classes are not strictly tied together. \nCon Delegation: Objects have to be created each time slowing the program down. \n\nSmartphones from different companies(Inheritance);\n\nYou could look at a parent class that consists of general details a smartphone should have, such as Model, release year, brand... \nSince these will change on a yearly basis, it might be good to couple them together and they don't need to exist independently since the child class of each brand will define the parent class. \n\nChipsets (delegation): Each company has its own chipset it uses, which differs from one to the other, each with a different architecture. You can't generalize every detail and you wouldn't want to make it easy for the other companies to see the exact detail of your system, which could happen with inheritance. ",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5588637,
      "meta": {},
      "text": "Inheritance makes use of another class with similar basic functionality, using it as a base for the new one, and then extends said functionality, usually by creating new operations. By comparison, delegation merely redirects certain operations to ones already existing in another class, making use of its functionality. \nWith that being said, the major difference is that an inherited class generally has access to and exposes all methods implemented in its upper class, which can sometimes include unwanted methods that could ruin the functionality. By comparison, an advantage it has is that its very easy to use in most programming languages, requiring just a few keywords in Java. \nDelegation, on other hand, is more generally applicable since you can basically pick and choose which methods from the delegated class you want to actually make use of. However, it's often also more inefficient, since you usually need to create an extra instance of the object you want to delegate to.\nIn the case of a smartphone app for reading comics with a paid premium edition, for example, a use of inheritance would be more sensible, since the premium edition should retain all the same features as the basic one, just with additional ones. On other hand, in the case of the function inside of that app to search for comics, it might be intelligent to delegate the function in particular to an existing search engine class, simply passing it the names of the comics available to conduct the search, as opposed to implementing it all anew inside of the app.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594681,
      "meta": {},
      "text": "Inheritance vs Deligation\nInheritance describes the concept of reusing a class as a super-class of the one you want to implement. Said concept is quite easy to use and aditionally can be carried out in various working environments, as it is supported by many programming languages. As already mentioned in the lecture however there are also disatvantages to it like e.g. the fact, that un-wanted functionallities can also be inherited along the way. (Example Stack <-> remove())\nA possible example in the context of smartphones would be a on-screen message. Regardless of the application, it is probably inheriting from a common super-class of the operating system. As messaging (seemingly) has no unwanted functionality that process could be resolved using inheritance.\nOn the other hand side there is the concept of delgation. An operation is caught and sent to another object where it is already implemented. This allows for a high flexibilty and prevents the problem of the un-wanted functionalities mentioned earlier. The downside however is that this concept is less eficient, as an additional class has to be added and instanciated.\nSticking with apps, a fitting example for delegation are the notifications of an application, as they can be delegated to an object of the operating system. The mentioned flexibility is given, as not all the notifications need to have every functionality. A smaller/different set of of functionalities might be beneficial to special notifications. (sound-effect etc.)",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5595853,
      "meta": {},
      "text": "Difference between inheritance and delegation is that you are using the implementation of an superclass in inheritance and in delegation you are sending the operation, which you caught, to an other object and then using the searched functionality in this object. So in inheritance you are subclassing and using the function you inherit from the superclass also extend the class by adding methods or modifying methods. In delegation you send the operation to a class where you can find the method to execute the operation. \nDisadvantage of inheritance is that if one method in the superclass might change then it can force the subclass also to change because the subclass is using the implementation of the superclass.  However, one advantage of inheritance is that it is easy to develop a new method in the subclass and implement it without doing anything in the superclass.\nDisadvantage of delegation is that this more expensive because you need object instantiation to delegate the operation, which can be more expensive and more inefficiently. However, one advantage is that you can do more things with delegation than with inheritance, so you have more flexibility.\nAn example of inheritance would be the iPhone13. You have the construct/superclass that is the iPhone13, and then the subclasses iPhone13pro and iPhone13mini are derived from the iPhone13. I would choose here inheritance because all of this iPhones are mostly the same, just some things like size, display, or battery are different.\nAn example of delegation would be iCloud at apple. You have your local storage, which has a maximum, but you can expand your storage by delegating it to iCloud storage. I would choose delegation here because here you can catch the problem that the storage is full and send that problem to your iCloud storage, and then you have fixed that problem by delegation. For example, your iPhone storage delegates the photos to your iCloud storage, but still you can easily access the photos.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595956,
      "meta": {},
      "text": "The difference between inheritance and delegation is that with inheritance the classes inherit from a superclass, i.e. their properties and methods already implemented in them can either be used or overwritten. Delegation, on the other hand, uses an instance of a different class. This means that the functionality of a class can be taken over and used.\n\nIn smartphones, inheritance could be implemented such that e.g. the front camera and the main camera(s) inherit from one or the same higher-level camera function and their higher-level functions do not have to be implemented multiple times.\n\nAn example of delegation would be the relation between the processor and the screen. The processor itself does not interact directly with the screen. However, the screen provides the functionalities that the processor can use. For example, the screen could offer the possibility of reacting to touch points and accessing their position data. The processor thus uses the functionalities of the screen without having implemented them itself.",
      "score": 33.3,
      "language": "ENGLISH"
    },
    {
      "id": 5586240,
      "meta": {},
      "text": "Inheritance happens on a class level, when deriving a subclass from a superclass and extending its functionality. It is a type of white-box reuse that is very easy to use and widely supported.  On the other hand, even unwanted internal functions of the parent object may be exposed to the subclass, which can be a disadvantage because the subclass may depend on internal behaviour of the parent class, which may change at any time thus changing the subclass as well. \nDelegation means creating an instance of another object and delegating operations to it, which  is a form of black-box reuse. This approach works on the object level as opposed to the class level of inheritance taxonomies. It is very flexible, because only the necessary but well specified functionality of the object must be used. A small disadvantage is the overhead of instantiating the object to use its functionality.\nWhen developing an android app, the main application class must inherit an Application base class which supplies the basic functionality of keeping the state of the app. Inheritance is useful in this case, because all new applications are applications, meaning creating said taxonomy is very natural.\nWhen working with bluetooth, delegation might be more appropriate: Although my application wants to manage bluetooth settings, it should not take control of all the settings and implied responsibilities by inheriting the Bluetooth Manager class. In this case, keeping an instance of the manager and calling the necessary functions is the way to go.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5589425,
      "meta": {},
      "text": "Vererbung: Eine Unterklasse erhält alle Methoden und Attribute der Oberklasse die mindestens als protected deklariert worden sind. Die Unterklasse hat die Möglichkeit die konkrete Implementierung zu überschreiben und damit komplett unterschiedliche Verhaltensmuster zu erzeugen. Die Unterklasse gilt als Spezialisierung der Oberklasse. Die Unterklasse kann immer nur von genau einer Oberklasse erben.\nvs.\nDelegation: Eine Klasse übergibt eine Aufgabe an eine andere Klasse. Hierbei wird eine feste Implementierung dieser aufgerufenen Klasse aufgerufen. Die aufrufende Klasse hat also keinen Einfluss, wie die Implementierung hinter der Methode aussieht. Alles was die aufrufende Klasse tun kann, um das Verhalten zu ändern ist die aufgerufene Klasse oder Methode auszutauschen. Eine aufrufende Klasse kann nicht nur einmal delegieren sondern so oft es gewünscht/gewollt/nötig ist. Genauso kann auch eine aufgerufene Klasse von vielen anderen Klassen beansprucht werden.\n\nVererbung:\n + Man kann Attribute und Methoden der Oberklasse für darunterfallende Unterklassen wiederverwenden. Dadurch schafft man Polymorphestrukturen, womit man sich nicht direkt auf eine konkrete Unterklasse festlegen muss bei einem Methodenaufruf.\n- Oft braucht man in der Unterklasse nicht alle Methoden und Attribute der Oberklasse und muss diese dann überschatten, um den Zugriff zu verhindern.\n\nDelegation: \n+ Man kann beliebig oft delegieren, was es einfach macht Algorithmen in verschiedenen Klassen wiederzuverwenden.\n- Die Implementierung hinter der aufgerufenen Methode/Klasse ist statisch, wodurch viel Kontrolle in der aufrufenden Klasse wegfällt. ",
      "score": 83.3,
      "language": "GERMAN"
    },
    {
      "id": 5590993,
      "meta": {},
      "text": "Inheritance and delegation represent the techniques of reuse in objects design, both achieving the similar goal of implementing software system using existing functionalities but differing in the way of implementation. \n\nIn inheritance, functionality of a super class is reused and additionally extended by new operations by subclassing. This reuse technique can be simply referred to a \"white box\" because the internal structure of the inherited super class can be easily identified by the structure of the subclass. \nInheritance is preferred due to its simple implementation of new operations in subclasses. But inheritance following the concept of a white box leads to unwanted exposure of internal structure of the super class. \n\t- Example: \n\t\tbase class 'Smartphone' & various kinds of smartphones such as 'IPhone6', 'GalaxyS20' inheriting \n\t\tbase class \n\t\tInheritance for implementation: base class describes the shared attributes of various \n\t\tkinds of smartphones, additionally each smartphone has its individual attributes \n\nIn contrary, delegation reuses functionality by creating object instances and method calls. Three objects are introduced: the client calling the receiver, the receiver sending the request to the delegate and finally the delegate executing the request. Delegation facilitates the composition of the delegate at run-time. Despite of this run-time flexibility, a disadvantage of delegation is the inefficiency due to the creation of objects. \n\n\t- Example: \n\t\tdelegator class 'Smartphone' & class 'CPU'\n\t\tDelegation for implementation: the delegator class 'Smartphone' has a 'CPU'. A change in a 'CPU' \t\t\n\t\tshouldn't influence the operations within the 'Smartphone'.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593537,
      "meta": {},
      "text": "Inheritance and Delegation are very common ways with which Code can be reused in  software system.  \"Implantation\" inheritance   which means that the \"Parent /Super\" Class has already some defined and implemented methods and  \"Child \" class will inherit such behavior implantation with the attributes.                    \" Specification\" Inheritance: it's the case when the superclass is providing specifications for the child  class. Other-way said our class should implement those specifications herself( e.g. Interface) .  Delegation can be an alternative to inheritance where the wanted functionalities are coming from the new instance (existing object) of the class that we want to use. \n Inheritance :\n+ directly supported by object-oriented languages (e.g. java )\n+ New methods can be easily implemented in our calls without going to  the mother class \n- Some external users can do  unwanted behaviors due to some provided operation by the inheritance (e.g. the get() method ( list-inherited stack) will allow some users  to reach every element of the stack )\n- change the signature of the parentclass -> Newly  recompiled subclasses.\nDelegation :\n+ flexibility: any delegate can be replaced at run time by another one of the same types\n-  objects are encapsulated which can be inefficient \n DelegationExp : Alarm  Class of  phone and  Ringer  Class :  the Alarm Class will create new instance of the Ringer object and use it methods in hers (eg Alarmwakeup (Ringer) :{Ringer.playSound} \nInheritanceExp : SamsungS22(upper Class ) child classes like SamsungS22Ultra(S22+) will inherit the same functionalities  but with adding new  ones  \n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593661,
      "meta": {},
      "text": "Inheritance means the process where one class inherits all the methods and attributes of another class, its parent class. \nDelegation to the contrary means that one class has an instance variable of a different class as an attribute and redirects or delegates a method call to this different class, its delegate.\nAdvantage for inheritance: Almost all programming languages support it\nDisadvantage inheritance: It forces you to take over all the attributes and methods of the parent class, while you might not need all of them for your specific use case.\nAdvantage delegation: Delegation provides a flexible connection between classes, not as strict as inheritance.\nDisadvantage delegation: It does not support dynamic polymorphism.\n\nExample Inheritance: The FaceTime App could be a child class of the phone class, as it has all the same functions except that it also transmit video. Inheritance makes sense here, because both apps are very similar in their functionality.\nExample Delegation: When you click on a phone number on google maps to make a call, it makes sense to delegate this to the phone app, since it is only a small function, and the maps app should not be a child of the phone app due to its very different functionality.\n",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5593970,
      "meta": {},
      "text": "Inheritance means in the subclasses, you override a method of an already implemented class in a Superclass/Interface, while Delegation means you call a functionality using an Object from the class which implements the whole method.\n\nInheritance is recommendable when you have an object from the subclasses that resemble the character and behavior of its superclass, and the methods of the subclasses also do the same thing with some small addition to differentiate itself from the superclass. With Inheritance, you can create methods that behave in a same way, only with a slight variation, without duplicating code. However, because the subclasses strongly connect to the superclass, it is considerably challenging to make a change of code in the subclasses without worrying that it may affect the superclass, especially when the implementation of the methods in the superclass is not of use anymore.\n\nOn the other hand, delegation simply means you call the method from another class. You do not pay attention at all to what it does, or how it is implemented. You just simply pass the duty of implementing the function to another class. Objects, or classes involved in the process of delegation do not have as strong a relationship as in Inheritance, and therefore overriding the methods (behavior) is not needed in delegation, which is one advantage of delegation, as it may reduce the coupling and tight relationship between the classes. It is therefore more flexible than Inheritance. However, as you need to create an object to call the needed methods, it might not be memory-efficient.\n\nIn the context of Smartphone for example, different audio receivers like headphones or speakers many inherit from the Interface subsystem, as they all \"are\" types of audio receiver. Meanwhile, an example of delegation is an online shopping app: a customer made an order on the website, and the order object has a Shipment object. The Shipment object has private attributes like expectedDeliveryDate, or articlesToBeDelivered. When the customer wants to know about the expected delivery date, using a method call from the Order, then in that method the Order will use the Shipment object to call and get the private attribute expectedDeliveryDate in class Shipment. In this case, delegation is preferred because Order and Shipment is are not of the same type, or possess any similar behaviours.\n ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594956,
      "meta": {},
      "text": "Inheritance defines that a class - child class - overtakes the functionalities (e.g. attributes and behaviour) of another, existing base class - parent class [is-a relationships]. Besides, the child class has the opportunity to introduce new operations or override existing ones. \nDelegation, however, refers to the relationship of two objects: One object uses the instance variable of another class as an instance variable and forwards method calls to this instance (=another object, the delegate) [has-a relationships].\nCore difference lies in the reuse: For inheritance, the functionality lies in the superclass, while for delegation the functionality lies in an existing object.\n\nInheritance:\n- Advantage: Straightforward usage and ease of implementation of additional functionalities.\n- Disadvantage: Unintended methods of the parent class are exposed to subclasses.\n- Example: When modelling classes for a Smartphone Series with related smartphones (e.g. similar attributes and behaviour) I would use inheritance. When modelling the Apple Series 13, for example, a parent class would be the IPhone 13. Inheriting sub-classes would be all underyling versions with special characteristics (e.g. IPhone 13 Pro-max/mini).\n\nDelegation:\n- Advantage: Allows to use only methods that make sense rather than exposing and working with all methods of the superclass.\n- Disadvantage: The instantiation of an object might lead to inefficiency and thus, decreasing performance.\n- Example - Switch off the phone - A class \"powerButton\" (reciever) catches an operation (e.g. method \"powerButtonUsed\") of the class \"screenClick\" (client) and sends the method \"switchOffPhone\" to the class \"SwitchOffDevice\" (delegate) that implements the shutdown process.  ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595854,
      "meta": {},
      "text": "Inheritance and delegation are two approaches for implementing funtionility of another class. \nAs the name suggests, when using inheritance, an object inherits the functionlity by inheriting from another class. This means, that the methods of the super-class are now part of the inheriting class. \nOn the one hand, features like overriding and the intuitive use are quite an advantage, on the other hand it can be the wrong choice, because it unwantedly exposes member methods of the super-class.\nDelegation does not have this problem, since in that case, the needed class is not inherited from, but instanciated. Whenever the functionality of the instanciated class is needed, methods of it are called separately. This has the advantage of not exposing methods as well as giving more flexibility to the user, for example when the object is created to improve memory usage. However, it may come at the price of inconvenience or reduced efficiency. \nIn Android apps, it is useful to use inheritance for creating acitivities, because it needs tight integration. For example, overriding methods is essential.\nOn the other hand, when using the camera, it might be useful to apply the delegation schema to better be able to handle resources, since the camera controller object could be memory heavy for example.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593076,
      "meta": {},
      "text": "The difference between delegation and inheritance is, that in delegation, an operation is caught and sent to another object and in inheritance, one extends a base by a new operation or by overriding an existing operation. \n\nIn delegation, you need to create an instance/object and you have to call a method on that object. (you work on the object level). A new class is created through the aggregation of the existing classes.\n\nWhile with inheritance you do not need this. A new class is created by subclassing.\nThis class reuses the functionality of the superclass and could offer new functionality. You are on the class level where you can call this.method().\n\nDelegation\n\tpro: Delegation is in general more flexible than Inheritance\n\tcontra: Delegation sometimes is more inefficient, since an object instance needs to be created\nSmartphone example:\nYour smartphone only loads the apps which are currently used and have to be visible to the user, apps that are closed don't need to be loaded at the moment. Just a proxy subject is created and only if needed the real subject will be loaded.\n\nInheritance\n\tpro: Inheritance is straightforward and supported by many programming languages \n\tcontra:  Inheritance sometimes exposes some methods of the parent class which are undesired\nSmartphone example: SmartPhone could be a superclass with iPhone, AndroidPhone, and WindowsMobilePhone as subclasses. All subclasses inherit methods from SmartPhone because of some shared functionality plus add their specific methods.\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595813,
      "meta": {},
      "text": "The biggest difference between those is that with inheritance, the subclass will have access to the inherited operations of the superclass, whereas, with delegation, the client does not have access the methods of the delegate.\n\nInheritance:\n(+) -> It is easy to add an additional method to the subclass.\n(-) -> Possible unwanted method misuse by the subclass.\n\nDelegation:\n(+) -> No obligation to accept all methods of the super class.\n(-) -> Many programming languages do not support it yet.\n\nSmart phone examples:\n\nInheritance -> Adding a new camera functionality such as portrait mode. Over time, we would be gathering user feedbacks and it would be easier to implement new functionalities in the subclass.\n\nDelegation -> Creating a night or reading mode on the screen for the user with proper light selection. If we did inheritance, we would be inheriting the methods of the parent class (normal screen mode). However, we do not want our subclass to misuse some methods of the parent class such as rapid screen color changes etc.\n\n",
      "score": 75,
      "language": "ENGLISH"
    },
    {
      "id": 5595882,
      "meta": {},
      "text": "When you use Delegation you use an already implemented functionality in an object that has already been created. As soon as the call for a specific operation comes you intercept it and delegate it to the object in order to process it there. A problem you might have is that a potentially very costly object has to be instantiated(disadvantage).\nWhile using Inheritance you make use of the functionalites in a super class by creating a new class that can use these functionalites and potentially extend them. In contrast to Delegation a new class is being created and you might have to deal with potential Data and functionality leaks, however the method is quite simple and applicable in a lot of programming languages which is a big upside. You are not quite as flexible and it potentially increases your coupling as potential changes in the super class might influence your subclass, which is a potential downside, whereas with Delegation you are more flexible and the scope of influence potential changes might have is limited to one method(advantage).\n\nA very easy illustration of inheritance might be apps. You might be able to use a big superclass App in order to access basic funtionalities and interactions with the systems that occur in almost every app(open, close, notifications) so you don't always have to implement the functionalities from zero. \n\n\n\n",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5583698,
      "meta": {},
      "text": "\tDuring the object design phase, there are three stages, which are implementation inheritance, delegation and specification inheritance. \n\tInheritance means, extending a base class by a new operation or overriding an existing operation. The advantage of inheritance is that you can use the methods in the parent class directly, subclasses can also easily has their own methods , and inheritance is supported in most programming languages. But the disadvantages of inheritance are also easy to see. Sometimes the methods in the parent class contain functionality that is not needed by the subclass, which can cause unnecessary problems. And once the parent class has been modified, the subclass often has to be modified as well. \n\tSmartphone manufacturers introduce new models every year, but it is not possible to produce them from scratch every year. Most make modifications and enhancements over last year's models. This is similar to inheritance concept.\n\tDelegation means reusing functionality of existing objects by using object instantiation and method calls.  It is more flexible in implementation , connection between objects are only via method calls. Each object are more free. But through delegation, we need to instantiate more objects and that may cause inefficient.  For example, when we are making interface of smartphones, we could use many gizmos. Some of them may have similar functions, so we are able to send a function of an object to another object , so we need not to implement one function for multiple times.  ",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5586903,
      "meta": {},
      "text": "Vererbung arbeitet mithilfe von Superklasse, die Methoden an Subklassen weitergeben. Jede Subklasse enthält alle Methoden der Superklasse. Ein Beispiel hierfür wäre eine \"Animal\"-Superklasse und Subklassen wie \"Löwe\", \"Taube\" oder \"Schaf\". Man spricht generell von einer \"Is a\"-Beziehung.\nDie Delegation arbeitet im Gegensatz dazu mit bestehnden Objekten von Klassen und ruft mithilfe dieser die Methoden der besagten Klasse extern auf. Man spricht generell von einer \"has a\"-Beziehung\n\nInheritance ist vorteilhaft wenn man Beziehungen zwischen Klassen ausdrücken will (z.b. instance of) oder die Subklassen alle Methoden der Superklasse enthalten müssen\n\nInheritance ist nachteilig wenn, Klassen zwar in anderen Klassen vorkommen nicht aber über diese definiert werden können. z.b. Hat ein Busch viele Blätter aber ein Blatt kann nicht als Busch bezeichnet werden\n\nDelegation ist vorteilhaft wenn, die Methoden einer Klasse benötigt werden, diese aber nicht überschrieben werden sollen. Delegation wird auch verwendet, wenn sich Komponenten zunächst gleich verhalten, sich dass aber in der Zukunft ändern kann.\n\nDelegation ist nachteilig, wenn die beiden Klassen sehr eng miteinander verbunden sind und flexibilität irrelevant ist. \n\nBei Smartphones würde ich im Rahmen der Kamera Inheritance verwenden. Ein Bild der Kamera besteht aus vielen Pixeln und ein Pixel ist theoretisch ein (wenn auch sehr kleines) Bild. Somit haben wir die Parent-Klasse Bild und die Kind-Klasse Pixel. \n\nBei Smartphones würde ich im Rahmen Bildbearbeitung Delegation verwenden. Beispielsweise beim ändern des Kontrasts bei Bildern will man nur Teilfunktionen der Klasse Bildbearbeitung verwenden und diese Funktionen nicht verändern. Hier eignet sich Delegation.",
      "score": 91.7,
      "language": "GERMAN"
    },
    {
      "id": 5587891,
      "meta": {},
      "text": "During object design it is important to use interface specification to increase the reusability, modifiability and the extensibility. Basically to not reuse code and to make it less complicated to change in the future. There is two different options: 1. Inheritance 2. delegation. The main difference between these two options is that in inheritance the implementations of the superclass is applied in the subclasses, while in delegation an operation is caught and sent to another object where it was already being implemented. On one hand inheritance makes it easier to implement new functionalities in the subclass, it is quite easier to understand and use and it is applied in many different programming languages. However it can expose some unwanted methods of the parent class and it is harder to make changes in the parent class since it will influence all the subclasses. On the other hand delegation is generally more flexible in the last aspect discussed since each class has its own implementations, but it can be more inefficient as an object has to be instantiated every time. In smartphones we can see inheritance used is in the type of app an smartphone has, for example there are apps that come with the phone that cannot be deleted and apps that people can download and delete. An example of delegations could be the note app on the smartphones, as every-time we create a note a new note object is instantiated. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593823,
      "meta": {},
      "text": "Inheritance is a relationship between two classes where one class is the parent, and the other is the child. The child class inherits the attributes and methods of the parent class and adds new additional features. Delegation is a relationship between two classes where one class delegates responsibility for an action to the other class.\n\nAdvantages of inheritance: \n-Code reuse\n-Easy implementation of subclasses\n\nDisadvantages of inheritance: \n-Can lead to inefficient & complicated code\n-There is no independence between the parent and the child.\n\nAdvantages of delegation: \n-Can lead to more flexible & readable code\n-Independence between classes\n\nDisadvantages of delegation: \n- Difficulty of implementation\n-Less efficient at times\n\n\nAn example of inheritance in the context of smartphones would be having both a normal phone class and a pro phone class. The pro phone class contains all attributes and methods of the normal phone class, but it also has some additional new attributes and methods, which are specific for the pro phone only. As for delegation in the context of smartphones, an advantage would be if you had a phone class and a separate GPS class. The phone class would delegate the responsibility of determining the location to the GPS class. The advantages ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596525,
      "meta": {},
      "text": "The difference between inheritance and delegation: \nWhen using Inheritance, a subclass inherits all of the variables and all of the methods defined in the superclass. While using delegation, you write another class with additional functionality that uses instances of the original class to provide the original functionality.\n\ninheritance:\n - advantage: simple to use\n - disadvantage:  Because it inherits all the methods of the parent class, some methods may not be needed.\n\ndelegation:\n - advantage: more flexible and can easily be changed at run-time\n - disadvantage: may be less efficient\n\nExample:\n- Inheritance: When we want to develop different kinds of smartphones, we can use a basic class that defines the basic functionalities and attributes. Then all kinds of smartphones can inherit from this class. That will save us time, and we can use all the basic functionalities and attributes.\n- Delegation: When we are developing the software for the smartphone, we want to rewrite some basic settings provided by the smartphone itself, but we don't need all the methods. In this case, we can use delegation to provide us with more flexibility.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5587580,
      "meta": {},
      "text": "The main difference between inheritance and delegation lies in the fact, that with inheritance you simply use a already implemented class and subclasses it, while with delegation you send the function which you want to execute to another object which then executes it. For inheritance you supply add the new operations in your subclass respectively overriding existing operations from the superclass and for Delegation you get an operation from a client and sends it to a object which implements the functionality. \nFor example in smartphones you can use a calculator that calls a receiver with your calculations and delegates the real calculation to a object which executes the calculation. \nOn the other hand, you could find inheritance in smartphones when saving your notes to a stack that always shows you the last note you added in your smartphone. You inherit the functionality from List, so the stack can use these functions for his own operations. \nThe problem with delegation is, that it can be a little less performant, because you have to instance a new object to which you delegates. The advantage is that it is very flexible, because you can implement the Reciever/Delegate part as you like. The big advantage of inheritance is, that it is very convenient to use and you can easy implement new or override old methods in your subclasses. A disadvantage of inheritance is, that you might give some information of you inner implementation to the outside, which you normally dont want to. ",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5587651,
      "meta": {},
      "text": "Inheritance is In object-oriented Programming a way to allow a  class to inherit all the methods and attributes of a superclass, establishing a hierarchical structure and positioning the latter at the top. With this method, code Duplication can be avoided, refactoring is cheaper (a modification in the parent class suffices for all subclasses ) and dynamic polymorphism is supported. The only issue would be that the whole parent class is exposed except for the private methods and attributes.\n\nOn the other hand, delegation creates a bidirectional relationship (not hierarchical) where a receiver class delates a  sender class(owner of the methods). Unlike the previous process, the sender class does not have to share all methods or attributes, just those that the receiver class needs. This solves the problem with inheritance but the instantiation can be expensive.\n\nWe can see an analogy of these differences in the context of smartphones if we see a regular basic phone as a superclass at the top of the hierarchy. This phone can make calls, write messages and save contacts. Smartphones would be a subclass of phones because they have all the features mentioned above and other extra features. These extras are for example 4g or 5g communication protocols, WIFI and GPS. These three are in this case an example of delegation because they are not made only for smartphones, but for a wider variety of electronics devices. What the smartphones do, is delegate these features of connectivity to those already existing technologies and protocols. ",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5592292,
      "meta": {},
      "text": "With inheritance, a class accesses an already implemented super class and inherits all implemented properties or overrides an existing operation. \nOn the other hand, the delegation hands over a specific task or operation to another class. \n \nAdvantage Inheritance:\nThe biggest advantage of inheritance is that you can reduce the amount of code you write, eliminating the need to rewrite individual methods.\n\n\nAdvantage Delegation:\nThe biggest advantage of delegation is that the delegate can easily be changed at runtime. The delegation is therefore very flexible in runtime.\n\nDisadvantage Inheritance:\nThe biggest problem with the inheritance is that the subclass depends on the superclass. So if methods in the superclass are changed, this can also affect the subclass.\n\nDisadvantage Delegation:\nOne problem of delegation is, that delegation is not directly supported by most popular object-oriented languages, and it doesn’t facilitate dynamic polymorphism.\n\n\n\nExample inheritance:\nIf you download a professional dictation app on your smartphone, the dictation app takes over the normal default settings from the dictation function and adds other options, such as a voice changer.\n\nExample delegation:\nIf you call up a program in the Internet browser on your smartphone, which you also have as an app on your smartphone, you will be forwarded directly to the app.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595540,
      "meta": {},
      "text": "The difference between inheritance and delegation is that inheritance has an IS-A relationship between its members and delegation has a HAS-A relationship between its members such as, for example, given the classes Dog and Cat the common relationship between them is that they are both animals and, as such, can inherit for an Animal class, but in the case of a Dog and Human class the existing relationship is that they both can walk or they both eat. \n\nAn advantage of both inheritance and delegation is code reusability and inherently development speed. A disadvantage of inheritance is the performance and a disadvantage of delegation is that delegation as a patter does not have direct programming language support such as how inheritance has the \"extends\" keyword, for example, in Java.\n\nSmartphone example:\n\nOn Android, all apps fallow the delegation patter when it comes to the way of interacting with the physical back button such as a relationship of HAS-A back button forms which has the exact same behavior for all applications. I chose this example because it has a uniform and well-known behavior that really even transcends the Android world and can be applied to any OS that has a physical back button.\n\nIf you want to create a custom component class inside Android, you have to inherit from the already existing parent component class to make your life easier. I chose this example because it highlights the way inheritance used to be the only accepted way of developing software, disregarding the performance costs. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596605,
      "meta": {},
      "text": "Inheritance is the concept of one class becoming a child class of a superclass and by that taking over attributes and/or functions of the superclass, while the concept of deligation \"deligates\" the method call to an existing instance of the attribute, which another object has a reference to. An advantage of inheritance over deligation is the fact that all the child classes take over the functionality of super classes, so you don't need to make sure that all the objects you would like to deligate the method to, implement it. An advantage of delegation is the fact that the delegate can be changed easily at runtime, while the class of an Object can't be changed (at least in Java).\n\nAll smartphones should have certain functionalities like calling, massaging, taking photos etc., for that it is of great importance to use inheritance, cause each and every smartphone should provide the user with these basic functionalities.\n\nOn the other hand every smartphone shall have a different size and some smartphones can be faster then others. For these purposes it is inevitable to use the concept of delegation, in order to customize the smartphone individually. \n",
      "score": 58.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596675,
      "meta": {},
      "text": "Inheritance is basically when one class takes the property from a different class. The new class uses attributes and methods from the existing class. On the other hand side there is delegation. The difference is that delegation means delegating the implementation to another class. \n\nInheritance: + it is easy to implement \n\t\t      -  you might have to deal with unwanted behavior \n\nDelegation: + overall more variability \n\t\t     - it can lead to inefficiency because a new object has to be created \n\nIf you would have to apps which basically have the same functionality you could use inheritance to set these functionalities to the other app. \n\nIf you on the other hand side want to implement a completely new feature you should use delegation because you are more flexible. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585796,
      "meta": {},
      "text": "Delegation is used to obtain functionality from other classes, while inheritance is used to extend and rewrite functionality of a base class. An advantage of delegation is that it's generally more flexible and easier to use but has the drawback of needing to create an instance of the class. Inheritance however makes it easy to implement new functionality built upon the superclass which has a direct drawback of exposing unwanted methods to the subclass.\nFor example in the case of a smartphone food order app, inheritance makes more sense as we can categorize food types with common properties and have all of them inherit an interface. Delegation however could be used in a car racing app, where components of the car can be switched between.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5587898,
      "meta": {},
      "text": "Inheritance benutzt das Konzept der Vererbung, um die Methoden und Attribute, die sich Klassen teilen in wenigeren Überklassen zu vereinen und sich so Wiederholung zu sparen.  Die Vorteile bestehen darin, dass es einfach zu benutzen ist, es von vielen Programmiersprachen unterstützt wird und falls sich die Verwendung einer Methode in der Unterklasse doch ändert, man diese einfach überschreiben kann. Dafür ist es problematisch, wenn einzelne Unterklassen gewisse Methoden der Überklasse nicht verwenden, da diese nicht einfach entfernt werden können. Zusätzlich erzwingt die Veränderung einer Überklasse diese auch auf alle Unterklassen.\n\nDelegation benutzt eine Instanz einer anderen Klasse, die die gewünschten Methoden bereits implementiert hat. Dies macht Delegation für mehr Zwecke nutzbar, allerdings benötigt es auch stets eine Instanz, was es ineffektiver macht. \n\nEin Beispiel für Inheritance wären beim IPhone die Widgets, die eine Superklasse haben, die schon Attribute wie die Größe besitzten und Unterklassen, die spezielle Methoden hinzufügt, die nur diese spezielle Art von Widget benötigt oder die in der Überklasse definierte Methode klicked() implementieren. \n\nWenn man etwas über eine Social Media App wie Twitter teilt, dann wird dieser Befehl an die jeweilige App z.B. WhatsApp delegiert. Dabei will man die Methode eine Nachricht zu senden verwenden, ohne die ganze Klasse die WhatsApp benutzt zu implementieren. \n\n\n\n",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5589146,
      "meta": {},
      "text": "Inheritance is used during analysis to classify objects into taxonomies. It reuses a specified or implemented functionality from a super class inheritance is straightforward and easy to implement. It has one disadvantage: changing  the signature of the superclass leads to changes of all the subclasses.\nFor example, we want to implement different IPhone models such as \"IPhone13\" and  \"IPhone12\". In order to avoid redundant codes and effort, it is easier to create an abstract class \"IPhone\" (super class). So, we can reuse this super class code by extending the sub-classes (IPhone types) since they have the same basic operations. Thus, inheritance provides the advantage of decoupling the classes using a super-class from the specialized sub-classes. However, it enhances high coupling along the inheritance hierarchy between the super-class and the sub-classes.\n\nDelegation reuses implemented functionality in an existing object and it is more flexible to use. Delegation makes explicit the dependencies between the reused class and the new class. Related to the IPhone example above, defining a super class is not necessary. If  the class \"IPhone13\" is implemented, the other class \"IPhone12\" could delegate some of its operations or functions to \"IPhone13\". It is a better approach to implementation inheritance because it doesn't interfere with existing components and leads to more robust code. However, specification inheritance is preferable to delegation in sub-typing situations because it leads to a more extensible design.",
      "score": 75,
      "language": "ENGLISH"
    },
    {
      "id": 5594384,
      "meta": {},
      "text": "Bei \"inheritance\" erbt man alle Funktionen einer anderen klasse, und wird dadurch zu einer Sub-Klasse von dieser.\n\tMit diesem Design kann man dynamische Polymorphie nutzen,\n\taber es man muss sich beim Systemdesign genau überlegen, was eine sinnvolle Hierarchie ist,\n\tansonsten kann es leicht passieren, dass ein System unübersichtlich oder ineffizient wird.\n\nBei \"delegation\" hat man einen Pointer zu einem Objekt einer anderen Klasse, von der man Funktionen nutzen möchte.\n\tMit diesem Design muss man nicht jede Funktion einer anderen Klasse übernehmen, sondern nur die,\n\tdie man wirklich braucht\n\taber das Erschaffen eines Objekts ist sehr teuer, daher muss man sich überlegen, wann es sinnvoll ist seinen\n\tPointer zu instanziieren.\n\nJede Hand-App hat gleiche Funktionen, man muss sie als Icon auf dem Bildschirm sehen können, man muss sie anklicken und öffnen können, sie muss im Hintergrund etwas ausführen. Deshalb ergibt es Sinn, eine abstrakte Oberklasse \"Handy-App\" zu haben, die alle diese Funktionen vorschreibt.\n\nJedes Handy muss sich mit dem Internet verbinden können, sehr viel Funktionen eines Handys basieren darauf. Da das eine immer auftauchende Funktion ist, ergibt es mehr Sinn, eine \"Connection\" klasse zu haben, über die alle anfragen bearbeitet werden, und durch \"delegation\" zugriff auf diese Klasse zu erlauben.\n",
      "score": 91.7,
      "language": "GERMAN"
    },
    {
      "id": 5594736,
      "meta": {},
      "text": "In delegation you seperate functionalies and send an object to return the solution instead of connecting all classes together.\nAdvantage: You just have to accept the methods that you require for the specific process.\nDisadvantage: Delegation makes the structure and linkages between components more complex, thats a problem when delegation is not really necessary.\n\nInheritance means creating a hirarchy of classes to pass functionalities down this hirarchy and make them accessable for multiple classes instead of remaking them.\nAdvantage: Inheritance avoids code duplicates.\nDisadvantage: A change could impact the whole hirarchy and make maintainabilty more difficult.\n\nContext of smartphones:\nDelegation - Memory can be outsourced in a SD-card, it‘s very flexible and independent of the device because it doesn‘t require any parts of the device to manage itself.\n\nInheritance - Downloaded apps get access to the functionalitys of the device like the camera, microphone etc. but they depend on the device, if it‘s IOS or Android and which version determine if the app can run as it‘s intended.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5595845,
      "meta": {},
      "text": "Inheritance defines a way of reusing design knowledge, existing classes or existing interfaces in our code.\nIt means, that we achieve the reuse through inheriting the concepts through the use of subclasses. The advantage lies within the fact that it's pretty easy to implement. That goes as well as for new additional implementations within the subclass. Additionally the concept of inheritance is also supported by many programming languages.\n\nDisadvantages might lie in the fact that Inheritance could expose some unwanted methods of it's parent class. Also changes in the parent class won't just affect the local class, but also the subclasses.\n\nDelegation describes another way of reuse. Here we try to reuse our concepts through aggregation and composition of classes. Therefore new classes which merge different functionalities can be created within the process. A advantage might be, that this way of reuse is generally more flexible. On the other hand there might occur Inefficiency because of the additional objects which need to be created, which would count as a Disadvantage.\n\nLet's analyze both concepts under the context of an Iphone app. The app we are talking about is from Apple itself and it's functionality extends the basic functionality of an irrelevant Iphone feature.\n\nFrom a delegation point of view, it would make sense to make the old functionalities available by accessing them from the new application, which means that you won't have to implement them again. \n\nIf we talk about Inheritance, then it would make sense to implement the app as an extension to the basic system which means that the app implements the old features through inheritance.\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596277,
      "meta": {},
      "text": "Both inheritance and delegation are used in reuse, but inheritance is when a subclass implements the functionality from the superclass with some extended functionality perhaps, whereas delegation involves taking some functionality from an existing object and sending to another object. \n\nAn advantage of inheritance is that it supported by many programming languages e.g. Java has the keyword \"extends\" for inheritance. On the other hand, a disadvantage of inheritance is that it might reveal some unwanted/dangerous methods of the parent class. \n\nAn advantage of delegation is that it might be more flexible since we can selectively control what specific functionalities from another  existing object we want in our current object. However, it might be computationally expensive since delegation requires an existing object, hence this existing object would have to be instantiated, which is a big issue if there are a lot of attributes involved in the constructor of this object. \n\nRegarding smartphones, delegation with proxies would be smart when we want to load Instagram, since we don't want to load all possible info initially on Instagram, but rather only info that is relevant which the user requests for. Inheritance would be a good idea regarding displaying info on the screen, since we could have a superclass called Display and subclasses PortraitMode and LandscapeMode which inherit from Display. This would be good because PortraitMode/LandscapeMode could inherit attributes such as brightness and all the interaction methods, but they could also extend functionality e.g. different display dimensions. \n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585468,
      "meta": {},
      "text": "Inheritance means that new classes are created which either extend superclasses and inherit their functionality or implement interfaces and override their specified operations.\nThis concept is easier to use compared to delegation, but it might lead to additional and potentially unwanted functionality of the superclass being accessible to the subclass.\n\nDelegation, on the other hand, means that certain operations are simply sent to and then executed by another object of a class which has already been implemented with the desired functionality.\nThis is usually more flexible, but can be less efficient due to the necessity to create an instance of the other object.\n\nExamples:\n1) An object within a smartphone app might need to send an HTTP request to a server. Delegating this to another object which already has a method for making API requests seems like the most suitable option, as inheriting from another object would also inherit all the other methods and attributes of that object, which are probably unnecessary and too specific for the intended use case.\n2) In contrast, an object representing a page in a smartphone app will probably inherit from a page superclass that includes common functionality for the respective OS, such as a back button, because it will very likely use several of those operations and delegating them to another object each time would be very inefficient.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585617,
      "meta": {},
      "text": "The difference between inheritance and delegation is, that with inheritance you give the properties/attributes/methods of one class to another (is-a relationship), where as in delegation, you pass the assignment/function/duty to another class(has-a relationship). This means that you call methods on the instance/variable of another class/ delegate the calls to another object. Both fix the problem of code duplication. \nThe advantage of delegation is the runtimeflexibility, as you can change the instance/variable during the runtime. In addition to that, if you were to change the parentclass, you don't have to adjust the childclass. However, not all programming languages support this concept, and you would have to define many methods that allow the forwarding of calls.\nThe disadvantage of inheritance is, that java only allows for one inheritance. The childclass can only inherit from one other class (not motherclass and fatherclass, only parent class), and the childless is dependent on the parent class. Some of the advantages are that you don't need to instanzise one or more classes, and it provides a clear structure of the code that is easy to understand.\nFor example, smartphone is-a electrical device (inheritance) and smartphone has-a touch display (delegation). Delegation, because the display can for example recognize for the smartphone when and where the user touched the screen. Inheritance as the smartphone can use some of the functionality of a electricaldevice, like having a battery which can show the percentage of amount charged.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5591217,
      "meta": {},
      "text": "Inheritance is the process by which one class takes the property of another other class. i.e. the new classes, known as derived or child class, take over the attributes and behavior of the pre-existing classes, which are referred to as base classes or super or parent class.\n    Advantage: It's supported by the most popular programming languages. It's easy to implement new functionality in all subclasses.\n    Disadvantage: Inreritance exposes some unwanted methods of the parent class\nExample: The gallery in a smartphone phone stores various media types, such as videos, photos, panoramas, screenshots, etc. These are subclasses of media types and implement methods in media types, such as select, like, share, delete, etc.   \nThe reason I chose this example is that it is easy to understand and everyone has a gallery on their smartphone.\n\n\nDelegation means that you use an object of another class as an instance variable, and forward messages to the instance. It is simply passing a duty off to someone/something else. \n    Advantage: the instance is of a known class, rather than a new class, and because it doesn’t force you to accept all the methods of the super class: you can provide only the methods that really make sense.\n    Disadvantage: unlike inheritance, delegation is not directly supported by most popular object-oriented languages, and it doesn’t facilitate dynamic polymorphism.\nExample: Cloud memory in smartphones uses memory delegation to store large files in the cloud and control them through the corresponding app. I chose this example because it is a very common function, and everyone knows it",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5584542,
      "meta": {},
      "text": "The difference between inheritance and delegation is, that you need a instance of an class for delegation, on this instance you then call the methods you want.  If dont have an instance you cant use delegation. For inheritance you dont need an instance but you create new subclasses that extend our existing classes.\nSo inheritance is useful for modelling systems and delegation is useful for any type of functionality.\n\nA key advantage about inheritance is that its supported in many programing languages that eases its implementation. Its pretty simple to use and we can easily extend our classes with the help of our IDE. But if we need to change something in our parent class we have to fix these things in our subclasses too. So if have a lot of inheritance we have to do a lot of work if we want to fix something.\n\nDelegation is more flexible as we just call functions on our instance and dont need to worry about how it works.We can dynamically adjust the function calls. But on the other side we also have to create an instance of our object  which can be  time consuming and error-prone (i.e. using wrong values).\n\nUsing different apps on your mobile device basically is delegation. We have an instance of an app downloaded and we use its features on it. I have chosen it because we want functionality and dont core about how it works.\nAn example for inheritance would be for example the different generations of a phone like Apple does it. Because here we started with a main phone and if we want new functions we just create a new generation which reuses old functionality but also provides new features.\n\n\n\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585039,
      "meta": {},
      "text": "Inheritance extends an already existing base by creating new methods/attributes. Delegation simply delegates an operation to another object of another class.\nInheritance has the advantage, that you don't have so much duplicated code, because it is stored in the parent class and can be used by different classes, that inherit this parent class. A disadvantage is, that this may expose unwanted methods of the parent class.\nAn advantage of delegation is, that it is very flexible, a disadvantage is, that you have to create a new object.\n\nIf an application on a smartphone for example wants to make calls, then delegation would be appropriate, otherwise the application might have other unwanted methods like also being able to track your position\n You don't want to expose to much to a particular application\n\nIf you want to make a messaging application for example, it could just inherit the already existing call application and just add a couple of methods to it, that makes you able to write text messages as well. Inheritance her would be good, because you need all methods of the call apllication and some additional methods, so you dont need to manage which methods you are allowed to use and which ones you should hide\n\n\n\n\n ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5586917,
      "meta": {},
      "text": "In java, inheritance is the process by which one class takes the property (attributes, methods, behaviour etc.) of another class. Inheritance often relies on an abstract class, from which one or many other classes inherit. Delegation on the other hand is simply passing a duty off to someone/something else. It means that you can use an object of another class as a variable, and forward messages to this variable. An advantage for delegation is that it can easily be changed at runtime making it more flexible. On the other hand it isn't direclty supported by most object-oriented languages and the structure has to be implemented manually. In contrast, inheritance is supported by most programming languages and is quite easy to implement new functionalities in the subclass. A disadvantage of inheritance is, that if you want to change something in the parent class you would probably have to change all the subclasses as well. \nIn the context of smartphones, inhertitance can be used to categorize Apps, by having the abstract class \"App\" and having different Apps inherit from it. This ways you can structure different Apps accordingly (like pre installed Apps and Apps you have to download).\nDelegation can be used when an App wants to use a functionality of another app, like displaying the weather and getting the information from the weather App. This way the App can directly call a method from the weather App and get the information.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5591132,
      "meta": {},
      "text": "Inheritance makes all the expansions that have been made to a system/class fully available plus the already existing features. The idea behind delegation is that the functionality can also be expanded, but certain features (that might have already existed, but would make the system inconsistent) can be made unavailable by creating a class that only delegates (and this way makes executable) some functions to the actual class.\n\nAn example of inheritance in the context of smartphones would be the the installation of updates. Everything that already was available remains available plus some new functionality. A multi-user system on a smartphone would be an example for delegation, because a new user \"extends\" the system smartphone, but might only gain access to some functionality.",
      "score": 33.3,
      "language": "ENGLISH"
    },
    {
      "id": 5593113,
      "meta": {},
      "text": "Inheritance is the concept in which subclasses take on attributes and methods of the respective parent class, and may even extend theses properties by including new methods and attributes. Inheritance can be used for showcasing hierarchies, whereas delegation is merely the passing of duty to another class / subsystem. Delegation can be an alternative to inheritance.\n\nAn advantage of delegation is flexibility, especially during runtime, because the class/subsystem to which the duty is delegated to, can be changed fairly easily. However, one downside of delegation is that when delegating a method to a class/subsystem, the programmer does not know how that method i implemented in the delegating class/subsystem, hence potential bugs may go unnoticed.\nAn advantage of inheritance is that you can minimize the amount of duplicate identical code by condensing common code segments in an inheritance relationship between classes. A considerable disadvantage is the decreased execution speed. Inheritance increases execution  time, due to inheritance costing time and effort.\n\nAn example for inheritance in the context of smartphones, are the different kinds of generations of smartphones out there. These types of smartphones are all linked together in an Inheritance, by their release date and features. Some features are taken from the old ones (older generation), while new features are added to the newer ones (new generation). \nAn example for delegation in this context is the protective cover around the smartphone: Since it would be an utterly foolish endeavor to make the smartphones as such falldamage-proof (this would make them chunky and heavy), the protection of them is delegated to the outer layer, that is the cover. There are a myriad of cover manufacturers out there - the user doesn't care what materials are used, as long as they fulfill the duty of protection.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596394,
      "meta": {},
      "text": "Inheritance describes the relationship between a parent class and a child class. The child class extends the functionality of the parent class, so it can overwrite or add new features for example. Delegation means that a class has an object of another class as an attribute, whose methods or properties can be used. So the difference is that with Inheritance class A is class B and with Delegation it means that class A has class B.\n\nInheritance could be used for the Apps in Smartphones, because every App needs to have for example a name, icon, start, stop etc. but it also adds/overwrites a lot of functionality, so it extends from a parent App class.\nDelegation can be found for example when an App wants to use the Camera. It wouldn't make sense to use inheritance because the App shouldn't be of type camera, because the app has a lot more functionality than just the camera. So it is practical to use delegation in order to get the functionality of the Camera.",
      "score": 33.3,
      "language": "ENGLISH"
    },
    {
      "id": 5583895,
      "meta": {},
      "text": "Inheritance is basicly letting the new implemented class be a subclass of an existing class. Delegation, however, is making the new class have an existing Object as an attribute and use its functionality over that Class. They both have advantages and disadvantages. \nThe disadvantage of delegation is that it reduces the efficiency. When we use an existing function, we need to call it using the existing class, which means the objects are encapsulated and that would probably increase the runtime of the program. \n The advantage of it is, that the new implemented class is not obligatory to have methods (functionalities) that it might not need. And while adding a new functionality to the existing class, we do not affect the new implemented class. Having the existing object as a attribute means that we can easily change it, anytime we want. So it makes it more flexible as well. \nWhile using inheritance, if we change the parent class, we change the subclass as well. This could be both advantage or disadvantage. If we want to add a new functionality that we also want subclass to have, that would be advantageous. \n But otherwise, subclass could have a function, we might not want it to have. This technique is a feature of almost all of the modern programming languages and easy to use.  \nIn the context of the cars, i would rather use inheritance. This is because all cars have basic functionalities in common and specific types of cars extends those functionalities. For example every car has functionalities like drive, break and play music but only luxury cars have massage passenger. ",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5585642,
      "meta": {},
      "text": "The difference between inheritance and delegation is that with inheritance the implemented feature is in the superclass, whereas with delegation it is in an existing object. \nAn advantage of inheritance would be that it is widely represented and supported by many different programming languages. A disadvantage would be that changes in the parent class can cause the subclass to change as well.\nWith delegation, the advantage is that it is generally more agile, but the disadvantage is that it may be more inefficient because an object instance must be built.\nI would use inheritance for the UI of smartphone apps, as most components are repeated over and over again and this would avoid code duplication. \nI would use delegation for a newly added app that uses functionalities of already implemented app. For example a map implemented in the user interface. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5586638,
      "meta": {},
      "text": "In delegation, you call functionality of other classes inside your class, while with inheritance you can reuse functionality from the superclass or build your own.\n\nDelegation:\nAdvantage: you can just re-use code out of the box by calling it in your code\nDisadvantage: the delegated code can't be modified\n\nInheritance:\nAdvantage: freedom to choose if you want to use superclass logic or your own\nDisadvantage: more costly to implement\n\nIn Smartphones:\nDelegation: when you want to get the user's location, you can call a function on the operating system's SDK to get it. Then you don't have to worry about the hardware and can focus on your app.\nInheritance: when using a service a smartphone operating system provides, for example, widgets, you use inherit some basic setup functionality but also overwrite a lot of things with your code.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5588329,
      "meta": {},
      "text": "Inheritance is the process where a class becomes the \"child class\" of another class, thus inheriting its attributes and methods. Delegation is the process where instead of a class inheriting all attributes and methods of another class, it simply uses an object of that class  as a variable. An advantage for inheritance would be that you can easily pass on methods and attributes. A disadvantage would be that you pass on all of the attributes and methods. An advantage to delegation would be the flexibility to use any methods or attributes from the class that you want to delegate. A disadvantage would be that ",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5591853,
      "meta": {},
      "text": "The difference between inheritance and delegation is that inheritance reuses functionalities from a super class while delegation reuses functionalities in certain existing objects. Inheritance can override operations from a superclass or extend them with new operations, whereas delegation catches a certain operation and sends it to a different object. \n\nAn advantage of inheritance is that it is very easy to implement. Implementing a new functionality in a subclass is generally speaking very straightforward and easy. A disadvantage of inheritance is that a change in the super class will lead to changes in all subclasses. For instance a signature change in the super class will lead to compiler errors in all subclasses.\n\nAn advantage of delegation is its flexibility. A disadvantage is that new object instances have to be created, which might lead to inefficiencies.\n\nExample inheritance: If we were to implement a class smartphone, we would need to establish whether or not this could extend the class cell phone. Smartphones do lots of other things, whereas a cell phone essentially only calls and receives calls. However, smartphones do that as well and are therefore also a type of cell phone. So in practice, a class smartphone could, taking Liskov`s substitution principle into consideration (as it is of the same type), extend the class cell phone and inherit some of its functions.\n\nExample delegation: Some functionalities are not implemented by smartphone operating systems and are instead delegated to third-party apps. An example would be the app Safari on the IOS operating system.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594526,
      "meta": {},
      "text": "Inheritance creates a vertical hierarchy in the object model and tries to increase reusability, comprehension and extensibility of the whole model by creating subclasses from an existing implementation.\nDelegation rather creates horizontal dependencies inside the object model as it reuses already implemented functionality in existing classes and thus increasing reusability as well.\nWhile inheritance also might override already existing operations or also inherit operations in the subclass which are not needed, delegation rather controls what functionality to use for a demanded request and therefore always just picks out the functionality needed.\n\nDelegation \n+ no unnecessary functionalities\n- eventually more time/memory consuming as the \"delegator\" needs to be created and delegates every request\n\nInheritance: \n+ easy to use as inherited functionality can always be altered very precisely the way you want (override)\n- dependencies of superclasses also come along with the potential risk of loosing demanded functionality in a subclass if the superclass is altered\n\n\nSmartphones:\nDelegation:\n- many apps use the local time and display it. Since the operating system might implement a method that delivers the local time, those apps can delegate this request and use the operating systems time implementation\n\nInheritance:\n- smartphones usually can communicate with each other wirelessly. An abstraction called \"Connection\" might be the superclass for various subclasses which define the method connect() in seperate ways, e.g. Subclasses might be BluetoothConnection, CellularConnection, InternetConnection,....",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596492,
      "meta": {},
      "text": "With Inheritance one means that the properties and methods of one class, e.g. person, are used by another class (such as a child class), e.g. student. This means that behaviours are taken over.\n\nWith Delegation opposed to this means that an operation or task is passed to someone else. In this context, a different class is used for the purpose of being an instance, to which the message is forwarded. While it can bring more work to add this instance, this approach is generally more flexible.\n\nWhy? because in the use of inheritance, all of the parents properties are inherited, also some that you do not necessarily want to. This means, that all of the existing methods have to be accepted. Yet, inheritance is still often used as it is so simple to implement. ",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596600,
      "meta": {},
      "text": "Inheritance is the process by which a certain class (subclass) takes the properties(attributes, methods) of another class(parent class). The subclass may offer new functionality. \nAn advantage of Inheritance is that it is supported by many programming languages, so you only need to learn this concept once and can apply it in almost any programming language.\nA disadvantage of inheritance is that it can expose unwanted methods of a parent class, for example if you implement a stack by inheriting from a list (more methods than you'd actually want)\n\nDelegation is just passing an operation off to another object.\nAn advantage of delegation is that you are more flexible in general, for example run-time-flexibility is much higher because you can easily change the delegate at run-time.\nAn disadvantage is that because of object instantiation, which is expensive, delegation might be more inefficient than for example an approach using inheritance.\n\nAn example for inheritance in the context of smartphones would be a new version of a text messenger, which inherits all the functionality from the prior version but also adds new functionality which is why you would use inheritance.\n\nAn example for delegation in the context of smartphones would be if you wanted to implement a certain extreme power saving mode with only the most basic operations possible (e.g no whatsapp, no photos, only settings and phone calls,...) you would use delegation because similar to the example with the stack further above you only want a certain part of a functionality and not the whole functionality which is why you would use delegation.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5584414,
      "meta": {},
      "text": "*Inheritance: the class can inherit from another class, and thus gets the functions and variables in this class.\n\n+ it facilitate dynamic polymorphism.\n-the Superclasse and supclass are dependent on each other, so any change in the Superclass effekt the supclass and should be done aslo in it\n\nex: ex: i use it when i have superclass (smartphone) which has operatingSystem() and classes (Iphone) and (Samsung) as supcalsses override the method in super calss( an Iphone has IOS-operatingSystem and the Samsung hast Android one ). cuase It improves the program structure which can be readable\n\n*Delegation: is a relationship between classes where one class forwards certain method calls to another class.\n+the delegate can easily be changed at run-time.\n- the complex assembly of the objects during construction.\n\nex: class SmartPhone has Methods, takePhoto(), Call() and saveConntact().  Another calss which is User that with SmartPhone in a relationship (which might be modeled by ex. an smartphone field in User object.) so the User can just use specific method which help him to do stuff like using the field smartohone to call the method saveConntact() or to make a phone-call by calling the Call() function . And the User class can have other methods which do not effekt the SmartPhone class.\n",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5588465,
      "meta": {},
      "text": "Inheritance provides a IS-A relationship to a subclass. That means, that the subclass can access its methods and call them. Additionally new Methods can be implemented in the subclass. Inheritance is good to use in case of generalization. The parent-class provides functionality that is used by all subclasses, it represents their overlap and avoids redundant code. In contrast to that delegation doesn't provide any methods to a subclass. It just has its own objects, who's methods can be called by another class (the class delegates them to the other object). If you don't want your subclass to be able to access all methods in the other instance delegation provides that, making u think about every methodical on another object you make. Delegation is implemented via giving the delegating class an object of the class that is being delegated too. Therefore it presents a HAS-A relationship. Additionally delegation provides more runtime flexibility than inheritance. However, both delegation and inheritance provide functionality to share code within different classes.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5588798,
      "meta": {},
      "text": "Inheritance reuses functionalities of an upper class by creating a sub-class which extend the functionalities of an upper class. Therefore the new class (\"the child\") will take over the methods of the upper class (\"parent class\") and also may add new methods. In this way it is easy to add new functionalities in the sub-class. However when changing the parent class, could mean that the sub-class needs to change as well. \n\nOn the other hand, delegation takes an operation from one existing object and send it to another object. Using delegation could be more flexible but it could also be more difficult as an object instance needs to be created. \n\nExample of inheritance in smartphones: smartphones could be considered as a subclass of the phones. Phones have the methods answer_call and make_call, the subclass smartphones allows to add some other specific methods as playing_movie. This is a method that couldn't be implemented by a sub-class desk-phone. \n\nExample of delegation in smartphones: smartphones have the method \"playing_movie\". When using delegation, this method would be call by the upper-class phones, and the class smartphones wouldn't acquire the methods of the upper-class. \n\nIn this case it is better to use inheritance as it is a straightforward use, we want to continuously add more operations in smartphones.\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5591378,
      "meta": {},
      "text": "Inheritance means that one class takes the property of another (parent) class. So the child class takes over the attributes, methods and behavior of its parent class, whereas in delegation methods are passed on to another object, i.e. in inheritance an object can use methods of its parent class directly and in delegation an object uses another instance of another class and passes e.g. method calls to its delegate.\n\nInheritance:\nAdvantage:\n- helps to reduce code redundancy \n- easy to implement new functionality to the/multiple subclasses by just editing the parent class\nDisadvantage:\n- inheritance can expose unwanted methods of the parent class \nexample in the context of smartphones:\nMany apps on smartphones are build on the same foundation (everyone of them has a name, icon etc.) . They all can inherit their basic attributes and behavior from one \"parent\"-app-class, which would reduce code redundancy and provide funcitionality to all apps very easily.\n\nDelegation:\nAdvantage:\n- run-time-flexibility (the delegate can be changed very easily at run-time)\nDisadvantage:\n- can be inefficient because a new object has to be created\nexample in the context of smartphones:\nDelegation is advantageous in smartphones e.g. Snapchat uses methods of the camera app, but should not inherit all its methods and behavior like access your library, because Snapchat shouldn't be allowed to access your private data on default. Therefore Snapchat delegates e.g. take photo to the camera. This increases security and data protection.\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5591780,
      "meta": {},
      "text": "In programming, inheritance describes a process in which a child class inherits the structure of a pre-existing parent class, meaning that the attributes and methods of the parent class are also available in the child class. Delegation, on the other hand, means delegating the task to an object of another class, which is used as an instance variable. This way, not the entire functionality of the instanciated class have to be accepted by the delegating class. One big advantage of Delegation is increased run-time flexibility, as the delegate can be changed during run-time. A disadvantage would be that, when class B needs functionality of class A but should be used in an API which expects class A, delegation would not be possible and inheritance would be required. These advantages/disadvantages hold true for inheritance as well, though the advantages of one are disadvantages for the other. Another advantage for inheritance/disadvantage for delegation would be that inheritance supports dynamic polymorphism (when a call to an overridden method is only resolved at run-time), while delegation does not. Lastly, another advantage for delegation is that it does not require the programmer to override the methods that the functionality is taken from. As a practical example, when building a smartphone game, if the devloper wants different characters that the user can choose between before the game, they could use one general character class and use inheritance for the different specific characters. Through delegation, the programmer could enable switching the character during the game.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593501,
      "meta": {},
      "text": "Der Unterschied zwischen Inheritance und delegation ist, dass bei Inheritance der Code aus einer  superclass wiederverwendet wird und bei delegation die Funktionalität durch eine Verbindung zu einer anderen bereits existierenden Klasse wiederverwendet wird durch die Erstellung einer Instanz. Bei delegation muss eine Instanz(Objekt) erstellt werden in welchem eine Methode aufgerufen wird. Bei Inheritance ist man hingegen auf dem \"Klassenlevel\"(nicht Objektlevel wie bei delegation) und bezieht sich auf Methoden der Oberklasse.\n Ein Vorteil von Inheritance ist, dass neue Funktionalitäten leicht in der Unterklasse hinzugefügt werden können. Ein Nachteil ist jedoch, dass eine Änderung in der Superclass(Elternklasse) teils die Unterklasse ebenso zu Änderungen zwingt.\n Ein Vorteil von Delegration ist, dass dieses Konzept flexibler ist. Nachteilig daran ist aber auch, dass es durch die Erstellung der Objektinstanz nicht so effizient ist. \nEin Beispiel für Inheritance wäre eine Smartphone-App für eine Universität. Man muss sich beim öffnen der App anmelden und dabei seine Rolle bezüglich der Uni auswählen (Gast, Student, Professor). Dabei gibt es eine Superclass \"Person\" und drei Subclasses \"Student\", \"Gast\" und \"Professor\".\nEin Beispiel für delegation ist, wenn man in dieser App eingeloggt ist und mit seinem Profil Feedback auf Vorlesungen geben kann. Das \"Feedbackfeld\" besteht aus dem \"Profilbild\", dem \"Namenslabel\" und dem \"Likebutton\". Diese drei Klassen sind durch Instanzen mit der Klasse \"Kommentarfeld\" verbunden und es handelt sich demnach um eine delegration. ",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5589727,
      "meta": {},
      "text": "Delegation vs inheritance\nWhilst both concepts have something to do with “reuse” of existing code, delegation instantiates an object of said class and passes the requests through the methods of that class, whereas with inheritance we work on class level and can directly use the methods of the superclass (though if it is a interface we are inheriting from we might have to implement the methods ourselves). So, we can see delegation as a sort of black-box reuse and Inheritance as white-box reuse.\n\nPro of delegation is it is quite flexible to use, especially at runtime, and we don’t necessarily need to know all the details about the source code. Unlike in inheritance we don’t need to implement all the methods of an abstract superclass which we don’t need.\nAs a negative though can be seen that through using delegation we create too many object instances.\nPro of inheritance is how widespread the concept is and that it is used in most of the programming languages. We also don’t need to crate and extra object of the superclass to get to the methods and functionalities.\nAs a con – we might sometimes need to implement methods of the parent which we don’t need and changes in the upper class will directly affect the code of our inheriting child-class.\n\nSmartphone example:\n\tDelegation: when an app needs to use the camera of the phone, it usually doesn’t create a completely new camera UI, it delegates the work to the phones camera app to get the data\n\tInheritance: when we get a system update recommendation/request from our phone, it usually doesn’t mean the whole system is going to me exchanged, usually it is only for example and added extension to an existing feature, added functionalities or details.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595012,
      "meta": {},
      "text": "The difference betweern inheritance and delegation is that inheritance is subclass implementation. This means it resuses implemented functionalities from superclasses. So most of the functions are already implemented and the subclass adds some methods/attributes. \n\nPro: It's straightforwad and it is easy to implementent new functionalities in subclasses. \nCon: If you change something in the superclass, the subclasses have to change as well. \n\nDelegation resuses functionalities of existing objects and method calls. \nPro: Run time flexible.\nCon: Objects are encapsulated. Some programming langugaes don't support it.\n\nExample with smartphones:\nInheritance:\n- Software updates of iOs are using inheritance. Each version uses the older version before it but adds new features (methods). It needs to implement the older methods as well so that the user and apps can still uses all features. Established methods can be overwritten with more efficent codes.\n\nDelegation:\n- A smartphones has different hardware components. You need to use delegation because you don't want to change all implementations of the subsystem when you change the parent element. Eg you change the controller which delegates all sensor (temprature sensor, light sensor, ..) to a faster one with a new methode which calculates modulo faster you don't want to change the sensor setup because it is not needed. The sensor only give the raw data and don't care about anything else.\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595232,
      "meta": {},
      "text": "In inheritance, the subclass inherits from the superclass, The Subclass is only extended by methods or attributes and or overwrites old ones. A delegation, on the other hand, is implemented in such a way that it sends a message from one class to another. An already existing object is thus used again. A further difference is that with the delegation the two classes may have different names for the same methods, since nothing is inherited.\n\nThe disadvantage of Delegation is, that there are some Programming languages, that do not support it and it is inefficient due to the encapsulation of the objects. The advantage of delegation is that objects are flexible, which means that objects of the same type can be easily replaced by others in the runtime. With inheritance, on the other hand, a change in the superclass can lead to a change in the subclass. Another disadvantage of inheritance is that information hiding cannot be fully implemented, since the subclass sees all parts of the superclass and can change them. thus, subclasses cannot be forbidden to delete or change things. Inheritance on the other hand has the advantage that the programming effort is reduced, it is more clearly structured and subclasses can be implemented quickly and easily and inheritance is possible in some programming languages that do not support delegation.  \n\nExamples \nDelegation: The new iPhone uses the concept of its predecessor model, but additionally gets new functions and old functions have been improved. We can therefore speak of delegation here. Old functions are used, but they are changed and adapted so that they are now independent of the old system. For example, old Iphones had a home button that brought you back to the home menu. this is no longer there in the new models. you can still get to the main menu but by simply swiping and not by pressing a button. \n\nWith inheritance, you can look at the different models of an iPhone of the same generation. There is a Mini, a Pro, a ProMax, etc. All of these are built on the same system and have the same functions. only sometimes individual subclasses have been slightly optimized or changed. \n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595623,
      "meta": {},
      "text": "difference between inheritance and delegation:\nThe difference between inheritance and delegation is that delegation is. catching an operation and sending it to another object, whereas inheritance (implementation) is overriding an existing operation or extending a base class by a new operation\n\nAdvantage and disadvantage of delegation:\ndelegation is generally speaking more flexible but you need to create an object instance which also might be more inefficient (that's the disadvantage)\n\nAdavantage and disadvantage of inheritance:\nthe good thing about inheritance is that it's straightforward to use and it's very easy to implement a new functionality. in the subclass. But. unfortunately inheritance exposes methods (sometimes unwanted) of the parent class",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5595892,
      "meta": {},
      "text": "Inheritance and Delegation are both great ways to reuse code, avoid code duplicates and ensure maintainability. The difference between them is that by inheriting you get the whole functionality of a higher class, whereas by delegating you only use some of the functionality of an already existing object. An advantage of delegating is that you you can choose which functionality you want to implement in contrast to inheritance, which can also expose some unwanted functionality you dont want to be visible or available to the outside world. On the other hand inheritance is more efficient than delegation. \nIn the context of smartphones you can use delegation very good to limit the access of certain functions on an object for certain other objects. For example when using a social media app to chat with a friend, where you have to sign in, you dont want an unautorised person to be able to make changes to your account but the person can still look at the global news displayed in the app for example. You can archieve this by delegating the functionality to a kind of controller class thats able to use only the functions availabel to an unauthorised user. Inheritance on the other hand by describing an abstract class of an app can be used to make sure every app posses certain functionality, for example that you can open and close the app. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596063,
      "meta": {},
      "text": "\ndelegation: reuse the function or attribute from another existing class\nadvantage: is flexible because you can use any class\ndisadvantage: is inefficient because you might have to create a new class\nex. once a smartphone's screen is broken it can be fixed by reusing another brand-new screen from another same-size smartphone's screen \n\ninheritance: reuse the function or attribute from the parent class\nadvantage: you can create a new function and attribute in a subclass, and it is easier to create\ndisadvantage: you must inherit all classes from a parent class, which something might be unnecessary\nex. Apple smartphones reuse the same parties for appearance and screen for the SE generation but upgrade chip inside in each new SE generation",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596272,
      "meta": {},
      "text": "The main difference between inheritance and delegation lies in the object that performs a certain operation. Delegation is used to transfer the operation from one object to another one that can actually perform this task and relay the result. Inheritance lets a child class inherit already existing functionality from a parent class in order to realize new functions. \nThe disadvantages of inheritance are therefore that potentially unwanted functions might become visible in the new sub class.\n\nThe advantages of inheritance lie in the ability to easily create those new classes, add new methods in addition to the existing ones.\n\nThe disadvantages of delegation are mainly the high communication and creation effort that is needed to create the perorming object.\n\nThe advantages of delegation are therefore that one can change results before returing them to the user and also certain methods of the operating object can be hidden or the operating object itself can be changed. \n\nAn example of inheritance in the context of smartphones could be made up in the different versions of the product. I would suggest inheritance because a base version could specify all the general functions and capabilities but there could additionally be pro or special versions that inherit those base functions but add new ones. \n\nAn example of delegation could be a smartwatch that is connected to a smartphone. Here it would make sense to use delegation in order to compute certain operations on the smartphone rather than on the watch because it has more computing power and a connection to the internet.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596547,
      "meta": {},
      "text": "In Java programming, inheritance is the mechanism through which one class inherits the properties of another. i.e., the new classes referred to as derived or child classes, inherit the traits and behaviors of the pre-existing classes, referred to as base classes, super or parent classes while, Delegation is the act of handing over a task to someone or something else.\nThe main benefit of delegation is the ability to alter the delegate at any time during the execution. However, unlike inheritance, most popular object-oriented languages do not natively enable delegation, and it does not allow for dynamic polymorphism.\nReusability is aided via inheritance. When a class inherits or derives from another class, it gains access to all of the inherited class's capabilities. Inheritance, on the other hand, increases the coupling between the base and derived classes therefore a modification in the base class will have an impact on all child classes.\n\n\nFor example, if you're using an app on your smartphone to download data from a web site asynchronously, one or more of the app's delegates will be notified when the program experiences a failure, success, or receives a response from the web site.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5585543,
      "meta": {},
      "text": "The differences between inheritance and delegation are pretty straightforward. The former describes the usage of a parent class that already provides a certain amount of functionalities that can be used or overwritten by the the child class. Thereby code duplications are avoided and the user can add child classes to his liking. This concept is widely known plus it also allows for specialisation in the child classes. Disadvantageous however is the fact that the child class has access to methods of the parent that it potentially should not have thereby for example reducing safety. \nDelegation on the other hand implements a third player that basically acts as the bridge between the two other entities. The client in this case calls on the so called receiver which is the connection to the delegate class in which the desired methods are situated. Thereby the client cannot directly access the functionalities of the delegate class, which is an advantage of this principle. Disadvantageous might be the fact that object instantiation is required and therefore might be more taxing and inefficient. \n\nAn example in the inheritance context is that a smartphone could be a subclass of the parent class mobile device that already implements the functionality of calling and receiving messages. By using inheritance code duplications are avoided and one can then model different types of smartphones or even phones with less functionality. \nRegarding delegation an example is to implement an interface Smartphone that is implemented by different types of smartphones and another class smartphoneController which additionally has an attribute of type Smartphone. SmartphoneControllers can now be instantiated at runtime according to the specific smartphone type and make use of the functions. Like this users cannot directly access the delegate classes. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585852,
      "meta": {},
      "text": "Inheritance: \nWith inheritance, functioniality / code can be reused by subclassing another class. Also inheritance can and is also used as a description of taxonomies. \nThe advantage is that it can be implemented quickly. A disadvantage is, that inheritance might expose functionality of the superclass that don't make sense in that context.\n\nvs.\n\nDelegation:\nWith delegation, functionality / code is reused by using the functionality of an already existing object for a different purpose. So for example the functionality of a Stack can be implemented using the already existing List object. \nThe advantage of delegation is that it is more flexible and doesn't interfere with the components it uses.\nA disadvantage is that it needs an instance of the desired object to reuse its functionality.\n\n\nExamples Smartphones:\n\n- Inheritance: \nEvery application on the phone is a child of the more abstract superclass \"App\". So the Instagram App for example has all the functionality that an \"App\" has (opening and closing the app for example) and expands this functionality. This example demonstrates inheritance in the context of smartphones quite well I think, so I chose it.\n\n- Delegation: \nProbably all apps on a phone delegate the task of registering a touch input by the user, to the phone's touch sensors. It is very easy to then just define a \"onClick\" function that executes as soon as the phone tells them about click. This I think also demonstrates delegation well.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5586960,
      "meta": {},
      "text": "The main difference between is the time of binding: \nBy using inheritance already before running the system the classes have a connected static structure with super- and sub classes. \n(+) It is easy to adapt the structured system by adding new sub classes and therefore exploit the function of inheritance well\n(-) Inheritance might lead to the exposure of some unwanted methods/variables in sub class of the superclass.\n\nSmartphone can be seen as a abstract class with methods like turnOn(), login(), startApp() etc. The subclasses are all types of Smartphones like Samsung, Apple, Huawei which implement all these methods in their own way.\n\nBy using delegation an object of the certain class you want work with is instantiated only at runtime.\n(+) Central advantage is that you can flexibly use methods on the object without the need of overriding or implementing methods that are not necessary for the functionality of this class.\n(-) The creation of an object instance is seen as expensive in software development.\n\nYou are selected as a function tester and measuring the starting time of a mobile phone. The object mobile phone is instantiated with one of the Smartphone types only at runtime in the class FunctionTester. Because you are only interested in the method turnOn() the delegation is the right choice here.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5588218,
      "meta": {},
      "text": "The difference between inheritance and delegation is how they accomplish the desired functionalities by using class which is already implemented and can also fulfill some particular desired goals at that time. inheritance will do this by create a new subclass of that already existing class so that this subclass will be able to do the same things as its superclass. If developer choose this way, then they will have less work to do, because inheritance is usually easy and should be treat as universal supported.However, this might lead to some problems which cause by implementing not only useless methods but also dangerous methods from superclass. All these methods are not helpful for this subclass anymore and could allow unwanted operation be executed by client. Delegation, on the other side, calls the method in already existing classes and create instances to achieve goals its want. In comparison with inheritance, delegation makes sure that only allowed methods could finish its work and enhance obviously the security of system. Nevertheless, create instances need more time and could be inefficient for both solving problems and programming.\nIn the context of smartphones, the concept of inheritance should attract more attention by smartphone updates. In this case, we have good reason to believe that all functionalities from last version should also be keep in the next version for the convenience of clients(that means less study cost to learn new version). the concept of delegation might be used on applications in smartphone, because the possible operations from client should be restricted in order to keep the application being safe. At the same time, allowed methods will be call and offer services to client as expected.\n ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589037,
      "meta": {},
      "text": "Delegation:\nIn delegation  you use an object of a different class as an instance variable and you forward each message to the instance.\n\n+ More run-time flexible \n- Not usable for dynamic polymorphism \n\nInheritance:\nIn inheritance you are given a base class, where you have to either override exiting methods or extend with new operations.\n\n+ Easy to implement new functionality in each subclass\n- If changes occur in the parent class, these changes will also happen in the subclasses\n\n\nFor smartphones inheritance can be used for app designs in terms of, that every app has routines on  how it starts, how one exits the app, what happens in error cases ... . These methods have to implemented, but how it is done is up to the designer of the app. \n\nFor delegation I would use it for my text-massaging app, where my base class has all the functionality to send and receive texts. For getting the input- text from my keyboard to write massages I would have a own class, that is  saved as an instance variable for my base class.\n \n",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596487,
      "meta": {},
      "text": "Inheritance reuses a specified or implemented functionality from a super class, while\ndelegation reuses implemented functionality in an existing object. Delegation is more\nflexible to use, and has run time flexibility,  inheritance is straightforward and easy to implement.\nInheritance has one disadvantage: if you change the signature of the superclass, all the\nsubclasses have to be recompiled.\nDelegation has one disadvantage :For delegation , you need to create an object instance which might be inefficient. \nLets say we have Smartphones class and SmartphoneApps class .\nSmartphones class has a method called playMusic().\nnow in SmartphoneApps class i create  a instance of an object Smartphones and then call the method playMusic() on that object.(this is delegation )\nIn Inheritance , SmartphoneApps class will be inherited from Smartphones Class using extends function and will also have all the methods of Smartphones class.\n\tNow if i have to show a relation (is .. a) between both the classes , i might use Inheritance but in this case i would go for delegation because i only want functionality of the method playMusic()(that is that music should be played) and i  also dont want to override it . ",
      "score": 0,
      "language": "ENGLISH"
    },
    {
      "id": 5596578,
      "meta": {},
      "text": "Inheritance & delegation are concepts used in object design. Inheritance describes a is-a-relationship between derived child & their parent class meaning that children at least implement all functionality of parent class, whereas delegation is following the logic of composition (is-part-of-relationship) via an aggregate class (receiver) and a delegate as its attribute - here the receiver internally hands functionality requests over to the delegate for proper execution.\n\nInheritance\nAdvantage: saves coding time & contributes to code comprehensibility e.g. via reuse \nDisadvantage: parent & child class tightly dependent, changes in parent class can lead to unwanted effects in child classes resulting in additional code maintenance effort\n\nDelegation\nAdvantage: lower code maintenance efforts (receiver & delegate class can be independently modified) & more flexibility regarding different delegate object instantiations at run-time\nDisadvantage: complicates code debugging through added dynamic binding complexity\n\nExample\nSmartphone should provide a takePicture()-Functionality which is already implemented in Camera class (specialized on how to handle picture requests) and can therefore be reused. Having a is-part-of - relationship between phone & camera, phone will have a camera object as attribute to delegate the takePicture() functionality to it. Using inheritance here not suitable since the Camera should not inherit any Phone specific attributes or methods.\n\nSmartphone should be able to handle 2 different types of AppUIs, a AdvancedGUI &a specialized LimitedGUI for older people, both UI types should provide same core functionality of displayApp() as specified in AppGUI class. Here we use inheritance making AppGUI abstract parent class reusing the displayApp() implementation for both UI types to make sure the minimum functionality of AppGUI is passed on to children, which might offer further individual functionalities being easy to implement additionally locally.\n\n\n(taken & adapted from own submission H06E04 last year)",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596716,
      "meta": {},
      "text": "Inheritance is when a class is a subclass of another class and delegation is when a class has an attribute of another class. Inheritance makes more sense when there are supposed to be multiple subclasses of a class. Delegation makes more sense when you want to implement additional functionality before delegating the method.",
      "score": 16.7,
      "language": "ENGLISH"
    },
    {
      "id": 5585502,
      "meta": {},
      "text": "Eine Klasse, die von einem einem Typ(Interface, abstrakte Klasse oder Klasse) erbt hat nun alle Methoden und Attribute dieses Typs (Vorteil: Wenig duplizierter Code). Dies kann jedoch ein Nachteil sein, wenn man auf der Klasse keine Methoden von dem Typ aufrufen soll (zB. eine Stack (auf einer Liste aufgebaut) sollte nicht die Methoden add() und remove() besitzen. Daher ist Delegatition flexibler, da man genauer entscheiden kann, auf welche Methoden jetzt ghenau zugegriffen werden kann. Jedoch kann sie weniger effizient sein, da man noch eine Instanz des Objekts instanziieren muss:\n\nEs ist wichtig, dass das Smartphone nur eine delgation zum Betriebssystem hat und somit nur manche Methoden vom Betriebssystem via syscall aufrufen kann, wie zB. shutdown. Das Betriebssystem beinhaltet viele funktionalitäten, die aus Sicherheitsgründen nicht per Bedienung ausführbar sind.\n\nEine spezifische App sollte vielleicht von einer Art Überklasse \"Application\" erben, welche Methoden wie öffnen und schließen vordefiniert hat und  nur von unterschiedlichen Apps vererbt wird. Dies schützt den Entwickler unnnötigen Code zu schreiben.",
      "score": 83.3,
      "language": "GERMAN"
    },
    {
      "id": 5585966,
      "meta": {},
      "text": "inheritance is a way of reusing a class, in which the existing is specialized in a subclass. The methods being reused can be call on the objects of the subclass directly. In case of delegation, a class reuses an existing class by having an attribute of this class, which a method call will be delegated to. The advantage of inheritance is a better overview and low coupling, using inheritance a system can be structured hierarchically, which is more comprehensible than aggregations and compositions all over the system. But by using inheritance, all the functionalities of the superclass become visible in the subclasses, sometime a subclass should not have all of those methods, instead, using delegation would make more sense, because by delegating a method call the reused class, the functionalities of the class are not exposed to the user class.\nFor example, the relationship between the smartphones and electronic devices should be inheritance, because a smartphone is a electronic device, a smartphone has every functionality that a general electronic device has, like turning on, charging etc., there is no problem with the visibility of methods. in opposite, smartphones should not use the class CPU by extending it, because the basic operation that a CPU has like adding two binary numbers or loading a value from the memory should not be visible on the level of the smartphone, a smartphone should use these basic operations to implement more complicated functionalities, which are provided to the users",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5587799,
      "meta": {},
      "text": "Inheritance: You have a subclass that inherits from a superclass (parent class). All implementations of the superclass also apply to the subclass (unless they are overwritten with @Override).\n- Advantage: Easy to use and implement\n- Disadvantage: Changes in the parent class could cause problems, e.g., subclass need to be changed as well.\n- Example: Superclass = Smartphone; Subclasses = Iphone and SamsungPhone\nThe basic features and methods that every smartphone must possess are determined here, e.g. the methods phoneCall(), texting(), or takePhoto(). If a subclass does not support this methods, it is not a smartphone (at least in this example).\n\nDelegation: It will use an object of another class as an instance variable. There are two classes (or more). If I want to access a method of the second class from the first class, I simply create an object of the second class in the first class, which calls the desired method. \n- Advantage: Higher flexibility\n- Disadvantage: Less efficient, because new object must be created\n- Example: 2 Classes: Call and Iphone. Call has all the functions to make a call.  Iphone bundles all functions an iPhone has. If a call is made, a new call object is created in Iphone, which executes makeCall() of Call. \n\nDifference: For inheritance you have sub- and superclass with the same methods. To call a method from the superclass you use \"super.METHOD()\". For deligation you have to create an object of another class, which calls the method -> \"Otherclass oclass = new Otherclass();\" \"oclass.METHOD()\".",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5587810,
      "meta": {},
      "text": "Inheritance in Java is a mechanism in which one object acquires all the properties and behaviors of a parent object. Alternative: delegation. Delegation means that you use an object of another class as an instance variable, and forward messages to the instance. The instance is of a known class, rather than a new class, and it doesn’t force you to accept all the methods of the super class: you can provide only the methods that really make sense. If one choses inheritance, all methods of the superclass need to be shown even if they don't make sense. But unlike inheritance, delegation is not directly supported by most popular object-oriented languages, and it doesn’t facilitate dynamic polymorphism. \nExample smartphone:\nLet's suppose there is a super-class smartphone that provides many helpful functions such as call, take photo, write message etc. In this case two possible subclasses: iPhone and Android smartphone should inherit from the super-class because the super-class only provides properties and behaviors, which the sub-classes actually need.\nAnother completely independent example: let's suppose we have a class called: google phone. This class is complete and provides all of the functions a google phone has. Now we want to create an iPhone class and keep the effort as minimal as possible. In this case we would use delegation. We could forward the messages to an google phone instance, if the function is the same. But don't need to show functions in the iPhone class that only a google phone has, e.g. open google play store. \n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589609,
      "meta": {},
      "text": "Inheritance means that a class “inherits”another, i.e. it is a more specific instance of the parent class that has attributes of the parent and methods of the parent may be used on the inheriting class. An example would be a SelfieCamera inheriting the Camera class: this means that if I implement takePhoto() on Camera, I could use this method on SelfieCamera as well. This shows one of the main advantages of inheritance, that is, removing code duplication: I don’t have to implement takePhoto() twice (in SelfieCamera and FrontCamera), instead I implement it once in a parent class and let them inherit from it. The disadvantage is that inheritance is not very good for information hiding. If I have an ReceiptScanner that extends Camera, I do not want it to be able to use recognizeFace(), but if I implement recognizeFace() in Camera to enable SelfieCamera and FrontCamera to use it, ReceiptScanner will have access to it as well.\n\nDelegation means that a class “delegates”, i.e. hands over, certain responsibilities to an member object instance. That means that instead of implementing a functionality by itself, the class has a method that calls a method on this member object instance. In our smartphone example, if I want to implement ReceiptScanner, I can put an Camera instance as a member variable and define which operations I want ReceiptScanner to delegate to Camera, e.g. ScanQR(). This shows the main advantage of delegation: information hiding. The disadvantage that there is a lot of “meaningless” code, which are all the methods, e.g. in ReceiptScanner, that just call another method in the member object.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5591199,
      "meta": {},
      "text": "Der Unterschied ist, dass wir bei inheritance entweder eine bereits implementierte Funktion der Oberklasse benutzen bzw. erweitern oder diese bereits implementierte Funktion vor der Benutzung überschreiben. Bei delegation hingegen wird die implementierte Funktion von einem bereits existierenden Objekt benutzt/wiederverwendet. Hierbei machen wir uns die Funktion eines bereits existierenden Objekts zu Nutze und verwenden/erweitern keine Funktionen aus der Oberklasse (sowie bei inheritance).\nEin Vorteil von delegation ist, dass es allgemein flexibler in der Nutzung ist.\nEin Nachteil von delegation ist, dass es ineffizienter sein kann, da immer ein Objekt erstellt werden muss.\nEin Vorteil von inheritance ist, dass die Benutzung direkt und unkompliziert ist. Ein Nachteil hingegen ist der Aufwand, den Anpassungen bzw. Veränderungen mit sich bringen, denn falls etwas in der Oberklasse verändert wird, muss dies auch in den Unterklassen angepasst werden.\n\nEin Beispiel für inheritance wäre das Angebot einer Basisversion eines Smartphones, bei welchem man nur Basisfunktionen hat wie beispielsweise telefonieren, sms schreiben und im Internet surfen. Neben dieser Basisversion des Smartphones wird auch eine eine erweiterte Extended-version angeboten, bei dem das Smartphone alle Basisfunktionen hat und dazu noch viele zusätzliche Funktionen wie beispielsweise GPS-Ortung, Kamera, etc.\n\nEin Beispiel für delegation wäre, dass eine App auf einem iPhone, welche eine aktive Internetverbindung braucht, die Aktion/Vorgang des Verbindens mit dem Internet an das Betriebssystem iOS delegiert und dies nicht selber durchführt.\n",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5591270,
      "meta": {},
      "text": "In the inheritance, the subclass can reuse all methods of the superclass. In the subclass, the methods can be rewritten and new functions can be added. And the subclass is always the same type as the superclass. In the delegation, there is a receiver which use the methods of the delegate class. In a method call, the request will be sent to the delegate by the calls receiver. Due to that the client can not call the delegate directly, it prevent the misuse of some methods of the delegate. So compared with the inheritance, there could be some constraints of using methods in delegation. \n\nAn example of inheritance in the smartphone area is the development of IPhone. Each newly released IPhone contains the functionalities of its previous views, and each new generation also has its own functionalities which are newly developed. \n\nIn an Apple Store, each phone being displayed does not have full functionality for the customer to use, they are just implemented with some basic functionalities and the mainly usage of them is to show the customer the appearance of the phone. This is a kind of delegation.",
      "score": 33.3,
      "language": "ENGLISH"
    },
    {
      "id": 5593328,
      "meta": {},
      "text": "inh vs del:\nInheritance adds extra functionality to a class, while keeping all of the inherited functionality working and visible.\nDelegations does the exact opposite. It can hide some of the functionality of the original class and implement new ones. Delegation means our class takes the request first and then gives it to the original class. Inheritance lets the user directly call requests on the original class, without any middleman.\n\ninheritance:\npro:\n- speed (no middleman necessary)\n- quick & easy to implement, no unnecessary boilerplate\ncon:\n- exposes unwanted functionality of original class \n  (e.g. a stack shouldn't allow adding an element somewhere in-between)\n- missing flexibility -> can't change underlying data structure\n\nsmph ex:\nImagine the abstract class camera sensor. If you build a new sensor for a phone, you want all the functionality of the \"old\", abstract sensor, but ofc add your own fancy features. All of the old and new features should be accessible to the one working with these sensors.\n\nwhy choose:\nIf you want to provide access to ALL the available features for a powerful and complex interaction with an unchanging backing structure, inheritance is the top choice.\n\ndelegation:\npro:\n- easy to maintain -> changes under the hood don't affect user (only changes in interface does)\n- hide unwanted functionality\ncon:\n- performance/memory overhead (delegate method call, object instantiation)\n- more boilerplate code\n\nsmph ex:\nAn app programmer doesn't need access to all the sensor readings of the camera sensor. All they are interested in is getting an image from the sensor. Another class delegates the simple requests from the programmer to the highly complex sensor. The delegating class is responsible for working with the complex sensor, while providing the programmer with an easy-to-use interface.\n\nwhy choose:\nIf you want to provide simple, black box access to complex resources that might change in the background delegation would be the perfect choice.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593407,
      "meta": {},
      "text": "Inheritance is the using the methods of an already existing class, that have the same functions as the methods desired to be implemented in the target class. So to prevent code duplicates you make the target class a sub class of the other class and just use its methods or change them a bit by overriding them. Inheritance is straightforward to use, supported by many programming languages and makes it easy to implement new functionalities in the subclass. Some of the disadvantages are the it exposes some(unwanted) methods of the parent class, and that any change in the parent class can force the subclass to change as well. If we take the google playstore as an example we find the the multiple views all have many elements in common, which means they share a parentclass that offers these functionalities, each view has the same basic structure etc. \nDelegation on the other hand is the act of catching an operation and sending it to another object. This makes delegation much more flexible, as you can send one operation without having to use all methods of a class, but its also a little inefficient as you have to create an object instance to be able to delegate an operation to another object. If we take the google playstore example we find that no matter in which view we are, if we purchase an app we get redirected to a payment popup. This payment functionality doesnt have to be implemented separately in each view, the software just delegates the payment process to the corresponding class, which all different views can profit from.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594814,
      "meta": {},
      "text": "Delegation is when you instantiate another object and redirect operations to it. (For example creating a stack class, which delegates actions to a list object). Delegation is good because it is flexible and you can easily expand on it. A disadvantage of it, however, is that the instantiation of the object(s) itself is relatively costly, which leads to performance impairments.\n\nWith inheritance you directly inherit from a given class and can use its functionalities directly. This is good, because it is very easy to use, and new functionalities can be easily added. However, inheritance inadvertently (partly)  exposes parent class implementation details, and any changes in the parent class might require consequent corrections in the subclass.\n\nAn example for inheritance: Android apps have default button layouts, which are provided by the Android OS. One can inherit from them in order to create new button with different styles/functionalities. For example one can create a RoundedButton, which always has rounded edges.\n\nAn example for delegation: Consider creating a search bar widget with which you can browse the internet from the home screen. It's rather unlikely that one will be able to create a search engine alone. A more sensible approach would be to delegate the work to the currently existing google search engine instead.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595536,
      "meta": {},
      "text": "\nInheritance is basically taking an already existing product and add some functionality to create a new one. Just like creating a \"pro-version\" of a smartphone for example which is similar to the normal version but with some extra features.\nDelegation is more like reusing specific parts of an existing product. Instead of copying the whole product you just reuse some parts of it like using the same camera of and older smartphone because it is still the best.\n\nOne advantage of inheritance is that it is super straightforward to use. In this example you could just produce the \"pro-version\" of the smartphone like the normal one but with the difference of adding another camera for example which is just a small change in production. A clear disadvantage is that if you decide to cahnge the production of the \"basic-version\" beacuse you want to take cheaper parts, you will also change the production of the \"pro-version\" and also take cheaper parts for that, which is not supposed to be, because that is the more expensive \"better\" model.\n\nDelegation instead is very flexible in those situations. It would be very simple to just change specific parts in the \"basic-version\" because it wont affect the \"pro-version\".",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5595574,
      "meta": {},
      "text": "With inheritance, there is a base class and one or more sub- or child-classes that extend the base class and therefore take over the existing attributes and behaviour of it. On the other hand, delegation means catching and passing off an operation to another object. To sum up: use inheritance when you want to \"copy\" the whole class and build on its functionalities and if you only want to use some functionalities use delegation.\n\nInheritance makes it easy to implement new functionalities in the child classes and is generally very straightforward to use, however if you want to change the parent class it can force you to implement these changes in the child classes aswell. With delegation there generally is more flexibility but especially run-time flexibility, on the other hand it might be less efficient than inheritance since new objects to pass the operation off to, have to be created.\n\nAn example for inheritance would be if you use FaceTime to call someone. FaceTime inherits from the \"normal\" phone App. Delegation would be if you were using another App and get called. Then the other App, say Spotify, does not inherit from the phone but delegates the call to it.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595690,
      "meta": {},
      "text": "The difference between inheritance and delegation is that for inheritance one has to create a whole new subclass to use methods of a class. With the help of delegation one can easily use methods of a class by creating a instance of that class in the class one needs the methods.\n\nThe advantage for delegation is that one can easily choose which methods to implement from the class one needs the methods of, instead of making the class a subclass.\n\nA disadvantage would be the inefficiency because a new instance needs to be created beforehand and another point is that some object-oriented languages do not support delegation.\n\nThe advantage of inheritance is that one can implement and change the methods on needs in the subclass.\n\nA disadvantage would be that with inheritance one is forced to implement all methods of the mother-class. \n\nAn example with smartphones for delegation would be with camera-programs. Instead of the apps writing a new software for the camera all the time they would use the existing one with the help of delegation. Snapchat for example takes a picture when hitting the \"snap-a-picture\" button.\n\nFor inheritance i would use it for the app display and display in general because here one can keep the functionalities but change the design of the app-symbols depending on where one opens them. Therefore one writes less code.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596579,
      "meta": {},
      "text": "Inheritance requires the developer to have a certain level of access to the code. For example, in Java, a developer cannot inherit from private or final classes. Thus, inheritance follows the principle of white box reuse. This allows the developer to reuse the code easily - by inheriting from the initial implementation and calling the superclasses method. However, the fact that the developer needs to have at least protected access to the superclass means that the developer has a limited choice and needs to use open source code or own code. Furthermore, all methods are inherited, that means that some methods can be unnecessary boilerplate. (E.g. when stack inherits from list, add is unnecessary or might even lead to errors).\n\nDelegation, on the other hand, follows the principle of black box reuse. The developer does not need to know the exact implementation of the class he is using. The disadvantage of this is that code can't be directly reused, because the methods cannot be modified. The upside is that this is generally easier - non-existing implementation doesn't need to be overridden with empty functions unlike with inheritance.\n\nIn the context of smartphones, delegation makes sense when using OS interfaces. For example, when using Bluetooth in an Android app, the implementation of the standard library is often sufficient and it makes no sense or it isn't even possible to add new functionality through inheritance.\n\nA phone app might be using some sort of storage, which is most probably implemented with generics. A developer might want to specialize this storage for a certain data type and add some type specific functionality for their app - using inheritance.\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5584150,
      "meta": {},
      "text": "While inheritance allows implementing is-a relationships wherein all methods and attributes are implicitly inherited, delegation passes a method call to another object which holds the implementation (\"delegates the call\").\nAn advantage of inheritance is that new functionality can be easily implemented in the subclass by simply overriding parent methods or adding new ones - a disadvantage is that methods defined by the superclass cannot be removed which are potentially unwanted.\nOn the other hand, an advantage of delegation is increased flexibility. If someone desires to change the implementation of a call, this can simply be achieved by e.g. replacing the implementation one delegates its call to. A disadvantage of delegation is that implementing it is cumbersome in nature: Instead of having all methods inherited / delegated implicitly, every method needs to be delegated explicitly.\n\nIn the context of smartphones, an example for inheritance would be cameras. Given a phone has multiple cameras, e.g. a wide-lens camera and a normal camera, both inherit from a common superclass \"Camera\" which holds common functionality like processing the image which is beneficial because all cameras could be treated the same externally but internally have custom behavior by overriding methods.\nThe delegation pattern can be seen in the CPU which has multiple components, i.e. a media accelerator and a secure enclave. An external call to the CPU delegates the logic to the given component; I chose delegation because we can't model this using inheritance because 1) this isn't a is-a relationship and 2) we have multiple components and we can't extend multiple classes in Java.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5584362,
      "meta": {},
      "text": "The difference between inheritance and delegation might lie on, how many functionalities can be reused. Inheritance always enables the designed object to reuse ALL methods in the superclass(if the superclass is abstract, you must override all methods to implement them) While by delegation PART of methods in an existing object will only be reused if the designed object have requests. \nInheritance：\nAdvantages:\n1. easy to use. With a simple key word EXTENDS after the class name, inheritance is realized.\n2. easy to make some common changes(maintain codes). e.g. Once you change a method in the superclass, all subclasses would follow.\nDisadvantages:\n1. unneeded methods would also be reused(inherited).\n2. relatively high coupling. It means the changes in the superclass might be likely to casue the unwanted changes in the subclasses.\nDelegation：\nAdvantages:\n1. more flexible. You can reuse specific methods whatever you want by invoking it with the existing object instead of all methods in a class. \nDisadvantages:\n1. It might be time consuming, since an object instance must be created before invoking their methods.\n\nFor example, a smartphone system owns two classes to make sound as well as connect wifi, namely Audioplayer and WifiConnection. Now a music app bundled with this phone is to be developed. The implementation of playing music could be directly inherited from the Audioplayer class, since the class is to play sound. All methods in Audioplayer is needed. And it would be easy to debug if no sound is made(by checking the superclass Audioplayer). But for the Internet connection while playing music online, an instance of wifiConnection should be created. Because this app just needs success connection, namly connect(). Any other functionalities such as checkInternetSecurity() and serachWifi() would remain unused.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585820,
      "meta": {},
      "text": "As inheritance implies, our class of interest inherits from another class the functionality. New methods can be added in this subclass and methods from the superclass can be overriden. While with inheritance the class is implementing and running the functionality itself (partially using the superclass-functionality), with delegation the class of interest delegates, e.g. uses another class as well as their methods, to provide the required functionality.\n\nDelegation creates overhead as an additional object must be instantiated and its respective methods must be called. However, it is advantageous that you can easily switch which class is called if a new class provides more or better functionality. \nInheritance comes along with the advantage of being easily implemented and understood by the programmers. Also it is easier to adapt certain functionality to your needs as you can simply override and add methods. However, as you inherit all public and protected methods from the superclass, unwanted functionality can be part of our class. This might be a security issue.\n\nIn the context of smartphones delegating is useful if you want to add a new contact that has written you a message via WhatsApp. This contact should be stored in the smartphone's general contact-database It's recommendable that you simply call the class that deals with all the contacts on your phone to add him/her.\n\nInheritance is useful when sending a picture instead of a text-message on WhatsApp. All the functionality that is required to message a friend will be used to transfer the picture. Additionally, you need to add some functionality so that the device knows how to handle and display the picture.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585849,
      "meta": {},
      "text": "Inheritance is creating a new class derived from an existing base class, delegation is using functionalities of a class through an instance of that class. So in delegation, all you can know about the delegate is the functionalities that you actually use. And you can specify these functionalities in runtime unlike inheritance. But in inheritance, the child class takes the properties of the parent class so it knows all about the parent. \n\nAn advantage of delegation is that when you make a change in delegate, the reusing class doesn't have to change. Since their relationship is not an IS-A relationship, you can have more flexibility while making changes in reusing and reused classes. But, delegation is not supported by some popular programming languages. \n\nIn inheritance, you don't need to create an object instance to use a method of the super class. The method is just directly inherited to the subclass. But while doing so, there may be unnecessarily inherited properties from super class. This can affect the functioning of the program negatively.\n\nIn smartphones, we can use inheritance in storing media. \"Media\" can be an interface for portrait, live, panorama, square... photos and videos because there is a strong connection between them. Media interface will contain the common code in those classes and we can add new properties easily. \n\nIn smartphones, we can use delegation in sound implementation. There can be a sound class that has multiple methods that makes different sounds. We can create an instance of that class anywhere we need a sound, and then call the appropriate method. It's better to use delegation because we don't need every functionality of sound class. \n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5588059,
      "meta": {},
      "text": "Die Unterschiede zwischen Delegation und Vererbung sind folgende:\nDelegation benutzt Instanzen von anderen Klassen inerhalb der Klasse in welcher Methoden/Attribute von der anderen Klasse genutzt werden. Ein offensichtlicher Nachteil dieser Methode ist, dass das Instanziieren dieser Klassen in Objekte offensichtlich Ressourcen benötigt und die Performance negativ beeinflusst. Jedoch ist diese Methode in manchen fällen zu bevorzugen, weil sie einige ungewollte Nebeneffekte von Vererbung verhindern kann.\nBei Vererbung wird eine Unterklasse einer Klasse gemacht. Diese hat automatisch alle Methoden/Attribute der Oberklasse und der Oberklasse der Oberklasse, etc.. und muss auch nichts zusätzliches instanziieren. Jedoch kann auch ungewolltes vererbt werden.\n\nBeispiele mit Smartphones:\nWenn ich ein speziellers Smartphone5g in meinem Code haben möchte, welches alle Methoden/Attribute des normalen Smartphones hat, aber noch eine zusätziliche Methode z.B. connectTo5g() hat wäre das eine gute Gelegenheit, das Smartphone5g als Unterklasse via Vererbung zu implementieren.\n\nWenn ich ein Smartphone habe, welches aus mehreren Komponenten besteht z.B. Batterie, TouchScreen, Processor etc. die jeweils ihre eigene Klasse sind. Dann würde ich in diesem Fall Delegation benutzen und in der Klasse Smartphone jeweils eine Batterie, einen TouchScreen, einen Processor etc instanziieren und nur die Methoden der Klassen zur Verfügung stellen, die vom Smartphone genutz werden können sollen.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5590979,
      "meta": {},
      "text": "Inheritance is the case of sub classing from an already-defined class, or interface. Unlike delegation, the resulting class after inheritance will also contain all methods contained in the super class that can be directly accessed and called. In Delegation, we create a class with functionality that we desire (the Delegate), and, when we would like to use this method, the client will (unlike in inheritance) send a request that first goes through a receiver which will then itself make a request to the Delegate.\nDelegation is advantageous as some delicate functionality can be hidden from the user to prevent misuse or potential breaking of the functionality (i.e. when using a stack as a receiver for a list delegate). However, the extra instantiation of a receiver and delegate does mean that performance/cost is slightly increased\nInheritance is advantageous purely in its ease of use as we can directly call all methods we may want from the class we instantiate, however, this also means having access to methods that we don't necessarily need/want (i.e. the add/remove methods when implementing a stack inherited from a list)\n\n\nSmart phone inheritance:  texting with a smartphone\nAssuming some class \"Cell phone Network Communication\" as the already implemented super class, we can imagine inheritance as being the creation of an app which directly inherits from this, and as such gives access to all possible functionality- including likely undesirable functionality for the user, such as for example createRSAPublicKey() (if encrypted) and getHexBytes()\nDelegation can be imagined as an app such as Whatsapp which would be the receiver, communicating with the above mentioned super class, not allowing users to create their own public key, but giving access to functionality such as sendText() and so on\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593124,
      "meta": {},
      "text": "Difference between inheritance and delegation:\nIn inheritance, the methods and the attributes of the super class are passed on to the child class and they can be used directly from the child class. On the other hand, delegation sends an operation to another object of a class, reusing functionality of existing objects rather than classes. \n\nInheritance:\n+Advantage: It is usually supported by more languages in comparison to delegation\n-Disadvantage: Since the inherited methods can be freely used in the child class as well, they might allow the end user to do unwanted behavior by using methods that do not make sense in the context of the child class. \n\nDelegation:\n+Advantage: Unwanted behavior that can occur with inheritance is prevented, because we do not have to accept all the methods from the super class. We can prevent the user from using them by letting the user only use the methods we want, when the delegation object is not directly accessable by the user. (for example when its private)\n-Disadvantage: Instead of just using the methods directly from a class, we need to create an actual object instance of the class. That causes potential ineficency\n\nExample:\nInheritance: All smartphones have basic common functionalities. But each brand offers some additional different functionalities in comparison to other brands. So an inheritance example in the context of smartphones would be smartphones of the brands IPhone and Samsung being child classes of the Smartphone super class.\nDelegation: For example when we are opening a URL on our smartphone, this task delegated to a network server. \n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593344,
      "meta": {},
      "text": "Inheritance is a relationship that defines that one class should automatically also have all the attributes and methods of its parent class from which it inherits, given that these methods or attributes have one of the following access modifiers:  public, default or protected.\nDelegation is giving the task of performing something to another object by using this object as an instance variable and passing commands to that object.\n\nA disadvantage of inheritance is that it forces you to take all the methods available in the parent class, whereas with delegation you have the choice of using only the methods you require.\nAn advantage of inheritance is that it support dynamic dispatch to decide which of a range of overwritten methods should be used.\n\nA disadvantage of delegation is that a number of additional instance variables need to be declared and instantiated.\nAn advantage of delegation is that it can easily be changed at runtime and so remains more flexible in this regard.\n\nWith smartphones as a point of reference, inheritance can be thought of as any built in capabilities a smartphone has, that may build onto older versions of the phone and come standard when purchasing the phone, such as the camera and so on. Delegation would be any external services you can reach using a smartphone, either over the internet or through apps that can be installed through an app store, such as a banking app, for example.\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596160,
      "meta": {},
      "text": "The difference between inheritance and delegation is that the inheritance extending the super class in other classes, and the delegation uses the instances of the original classes in other class and reuses functionality.\nAdvantage and disadvantage of inheritance:\n+ facilitate dynamic polymorphism;\n- the changes in super-class can change the subclass;\nAdvantage and disadvantage of delegation:\n+  run-time flexibility;\n- not supported by most programming languages;\n\nExample for delegation:\nAs example I chose the Facebook-App and Facebook Messenger on smartphone. If the Facebook App is for the news feed, then the messenger is for messaging with friends. But both Apps have the account access and the list of Friends.\nExample for inheritance:\nFor Example Google Translate as App on smartphone, where I can translate my own text, but also I can translate the webpage in Browser. ",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596200,
      "meta": {},
      "text": "In delegation approach we catch the operation in the class, that we are currently implementing, and delegate it to another already implemented object using aggregation. The advantage of this approach is relative flexibility, because we create an independent class and can build it according to our personal wishes. The disadvantage is that an instance of an object, to which we delegate, has to firstly created, which can be sometimes expensive. \nOn the other hand in inheritance approach we inherit an existing class with implemented functionality and add new needed functionality to it. The main advantage of this is that it is straightforward to use, because all the functionality can be accessed directly. The inheritance is also supported by many programming languages. The big disadvantage of this is that the superclass can give us access to functionality, which interrupts the logic of our program or absolutely not needed. Further bad thing about this is that with changing the superclass we affect our subclass, what decreases the flexibility of our implementation. ",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596663,
      "meta": {},
      "text": "In Inheritance, A class which has a similar specification to the one needed is already implemented. the new Class then inherits from the simliar class. this has the advantage of being a straight forward and easy to use method of expanding one systems funtionallity. But using inheritance can, when used poorly or without caution, lead to the exposion of other methods, which may be undesired.\n\nIn Delegation, a class uses another class directly, trough a class for example, to call its methods and use their funtionallity. this is more applicable to many cases, but comes at an performance cost, since you need to instantiate a new Object from the class which brings the functionality, in order to use it.\n\nAn example for Inheritance would be the app icons. They all have a set size and open the app on activation, but their names and icons are individuell. These classes are inherited from the class which sets the parameters for an app icon, like size, position etc. who make the whole system compatible.\n\nAn example for delegation would be the keyboard on your smartphone. instead of every app designing  their own keyboard for the user to interact with it, they simply use the already implemented keyboard to make the user interact with their respective app.\n",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5591074,
      "meta": {},
      "text": "Java programming inheritance is the process by which one class gets the properties of another.  That is, a new class called a derived or child class inherits the attributes and behavior of an existing class called a base class or superclass or parent class.\nAdvantage-Inheritance avoids the re-writing of all the code again and everything can be accessed via super call method.\nDisadvantage-Sometimes in instance by inheriting a very long code,you might also forget some methods that were in it.\nExample-A parent class Phone is inherited by Android phones and Iphones.\n\n\nDelegation may be an alternative to inheritance.\n  Delegation means using an object of another class as an instance variable and forwarding the message to the instance.\nAdvantage-It is better than inheritance for many cases because it makes you to think about each message you forward, because the instance is of a known class, rather than a new class, and because it doesn’t force you to accept all the methods of the super class: you can provide only the methods that really make sense.\nDisadvantage- It is also sometimes a bit too much because of re writing the same code again and again instead of inheriting itself.\nExample- A class Phone whose code we repeat in class Android phones and Iphones .",
      "score": 41.7,
      "language": "ENGLISH"
    },
    {
      "id": 5591364,
      "meta": {},
      "text": "Difference:\n1. The original intention of these two modes is to improve the reusability of the code, but the actual specific implementations are different.\nDelegation: An object needs the function of another object, so the object is captured and sent to another object to make a function call.\nInheritance: Obtaining all elements and methods of a super class\n2. Delegation can be thought of as an object-level reuse where inheritance is a class-level reuse.\n3. If the subclass only needs to reuse a small part of the methods in the parent class, it can be achieved through the delegation instead of using inheritance\n\nAdvantage of delegation:\n1. flexible: can be used overall.\n2. suitable for reuse of easy call.\nDisadvantage:\n3. inefficient for duplicate reuse of call.\nAdvantage of inheritance:\n1. easy to add functionality in the subclass.\nDisadvantage:\n1.inefficient when only small reuse is required.\n\nExample for Inheritance：\nTouch operation on touch screen. It is a simple part of functionality for a smart phone. It will be reused many of time during the whole use of a smart phone. It must be a iheritance because in this case using delegation will create a lot of instance which is bad for RAM.\nExample for Delegation:\nDownload is another operation which will be reused often. For IOS, all the download operation will be delegated to the App Store to deal with, which is an simple reusable task and make download in IOS easy to use.\n\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5592722,
      "meta": {},
      "text": "The software principle known as inheritance describes the process of passing down attributes and methods of already implemented classes to so called child classes. Delegation on the other hand simply passes information to an another class and, contrary to inheritance, isn't hierarchical. By the usage of delegation unnecessary code can be left out if the new class only needs a fraction of it. The drawback would be the creation of several delegation methods which could be avoid by using inheritance.\n Should the new class be an extension of the old one it is more advantageous to use inheritance. By using inheritance whole segments of code can reused directly. It could be overkill to implement a new class just for one functionality.\nA suitable example for inheritance would be a music app on your smartphone. There are different types of media which will can be consumed through the app, for example Podcasts music or white noise. Those all require some shared functionality like playing and pausing the media or adding it to your favorites. On the other hand skipping would be implemented differently because songs should be skipped entirely, while when listening to podcasts you would want to only skip small time intervals to avoid boring passages.\nSticking to the example of a music app, the functionality of liking or sharing songs or podcast should be the same and doesn't require any new implementation. Therefore delegating this to a separate class simplifies the code and allows for better reparability and ease of service.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595982,
      "meta": {},
      "text": "The main difference between inheritance and delegation is that inheritance \"gives\" its subclasses (children) functionality that they can use and can therefore reduce code duplication, while delegation has some sort of a connection to another component (class) and calls (delegates) functionality that the component has implemented. You can, therefore, decouple systems and prevent \"bleeding\" of information about implementations.\n\nIn smartphones, the CPU (central processing unit) delegates the task of audio management to another component that has access to the microphone or speaker. The audio management can therefore be specific to the actual phone with a specific microphone or speaker, while the CPU can be used on other smartphones with different hardware components.\n\nBut other things like graphics are implemented in the CPU because delegating it to another component would introduce too much latency and the graphics part needs direct access to the implementation of the CPU (e.g. calculations from the processor).",
      "score": 25,
      "language": "ENGLISH"
    },
    {
      "id": 5596239,
      "meta": {},
      "text": "Inheritance is when we create a new class which inherits functionality from another class. Meaning, we have subclasses that can additionally offer new functionality. Delegation is when we forward an operation to another object in which the functionality is already implemented. The difference is that in inheritance we're reusing the functionality of a super class and in delegation - of an another object. \n\nAdvantages of inheritance: it is supported by many programming languages and it is easy to use; also it is straightforward to implement new functionality. A disadvantage may be that if you change the parent all the subclasses have to change as well.\n\nAdvantages of delegation: The delegate can be easily changed during runtime and you don't have to accept all the methods of the parent - just the ones you need. A disadvantage may be that is not supported by many programming languages and it doesn't support dynamic polymorphism.\n\nExamples in the context of smartphones:\n\nIf we look at the models of the latest iPhones, we can see that there is inheritance. For example, iPhone 13 Pro Max inherits from iPhone 13 Pro and expands the functionality of the model (the screen and the battery is bigger). Also, iPhone 13 Pro itself inherits the normal iPhone 13 (bigger screen and battery, one more camera,  better GPU).\n\nAn example for delegation in the smartphones is again iPhone. Some of the models are using the screens of Samsung, meaning that they are using another object's functionality (in this case - another brand's).",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596679,
      "meta": {},
      "text": "Inheritance and Delegation are alternatives for reusing code among multiple classes. By using inheritance the subclass is simply a subclass of the superclass with some additional functionality, while by using delegation, your delegating class contains a reference to an instance of the superclass and delegates the method calls to the superclass. \nThe advantage of delegation is run-time flexibility, in other words the delegating class can easily be changed at run-time, delegation necessitate on the other hand instantiating an object of the superclass, This may be to inefficient if the object is complex and its instantiation is expensive.\nBecause inheritance allows the subclass to access all the methods of the parent class, the\ninherited operations might exhibit unwanted behavior. While delegation is more complex to implement, inheritance is Straightforward.\nIn the field of smartphones, such as mobile OS due to backwards compatibility the software is developed in general applying Inheritance and Delegation to allow the older generation to catch up with new features. (Not By Apple =D ) \n",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5584756,
      "meta": {},
      "text": "Inheritance is when subclasses get methods from a super class while delegation is when you send another class your data and it does the stuff for you. An advantage of inheritance is that you can overwrite (a part of) the code/methods you want to change, an disadvantage is you can have methods you don't like. An advantage of delegation is that you can use methods from multiple classes instead of only one super class, a disadvantage is you have to define own methods that are only used to call another method in another class when you wanna change part of the method.\n\nOne example for inheritance in the context of smartphones  is when you wanna use an external library for example for internet connection you usually use inheritance as some class inherits an library so you can manipulate certain aspects.\n\nOne example for delegation in the context of smartphones is the use of for example the camera as your program can communicate with its software to order a picture.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585626,
      "meta": {},
      "text": "Inheritance refers to the subclassing from an implementation, hereafter referred to as the \"superclass\". This allows for the reuse of the already implemented functionality from the superclass. The subclass may extend the superclass with additional functionality or override an already defined functionality. \n\nDelegation on the other hand, as its name already suggests refers to the practice of sending an operation to another object where it has already been implemented through method calls. \n\nWhile delegation is generally more flexible than inheritance, one could argue that, due to object instantiation,  it is also more inefficient. Inheritance has the benefit that it is easy to use, but it may expose some unwanted methods of the parent class and changes in the parent class can force the subclass to change as well, making it less flexible. \n\nIn the context of smartphones, I will be giving examples from Apple's UIKit Framework. Apple chose to implement the delegation pattern in their Framework in order to allow App developers to create their custom implementations for certain actions. As an example the didSelectRowAt delegate method allows the App developer to write custom operations in order to react appropriately when the user presses a UITableView row. \n\nApple allows developers to implement their own UI Elements like e.g. custom UIButtons through inheritance. The custom button that inherits from UIButton may have additional functionalities (e.g. keeping track of whether the button is selected or not). As we are not afraid of exposing unwanted methods from the parent class and the parent class is not prone to changing (given that it is made available through the framework) Inheritance makes perfect sense in this example.\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596105,
      "meta": {},
      "text": "Inheritance, also Vererbung hat an sich schon einen viel größeren Umfang als nur Delegation, man kann also gleich mehrere Funktionalitäten aus der super-Klasse übernehmen, aber übernimmt natürlich auch funktionen die vielleicht doch eher nur die obere Klasse besitzen sollte, daher ist Delegation flexibler bzw. spezifischer einzusetzen, wenn z.B. nur eine Methode an einer Stelle benötigt wird, aber ist natürlich auch von Nachteil, wenn immer wieder auch verschiedene Methoden aufgerufen werden müssen und jedes mal auch ein Objekt instanziiert werden muss. Als gutes Beispiel für Vererbung bei Smartphones wäre in einer Messanging App die Funktion zum senden einer Nachricht, da wäre es sinnvoll immer für die verschiedenen Chat-arten (Gruppen-Chat, verschlüsselter Chat, unverschlüsselter Chat) trotzdem ein Objekt zu haben von dem die Grundlegenden Funktionen geerbt werden können (also z.b. das letztendliche Absenden der Nachricht unabhängig vom verschlüsselten oder unverschlüsseltem Inhalt), während das hinzufügen eines Kontaktes, aus dieser Messanging App heraus, besser mit Delegation zu lösen ist, indem man zum Kontakt Buch weitergeleitet wird",
      "score": 66.7,
      "language": "GERMAN"
    },
    {
      "id": 5596638,
      "meta": {},
      "text": "In Inheritance is when a class is to be implemented that has almost the same functionality as another class that already exists and therefore extends the definition of the existing class by the new functionality.\n\nDelegation is when the functionality of existing objects are also reused but with a different approach namely by invoking a functionality of the newly created class which then internally is passed onto a object of a existing class that processes the operation with the expected results.\n\nThe Advantage to use Inheritance is that new Types of subclasses with new functionalities are easily implemented. The disadvantage is when for example public methods of the super class should not be available publicly.\n\nThe Advantage to use Delegation is that there are less constrains than using Inheritance but with the trade-off that objects need to be instantiated which works against efficiency.\n\nSuppose we wanted to introduce new touch operations. For Example scroll with two fingers. And suppose there already exists a simple type touch operation. Then if it would be implemented as a Delegation, there would be a considerable speed trade off although touch operations must be quick.",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5585985,
      "meta": {},
      "text": "Inheritance - super class is already implemented and does almost the same as the new class we need. We use (override) methods that are already implemented in superclass.\nDelegation - reuse functionality of existing software or object using methods of this object. We instantiate new object of existing class in new class and call its methods.\nInheritance is easy to implement . Many programming languages supports inheritance. It is straightforward to use.\nBut methods of superclass that we do not need can lead to unwanted behavior and changes in superclass lead to changes in new class too, even if we do not want it.\nDelegation is more flexible, but not so efficient.\nIn context of creating new smartphones developers can do it reusing old techniques. That means with inheritance or delegation. Using inheritance of old smartphones it can be very efficient, because there is no need to instantiate another objects. It is easier to implement. But if there are some functionality in old smartphones that developers do not want to have in the new version, that can lead to unwanted consequences, because new smartphones will have that functionality too. With delegation developers have such problems not. But it will cost more. I would choose inheritance if there are no old functionality we want to remove. Otherwise I would choose delegation.\n \n",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5586301,
      "meta": {},
      "text": "Implementation uses a IS-A relationship for reuse, which means, that the functionality in the superclass are reused in the subclasses. An advantage is, that you can pass a whole class to an existing API. A disadvantage is, that you have to pass all the methods to the other class, which costs more and if you want to change something in the superclass, then there will be changes in the subclass. \n\nOn the other hand, delegation uses a HAS-A relationship, which means, that the duty is simply passed off (delegated) to an other object. An advantage is that you don't have to override the methods and you don't have to delegate all the methods and functionalities. Disadvantage is that it can be inefficient because an object instance needs to be created. \n\n",
      "score": 75,
      "language": "ENGLISH"
    },
    {
      "id": 5589461,
      "meta": {},
      "text": "Inheritance is a design where an object takes all the properties and methods from another class as a base, which can be extended.\nDelegation is just forwarding some duty to another instance of a class.\n\nAdvantage of delegation: no need to have all the properties of the base class\nDisadvantage of delegation: often not directly supported by many object oriented programming languages.\n\nAdvantage of inheritance: does not only mimic behaviour but also attributes.\nDisadvantage: less runtime-flexibility than delegation\n\nSmartphones Inheritance:\n1 Base class Smartphone with methods like callNumber();\nMore classes like Iphone6s etc which derive from Smartphone and thereby cann also access base functionality and also add new features.\n\nSmartphones delegation:\nOne Smartphone class with all methods of every phone.\nMore classes like Iphone6s. The sub classes can now implement different methods and delegate the funcitonaltiy to Smartphone. This prevents duplicate methods.\n\nI would choose both, inherit the important attributes and delegating the functionality, to prevent duplicate code fragments.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589799,
      "meta": {},
      "text": "Inheritance describes the process of subclassing an implementation. This is great when you implement a class that does almost the same thing and it is straightforward to use, f.e when you have wanted to make a premium version of a smartphone app, you can easily transfer all the basic features (normal version) and add extra to the subclass (premium version). The problem comes when you have features in the normal version, that you don't want in the premium version (subclass), you run into the problem of creating unwanted behavior.\n\nDelegation is the process of working on an operation in another object, where the functions to deal with that operation are already implemented. It is more flexible but has the problem of being less efficient.  If you want to handle how a phone handles different types of audio output, i.e. calls, music, etc. you would use delegation to deal with the different types because inheritance could lead to unwanted behavior when implementing it.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593574,
      "meta": {},
      "text": "One of the most important activities during object design is Reuse, which can be realized through different techniques such as Delegation and Inheritance.\nInheritance (white box reuse) is realized after defining the taxonomies, so that a new class is created by subclassing. The Subclass has then direct access to the functionality of the super class and can offer more.\n+ this is an easy implementation which is straightforward to use and supported by many programming languages.\n- but Classes and objects created through inheritance are tightly coupled so a change in the parent class can force the subclass to change as well.\n-> we should use inheritance when we have an obvious is-a relationship (subclass and superclass of the same type)\nexample :  a smartphone is a device so it can extend a parent class device (containing attributes like name, device_id , operating system...)\n \nDelegation(black box reuse : composition or aggregation) is the technique of creating a new class through the aggregation of the existing classes. That means creating an instance and calling methods on it where already implemented.\n+ in opposite to inheritance classes and objects created through composition are \nloosely coupled meaning that you can more easily change the component parts \nwithout breaking your code (more flexible solution)\n- but as the name black box reveals this can be more inefficient as the new class does't have direct acess and an object instance needs to be created and delegate the method and wait for the result.\n-> when designing objects around what they do and when having a has-a or consists of relation than we should use delegation.\nexample :  a smartphone consists of a battery and a speaker for example and to be able to reuse their functionalities we can model them as delegate of the class smartphone to instantiate them and invoque methods on them",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594289,
      "meta": {},
      "text": "Inheritance refers to the reusage of an existing functionality in superclasses and may offer new functionalities on top (white box reuse). Delegation refers to aggregation and composition (black box reuse), in which another class offers an aggregated functionality of existing classes, which do not have to be a superclass. It is called black box reuse and whitebox reuse, because for aggregation and composition the source code is not required to know, what the reused functionality is doing, whilst for white box reuse it is required to look in the source code. Therein delegation is seen as a relationship between classes, that doesn't require to reuse all methods and functionalities of the related class, which is an advantage. However, a disadvantage is that the code and class structure is getting more complicated. Inheritance has the advantage to be very simple and understandable in terms of class structure, however, a disadvantage is, that all public methods and functionalities of the superclass are inherited and can be reused, which may impose security.\n\nFor smartphones a good example would be the reuse of functionalities between different IPhone generations, which all share the functionality, that they are a phone (is-a relations) and have basic functionalities like calling, texting, internet search and unlocking, but the basic functionalities have extended functions like face recognition for each generation. Delegation would make sense, if there is another device like a smart watch, that is not directly related to the smartphone, but accesses certain functionalities of the related phone, like calling or listening to music.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595423,
      "meta": {},
      "text": "Im Fall der Vererbung (Inheritance) stehen die beiden Klassen in einer Vererbungshierarchie zueinander. Bei dieser Form der Verbindung werden alle Methoden der Superklasse übernommen. Durch die Vererbungshierarchie besteht der Vorteil, dass ein Objekt der zweiten Klasse als Methodenparameter übergeben werden kann, in dem ein Objekt der ersten Klasse erwartet wird, da beide in einer Vererbungshierarchie zueinander stehen. Nachteilig ist die Tatsache, dass in der Vererbungshierarchie stets alle Methoden weitergegeben werden, auch wenn dies nicht benötigt / erwünscht ist.\n\nIm Gegensatz dazu werden bei der Delegation Aufrufe auf der ersten Klasse aktiv von dieser an eine INSTANZ der zweiten Klasse weitergeleitet. Die zweite Klasse wird hierbei mittels einer Komposition als Attribut gebunden. Damit kann bis zur Laufzeit offen bleiben, welches Konkrete Objekt der Klasse zwei verwendet wird.\nDer Vorteil besteht dabei zunächst darin, dass die weitergeleiteten Anfragen gefiltert werden können, somit können bestimmte Methoden abgeschirmt werden. Nachteilig ist, dass ein bei dieser Konstruktion kein Objekt der zweiten Klasse als Methodenparameter übergeben werden kann, in dem ein Objekt der ersten Klasse erwartet wird.\n\nDie Kommunikation einer App für die Beurteilung des aktuellen Fitnesszustands mit den einzelnen Sensoren sollte über eine Delegation realisiert werden, da so die auf jedem Smartphone unterschiedlich vorhandenen Sensoren zur Laufzeit an die App angebunden werden können.\n\nDie Datenformate  für den Versand von verschieden kodierten Texten mittels einer App zur Übertragung sensibler Textnachrichten sollten in einer Vererbungshierarchie stehen, um beim Empfang verschiedene Typen durch die entsprechenden Methode entgegennehmen zu können.\n",
      "score": 83.3,
      "language": "GERMAN"
    },
    {
      "id": 5585009,
      "meta": {},
      "text": "In a system, there are separate objects with separate purposes and tasks. However, they often need to be able to execute tasks that are not yet implemented. In this case, there are two common solutions: delegation and inheritance. \nDelegation is when an object calls a method in a separate object to process the task. This a common solution and is used in many systems because it is flexible, allows abstraction, and keeps the system simple.\nOn the other hand, inheritance solves the same problem by implementing the methods needed to process the task on the original object. This allows the object to be able to process the task without creating an instance of a delegate, which means it can be eventually more efficient. Additionally, further modifications can be applied to the new implementation, which might be specific for its use in this system.\n\nAn example that illustrates this difference could be a a web application that is developed to be used on smartphones. Practically every smartphone has a web browser that can run a web application, but there's also the possibility to implement a new browser-like environment that can run the application. Using the default web-browser would be a case of delegation, because the display of the application is a task delegated to the browser, while implementing a new environment would be a case of inheritance, because a new environment is developed that implements the methods of the other system. I chose this example because it is a possible real-world scenario that gives a clear example of an application of both concepts and fulfills the example constraints. ",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5586153,
      "meta": {},
      "text": "Inheritance is used in situations where objects are in an \"is a\" relationship and a more concrete/specialised implementation of an existing general concept needs to be created. Delegation, on the other hand, also reuses an existing implementation, but the new class is less related to the existing class. One advantage of inheritance over delegation is that most programming languages inherently support this feature and therefore provide efficient implementations and optimisations for inheritance. Delegation, on the other hand, provides more control over the implementation, as only the methods that are actually used need to be delegated.\nIn the context of smartphones, it is possible to model a notification system with one class for a general notification and several subclasses for specialised notifications. Inheritance is a good choice in this example because each concrete notification is just a special case of a general notification and therefore inherits all its properties and functionalities. One case where dekegation could be used in the notification system is in the initiation of notifications. Different apps on the phone could delegate their notification to a central notification service. Delegation is the right choice in this situation because they do not have many functions in common.",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5587465,
      "meta": {},
      "text": "Inheritance is the simple concept where a class inherits the methods and variables of a superclass as the subclass needs the code from the superclass but with additions. There can be many subclasses to a superclass and this allows for code reusability instead of having many classes with the same variables and methods. But in delegation instead of inheriting a class, u make the class a delegate that holds variables and methods that are used by many classes and simply use the object created within the classes to reuse code. A pro for each would be that delegation is very flexible compared to inheritance but inheritance is generally easier to implement and straightforward to use. A con for both would be that delegation can be inefficient due to creating an object for the delegate and for inheritance it might expose unwanted methods of the superclass to the subclass. ",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5591967,
      "meta": {},
      "text": "Allgemeine Unterschiede: \nBei inheritance wird eine subclass erstellt, die alle methoden und attribute von der superclass erbt. \nBei delegation wird ein Objekt einer anderen Klasse als Instanzvariable verwendet und alle Nachrichten werden an die Instanz weitergeleitet. man muss bei delegation nicht alle methoden weiterverwenden sondern kann nur die nutzen, welche echt verwendet und gebraucht werden. \n\nGeneralization: geht vom bottom zum top (von den subclasses zur superclass)\nSpecialization: geht vom top zum bottom ( Gegenteil von Generalization)\n+ Es ist möglich die Funktionalität der superclass weiterzuverwenden wenn man white box reuse verwendet kann man zusätzlich neue Funktionalität zu der neuen class hinzufügen\n+ einfach zu verwenden und wird auch in anderen Programmiersprachen (abseits von java) unterstützt\n- gibt ungewollte methoden der parent class frei\n- wenn man die parentClass verändert muss man auch alle subclasses verändern, aufgrund der Beziehung und daher ist es komplex Änderungen zu machen, die neue Compiltion brauchen\n\nExample: \nEin smartphone hat viele verschiedene Components, die alle über einen haupt prozessor laufen. alle componenten können informationen und daten vom prozessor fordern und empfangen. \n\nDelegation: \n+ erlaubt dynamic binding und die wiederverwendung von implementierter funktionalität in einem existierenden objekt\n+ verglichen mit specialization ist delegation flexibler, da obekte in runtime ersetzt werden können und keine neue Kompilierung fordern solange der Typ gleich bleibt. \n- manchmal ineffizient verglichen mit Inheritance, weil objekte encapsulated sind und daher complex\n\nExample: \ndas smartphone display zeigt während das smartphone läuft verschiedene daten/informationen und reagiert auf eingaben über touchscreen. \nDiese Informationen sind nicht nur für den nutzer von relevanz, da sonst keine Reaktion auf eingaben kommt sondern auch für den prozessor, da dieser versucht den RAM oder cpu kerne mööglichst optimal zu nutzen. Daher werden verschiedene Informationen gefangen und den anderen objekten in dem system gesendet. ",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5593990,
      "meta": {},
      "text": "Inheritance in the context of classes is when one class also referred as child class inherits properties from another class called parent class. Whereas delegation means to delegate/transfer a task to another class. This can be achieved be instantiating the class and calling it's methods within the other class. The advantage of delegation is that only the methods needed are called whereas with inheritance often unused functionality is inherited which is a disadvantage. Another advantage for delegation is that multiple delegations are possible. On the other hand a class can only inherit from one other class.\nAn example for delegation in the context of smartphones would be the tool bar which can be accessed from everywhere and delegates multiple tasks to different system settings like the flashlight, Bluetooth or Wi-Fi settings. \nAn example for inheritance could be the camera which can be accessed from the lock screen. It inherits the functionality from the camera app without the access to the library which only can be accessed when the phone is unlocked.\n",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5593996,
      "meta": {},
      "text": "Differences \n\nDelegation                                                                                                                                                                               \n- The component that will be reused in a class is achieved through invoking a certain operation or methods ( delegation) from an object of another class\n- The components that can be reused are only the \"public\" components\n- The reused functionality or method can not be implemented differently in the class that reuse this functionality\n- To reuse the components that belongs to another class, an object of this other  class must first be made or instantiated \n\nInheritance \n- The component that will be reused in a class is achieved through inheriting the superclass' methods and fields\n- The components that can be reused are only the \"protected\" and \"public\" components\n- The reused functionality or method can be implemented differently in the class that reuse this functionality\n- To reuse the components, another object must not be instantiated, because in inheritance the reused components are already a part of the reusing class\n\nAdvantage & disadvantage\nDelegation\n+ It is more flexible, in a way that not all components, that could be reused, must be a part of the reusing class\n( i.e. we can choose which components we want to reuse and which components we don't want to reuse )\n+ It can prevent, unnecessary or unwanted reusable components to be accessed or to be used\n- For every reused components, we need to instantiate the object, that has this components\n\nInheritance\n+ To reuse components, it isn't necessary, to instantiate an object of another class\n+ For reusable functionalities ( methods ) and certain reused fields, the reusing class can change these depending on how the reusing class will use these components\n+ It can prevent copy code, if there are many classes, that implements the same functionality\n- Unnecessary or unwanted reusable components will also be available in the reusing class\n\nSmartphone example:\nIn WhatsApp we can send a picture to another user. This picture ,that will be sent through WhatsApp, must first be accessed through the gallery. And in this case, it is better to use delegation, where the WhatsApp invokes the method \"getPicture\" on the gallery. The reason is because the WhatsApp needs to reuse only certain components ( not all, for example the WhatsApp doesn't need to reuse the gallery's method \"changePictureName\"  ) of the gallery. Therefore to achieve this flexibility ( choosing only certain reusable components to be reused ), delegation should be used. \n\nThe gallery contains gallery objects such as pictures, videos, and audios. And because the name of all of these objects can be changed, then the method \"changeName\" should be implemented in the class gallery object, which has picture, video and audio as its subclass, so the changeName method could be inherited by the subclasses or in other words, it is better to use inheritance in this case. The reason for that is, we should prevent copying the same code or functionality in our system and it is clear, that this could for example be achieved through inheritance. \n\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596455,
      "meta": {},
      "text": "The difference between inheritance and delegation is that by using inheritance a new class inherits all functionalities of a different class and can be extended to include new functions or overwrite some of those while when using delegation the new class instantiates or is given an instantiated object of the class/es whose functionalities they want to use.\n\nAn advantage for delegation is that functionalities of the instantiated object can be restricted to those needed so that no unwanted functionalities are exposed, a disadvantage is that delegation is not directly supported in most object-oriented programming languages unlike inheritance.\n\nAn advantage for inheritance is that it can easily be used to extend a class with new functionalities however a disadvantage is that a class can only inherit from one other class and is thus more restricted than with delegation.\n\nAn example in which an inheritance pattern might be used is an smartphone app that provides an enhanced calendar. It might contain optical changes and extended functionalities but the core functions of the standard calendar should all still be available. Since all of the functionality of the reused class is needed and only needs to be extended inheritance fits best here\n\nAn example in which the delegation pattern might be used would be a smartphone app that can be used to make notes and create weekly planners. The app might use parts of the standard calendar and notes functionality but might not want to reuse all of those and instead use them as smaller parts in the app which makes delegation the better fit.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5586381,
      "meta": {},
      "text": "Inheritance is a concept in object oriented programming in which attributes and methods that are used by multiple classes are combined in one super class which all subclass derive from. Therefore they can all access the same method and attributes in the super class. Therefore the model is more understandable, more reusable and it is easier to modify and extend. The disadvantages of inheritance are the possible exposure of methods from the parent class as well as the fact that changes in the parent class can force the subclass to change as well.\nDelegation on the other hand reuses the functionalities of existing objects by instantiating them and calling methods of already existing objects. Delegation is in general more flexible than inheritance  but it might also be more inefficient because on object instance needs to be created.\n\nExamples for both concepts in the contex of smartphones could be the operating system Android for inheritance. All the apps that are developed for smartphones are made on the basis of Android and therefore from the beginning on all apps can use the basic functionalities of Android and don't have to code them themselves again.\nAndroid can also be an example for delegation because in other parts when an app wants to use a basic function of the system it just calls it to execute the function which is what delegation is all about.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5586681,
      "meta": {},
      "text": "Inheritance uses implements, which means it has a super class, while delegation reuses the same code through an object. Inheritance can be problematic when changing the name of the super class, however it is easier to use. Delegation is more easily adaptable for situations, as it can also be understood from the problem of inheritance. But it can be more inefficient. \n\n-I have an e-mail system, however I need to have a smartphone:\nIf I create a new E-Mail System Object in my Smartphone Code, Smartphone would be delegating this feature to the e-mail system. through this object we can receive mail, send mail or delete mail. The second option would be that the Smartphone implements its own send, receive and delete mail methods by inheriting it from a super class mail system.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5587841,
      "meta": {},
      "text": "What is the diffrence. \nIn inheritance you take the functionallity from one class by writing a new class that inherits all the methods and attributes from the super class. U therefore reuse the already implemented functionallity from the superclass and extend by the new functions you want the class to have. In short you extend a class by overriding existing operations. \nIn deleigation you also use the functionality from already existing objects however you call them using instantiation and method calls instead of letting the new class inherit all the functions. In deligation three major objects are involved, the \"Client\" which calls the \"Reciever\" who delegates to \"Delegate\".\nIn short you catch a operation and send it to another object.\n\nDelegation is more flexible, however might be more inefficient, because an object instance needs to be created.\n\nInheritance is straightforward and easy to use, its supported by many programming languages and its really easy to implement new functionality. However the subclass is really depended on the super so therefore any change in the superclass can effect the subclass and force it to change aswell.\n\nA good example for inheritance are the smartphone operating systems, exspecially Anroid. Then stock android would be the superclass where as all the diffrent implemenations from each companys like Samsung, Oneplus etc. which build their version of android upon stock android the childclasses.\n\nA good example for delegation would a Smartphone app webapp. Your smartphone would be the client calling the Server who would then be the reciever which delegates you then to your called services, (F. ex Google Maps)",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589069,
      "meta": {},
      "text": "Inheritance is used when an implemented class has similar attributes etc. as the desired new class. The new class - the \"child\" class - takes on the properties (attributes + behaviour) of the \"parent\" class. An advantage is that its easy to implement and understand. Disadvantage can be that the child classes takes on unwanted attributes of the parent class.\nAn example could be the flash light. Every smartphone has the option to turn on the flash light on/off. The camera uses the flash light in the dark basically turning it on/off again. So the camera flash light inhertainced the basic functions of the flash light as there is nothing more to it. \n\nDelegation means to pass on a specific \"duty\" to someone else. An already implemented attribute is reused in the new class. Advantage is the high flexibility, but it is more inefficient as a new class has to be created. \n\nAn example could be the general camera \"app\" in a smartphone. E.g. an iPhone camera has several different options (portrait, landscape, brightness etc.). But for another app, the camera function is often limited. E.g. taking a new profile pic in a new app. For this instance the camera function is limited maybe to flash. So the basic camera delegates specific functions to the camera option in the apps. \n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593131,
      "meta": {},
      "text": "Inheritance is a process, when subclass(derived or child class) takes the properties of superclass(parent class).\nDelegation is simply passing a duty off to something else. In delegation we have: Client, Receiver, Delegate.\nClient calls Receiver, which sends request to the Delegate, which executes request. So here, we cath an operation and send it to another object. Actually, delegation is better in some sense, because it doesn't force a subclass to accept all methods of superclass, which is impossible in case of inheritance. However, delegation isn't supported by most Object Oriented Languages in contrast to inheritance.\nFor example, every smartphone has an operating system, for Apple it's IOS, for Samsung Android. Here we can say that IOS and Android delegate needded functions of operating system because they don't use all functions provided by OS, only neccessary ones and they functions differ from each other.\nAlso, for instance, Apple and Samsung offer a wide range of smartphones: e.g. Iphone 13 Pro, Iphone 12, Iphone XS MAX, Samsung Note 10, Samsung A20 etc. So it's an example of inheritance.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593401,
      "meta": {},
      "text": "Inheritance vs Delegation:\n\nWith inheritance, you reuse a class by having it be a super-class of the class you want to implement, this is very straightforward to use and is supported by many programming languages, nevertheless unwanted functionality might be inherited as well.\n\nDelegation on the other hand catches an operation in the component and sends it to the object of the reused class, this is very flexible and makes sure you only get the needed functionality, but it is more inefficient since you need to instantiate an added class.\n\n\nSmartphones:\n\nInheritance → Every message on screen, no matter the app, might be inheriting from a common super-class given in the operating system, used since message has no unwanted functionality that would be inherited.\n\nDelegation → notifications of an app might be delegated to an object given by the operating system, since the flexibility of not having every function of a notification might be beneficial to special notifications.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593523,
      "meta": {},
      "text": "Delegation is a other kind of inheritance for using the same code among multiple classes. Inheritance uses the \"is a\" relationship for reuse. Delegation uses the \"has a\" relationship for reuse. Generally delegation means an object needs the functionality of another object, so the object is captures and sent to another object for a feature call. Inheritance means to gain the attributes and methods of a base class. \nFor example ",
      "score": 16.7,
      "language": "ENGLISH"
    },
    {
      "id": 5595772,
      "meta": {},
      "text": "Inheritance: \nIt's the process in which a superclass (parent) shares its behaviors and properties (methods, attributes) with a subclass (child). The main disadvantage is that inheritance forces the subclass to acquire all methods belonging to the superclass, even if some of them might be useless to the child class. The advantage is the possibility to reuse code and not repite several times the same structure for each subclass.\n\nFor example, in the context of smartphones, assuming \"iPhone\" is a superclass (with certain given attributes and methods), all smartphones within the iPhone spectrum (iPhone X, iPhone 13, iPhone 11, etc) have the same functionalities as the original \"iPhone\" superclass but with some additional differences (design, characteristics, iOS version, etc).\n\nDelegation: \nIt's a process in which you forward a command or message to an object of another class (instance variable - delegate). It can be an alternative to inheritance. Its main advantage is run-time flexibility because the instance variable can easily be changed at run-time. The disadvantage is that it doesn’t facilitate dynamic polymorphism, and it is not supported by most popular object-oriented languages.\n\nFor example, within smartphones, we could have an initial interface called \"Files\" implemented by the different files stored in the device (\"Doc1\", \"Doc2\", etc). Methods like openFile(), deleteFile(), etc are part of interface \"Files\". However, a delegator class called, for instance, \"FileManager\"  could be created to delegate the implementation \"File\" and execute its methods across the other files.\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595877,
      "meta": {},
      "text": "Der Unterschied zwischen inheritance und delegation ist, dass inhertiance die Funktionalität einer vorgegebenen Klasse komplett übernimmt und für seine Zwecke verändert, während delegation nur die Funktionalität einer bestehenden Klasse wiederverwendet, die es für seine Zwecke braucht.\n\nEin Vorteil von inheritance ist, dass man leicht neue Funktionalität durch das Einfügen einer zusätzlichen Unterklasse bereitstellen kann. Ein Nachteil von inheritance andererseits ist, dass immer alle Methoden der Oberklasse übernommen werden, was dazu führt dass unnötig Methoden übernommen werden und dass Änderungen in der Oberklasse auch immer die Unterklasse betreffen können.\n\nEin Vorteil von delegation ist, dass es im Allgemeinen viel flexibler ist und man so schneller und leichter kleine Änderungen(z. B. neue Methode, Methode umbenennen, etc.) durchführen kann. Ein Nachteil von delegation ist, dass potentiell ein Mehraufwand beim Programmieren entsteht, da eine Objektinstanz jeder Klasse, aus der Methode bezogen werden, erstellt werden muss. Dadurch kann es auch zu einer verringerten Effizienz kommen.\n\nEin Beispiel für inheritance im Zusammenhang mit Smartphones ist die Option seine Sprache in den Einstellung beliebig zu wählen. Je nachdem welche Sprache man wählt, wird von der jeweiligen Unterklasse der benötigte Text für jedes User Interface, in der gewählten Sprache angezeigt. Alle anderen Funktionalitäten bleiben aber gleich, weshalb sich inheritance so gut dafür eignet.\n\nEin Beispiel für delegation im Zusammenhang mit Smartphones ist ein Videoanruf, welcher die Funktionalitäten eines Sprachanrufes wiederverwendet, diese dann mit der neu hinzugefügt Videofunktionalität kombiniert und zur Verfügung stellt.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5596372,
      "meta": {},
      "text": "Inheritance it is when one class take the property of another class, using attributes and the classes from the parenting class, using \"super\"  etc. Delegation is catching and sending the operation to someone else. Both methods are alternatives to each other. \nAs an advantage of delegation, I can say run-time flexibility. Also the positive in delegation doesn't force to accept all methods from the superclass. it is possible to provide only the necessary methods. It has the high reusability of existing methods.\nAs a disadvantage, I can say  because of the creation of object instance. Also, it doesn't provide a hierarchy.\nAs an advantage of inheritance, I can say straightforwardly to use. Also, the implementation of the new functions in the subclasses is pretty easy. But as a disadvantage I see here the problem with inherited operations, the behavior might be unwanted. And also the changes in the superclass might break the class and the new changes in a subclass are needed.\n\nI think the good example of inheritance are the Apple  iOS phones. There are not so many changes allowed in the system for the user, only for the developer. Like superclass and the subclass. So I think it is very good example for the inheritance. And delegation is Android phones.  Android OS provide for the user a lot of changes and flexibility with phone settings. as far as I know there is possibility to make phone very user friendly. But I never used Android personally. That's my opinion.\n",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596449,
      "meta": {},
      "text": "One of the biggest differences ist the relationship between the classes! In the first one we have inharitance in delegation it might be a unidirectional association.\n\n- Inharitance: That means that if we use inheritance we will have all the implemented functionality or all the given abstract specifications (in case the superclass was abstract) in our new childclass. \n\t- Disadvatnge: even if you don't need the whole funcionality from the superclass, we will have it. And this can \t\t\t\t \n   \tcause unwanted behavior\n\t- Advantage: it is really fast to use this type of Reuse, because you dont't have to create extra classes like in delegattion\n\n- Delegation: But in delegation we call a specific method on a receiver class wich delegates the request to the class with the needed functionality.\n\t-Disadvantage: You have to create and extra class wich might be timeconsuming \n\t-Advantage: You can provide only the methods that you really need\n\n\n\nExample 1: I would use for example inheritance for implementing a camera application on a smartphone with extendet functionallity like retro filters etc. \nIt's obvious that i want ti preserve all of the given functionality for the camera but add additional ones!\nIn this case i would use Inharitance!\n\nExample 2: If i had an chargeable apllication for a smarphone and wanted to give the user a testversion, wich would have a restricted fuctionality i would use delegation. Because i would be able to controll wich functionality the user ist able to acces\n    \n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596467,
      "meta": {},
      "text": "Inheritance expands a \"parent-\" class by a new method or overrides an existing method in a \"child-\" class, delegation on the other hand creates an object instance, of the \"delegate-\" class, in the \"receiver-\" class and basically sends the operation to the other class (by calling a method on the object instance).\n\nInheritance:\n\nAdvantage: simple to implement methods in the \"child-\" class  --> increases expandability\n\nDisadvantage: it can reveal methods from the \"parent-\" class, which you didn't mean to put in the \"child-\" class (example: \"parent-\" class car & \"child-\"class electricCar --> car has method fuelUp(), which obviously makes no sense in electricCar class)\n\nDelegation:\n\nAdvantage: it can simply be exchanged at run-time --> provides runtime flexibility\n\nDisadvantage: in opposite to inheritance, delegation isn't supported by a lot of well-known object-oriented programming languages (sometimes indirectly supported --> makes it more complicated to use)\n\nExamples:\n\nInheritance: settings as \"parent-\"class & WLAN & bluetooth as \"child-\" classes --> I would use inheritance here, because the main functions (example: \"back\" button is equal for all \"child-\" classes), but every \"child-\" class offers different functions & it should be simple to implement new functions to \"child-\" classes, like VPN options to WLAN class\n\nDelegation: creating an object instance of contacts \"class\" in the phone class, in order to have access to  contacts saved in your smartphone (specifically: contacts application), when using the phone application --> I would use delegation here, because the phone application & the contacts application offer different methods & you don't want changes in the phone application to impact the contacts application",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596481,
      "meta": {},
      "text": "Delegation means that you use an object of another class as an instance variable, and forward messages to the instance. Inheritance on the other hand is the process by which one class takes the property of another other class. \n\nDelegation:\n\t+ The reused class can be changed without changing reusing class.\n\t- You have to instantiate multiple classes.\n\nInheritance:\n\t+ There is no need to compose the delegator and delegate.\n\t- Variables and methods of reusing and reused class can't be on separate computers.\n\n-> In the context of smartphones, delegation could be used to delegate graphic or processor intensive work loads onto a remote computer. \n\n-> In the same context, inheriteance could be used in order to realize a multilingual voice assistent, where as each language inherites its functionality from a super class.",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596656,
      "meta": {},
      "text": "Object inheritance is a very logical concept where “source” or “parent” elements exist, with behavior which goes in the direction of what we want to achieve. These elements are then expanded with additional functionality or logic in a process known as subclassing. The resulting “child” thus inherits the attributes and functionality the parent disposes of.\nOne major advantage is that this can often save a lot of time as well as prevent unnecessary code replication.\nIt’s however not always that simple: sometimes if you inherit from a large bulky parent, you end up with tons of unused entities in your child.\nSmartphone Apps are a form of inheritance: you start with the base functionality provided by creating an app (built-in frameworks, default constructs…) and add all your own cool ideas. \n\nDelegation in software entails what the name describes: when a task needs to be accomplished, instead of implementing the logic required to perform it, you find an existing implementation somewhere and simply delegate the task and request required data to it. You can then simply return the results.\nThis option carries the massive advantage that you don’t need to rethink the sometimes complex inner-workings required to perform an action, you simply forward it to someone who already has. \nHowever, sometimes for more esoteric requirements, there simply is no ready made function (or maybe there is, but what it requires is different from what you have which leads to bizarre looking object contortions to match what’s needed). \nFaceID/TouchID on iPhones is a perfect example of this: apps have no idea how to verify the volumetric features of faces/thumbprints. However, they just delegate the task to the OS authentication API and simply get back a true/false result. \n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5586015,
      "meta": {},
      "text": "Delegation is an alternative to Inheritance. Compared to Inheritance, which is a relationship between classes, delegation is a relationship between objects. Delegation in comparison to inheritance offers us to make changes at run-time, however it doesn't support dynamic polymorphism like inheritance does.\nIn addition to that, when using delegation, we don't have to maintain the functions in the child class, when changing something in the parent class.\nInheritance on the other hand offers, as mentioned before, dynamic polymorphism & one does not have to instantiate in order to pass functions, etc. However we can only inherit from one class at a time.\nWhen thinking of smartphones for example, we can look at the relationship between the app store & the individual apps as an inheritance. Each app is bound to the app store & therefore the \"parent\" APP. Each app has a number of obligatory functions, in order to be functional on the phone.\nDelegation can be found when thinking of the relationship between the operating system of the smartphone & the app store for example. The smartphone directly delegates the function of app management to this one sub system!",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5586516,
      "meta": {},
      "text": "To \"delegate\" is defined as: \"to entrust (a task or responsibility) to another person[...]\". And in the context of software development, this means that the function of a class is composed of many functions of other classes. In the contrary, inheritance describes a structure where the function of one class is reused by many others. \n\nAdvantages:\nDelegation -> It bundles many functions into one thereby making the code more structured.\nInheritance -> Less duplicated code.\nDisadvantages:\nDelegation -> Difficult to maintain, since its function depends on functions of many saparate classes.\nInheritance -> Not very flexible, since every child class has the functions of the parent class in common.\n\nThe \"shortcuts\" feature of iPhones is a good example of Delegation, since the user can define functions(shortcuts) that are a bundle of many other functions.\n\"Widgets\" in iPhones may be implemented with inheritance in mind, since they are different classes that have many functions in common. So the parent class could be named Widget and have functions like: preview(), maximize(), delete(), etc. And the child classes could be named: WeatherWidget, StocksWidget, CalendarWidget, etc.\n\n",
      "score": 75,
      "language": "ENGLISH"
    },
    {
      "id": 5587474,
      "meta": {},
      "text": "Inheritance ist das erben von einer Mutterklasse, hier übernehmen die Kinderklassen sämtliche Attribute, sowie Methoden (Diese können natürlich überschrieben werden). Das bedeutet, das sie alle Funktionalitäten der Oberklasse besitzen und diese noch erweitern, etwas abändern.\n\nBei Deligation handelt es sich um ein Vorgehen, in dem man einer Klasse ein Attribut einer anderen Klasse zuordnet, die Nutzende Klasse benutzt dann bestimmte Funktionen der erzeugten Instanz der anderen Klasse, erweitert diese also nicht sondern nutzt sie lediglich für ihre eigenen Zwecke.\n\nDurch Inheritance kann man sich wiederholenden Code verhindern, außerdem stellt sie eine deutliche Hirarchische Struktur bereit. Das Problem ist, das alle Funktionen der Mutterklasse auch in der Kinderklasse offen liegen, dies macht die Vererbung für manche Verwendungen ungeeignet.\n\nHier kommt Deligation ins Spiel, hier werden keine Funktionen der zugrundeliegenden Klasse offenbart, was evtl. auch eine Verbesserung in Hinsicht auf die Sicherheit darstellt. Der nachteil hier ist jedoch das das Coupeling erhöt wird, und Zusammenhänge unklar werden können.\n\nEin Beispiel für die sinnvolle Verwendung von Inheritance bei einem Smartphone wäre eine Slider Klasse, hier gibt es zB. einen Helligkeits-Slider, welcher sich nur in 10% Schritten bewegen lässt, sowie einen Lautstärke-Slider, welcher sich kontinuierlich verschieben lässt, hier können beide von einer ElternKlasse erben, somit teilen sie sich die grundlegenden Attribute (min, max, aktuell) und Methoden zum verschieben, implementieren jedoch genauere Spezifikationen.\n\nEin Beispiel für Deligation währe die Liste mit den ein- und ausgegangenen Anrufen, hier ist die zugrundeliegende Datenstruktur eine Liste, jedoch wollen wir nicht, das Anrufe mitten in der Liste eingefügt werden können. Diese Funktion würde die Liste jedoch bereitstellen, also schreiben wir eine neue Klasse, welche an ein Listen-Attribut deligiert.",
      "score": 91.7,
      "language": "GERMAN"
    },
    {
      "id": 5588047,
      "meta": {},
      "text": "Inheritance is the practice of creating a new class via subclassing. In Java, this new class is derived from its \"parent\" class with the \"extends\"-keyword.\nDelegation, on the other hand, refers to the mechanism of catching a method call and sending it to another object where it is already implemented. This is achieved by using aggregation (or composition/unidirectional association) and calling the appropriate methods of the referenced object when necessary.\nThus, both - inheritance and delegation - are to some extent a form of reusing already existing code. However, delegation is considered to be \"black box reuse\" meaning that to the delegating class it is completly concealed (and also irrelevant) how the functionality is implemented. In contrast to delegation, inheritance is obviously not independant from the way the concrete functionality is implemented in the superclass as it is inherited by the subclass. Inheritance is therefore also refered to as \"white box reuse\".\n\nIn the context of smartphones, one could use cloud services as an example for delegation. Instead of storing for example photos, documents, notes, contacts, ... on the smartphone itself, it can delegate this task to a cloud service. How/where exactly these files are stored in the cloud is not known and not relevant for the smartphone.\n\nInheritance is also common, when taking a look at mobile apps. Often these apps are developed using frameworks that support inheritance to improve development. Therefore one could e.g. imagine a class \"Application\" that already exists within a framework and that can be subclassed in order to reuse a lot of code when developing a new app.\n\n\n\n\n \n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5588653,
      "meta": {},
      "text": "Bei Vererbung erbt ein Subklasse alle Attribute und Methoden einer Superklasse. Von Vorteil ist dabei, dass alle Methoden und Konstruktoren, die Objekte der Superklasse erwarten, auch mit der Subklasse funktionieren (zumindest meistens). Um die Funktionalität der Subklasse zu ändern kann man einfach Methoden überschreiben und neue einführen (Vorteil). Es handelt sich um eine Erweiterung der Funktionalität. Ein Problem dabei ist aber, dass keinesfalls die Sichtbarkeit  von Methoden der Superklasse verringert werden kann. Eine Einschränkung der Funktionalität ist also nur kaum - bzw. nur unsauber über Exceptions - möglich (Nachteil). \nDaher ist es z.B. wenig sinnvoll einen Stack als Subklasse einer ArrayList (ich beziehe mich auf die Java-Arraylist) zu erstellen. Die öffentlichen Methoden get(int index), remove(int index), add(int index, E element) lassen sich bei Inheritance nicht verbergen und verhindern somit eine sichere Implementierung des Stacks.\n\nBei Deligation erstellt man eine Wrapper-Klasse um die verwendete Klasse. Die verwendete Klasse ist (privates) Attribut der Wrapper-Klasse. Damit kann man die Wrapper-Klasse leider nicht mehr einfach allen Methoden und Konstruktoren, die Objekte der verwendeten Klasse erwarten, übergeben (Nachteil), aber dafür kann man Funktionalitäten der verwendeten Klasse verstecken (Vorteil). Bei der Implementierung eines Stacks mit Hilfe einer ArrayList ist das z.B. sehr sinnvoll, da so die vorher genannten öffentlichen Methoden versteckt werden können.\n\nSmartphone-Beispiele:\n\n1) Inheritance\nHersteller Zamzung bringt ein neues Smartphone auf den Markt. Es bietet exakt dieselben Schnittstellen (Ladebuchse, Audioanschluss) wie der Vorgänger und zusätzlich ein paar neue (Bluetooth 5.2). Intern ist die Implementierung aus Optimierungsgründen, um manche Schnittstellen anzubieten, geändert worden, aber die Schnittstellen an sich sind immernoch die gleichen.\nKonzeptionell ist dies ein gutes Beispiel für Vererbung, da die Schnittstellen (öffentliche Methoden) noch dieselben sind, nur intern teilweise anders implementiert wurden (@Override) und zusätzlich neue Schnittstellen angeboten werden (neue öffentliche Methoden).\n\n2) Deligation\nHersteller Zamzung bringt ein neues Smartphone-Betriebssystem optimiert für Firmen heraus. Es ist eine Art Wrapper um das installierte Android Betriebssystem. Interaktionen können überwacht werden, gewisse Funktionalitäten können (je nach Entscheidung des Klienten) eingeschränkt werden.\nDies ist ein gutes Beispiel für Delegation, da zwar auf der Funktionalität von Android aufgebaut wird, aber gewisse Schnittstellen eingeschränkt werden können.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5592381,
      "meta": {},
      "text": "The main difference in inheritance and delegation is where the implemented function, the functionality is. In inheritance it is in the parent class. In delegation the function is in an another class. Where we delegate the function. 1. The advantage of inheritance is that it is supported in almost every modern programming language, so we can rely on it. As it will be almost certainly available. 2. The disadvantage is that the classes not always fit perfectly, and due to this the subclass may have some additional functionality that we don´t want to use. 3. The advantage of delegation that it is easier to implement, and more flexible, because there is no overhead, no useless functions from the parent class. 4. The disadvantage is that use have to initialise one more object. Due to this, delegation is usually less efficient.\n\nAn example for delegation is in a modern iphone. If we want to develop an app which shows the number of steps throughout the day, we don`t have to implement the functionality of step counter, as IOS has it implemented and it is available to use for developers. I think it is the only option in this case as there is really no possibility to use a parent class and inheritance. And even if it would be available, simply the integrated stepcounter is superior.\nA good example for inheritance would be if we want to develop an advanced photos app with more functionality, we could use it as a subclass of the normal, stock photos app. This way we wouldn´t have to implement a lot of functions.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5592951,
      "meta": {},
      "text": "Inheritance: close parent-child relationship between two classes, child \"inherits\" methods/attributes from parent, has functionality of super/parentclass and even more functionality of its own (e.g. more methods or attributes)\n\n\tAdvantage: easy to use, lot of programming languages support it\n\tDisadvantage: might expose (unwanted) functionality of parent class so it can get corrupted\n\n  example: \n\nDelegation: on the object level, instance needed(otherwise Null-Pointer Exception!), client calls are passed to the Deligate via the receiver, which sends the operation to the Deligate where the functionality is already implemented, more lose connection than inheritance\n\n\tAdvantage: more flexible\n\tDisadvantage: might be more expensive/inefficient because instance has to be created\n\n example: in a lot of smartphones there is only one microphone but it can be accessed by multiple apps if the user allows the usage beforehand, but this occurs when the app is used (e.g Snapchat with sound) so at runtime. This access right can also be withdrawn. I think this is a suitable concept because delegation allows the situation to change e.g. not us it another time or us a different microphone (If you have one in your earphones) and decide the usage at runtime. It allows maximum flexibility.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593306,
      "meta": {},
      "text": "Während bei der Vererbung Klassen von anderen Klassen erben, also die Attribute und Methoden der Eltern-/Superklasse übernehmen, geht es bei der Delegation darum, eine Aufgabe weiterzugeben, also an eine andere Klasse. Es wird ein Objekt einer anderen Klasse als Instanzvariable verwendet und Nachrichten an die Instanz weitergeleitet. Die Delegation kann somit als Alternative zu der Vererbung angesehen werden. Beide haben ihre Vorteile. So ist der Vorteil der Delegation, dass sie sehr flexibel zur Laufzeit ist, da sie schnell angepasst werden kann. Zudem müssen nicht alle Methoden der \"Superklasse\" übernommen werden, sondern man kann sich auf die wesentlichen und sinnvollen Methoden beschränken (z.B wenn man sich Liste und Stack anschaut: Würde man einen Stack implementieren, indem man von Liste erbt, müsste man alle Methoden der Liste implementieren, obwohl einige für einen Stack nicht sinnvoll sind). Ein Vorteil der Vergebung ist (gerade bei Java), dass diese direkt zur Verfügung gestellt wird und außerdem, dass sie im Vergleich zur Delegation dynamische Polymorphie ermöglicht.\n\nIm Kontext von Smartphones ist eine Vererbung zum Beispiel sinnvoll, die verschiedenen Handymodelle zu implementieren. Alle erben von der Elternklasse Smartphone und müssen ähnliche bzw. wahrscheinlich sogar gleiche Attribute und Methoden zur Verfügung stellen. Eine Delegation hingegen ist für einzelne Handykomponenten sinnvoll. Mehrere Handbeile implementieren gemeinsam das Handy. Man kann ein Handy also durch die Verwendung von Instanzvariablen der einzelnen Teile implementieren. Beim Aufruf verschiedener Methoden in der Klasse Smartphone werden dann Methoden in der Klasse des spezifischen Teils aufgerufen.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5594181,
      "meta": {},
      "text": "Inheritance is a model technique in which an \"is-a\" relation is defined. This means that a child class will inherit the methods and properties declared on its parent class. This technique is useful in order to avoid redundant code and increase the clearness of our code. However, we could have child classes that do not necessarily need all the methods and properties of the parent class and that could cause some confusion.\n\nOne example of inheritance is all the different types of smartphones that exist on the market. Every smartphone has some common elements that share with all other smartphones like having a screen, a battery and a camera, but some other smartphones have, on top of that, an NFC chip, a wireless charging battery chip, a laser autofocus or a stylus.\n\nOn the other hand, we use delegation when we want to take advantage of some class functionality but do not want a class that copies all the methods and attributes of a theoretical parent class. In this case, the operations that are already implemented in another class are \"sent\" to an instance of that class. By using this design, we are taking advantage of already implemented functionality in other classes. However, developers have to be careful about when to use delegation, because it could also lead to using methods that our class should not be able to use.\n\nOne example of delegation is the permission handler in each app of a smartphone. The system class controls all the permissions that can be provided by the device and each app has access only to a few of them.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594975,
      "meta": {},
      "text": "Inheritance is the process of a class taking over the attributes and properties of a pre existing \"parent\" or super class. Delegation on the other hand is the process of creating an instance of another class object and forwarding the \"message\" (method) to that object. \nThe advantage of delegation, being a massive disadvantage of inheritance at the same time, is that with inheritance the child class will inevitably be forced to take accept all properties and methods of its super class. With delegation on the other hand, one can limit themselves to only those properties that are really required. \nInheritance on the other hand however has the advantage of being extremely straightforward and easy to use, while delegation might be less runtime efficient as instances of these new \"delegator\" objects need to be instantiated.\n\nIn the context of smartphones inheritance is used within apps. As most apps initially offer the same functionality (for example closing the app) a super class can be used to model this. Then however each individual app does have its own functionality, which can be perfectly represented through child classes that extend the functionality of the super class.\nDelegation on the other hand is used when wanting to play music on the smartphone. Apps usually do not directly control (have access) to the sound system, but this is done through a audioplayer/controller that is instantiated and can then call the sound system.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594987,
      "meta": {},
      "text": "Reuse is commonly used in software design and can be achieved by inheritance and/or delegation.\n\nInheritance can be detected by specialization/generalization, leading to taxonomies. It can then be applied in object design either via specification or implementation inheritance, meaning subclassing from an implementation reusing functionality implemented in the superclass.\n\nContrarily, delegation reuses the functionality of existing objects using object instantiation and method calls involving three objects: The client, receiver and delegate. The client calls the receiver, making sure the delegate is not misused by the client. The request is then sent to the delegate executing the request. \n\nInheritance and delegation both have their advantages and disadvantages. Using delegation serves flexibility purposes while quickly becoming inefficient because of the object instance creation. \nInheritance makes it easy to implement new functionality in a subclass, which might however get manipulated by changes in the parent class. \n\nIn the context of smartphones, both concepts can be explained by looking at system applications.\n\nThe contacts app, e.g., employs business and family contacts adding additional functionality like a quick-select option or additional attributes to the basic concepts of \"name\", \"surname\" etc. of normal contact objects. This can be realized using inheritance as business and family contacts specify normal contacts while using their essential functionality. \n\nA calendar's special functionality of adding contacts to meetings and notifying them about it should rather be implemented using delegation, as the calendar app has to engage with different kinds of object types, like contacts, represented in different applications, like the contacts and messenger app. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595861,
      "meta": {},
      "text": "Vererbung erweitert eine übergeordnete Klasse mit einer untergeordneten, wobei die untergeordnete die Funktionalität der übergeordneten übernimmt. Bei der Delegation initialisiert eine Klasse nur ein Objekt einer anderen Klasse um so auf die Funktionalität der anderen Klasse zuzugreifen. Dabei werden aber nicht alle Methoden und Attribute direkt übernommen. \nDie Vererbung erlaubt es, dass mehrere Klassen mit ähnlicher Funktionalität, diese Funktionalität nur einmal in einer Überklasse implementieren müssen. Das macht den Code lesbarer und verringert Redundanz. Ein Nachteil wäre, dass man bei einer Änderung der Überklassen auf die Unterklassen achten muss, da eine Veränderung der Oberklasse auch Veränderungen in den Unterklassen nach sich zieht. \nDie Delegation hingegen erlaubt es, frei auf die Funktionalität der delegierten Klasse zuzugreifen. Die Klasse auf die zugegriffen wird kann somit deutlich spezifischer sein. Als Nachteil wäre zu nennen, dass immer ein Objekt der anderen Klasse initialisiert werden muss, auch wenn nur wenige Methoden des Objekt eigentlich genutzt werden. \nIm Smartphone wäre ein Beispiel von Vererbung, beim verwenden von Apps zu finden. Apps teilen sich viele Funktionen (Touch, Schließen, Erscheinen auf dem Homescreen). Diese lassen sich leicht in einer Oberklasse zusammenfassen. Die Delegation könnte zum beim schauen von Internet-Videos genutzt werden. Diese Brauchen alle eine Instanz einen VideoPlayers. ",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5596051,
      "meta": {},
      "text": "Vererbung basiert auf der Klassenebene und wird eigentlich verwendet um Klassen zu schaffen, welche eine Erweiterung der Oberklasse sind. Somit müssen Methoden der Oberklasse auch genau zur Unterklasse passen. Vererbung kann, wenn sie denn auf Unterklassen angewandt werden kann relativ klaren, verständlichen Code schaffen. Nachteil ist jedoch, dass die Unterklasse nicht von Methoden der Oberklasse abweichen kann. \n\nBei Delegation befindet man sich auf der niederen Objektebene, welches Klassen ermöglicht Instanzen anderer Klassen zu integrieren und auf deren Methoden zuzugreifen. Dies ist generell flexibler und Klassen, welche z.B. viele Schnittstellen zu anderen Klassen aufbauen müssen können so einfacher realisiert werden. Jedoch benötigt mein oft nicht alle Funktionalitäten welche die delegierten Objekte bieten. Somit entsteht gewissermaßen überflüssige Komplexität und Code, was bei Vererbung eher nicht der Fall ist. \n\nWenn man die Hardware eines Smartphones mit Vererbung und Delegation vergleicht, könnte man einzelne Elektronische Schaltkreise als Vererbte Klassen sehen, welche dann durch die Verknüpfung an verschiedenste Schnittstellen erweitert werden. Delegation könnte man mit einzelnen Komponenten wie Widerstände, Transistoren usw. sehen, welche in größeren Komponenten eingesetzt werden. Z.B. Transistoren in Mikrochips, Widerstände in Spannungswandlern usw. . Also Mehrere Objekte in einer Klasse. \n\nVererbung und Delegation haben beide ihre Vor und Nachteile, weshalb ich nicht pauschal sagen kann was besser oder schlechter sein soll. Wie immer kommt es drauf an.",
      "score": 75,
      "language": "GERMAN"
    },
    {
      "id": 5596204,
      "meta": {},
      "text": "The difference between Inheritance and Delegation is, that Inheritance inheritates super methods of a super class. Delegation always creates new objects when needed.\nAn advantage of delegation is being more flexible, according to creating objects you need easily new. But this also invokes negative aspects like working inefficent by creating all the time new instances of an object.\nThe advantage of inheritance is that you can easily create new objects by only implement the methods of the super class. An disadvantage could be that by implementing all super methods, it could happen that not all methods are used in the child object, so they are not used or probably not wanted.\n\nIf you have a preview of things in your Smartphone app, I would use Inheritance. The reason is that you can easily create in the super class the layout and fill the components in the child classes. If you want to change the layout you only have to adapt the super class.\n\nIf you implement some actions in an App, that is only used once, like playing a sound, I would use Delegation. So you only need to create the Object once and can use it for your case. After playing the sound, the object won't be needed anymore which means that it's way more efficent than Inheritance.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5586006,
      "meta": {},
      "text": "Inheritance is extending a base class by a new operation or overriedes an existing one while Delegation catches an operation and dens it to another object.\n\nInheritance:\nAdvantage: It is easy to implement ne functionalities in the subclass\nDisadvantage; If you change the parent class you force-change the subclass\nExample: The smartphone inherits properties from the cell phone which inherits properties from the stationary telephone. You have many applications which all have similar properties e.g. you want to open and close them all. So you could create one parent class application whith these methods and let all applications inherit them.\n\nDelegation:\nAdvantage: Delegation is more flexible than inheritance\nDisadvantage; Delegation might be more inefficent than inheritance, because an object instance needs to be created.\nExample: If you want to use your camera in different situations you could implement the object camera in the given class you need to use it.\n\n",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5587512,
      "meta": {},
      "text": "If you use inheritance the subclass inherits all the methods from the superclass while delegation has a receiver who then forwards the request to the delegate.\n\nInheritance Advantage + Disadvantage:\nInheritance is supported by many programming languages but change in the superclass can cause change in the methods of the subclasses aswell.\n\nDelegation Advantage + Disadvantage:\nDelegation can be used very flexibly but can have a lower performance because the object on which the method is called often still needs to be created.\n\nDelegation Example: When an app needs to send a notification to the phone user it can use delegation to forward the naotification to the built in notification system of the phone. This allows for flexibility and doesn't happen very often so the performance doesn't need to be very good.\n\nInheritance Example: If a smartphone app needs to work with a clock/time it would be good to inherit from the clock app, as the implementation of these functions rarely changes and good performance is needed if you use a lot of functions that need the time.\n\n\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5587544,
      "meta": {},
      "text": "There is one core difference between inheritance and delegation which is whether one can see the source code. In delegation, we send a request to another class, hence we do not have to know how this class handles the request, as long as it follows the agreed upon interface. We say that it is the equivalent of a black box. On the other hand when using inheritance, we do see the source code, deciding whether the implementation thereof is enough for our purposes or if we have to override a certain function. We say that this is a white box.\n\nAn advantage for the black box approach is that we do not have to worry about its implementation. This however leads to two disadvantages: a) when there is a bug for an edge case that our program requests and b) when dependencies do not line up for different black boxes.\n\nOf course, by reason, the advantage of inheritance is that we can access the source code and override its functions according to our needs, however this brings with it the added disadvantage of having to maintain the code.\n\nAn example in the context of a smartphone for a delegation is like the processor. The processor is usually supplied by a third party (like Qualcomm) which is then integrated into the device as a black box for the manufacturer.\nAn example of inheritance then is something like the outside cover. It usually has many of the same characteristics (i.e. material, dimensions), but is then slightly different based on the model (e.g. changing the color or camera cut out)",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5593552,
      "meta": {},
      "text": "Beim Inharitance Prinzip existiert bereits eine Elternklasse die ähnliche Funktionalität wie die Unterklasse besitzt. Das lässt sich leicht in jeder Programmiersprache umsetzen, es kann aber zu dem Problem kommen, dass die Unterklasse ungewollten Zurgriff auf Bereiche der Elternklasse hat.\nBeim Delegation Prinzip kommuniziert die Client-Klasse mit einer Reciver-Klasse, die dann auf die Methoden einer Delegate-Klasse zugereifen kann. Dadurch ist gesichert, dass die Client-Klasse keinen Zugriff auf Methoden hat, die sie nicht aufrufen soll. Durch die Reciver-Klasse kommt es aber zu extra Overhead.\n\nEin Beispiel für Delegate beim Smartphone wäre eine Klasse ContactsManager. Will eine App auf die Kontakte zugreifen, soll das über eine Reciver-Klasse ContactsView ablaufen. Dadurch kann die App keine anderen Änderungen an den Kontakten vornehmen.\nEin Beispiel für Inharitance wäre eine Klasse MainScreenView als Unterklasse von ScreenView. Die Klasse MainScreenView besitzt alle Funktionalitäten wie ScreenView und darf auf alle Methoden zugreifen, bloß dass sie noch zusätliche Eigenschaften hat, wie zum Beispiel, dass sie nach jedem Starten des Smartphones gezeigt wird.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5587192,
      "meta": {},
      "text": "Inheritance and delegation are both used for code reusing in software engineering. Reusing code helps to reduce redundant code and makes the program also faster and cleaner.\nThe main difference is that inheritance can be called an \"is a\"-relationship and delegation a \"has a reference\"-relationship. This means withe inheritance you create subclasses which inherit the public or protected functions of its superclass. besides these functions there can be also added new ones. for  delegation however you only add one object of one class (1) in another (2) and then you call the functions of the first class (1) over its object in the second class (2) and still use the class' functionalities without inheritance.\n \nAn advantage of inheritance is that it is easy to implement new function in subclasses by just implementing it in their superclass. Nevertheless, sometimes changes in parent class might lead to forced changes in subclasses which can cause a lot of inefficiency in time and structure.\nAn example for inheritance in the context of smartphones is for instance the UI of different phones of one brand. Some of the main functionalities of the user interface are the same but in smaller details (subclasses) they may differ.\n\nFor delegation a benefit would its increased flexibility as you can develop libraries and classes that are easily extensible. Then you can create objects of these classes (1) and use their functions. However, every time an object instance is being created it is time consuming and inefficient.\nIn smartphones delegation can be found when you need to authorise which functionality and protected resources are accessible to third-party applications e.g airdrop.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5592282,
      "meta": {},
      "text": "Delegation is when (a part of) a function is already implemented in another object and you call this implementation to avoid duplicated code.\nInheritance can be used to extend a class to be able to specify the super class or override existing methods. That way similar kinds of an object can reuse the functions of the super class while still extending the funcitionality in the necessary way.\n\nDelegation is generally more flexible as different functions can be used from differnt object but might be more inefficient because an object instance needs to be created. \nOn the other hand, inheritance makes it easy to use and extend functionality of the subclasses and is very easy to use and get hang of. The disadvantages are that some methods of the super class are unwantedly exposed and changes in the super class might force changes in the subclass as well.\n\nAs an example of delegation, the software for a new generation of a phone series is not entirely new, just parts of it. For instance, the wifi processing might not change from one generation to another. This function would be reused and delegated to the function of the previous phone software.\n\nThe example for inheritance would be for example that a smartphone has functions that all smartphones, these would be in the super class. Then there are different kinds of smartphones with all kinds of different functions. They would be shown as childs of this super class.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593243,
      "meta": {},
      "text": "Inheritance uses the java compiler's type system to implicitly include code from elsewhere, with delegation you explicitly implement the callout. Inheritance in Java programming is the process by which one class takes the property of another other class. Delegation is simply passing a duty off to someone/something else. \n\nInheritance’s pros: 1) There is no need to instantiate multiple classes. \n2)There is no need to compose the delegator and delegate.\n3)There is no need to define stub methods that forward calls. \ncons: 1) Implementations are fixed at compile-time. \n2)Supports weak encapsulated and fragile structure.\n\nDelegation’s pros: 1) The reused class can be changed without changing reusing class.\n2) Multiple reusing classes can share reused class variables simultaneously.\n3) Variables and methods of reusing and reused class can be on separate computers.\ncons: But unlike inheritance, delegation is not directly supported by most popular object-oriented languages, and it doesn’t facilitate dynamic polymorphism.\n\nexample: Inheritance is used between the classes if they passes the IS-A relationship test. Phone class only deals with calls, receiving and doing it. SmartPhone has lots of things to do, but the calls thing is one of them. So SmartPhone IS-A Phone and we can extend Smartphone with Phone.\n\nFor delegation: if you think of smartphone as a wrapper object and internal phone and camera as contained objects. the goal is to write the smartphone class so that its functionality invoke the corresponding ones in the contained instances.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593422,
      "meta": {},
      "text": "When using inheritance an existing base class gets extended by a subclass that extends or overrides the functions of the base class. One advantage of inheritance is, that it often helps to underline the structure of a System. This makes the code and the whole system easier to understand. One disadvantage of inheritance is that is not possible to enhance a class with inheritance when this class is final.\n\nWith delegation, you simply access already implemented functions over an object instance. \nOne advantage of delegation is that the programmer is more conscious of which methods he uses, instead of simply creating a new class. This leads to cleaner code which is also easier to service. \nOne disadvantage is that, due to the fact that the wanted functionality is accessed thru an instance of an object the class of that object already needs to be implemented. This requires a programmer to work on many different classes at once, which is tedious and prone to errors.\n\nOne example of inheritance would be the magnifier app in iPad OS because it is simply a specialised camera (with features like filters and higher zoom). Therefore it would be logical to implement it as a subclass of the camera app. \n\nThe functionality to take photos and add them to your note inside the notes app should be implemented as a delegation. So instead of implementing all the camera functionality inside the notes app this task simply gets delegated to the camera app.\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593778,
      "meta": {},
      "text": "Inheritance is the process in which one class (child class) takes the property of another class, where the new class takes over the methods, attributes and behaviour of the pre existing classes (parent class).\n\ndelegation on the other hand uses an object of another class to forward messages to the instance, so when you use delegation the class doesn't have to accept all of the methods, like with inheritance, but only the needed ones. \n\nadvantage of delegation: the class doesn't have to accept all of the methods from the delegated class. \ndisadvantage: delegation does not express a relationship between the classes. \n\nadvantage of Inheritance: inheritance emidiately expresses a relationship between the classes (is a relationship)\ndisadvantage: cannot be changed during run time like delegation\n\nin a smartphone you can use inheritance to express a relationship between a class app and the  specific applications on your phone for example instagram and youtube inherite from class app. \n\ndelegation: if you have multiple apps that do the same thing, for example produce a sound through the speakers you can delegate the needed methods from a certain class for example speaker, where you don't need to override the method. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5587749,
      "meta": {},
      "text": "Inheritance describes the relationship between a superclass and a subclass, e.g. Car as a superclass and Sedan, Fastback and Van as subclasses. This is to say that the similarities of these Subclasses have similar attributes, e.g. number of wheels, color and maximum speed, which can be declared in the superclass and initialized with different values in the subclass. This creates conformity in usage and prevents misuse. A disadvantage of this is that the system can get cluttered the more subclasses you have and if they differ a little more, e.g. with private vehicles and commercial trucks, you would have to create sub-superclasses and there will be more layers to the system.\n\nDelegation on the other hand means an operation is delegated to another class, e.g. every car when filling up at the gas station delegates the task of actually pumping the fuel to the gas station. A clear advantage of this is that the tasks are separated and each class only does what it is meant to do. This is called modularization. A disadvantage of that would be inefficiency, as every class you want to delegate to has to be instantiated before being able to use them.\n\nIn the context of smartphones, you would create a general structure of different types of smartphones using inheritance, e.g. Smartphone as a superclass and Foldables, Pen-Enabled and Regular as subclasses. The actions you perform with them would be implemented using delegation, as most operations are the same, except unfolding and using the pen. Everything else could be delegated to a Smartphone Controller.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5588400,
      "meta": {},
      "text": "Difference:\nBoth inheritance and delegation are used to increase the reuse of functionalities. However they differ in the \"how\". Inheritance uses the methods implemented in superclasses, while delegation calls the functions implemented in another object (generally an attribute). That's why it makes more sense to use inheritance, when the chosen superclass implements most of desired functionalities of the new class, whereas delegation is used, when only some functionalities of an already implemented class are used and we don't want an unwanted behavior by using inheritance.\n\nInheritance:\n\t+ Usable on all OOP languages\n\t- less flexibility, since any change in the superclass leads to changes in the subclasses as well\n\tExample:\n\tA simulation of smartphone apps can use inheritance , where a (preferably abstract) class SmartphoneApp implements various methods like close(), run(), update()… A system app cannot be deleted, however an installable app can. So two subclasses SystemApp and InstallableApp of SmartphoneApp are added, where InstallableApp implements additionally install(), uninstall() and SystemApp the method desactivate().\n\nDelegation:\n\t+ more flexibility, since both called and calling classes (receiver and delegate) can usually be changed with \tno effect on each other\n\t- does not support polymorphism, which makes methods easier.\n\tExample:\n\tA simulation of a smartphone and a wireless Headphone. The class WirelessHeadphone cannot extend the class Smartphone, since only few functionalities are used in the WirelessHeadphone class. For example the methods respondToCall(), playMusic(), stopMusic() use methods from the class Smartphone, but methods like downloadApp() in Smartphone class are not reachable from the receiver class WirelessHeadphone. \n\t",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5590010,
      "meta": {},
      "text": "Differences:\nDelegation has to instantiate an object first before delegating an operation to it, whereas with Inheritance just the base class is extended and methods can be added or existing ones from the base class can be overridden. \n\nDis/Advantage Delegation:\nIn general Delegation is more flexible than for example differences. On the other hand the fact that each time an Instance has to be created can result less efficiency.\n\nDis/Advantage Inheritance:\nIt is easier to implement new methods etc in subclasses and overall Inheritances is broadly supported across many programming languages. On the other hand Inheritance can uncover methods from the parent class which should not be accessible in the subclass.\n\nIn the context of smartphones:\nFor inheritance an example would be a camera app for which each mode is a subclass which extends the standard mode and adds new functionalities like a portrait setting or else. This makes it easy to implement even more features in the future.\nFor delegation an example would be an application which needs runtime flexibility like a mobile game.\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5591663,
      "meta": {},
      "text": "Inheritance implies subclassing from an implementation and/or specification which provides the child-class with all the methods and attributes from the parent class, while delegation implies the instantiation of another class and the delegation of method calls to the instantiated class.\n\n-> Inheritance:\n+ Allows for the implementation or specification of a predefined method from the parent class, thus making it very useful for the implementation of similar classes that use the same base functionalities.\n\n- Subclassing allows child-classes to access all functionalities and attributes from the parent class which could accidentally expose unwanted methods and parameters.\n\nExample: Designing a smartphone app that allows for an adaptive vertical and horizontal UI could benefit from inheritance, because the base functionalities of the app remain the same regardless of the display direction. Therefore, vertical and horizontal UI could inherit and specify the functionalities from an abstract UI implementation.\n\n-> Delegation:\n+ Instantiating an object does not force you to implement any predefined methods and allows to reuse functionalities and delegate method calls without exposing private methods and private attributes.\n\n- Delegation requires the creation of another class through instantiation, which could cost on overall performance of the implementation and is not supported by many programming languages.\n\nExample: A built-in battery-system implements the management of the battery usage and allows the instantiation to check public information, e.g. the amount of remaining battery. However, it does not allow the unwanted use of private functionalities, e.g. analyzing which apps used the most amount of battery.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593767,
      "meta": {},
      "text": "Delegation means, that we need to create an instance of a class  and reuse functionality by calling methods on that object, catching an operation and sending it to another class where its already implemented.\n It is in general more flexible than inheritance  like the run-time flexibility, because it can easily be changed at run-time, which is an advantage of delegation. A disadvantage is, that it causes more inefficient performance, because an object instance needs to be created, set a  method call and wait for response,which leads to more overhead.\n\n\nInheritance means to build a subclass from an class, which already exists, because it has many same functionality as the desired class. The subclass already has those functionality implemented from the upper class through that. There is no object on which a method is invoked. An advantage is,that it is supported by many programming languages  and very easy to implement functionality. \n But the  dependency of two or more classes could lead to problems, for example a change in the upper class requires a change in the subclass or some unwanted methods of the upper class can be used by the subclass. One Example is that the First iPhone apple brought to market had many relevant Attributs and methodsaiPhone should do. When they brought iPhone 6 , they wanted to implement a phone With more methods like fingerprinter But still include all old features. So they inheritance Form a iPhone Main class and make a subclass iphone6.\n",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596466,
      "meta": {},
      "text": "Inheritance can be identified as subclassing from an implemented class. That class is already implemented and we want a similar class to use.  Therefore we should use inheritance to create a similar desired class. It is an extension of the base class with overriding the operations. Advantages are it is effortless to use, we can use it straight. Many support languages support the inheritance therefore it is widely used. Because it is very straightforward to implement new functionality. On the other hand, We have to take all methods from the parent class. There can be some unwanted methods, which are taken from the parent class. Another problem is that when we change parent classes, we have to change subclasses too. For instance, smartphones are inherited from cellphones. We can use all functionality of cellphones and additional features. It is the upgraded version.\n\nDelegation is the reuse of functionality of existing objects with instantiation and method class. It consists of 3 parts: Client, receiver, and delegation. Firstly client calls the receiver, which sends the request to the final part Then the delegation executes it. Shortly, it catches the operations and sends the other objects. The advantage is it is much more flexible because we don't have to depend on another class. However, sometimes it leads to some disadvantaged situations because creating an object instance might be inefficient. For example, the smartphone applications have different codes IOS and Android. During converting from Android to IOS we should use delegation.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5585663,
      "meta": {},
      "text": "Inheritance refers to the case where a class is a subclass of another one. The subclass uses the implementation written in its superclass. An advantage is to provide general operations on a group of objects which inherits the same superclass. A disadvantage is that all children will have methods from the superclass associated with and it can be hard to know if a class must be a child of another class if a certain method of the superclass does not apply for the child.\nIn a smartphone, we could imagine that WiFi and Bluetooth are both \"subclasses\" of \"wireless communication\".\n\nDelegation refers to the case where a class uses another class to make an operation, where it is already implemented. An advantage is that we avoid code duplication : we simply use the implementation of another class. A disadvantage is related to performance. An object instance of the delegated class must obviously be created, and it could be less efficient to do so rather than to implement our operation in the prior class.\nIn a smartphone, an example of delegation would be when the kernel is asked to change a pixel color : It delegates it to the screen to do the job.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589049,
      "meta": {},
      "text": "While using the delegation method we reuse the functionality of existing objects by object instantiation and making a method call through it. However, in the case of Inheritance, we extend a superclass with a subclass so that we can reuse the functionality of its parent class.\n+ The delegation method is more flexible in terms of change. If we make any changes in the base class, it doesn't affect other classes.\n- object instantiation is expensive: cost of memory\n+ easy to implement new functionality in a subclass.\n- Any Change in the superclass class can force the subclasses to change as well\n\nAssume that we have two apps on our smartphone: \nWeatherApp: I would like to use the delegation method here because we need to fetch the current data from other web services. So we delegate this responsibility to other services using HTTP or APIs, we fetch the data and display it on the screen.\n\nCamera app: Assume at the time of launching we install a simple camera software that has basic functionalities of capturing a photo and making a video. Now I want to add two more functionalities Panorama and a short video. In the case of Panorama, I would extend my new  Panorama Class with SimplePhotoCapture and use the old capture(dx, dy) functionality with different dimensions. Same for the short video, I will add a specific timer of 60 secs for the short video feature, which would use the old videoCapture functionality but additionally has a time limit of 60 secs.\n\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5590973,
      "meta": {},
      "text": "-The differences between inheritance and delegation are that by implementation inheritance for example the new class extends a base class with a new operation or overrides an operation, that exists yet, subclassing from an existing implementation. By delegation the process is that the new class catches an operation and sends it to another object, where it is already implemented, there are client, receiver and delegate.\n-Client calls the server, the receiver sends the request to the delegate, the delegate executes the request. The difference in reuse is that by implementation inheritance there is implemented functionality in the superclass and by delegation in an existing object. The advantages of delegation  is the flexibility, because of the possibility of replacement of any object at runtime by another one, disadvantage is the inefficiency, because they are many objects and they are encapsulated.\n-The advantages of inheritance is the ease for implementing new functionality in the subclass, the ease to use and also the supportability in many programming languages.  \nDisadvantages are that the inherited operations can exhibit unwanted behaviour, expose some method of the superclass and also when something changes in parent class that can reflect also the subclass. \n-In context of smartphones example for inheritance are the differents models of smartphones - for example the smartphone Iphone 12 has some functionalities - with parameters of camera, battery, which can be upgraded by Iphone 12 Pro, but also some functionalities stay the same(the processor) - this means that we reuse implemented functionality in the super class. In this case I will choose inheritance, because there is no problem for the user for example that some functionalities stay the same(the problem that the\ninherited operations might can cause unwanted behavior is not relevant here), when there are responsible and good to use and by inheritance we can with no problems implement new functionality in the subclass. Also by inheritance is good the classes to be from the same type and the implemented class to have almost the same function like a superclass.\n-Delegation we can use, when the functionalities of the superclass cause unwanted behaviour, behaviour that we do not need - for example there are new smartphones that do not have headphone jack, what means that there is a need of object instance to be created, so smartphones can be used only with Bluetooth headphones, this exactly describe the use of delegation -  we catch an operation and send it to another object,where it is already implemented, so we not reuse the functionalities of the superclass, that we don't want to use, we reuse the implemented functionality in an existing object(Bluetooth function).\n\n\n\n\n\n//hey, I use some parts from my solution last year :)",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594483,
      "meta": {},
      "text": "With inheritance you implement subclasses which reuse the functionality from the superclass. With delegation you create an object and when a method gets called, you let the object execute the request by calling the method on the object. Because of the additional object, that has to be instantiated, delegation can be more inefficient, but it is also more flexible, because you can create any object that can do whatever you want. Inheritance on the other hand can be more difficult to maintain, because changes in the super class can lead to changes in the subclasses. But it is also very commonly used and supported in many programming languages.\n\nIn many apps on smartphones there are \"help\" buttons. When you click on it, you are redirectet to a browser website where you can find answers to your questions on the app. This is a form of delegation and I would choose it because then I don't have to implement an extra Q&A application for my app. I can just use the internet and create an easy to maintain website.\n\nSmartphone developer come up with a lot of different smartphone models. They all share a lot of the same functionality. So the structure of the smartphone models is an example for inheritence. And I would choose it, because I don't want to invent a completely new device everytime. Often I would just want to add some new functionalities to a smartphone and so I just create a subclass.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595874,
      "meta": {},
      "text": "Both inheritance and delegation reuse existing elements of a system to make it a more concise and less overwhelming one. But both concepts are different. Inheritance (or whitebox reuse) is when a new class is created based upon an already existing one, and this new class reuses all methods and attributes of its superclass, and offering some new ones to distinguish itself from the original class. This is done to prevent repeating parts of the same code over and over again when creating classes that have the same functionality as other classes that have been already created. And this is a disadvantage of inheritance, it must implement everything its superclass had and it cannot exist if its superclass doesn't exist, it depends completely on the class it is based of. To put this in the context of smartphones, it can be compared to new models of an iphone for example. Every new model is based of of and already existing one, implementing all their funcionality while adding some new additions, like a better camera or a bigger screen, and if it was not for the phone predecesors,  the new phones would not exist. \nAs for delegation (or black box reuse), it is when a class has as an attribute an already existing class to reuse its funcionality without having to implement it all over again. An advantage of this is that both classes are completely independent from one another and also that the class reusing funcitonality doesn't need to implement all the functionality of its attribute-class. But if two classes are very similar to one another it is more comfortable to use inheritance instead of delegation because having to instanciate an object to use can take up some storage. Again, in the context of smartphones, delegation would be like a camera and the phone. A camera exists on itself, but a phone reuses the functionality of a camera by having one. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596217,
      "meta": {},
      "text": "When using inheritance a subclass inherits some methods and attributes that were implemented in its superclass. In the subclass these methods can be overwritten and thus adapted, totally new methods and attributes can be added or methods from the superclass can be used. One advantage is that you can easily add new functionalities in the subclasses. One disadvantage is that some changes in the superclass can cause that the subclass needs to be changes as well. \nOne example may be the note app on a Samsung-Phone. There you can have normal text notes and encrypted text notes. So the normal text notes is the superclass and the encrypted text note is the subclass which has an additional functionality that you have to enter a password before reading or editing that note. \n\nDuring delegation, however, we use already existing functionality of existing object by using object instantiation and methods calls. So in comparison to inheritance we dont get access to the methods of a superclass directly but rather call a functionality on a reciever object(intermidiate) which then sends a message to the delegate that executes the message. One huge advantage is that the delegate can easily be changed at runtime which enables run-time flexibility.  Unfortunately, it is more inefficient performancewise as an instance of an object needs to be created. \nOne example is your Google-Email-Account that creates an appointment in your calendar. If you accept the appointment in your mail, a message is send to an intermediate which then calls a corresponding functionality in the calander class which creates a new appointment.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596400,
      "meta": {},
      "text": "Delegation is simply passing a duty off to someone/something else, but Inheritance is the process by which one class takes the property of another class(child-parent-relationship).  So in delegation, one sends an operation to another object where it is already implemented. In inheritance one child class can reuses the functionalities of its superclass and it can also offer new functionalities.\n\nDelegation disadvantage: Unlike inheritance, delegation is not directly supported by most popular object-oriented languages, and it doesn’t facilitate dynamic polymorphism.\nDelegation advantage: It is genarally more flexible\nInheritance disadvantage: A change in superclass, can lead to problems in sub-classes, which then forced to change as well.\nInheritance advantage: Implementing new functionalities in subclasses are pretty easy and as already said it is supported by many programming languages.\n\nIn Context of Smartphones:\nThere are many types of smartphones like Iphone, Samsung etc. but they also have many functionalities in common like calling, taking screenshots etc. So in this context it would be a better choice to use inheritance by creating a superclaas called Smartphone which includes functionalities like calling and attributes like release year. So all types of smartphones inherits from this superclass, and they have then specific functions.\nBut for common smartphone features like camera etc. you can use delagation and let the operation be done via someone else like camera class. So inheritance creates an \"is-a\" relationship(Iphone is a smartphone), where delegation delegates a work to another object like camera functions to camera-object. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596617,
      "meta": {},
      "text": "difference between Inheritance and Delegation:\n- 'Inheritance' means that all the subclasses must inherit all the features of their superclass (and they also can override some of superclass' methods).\n- 'Delegation' means that extends the functionalities of current class by delegating external classes.\n\nadvantage of Inheritance:\nit makes the code more concise and improves the readability.\ndisadvantage of Inheritance:\nmultiple inheritance is not allowed.\n\nadvantage of Delegation:\ncurrent class can delegate more than one objects from the external classes, so it makes the extension of functionalities of current class more flexible.\ndisadvantage of Delegation:\nit is not directly supported by most popular object-oriented programming languages.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5586106,
      "meta": {},
      "text": "Delegation means, that you use another piece of software, without being exposed to its internal Structure. With inheritance you have to deal with its inner workings. An Advantage of inheritance, is that you have tighter controll over your project. An disadvantage of inheritance would be, that you don't just have, what you need, which makes projects (especially big ones) more confusing and complex. An Advantage of delegation would be the added runtime fexibility, which means, that it is flexible enaugh to change at runtime. An Disadvantage of delegation is, that you can't easily reuse additional functionality of the other class. All advantages/disadvantages of inheritance are disadvantages/advantages of delegation and vice versa. \n\nExamples in the context of an smartphone:\n- Inheritance: A mobile game inheriting from the superclass App. The game implements features of App, like \"open\", \"run in background\", \"request privileges\" and so on. This also makes it easier for the operating system to manage different apps and decide if something should be treated as an App (for example APKs on Android phones).\n\n- Delegation: A moblie game using intern payment options (Google Pay / Apple Pay) for Microtransactions. The mobile game doesn't need to inherit from (Google Pay / Apple Pay). It just needs to call a function on (Google Pay / Apple Pay). The mobile game rather needs the flexibilty to change payment options at runtime.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5587081,
      "meta": {},
      "text": "Inheritance is an extension of the wanted functionality giving the user more freedom\nthrough protected attributes etc. This added freedom comes with the cost of being more\nbound to concrete implementation details thus making changes in the parent class difficult\nwithout affecting all the subclasses. To use this extension, one only has to instantiate one\nobject (from the subclass). Reusing existing code with inheritance is called\nwhite-box-reuse. The opposite of this technique is delegation or black-box-reuse where \nthe new class creates an object of the class to be reused. The created object is opaque \nand only exposes its public API which reduces the coupling between both classes.\nWhen using the new class, two objects are needed this time so if one uses delegation\nexcessively memory constraints may pose a problem.\nExample with smartphone:\nControlling the sim-card could be done with delegation because implementation might be\nvendor specific and using inheritance would mean that separate class hierarchies are needed\nfor each one. With delegation one could use the bridge pattern and separate OS and\nsim-card controlling.\nFor the smartphone apps in general one could use inheritance. There could be one base\napplication class which defines important methods every app must provide; like\nwhat to do when in standby, background or when app is closed etc. This provides a\nunified interface for the OS to use and makes management of different parallel running\napplications easier.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5588138,
      "meta": {},
      "text": "Inheritance vs Delegation: Delegation means, that you \"outsource\" a method call to a object, that you stored as an attribute in your current object. Inheritance on the other hand gives you all the functionality of the parent class and simply call the \"super\" method.\n+/- Inheritance: if you want to have several very similar classes that all contain some base functionality, inheritance is convenient, as you don't have to store the object of another class and implement all of the delegation-methods to provide the methods. But this way, changes in the parent-class will force these changes upon all of the subclasses, leading to more effort and a less flexible system.\n\n+/- Delegation: lets you choose, which methods of the other objects are visible. This leads to a looser connection between both objects => only certain changes in the class (that is stored as an variable) force you to change the implementing class => more flexible. In a complex system, delegation might lead to some inefficiencies, because every object has to create their delegate-object, which might has to create their own delegate object again.\n\n//TODO: Example Smartphone What does it mean? we will never know... :/ \n\nDeveloping Apps for Smartphones => app logic stays the same, but the exact implementation (e.g. for the visualization) may differ in certain aspects from device to device => Inheritance\n\nBuilding Smartphones: let another company build the displays => phone manufacturer simply uses their service/ displays without having to know, how the manufacturing process etc. works\n\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594877,
      "meta": {},
      "text": "*Inheritance: It is a process in which a class takes over the properties of another class, the new classes take over the attributes and behavior of the existing classes, called super classes. Methods of super classes can be called without instantiation of an object (class level). In other words, inheritance means extending a base class by a new operation or overriding an existing operation.\n→ example: There are old phones without NFC, fingerprint... and smartphones. Both have common: battery, size... Therefore, it would make sense to create the abstract class Phone and have 2subclasses: smartphones and old phones. iPhone, AndroidPhone, WindowsMobilePhone are 3subclasses of the Smartphone class.  Attributes of the smartphone can be: FingerprintSensor, cameraResolution..., which are extended by the 3subclasses. (I choose this example, because it explains the class level and the importance of parent class when subclasses have common methods and attributes)\n---------------------------------------------------------------------------------------------------------------------------\n*Delegation: means that you use an object of another class as an instance and pass messages to the instance.  That means an object must be instantiated to call methods of the class (object level). \n⇒ catching an operation and sending it to another object.\n→ example: Booking app in smartphone (class BookingApp) provides an implementation of class Printer, which contains a method print() printing message on the screen. In the BookingApp class, an object is instantiated from Printer will be used to call the method print (\"Booking is successfully completed\" or \"Booking is interrupted\"). I choose this example, because it explains clearly the delegation, which wants functionality of a method and does not want to override the method.\n",
      "score": 33.3,
      "language": "ENGLISH"
    },
    {
      "id": 5595383,
      "meta": {},
      "text": "Inheritance: The child class adapts the attributes and behaviors from the parent class. \nTwo advantages would be that it's easy to implement and that it's supported by many programming languages. A major disadvantage would be that changes in the parent class affect the child class (so to say lead to changes in the child class). An example within the context of smartphones would be, that the different mobile types (Samsung, LG, Huawei...) inherit certain methods & attributes from a super class (e.g. AndroidSystem), which is useful because many mobile devices share the same operations, but can be specified due to their needs.\n \nDelegation: In comparison to inheritance, delegation can bee seen as a relationship of objects where one object passes method calls to another object (has-A relationship). In other words, you invoke a class that knows what it has to do and another big advantage is run time flexibility. One disadvantage is that dynamic polymorphism is not supported. The easiest way to add more operations, when no subclassing is possible anymore and more functionalities are needed, can be seen as the concept of delegation. The example with smartphones and delegation would be the messenger apps. A MessageController (delegator) uses the interface Messenger and the classes WhatsAppMessenger or AppleMessenger (delegates) implement the interface. So to say, the delegator is not responsible for the action is actually delegate to a helper class (one of the delegates). So the end-user does not require or have the knowledge of the actual class carrying out the action, only the container on which they are calling.\n\nPartly reuse of last years solution SS21.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596688,
      "meta": {},
      "text": "Inheritance means expanding on the implementation of an object, while delegation means making certain functionalities available by executing them in an object where they are already implemented.\n\nInheritance makes adding/overriding functionality to existing classes very simple, but also brings all of the unwanted non-private methods/variables of its parent class with it.\nDelegation is a lot more flexible, because it can provide only certain methods from a class, but also uses a bit more resources as another class needs to be instantiated for the delegate.\n\nAndroid phones can inherit apps/functionality from the base android source code (e.g. using the default camera app provided in AOSP, but override the color processing methods). They can also delegate functionality to the AOSP or directly to the kernel/drivers (e.g. developing a new settings app from scratch, but delegating the app permission actions to the underlying system service).",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5587498,
      "meta": {},
      "text": "//My solution from EIST2021\n\nDifferences of inheritance and delegation: \nIn inheritance the function of the subclass directly depends on the implementation of the super-class. \nIn delegation therefore the inheriting class includes an Object of the other class and calls for some of the functions of the other class through this object when needed.\n\nAdvantages/disadvantages:\nThe inheritance is better when it comes to classes, which are subclasses of other classes, because it enables extensibility of the system.\nAdvantage of delegation - it has no influence on the existing components and the code is robuster compared to one with inheritance. \n\nExample in the context of cars and for each concept explain why you would choose this concept:\n\nSmartphones example:\nInheritance: \nTelekommunikation device and Smartphone. \nSmartphone is a subclass of Telekommunikation device because there are many different device types and each of them would have same qualities: brand, max destination, colour and functionalities: call, but this qualities would have different values and some of device subclasses could have some extra qualities or functionality. Since a smartphone is a telekommunikation device it would inherit the TelekommunikationDevice class and use appropriate functions and have appropriate qualities which saves time in the development.\n\nDelegation: Smarthone owner - Smartphone .\nThe owner needs some of smartphones functionalities(e.g. text() ) but it would be inappropriate to inherit. Because they are not related to each other and none of them need all of others qualities and functions but instead one of them need some of them. ",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5588002,
      "meta": {},
      "text": "Inheritance consists in subclassing from an existing class. It reuses an implemented functionality from a super class, whereas delegation reuses an implemented functionality from an existing object.  \n\nThe main advantage of inheritance is that it is straightforward and easy to implement but the disadvantage is that if you change something in the superclass, all the subclasses are affected and have to be recompiled. \n\nDelegation is more flexible to use as the objects are independent of each other:  you can change something in the existing objects without breaking the delegate. However, it can make implementation more complex and tedious and also can be inefficient as we need to create more object instances. \n\nAn example of inheritance would be implementing a \"Smartphone\" superclass along with \"AndroidPhone\" and \"IPhone\" as subclasses since this is pretty straightforward and because and iPhone \"is a\" Smartphone.\n\nAn example of delegation with smartphones is when you use your Bluetooth headphones connected to your phone. What happens is that the smartphone receives the order of producing sound but rather than emitting the sound on its own speakers, it delegates the emitSound order to the Bluetooth headphones.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5588873,
      "meta": {},
      "text": "Inheritance describes the concept, where a class, extends on a parent class, in such a manner, that it acquires all its non-private fields, and on top of being able to reuse them, may add its own individual fields. \nDelegation on the other hand works by first having a client object call a receiver object, the receiver object then transmits the request to the corresponding delegate object, and finally the delegate executes the request from the client, by executing the wished method. \n\nDelegation is usually more versatile than inheritance, since during inheritance, no filtering of the parent class occurs, and so residue methods will also be inherited. Furthermore inheritance, for the most part only allows for conservative changes, since if one changes the parameters given to the constructor of the parent class say, one needs to immediately also change the parameters given to the super-call in the constructor of the child class. \n\nInheritance, in terms of pros, is very simple to use, and is compatible with a large amount of programming languages. In terms of cons, delegation may be less effective in performance, since an intermediary object-instance needs to be created for the receiver, which in turn utilizes extra memory.\n\nIn the context of smartphones, I would utilize inheritance when developing the backend of a system, if I would need to quickly compose a subsystem of say a class which regulates data-interaction between say my phone-app and the internet; with some additional features.\nIf I were developing say a front-end UI, and I would need to combine a class with a new class for some extra features, however, in the process would still want free reign, for making changes to my main class, I would use delegation. This is because it would be much more flexible and a less costly manner, by having a separate class altogether regulating the additional functionality I'd be trying to add to the main class, whilst not wanting to make changes to a side-class.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5591447,
      "meta": {},
      "text": "Inheritance is the process of extending a class by a new class, that has the same attributes and functionalities as its super/parent class. The subclass can have extended functionalities or override functionalities of the superclass.\n\nDelegation, on the other hand, passes the wanted functionality of a class off to another class that already implements this functionality. A class then has an object of the delegate class that implements this. \n\nIn summary, inheritance is creating a subclass of a superclass with extended methods and attributes, it reuses the ones from the superclass. Delegation passes the operation to another object.\n\nWhile delegation is more flexible than inheritance, it could be more inefficient, since there is always the need to create an object instance.\n\nInheritance is supported by many programming languages and it’s easy to implement new functionality in the subclass. However, when changing something in the super class, it sometimes forces the developer to change something in the subclass as well.\n\nWhen trying to understand the difference between inheritance and delegation, an example is often helpful.\n\nThe iPhone series of Apple can be taken as an example to demonstrate inheritance and delegation, not in the software type of way, but just to visualize the idea of it.\n\nTake Apple, every time Apple releases a new iPhone, it is a modified version of the old one. From iPhone 8 to iPhone X for example, they added one more camera lens, reusing the phone they had, but adding new functionality.\n\nWhen it comes to the actual hardware inside the phone, it is delegated to another company. Apple’s iPhone chips are produced by Samsung. So the iPhone delegates their underlying hardware to a Samsung produced chip and connects it with their software.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595235,
      "meta": {},
      "text": "Inheritance, also known as White Box Reuse, means inheriting the methods from a super class, which already implemented the required function.\nDelegation, also known as Black Box Reuse, means assigning the the logic to another object, with the required functionality already implemented.\nThe difference inbetween these two is where the class gets its functionality from. In Inheritance, the method is from a more general super Class, whereas in Delegation it's from a seperate instance of another class.\nBoth come with their advantages and disadvantages:\nInheritance is supported by many different programming language, due to its easy usage, but also exposes some methods of the super class, which may be unwanted in the lower class.\nDelegation is extremely flexible, since it only requires another object to function, since it isn't constrained by Language specific rules, but it requires an instantiation of another object, which may increase the required workload.\nThe system of a smartphone may be a great example.\nThe Central Controller should delegate different calls to different hardware controllers, since low coupling is a commonly accepted design goal and making a subsystem independant of the central system may lead to less crashes, than otherwise.\nWhereas the different speaker controllers should inherit the same functionality from a super class, since they require similar functionality, but may need slightly different actual implementation, due to hardware differences. In this case there would'nt be many methods that are unwantedly revealed.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596118,
      "meta": {},
      "text": "Inheritance directly inherits the existing class and all of its functionality, while delegation creates an object of the existing class which is then accessed inside of the new class.\nDelegation is very flexible and is able to hide functionality of the used existing class but causes overhead because of creating a new object which may impact performance.\nInheritance does not create such overhead and is usually easy to use, but it's very dependant on the inherited class and may be forced to adapt to changes in the inherited class.\n\nNew foldable smartphones inherit classical smartphones, as they share every functionality and also add additional functionality such as the ability to be folded.\nEvery smartphone delegates to a normal telephone, as not every functionality of telephones is given for smartphones (e.g. pressing buttons to enter a number) but additonal functionality is added.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596311,
      "meta": {},
      "text": "In inheritance we do not send the operation to another object, we rather create subclasses from an already existing implementation. We want to reuse / extend the already implemented functionality of the superclass by new operations or by overriding existing operations.\nadvantage:\nIt is quite easy to implement new functionality in the subclass, which extends the superclass, where some functionalities are already implemented. \ndisadvantage: \nInheritance could expose some methods of the parent class, that shoud not be accessible by the subclass. The inherited operations might exhibit unwanted behavior of the superclass.\nexample:\nsmartphone of the same brand but with more functionalities than the cheaper ones: This would be a perfect example where we choose inheritance, because those functionalities of the cheaper smartphones could be extended easily by subclassing.\n\n\n\nIn delegation on the other hand we do not create subclasses to do reusing, we rather catch the desired operation and send it to another object, where the functionality is already implemented. We reuse the implemented functionality of an existing object by using object instantiation of and method calls on this object, where the functionality is already implemented.\nadvantage:\nWe are generally more flexible, because we do not need a superclass where we can inherit our functionality from.\ndisadvantage:\nThis option might be less efficient than inheritance, because an additional object instance needs to be created. This might involve a little bit of overhead.\nexample:\nIf we have a game on a smartphone which uses a server, we choose delegation for these functionalities. When we interact with the game, we catch the operation and send it to the server, where the functionality is implemented.  We choose delegation, because we do not want to inherit functionality.\n  ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596339,
      "meta": {},
      "text": "Inheritance, also called white box reuse, creates a new subclass from a superclass. This makes you accept and support all of the methods of the superclass and you may implement new functionality. So, it usually leads to a complicated design and creates maintenance disadvantages, when the superclass is changed subclass is forced to change as well. The advantages of the inheritance are being supported by many programming languages, supporting dynamic polymorphism and overriding.\n\nDelegation also called black box reuse, is creating an instance and calling necessary functions over this instance. Delegation is called black box reuse since when you use delegation you simply call functions from some class you do not really know how it does it, all you know is what's going in and what's coming out You don't need implementation specifications.  Delegations can be easily modified at run-time which is an advantage. However, this makes static analysis harder, and debugging usually needs program execution which is a disadvantage.\n\nShare options between mobile apps controlled by OS can be done with both Delegation and Inheritance. For example, a gallery application can inherit a superclass, we can call it the Sharable class. But this class contains many different implementation logic for many different data types. With delegation, we can instantiate a Sharable object and call a function that finds other apps accepting the file we sent. This would be a better option since it is easier to use and understand.\n\n\n",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596541,
      "meta": {},
      "text": "The Differences:\n\nWhile both concepts highten the reusability of your system, they are less or more fitting depending on the\nsituation. Inheritance lets you reuse all of the prewritten methods of another class and lets you build on\ntop of them. With Delegation you do not inherit anything, you delegate the work to another class.\nWith Delegation you only use what you need.\n\nDis - / Advantages:\n\nSometimes you do not want to expose every method of another class, but only a subset of them.\nIn that case Inheritance would not be suitable. If your functionality is an extension of some other functionality\nthen Inheritance is fine, otherwise Delegation might be better. But Delegation requires Object instantiation,\nwhich is costly in terms of performance. Although that cost might be mitigated by using the Proxy Pattern.\nNeedless to say that inheritance, while often integrated, might not be supported by your language of choice.\nAnother risk of inheritance, is that when change takes place in parent classes, unwanted behaviour can\npropagate down the inheritance chain. While changing something in a parent class, you must also consider consequences for the children!\n\nExamples:\n\n1. When building a calendar app, use Inheritance.\n-> there is in most cases already an implementation of a calendar app on the device.\nInheriting features of it (how that should be possible is no concern here right now), makes you\nnot only more compatible with the native app but also saves time on implementing standart features.\nMost probably you want all features the default app has anyway, and you want to extend functionality.\n2. When building a messanging app, use Delegation.\n-> Some services of your app might use Inheritence, but the Communication part, which should happen\nover the Internet should delegate its work to, for example, the native browser app. The browser app already\nmakes communication over the Internet easy and fast, use that functionality. But dont inherit from it (if that whould be possible), browsers have a lot of functions you dont need.",
      "score": 50,
      "language": "ENGLISH"
    },
    {
      "id": 5585286,
      "meta": {},
      "text": "Inheritance extends a base/super class and adds methods or overrides existing ones while delegation uses existing objects to call a method (Kind of: Inheritance = new method and Delegation = already existing method).\n\nInheritance:\n-Pro: Easy way to implement new functions in the subclass\n-Contra: The super class can influence the subclass and therefore force change on it\n\nDelegation:\n-Pro: Better flexibility compared to inheritance due to lack of dependency on a parent class\n-Contra: Might be more cost extensive because the existing object needs to be initialized\n\nExample Inheritance:\nAll apps could be designed as sub classes of a base class \"App\" which would have basic functionality every app has to have to work with the OS (open, close, delete, etc.). If a specific app needs additional features new methods can me added.\n\nExample Delegation:\nAll apps could delegate their notifications to Delegate class \"NotificationCenter\" (or something like that) which controls all notifications of the OS. Then the app can call methods of \"NotificationCenter\" when it wants to send one to the user. Using different kind of notifications according to the priority of the message for example. \n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594154,
      "meta": {},
      "text": "# Inheritance vs. Delegation\n## Unterschiede:\nBei Inheritance erbt die Klasse die Eigenschaften einer anderen Klasse und kann auch als diese Klasse angesehen werden.\nBei Delegation wird die andere Klasse als ein Objekt eingebunden und die Klasse selbst bietet Methoden an, um auf diese zuzugreifen.\n## Vorteile Inheritance:\n+ Die Klasse erbt eine andere Klasse und kann zu dieser gecastet werden\n+ Feinerer Zugriff auf die Attributen und Methoden der Klasse (Zugriffsrechte)\n## Nachteile IInheritance:\n- Es kann nur von einer Klasse geerbt werden (Java, bzw. nur eingeschränkt)\n- Du musst bei Delegation nicht die genaue Implementation verstehen oder nachvollziehen können, da nur Objekte weitergegeb/gerreicht werden.\n- Eine Änderung der Implimentation kann ganz einfach zur Runtime geschehen, in dem das Objekt, zu dem delegated wird, ausgetauscht wrid.\n\n## Beispiel Delegation\nEine Writing App möchte eine Druckfunktion implementieren. Für die einfachheit entschied sich das Entwicklerteam eine Klasse Printer mit den verschiedenen Funktionen zu machen, die die Datenobjekte, die zu drucken sind, an eine externe lib weiterreicht \n## Beispiel Inheritance\nEs soll eine App entwickelt werden, die Nachrichten mit einfachen Algorithmen kodieren und oder verschlüsseln soll. Für die Einfachheit wird eine abstrakte Oberklasse EncryptAlgorithm erstellt. Alle verschlüsselungsalgorithm sind eigene Klassenm, die von der Oberklasse erben. Dadurch kann zur runtime die Verschlüsselung gewählt und einfach geändert werden und auch die Einbindung in die restliche App wird dadurch erleichtert.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5595739,
      "meta": {},
      "text": "Inheritance means using an already implemented class to implement a new class with similar characteristics. The inheriting class inherits all the public functions from its parent class. Doing this, has several advantages and disadvantages. One advantage is, that it is very easy to implement new functionality to the subclass, if you want a class which acts like a specialised parent class. However, this can also mean exposing some methods of the parent class that are unwanted in the inheriting class.\n\nDelegation does not straight up reuse already implemented classes like inheritance, but has a \"middleman\" in between the client class calling the function and the delegate, who delivers the result. This is more flexible, as no unwanted behaviour from the already existing class affects the new class. However, it might also be more inefficient, as there are at least three parties involved in the process and an object instance has to be created.\n\nBoth concepts are applicable to smartphone software development. \nThe Inheritance concept was used for the Software development from the iPhone 4 to the iPhone 4s. The iPhone 4s had added functionality, which was the Siri voice assistant. However, the rest was the same phone. As only added functionality was used, and no unwanted methods from the \"parent iPhone\" existed.\n\nThe delegation concept is used for apps that play music for example. Here the app uses a program like an audio player, that uses the methods on the operating system level to play audio from your phone. The app Spotify would be the client, and the audio player would be the receiver, delegating to the system.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5586299,
      "meta": {},
      "text": "Inheritance is a mechanism for using the implementation of one class as the basis for another class. Usually, this is described via an “is a” relationship; a car “is a “ vehicle. An advantage of inheritance is that code that is written once can be reused in sub-classes and therefore the creation of new classes is made easier. A disadvantage of inheritance is that changes to superclasses will affect sub-classes even if, not all sub-classes might need/want to implement the change. In smartphones, inheritance would make sense in a smartphone with multiple cameras. A smartphone might have a “Camera” parent class as well as a “TelephotoCamera” and ”UltrawideCamera” subclasses. In this example, it wouldn’t matter if the subclasses could see potentially unwanted methods from the parent class since both parent and subclass would have very similar methods.\n\nDelegation uses an instantiated class and “delegates” (pass on) responsibility or action to that object. This can be described with a “has a” relationship; a vehicle “has a” control surface. The main advantage of delegation is that it is more flexible since the instantiated object can be changed during runtime (a vehicle might have a SteeringWheel or a JoyStick control surface). A disadvantage is the reduced efficiency of delegation since it requires an object instance. A smartphone might model its alarm to “have a” sound (delegation) rather than “being a sound”. A class Alarm might have a Sound class variable called “sound”. When the alarm is supposed to play, “sound.play” could be called from the Alarm class, playing the alarm sound.\n",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5587621,
      "meta": {},
      "text": "Inheritance is the concept that models an is-a relationship whereby the child class copies the functionality (attributes, behaviour) of the parent class. The child class can also expand the functionality of the parentclass. Delegation is where functionality of one object is delegated (passed) to another object. In delegation, an instance of another class is created and all messages (method calls) are forwarded to that instance. \n\nThe advantage of delegation is that it has run-time flexibility. In delegation, only methods that are required are used and not all methods and attributes of any superclass. The disadvantage is that it doesn't support run time polymorphism. The advantage of inheritance is that it increases code reusability, and it promotes code extensibility. The disadvantage however is that it increases coupling between the base and derived classes, changes to the base class affect all the child classes. \n\nFor example, let's say smartphones is inherited from 'gadgets' and performs basic functions like switching on, user authentication and switching off. All smartphones are gadgets and replicate these basic functionalities of gadgets. However, let's say the smartphones offer a feature to perform complex physics calculations. The smartphones don't have the processing power to do this and delegate the computing (processing) part to a cloud-server i.e. the complex processing is not done by the smartphones. I would use inheritance when I am modelling different types of smartphones eg. iphone, samsung, huawei and delegation when modelling a specific smartphone and its components.\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5592391,
      "meta": {},
      "text": "Delegation (Composition/ Aggregation / undirectional association):\nYou create an new class, by using aggregation of the existing classes, that offers the functionalilty (methods) of the aready existing classes.\n\nadvantage: \nDelegation is a lot more flexible than inheritance\ndisadvantage: \nIt may be not that efficient, because an object instance has to be created first\n\n\n\nInheritance:\nYou create an new class by subclassing. This class can use the functionality(methods) of the superclass. But it can also have new methods that are not in the super class.\n\nadvantage:\nnew functionality is easy to implement in the subclasses\ndisadvantage:\nsubclass can have acces to unwanted methods of the superclass. Maybe you do not want the subclass to be able to acces all methods of the superclass.\n\n\n\n\nsmartphone example:\nYou create a smartphne game with many characters and you have a standard character. If you want the other characters to be able to use all the ablilities (and maybe also new ones that you can implement yourself) you use inheritance.\nBut if you want the characters to be able only to use a few methods of the standard character you use delegation.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594328,
      "meta": {},
      "text": "Inheritance:\nWith inheritance we reuse existing classes and their methods by subclassing (white box reuse).  A subclass can also provide new functionalities or tailor the functionalities to a specific case (overwrite or extend the methods of the base class). Inheritance therefore represents a hierarchical structure ( in contrast to delegation!), which can make the analysis object model more comprehensive.\nBy defining abstract classes or interfaces we can make sure that a sub-class implements all necessary methods for a later use. With this we can easily exchange different classes of the same base class. The structure and relationships of base and sub class are fixed at compile / design time.\n\nAdvantage:\nIt is easy to implement new functionality in the subclass and use the concept of generalization and specialization to make things more comprehensive.\n\nDisadvantages:\nChanges in the parent class affect also the subclass\n\ne.g. In a smartphone app we want to have the possibility to show pictures. For the app it should not matter which underlying file format a picture would have. In this case we could define a base class that contains all needed methods that other instances are going to use, while the specific implementation (e.g. read / write) would be in a separate sub-classes for each file format.\n\nDelegation:\nWith delegation we another object where the needed functionality is  already implemented (black box reuse). Therefore we only have to forward the request (operation) to another object that does not need to be from the same or similar type. The forwarding is done by a receiver class that makes sure that clients cannot misuse the delegate. In contrast to inheritance receiver and delegate can be of every different types.\n\nAdvantage:\nThe delegate can be changed during runtime and offers therefore much more flexibility.\n\nDisadvantage:\nThe additional creation of the object instance might be inefficient.\n\ne.g. The graphical user interface of a smartphone app can be made by basic elements, e.g. buttons, slider, text boxes , ...  A typical way to create a GUI is to assemble these elements, e.g. in a class GUI and delegate operations to the specific elements when needed.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594912,
      "meta": {},
      "text": "Inheritance is the process by which one class takes the property of another other class known as child class, it takes over the attributes and behavior of the \"parent\" classes.\npros:\n-reusability of code: no need to rewrite the same code\ncons:\n-The improper use of inheritance or less knowledge about it may lead to wrong solutions.(Stack must not be inherited from a List)\nExample:\n-we have a phone with whom we can make phone calls and chat with others but now we need to be able to call and make photos. In this case we use Inheritance to create a new \"child\" phone which will take all the attributes and behaviour of the \"parent\" phone and add another functionality which is make photo.\n\nDelegation means that you use an object of another class as an instance variable, and forward messages to the instance to do the task.\npros:\n-run-time flexibility because it can easily be changed at run-time\ncons:\n-inefficient if inheritance is allowed: more attributes and more time wasted on passing the tasks\n\nExample:\n-we have a smartphone that cannot take pictures and none of the super classses can take picture. In this case we can use delegation and use functionalities from a camera and save the time rewriting code  ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595216,
      "meta": {},
      "text": "Inheritance:\nWenn eine Instanz benötigt wird, die eigentlich eine Spezialisierung einer bereits vorhanden Klasse ist, dann kann man diese Vererben und eine Unterklasse erstellen die überschreibt oder überlädt.\n\tVorteil:\n\t- Reuse der Elternklasse führt dazu, dass es insgesamt etwas performanter ist \n\tNachteil:\n\t- Gleichzeitig mangelt es an Schutz für Funktionen die es in der Oberklasse gibt \n\nDelegation:\nWenn man Abstraktion benötigt um beispielsweise Funktion privat zu halten oder vor ungewolltem Gebrauch zu schützen, dann kann man delegieren und eine Abstraktionsklasse einführen die Anfragen entgegennimmt und dann an ein anderes Objekt weiterleitet, die dann die eigentliche Logik ausführt.\n\tVorteil:\n\t- (Schutz den ich schon erläutert habe)\n\t- Aufteilung von Verantwortung: Es ist klar, dass das eine für die Interaktion zuständig ist und das andere für\ndie Funktionen -> Code wird klarer und flexibler (weniger Coupling)\n\tNachteil:\n\t- möglicherweise ein \"Overkill\", da  die Performanz und der Speicherverbrauch schlechter wird\n\nSmartphones:\nApps zum Beispiel sind im Allgemeinen dasselbe und können möglicherweise von etwas abstrakterem gewisse Funktionen erben, die alle Apps haben müssen. Da wäre Vererbung wahrscheinlich sinnvoll.\n\nDelegation kann zum Beispiell dann stattfinden, wenn der Nutzer Bilder machen möchte. Eine Abstraktion, wie die Kamera App zum Beispiel ermöglicht gewisse Funktion ohne, dass der User direkt auf die Kamera zugreifen kann.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5595340,
      "meta": {},
      "text": "Inheritance means having a class or a subclass which executes the required operation.\n-Pro: Inheritance is usually easier to implement and understand in case someone else has to work with your code.\n-Con: Although by changing something in a parent class one might be forced to change the code in the subclasses as well, in order asure the wanted functionallity.\n\nDelegation means to delegate a operation to an object in order to execute it.\n-Pro: the Implementation is faster because it often is more flexible\n-Con: one always has the implement a new attribute(of the object that one wants to use) in the class.\n\nAn Example for Delegation would be when telling a bluetooth device connected to your smartphone to do something.\nAn Example for Inheritance would be when u want to use a sertain lense for a special picture instead of just taking a picture the phones tells the required lense to take the picture and not the default one or all of them.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596572,
      "meta": {},
      "text": "The inheritance takes place on the level of classes, while the delegation takes place on the level of objects. In the inheritance a class that is already existing, does almost the same as the desired class. In the delegation an operation is catched and sent to another object.\nAn advantage for inheritance is that is supported by most of the programming languages, a disadvantage is that if the parent class is changed, the subclass can be forced to change aswell.\nAn advantage of the delegation is that is generally more flexible, a disadvantage is that is might be more inefficient because and object instance needs to be created.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5584833,
      "meta": {},
      "text": "Inheritance grants additional functionality within a class whereas delegation uses the functionality in another one\n\nPro:\n+Inheritance\n\tIf inheritance is used all the functionality is in one place, which can ease access to it and can also make the \n\tCode more readable\n+Delegation\n\tIf delegation is used the needed functionallities can be cherry picked and not everything has to be \n\timplemented, which also makes it easier to add new functionalities\n\nCon:\n-Inheritance\n\tSince everyhting is dumped in the sub class there might be functionalities contained in it that are not \t\n\tneeded and/or wanted\n-Delegation\n\tIf delegation is used another object has to be instanciated \n\nExamples:\n\tAn app that opens a website the actual process that interacts with the web service gets delegated to the\n\tsystem webview, this fitting because there are no functionalities that should be implemented within the \t\n\tapp\n\n\tThe battery of a smartphone is in a sence inheriting from the base class of battery, the instances are then \n\tlithium-ion or nickel metal hydride batteries, that share all the basic functionalities of the battery, but \n\timplement them differently",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5587524,
      "meta": {},
      "text": "Inheritance is when you extend a superclass which means you take all the public and protected methods and attributes it has to offer and add more or override some in the subclass. \n-Advantage : You can easily implement new functionality in the subclasses\n-Disadvantage : You expose methods of the superclass that you wouldn't otherwise want to expose\n--Example : In the context of a smartphone, the snapchat camera for example extends the default smartphone camera application, it takes the base features and adds new ones to them like filters and image optimizations etc..\n\n\nOn the other hand, in delegation the client calls a method on the receiver, and the only thing the receiver has to do is to call the adequate methods on the delegate which then has to execute the adequate instruction or set of instructions so here the functionality already exists and you will just reuse it. \n-Advantage : flexible as you can replance any object at run time with an object of the same type\n-Disadvantage : Could be more inefficient \n--Example : In the context of a smartphone, when one of your social media apps receives a push notification, it delegates the notifying to the Notification system of your smartphone\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5588980,
      "meta": {},
      "text": "Inheritance represents a \"Is-a\" relationship of the subclasses, and the subclass inherits all the properties of the parent class. The delegation represents a \"has-a \" relationship, and only the desired methods will be used.The advantage of delegation is a better run-time flexibility.",
      "score": 33.3,
      "language": "ENGLISH"
    },
    {
      "id": 5589077,
      "meta": {},
      "text": "Inheritance is that a subclass acquires the attributes and methods of the superclass.  In this way, the advantages are obvious.  It is very convenient for the subclass to get a new implementation, because most of the methods of the subclass are inherited from the parent class, and then the subclass can modify or extend it on the basis of the parent class according to its own situation.  But the disadvantages are also obvious. When the parent class changes the original implementation, the basic conditions of the subclass will also change, which will be very troublesome. Think of the graphical buttons of many apps on your phone.  They just refer to inheritance.  When they were originally designed, they all inherited the Button class instead of calling.  Because the main functions are the same, they are all clicked to jump to the page.  Just a little modification.\nAnd delegation is that an object wants another object, so he replenishes the object in his own Class and calls its method.  His advantage is that when this object only needs some methods of another object, but not all of them, it only needs to be called, instead of inheriting all methods like inheritance.  But the disadvantage is that it is impossible to change the calling method according to your actual situation. I think the call to the database is delegation.  Each mobile phone has its own application system.  For Apple phones and Huawei phones, one uses ios and the other uses Android.  For different systems, the way of processing data is different, so when they use the data, they only need to use the call, and then present the data to the customer according to their own way.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589206,
      "meta": {},
      "text": "The difference with inheritance and delegation lays in the way we reuse functionality, if you use inheritance you add functionality to the one from the superclass. But all the old functionality stays available to a user of the subclass. With delegation you can control the functionality of the superclass to your liking and only allow specific parts of its features. This is usefull when the user should not see the underyling structure of the class. Inheritance makes sense if you have a strict class hierarchy where everything builds upon the superclass and the subclass is only a more specific version of the superclass. With smartphones you could use inheritance to show different models. There would be a superclass wich specifies for example a screen, battery and processor and then many subclasses like iPhones or Android smartphones, normal smartphones or folding ones. When using a smartphone you can call other people, but you can do that with different applications (at least on Andoid). You can choose different \"telephone apps\" on your smartphone and set your preferred one. Then when someone calls you the system delegates that call to your as preferred set app.\n",
      "score": 33.3,
      "language": "ENGLISH"
    },
    {
      "id": 5593054,
      "meta": {},
      "text": "When using inheritance, one class (the parent class) passes its operations to another class (the child class) where the operations of the parent/base class are extended by a new operation or existing operations get modified via \"@Override\".\n\nIn contrast to that, when we use delegation, an operation is just send to an object of another class, while there is no hierarchical relationship between these two classes. \n\nAdvantage and disadvantage for inheritance:\n+ easy to use and to understand\n- if we make changes in the parent class, we also have to adopt these changes in the child class\n\nAdvantage and disadvantage for delegation:\n+ run-time flexibility\n- Not directly supported by all programming languages\n\nExample in the context of smartphones: \n1. Inheritance: \nWe can use inheritance if we want to use some methods and attributes in more than one class, but with some changes. This could be for example the case if we program an application for renting cars. There are some attributes all the cars have in common, and some that are different. But if we use inheritance, we do not have to implement each attribute in each car class. \n\n2. Delegation: \nIn the context of smartphones delegation is often used to safe and delete data in the background. This is the case if the user presses the home button to get back to the home screen and leave the app he was using. Some methods can be implemented via delegation to safe data that was not already saved and to free up memory for other processes. \n\n\n\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593946,
      "meta": {},
      "text": "\n\nImplanting inheritance vs delegation requires careful thought as to how you want different methods from base classes to be shared with other classes. In Inheritance, methods are extended from the base class by a new operation or it overrides an existing operation. Delegation on the other hand catches an operation or method and sends it to another class.\n\nThe benefits of Inheritance is that it is straightforward to use and is supported by many programming languages including outside of OOP programs. It can also be implement new functionalities in a subclass. However, Inheritance may clutter the class with unwanted methods from the parent class, and changes in the parent class can alter the subclass methods as well. Delegation on the other hand is generally more flexible but it may also be inefficient because the object instance needs to be created.\n\nAn example of when to use delegation in smartphones is when Meta is developing the application for Messenger and Instagram. When Meta is developing the messaging function for Instagram, it would delegate features like sendMessages(), receiveMessages(), and sharePictures(). However, features such as sendFiles() would not be delegated to the Instagram application because it is not a feature that Meta wants to provide on the platform.\n\nInheritance can be also used in the Meta example above, when replicating the code from Instagram Stories to Facebook stories, it would inherit the class Stories from Instagram to the Facebook application. Classes can include, editStory(), postStory(), commentStory() etc. Since many of the features are similar, Inheritance would make better sense in this case.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594269,
      "meta": {},
      "text": "Delegation:\nDelegation seperates the actual implementation of a component from its caller, so in the context of smartphones for example, you could see the hardware modules of a smarthpone as components that are called by the phone itsleft. If I were to open google maps and search my current location my phone would delegate this request to the GPS hardware component of my device which actually implements all the logic needed to locate the smartphone. \n\nAdvantage of Delegation: Easy to swap out, if i wanted a better GPS component i could simply swap it out provided the interface with the smartphone stays the same.\n\nDisadvantage of Delegation: Additional overhead since, at least in software an additional object might have to be instantiated. \n\nInheritance:\nExtends the basic implementation of an object, allowing for more specific implementations. The Galaxy S10+ could be seen as inhering the Galaxy S10, since it provides the same set of features while adding on them. For example The S10 might not have a fingerprint reader, but the S10+ does, and is therefor extending its parents feature set. \n\nAdvantage of Inheritance: Same functionalities doesent have to be implemented twice -> easier to maintain\n\nDisadvantage of Inheritance: A change that may work on the parent object could result in unwanted behaivour when combined with some child-object-specific features. ",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5594960,
      "meta": {},
      "text": "Inheritance describes the process when a (child) class takes on the attributes and methods of a pre-existing (parent) class.\nAn advantage of inheritance is that it is supported by many programming languages.\nA disadvantage is the fact that all attributes and methods of the parent class are passed on to the child class. That may include unwanted ones.\nAn example for inheritance might be the audio settings of your smartphone. You can have one (abstract) superclass called AudioSettings with methods like mute(), vibrate(), soundOn(), volume(int) and then subclasses for the different kinds of audios like the ringtone, the alarm and messages. This way you have the same base structure for all sound classes which makes it easier to understand and more manageable.\n\nDelegation simply describes that a class passes of something (e.g. a functionality) to another class. That means that a method in the first class calls on a method in the second class. \nAn advantage of delegation over inheritance is that you can pass on only selected methods that actually make sense instead of all attributes and behaviour. It is therefore more flexible. \nA disadvantage of delegation is that you need to instntiate an object of the class you are delegating a task to. It can therefore be inefficient in some cases.\nAn example for the use of delegation might be banking apps for the smartphone. Usually you have two apps: one for security authentification and one actual app with your bank data. The app with the actual data delegates the authentification to the security app. This way, it is harder to hack these online banking accounts because the authentification is split up into two apps.\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595977,
      "meta": {},
      "text": "Delegation in Software Engineering means, as in general language as well, passing tasks to another existing object. The use of delegation as a concept is as flexible as this description, but there is an issue with the fact that the object which has to do the work (the receiver) has to be there and been instantiated before.\nWhen we talk about inheritance, it means that a subclass inherits from a superclass its methods and attributes. If an new class need the (nearly) the same things as an existing class, it can just inherit from it and save resources. As one can see, the use of inheritance is quite simple. On the other hand, if someone changes the superclass, all changes will impact the subclasses, too. This could cause unwanted behaviour.\n\nIn smartphones when we implement different apps, I would choose the concept of inheritance. One simple standard app can implement some basic behaviour like open and close the app, and all the other apps can just copy this behaviour by inheritance. \nAt the same time I would choose delegation whenever an app wants to something regarding the operating system. If we talk about accesing camera, microphone, etc. or changing the brightness, it would be great to just delegate this work to the already existing os.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596154,
      "meta": {},
      "text": "Inheritance means subclassing methods and attributesfrom a super class. The methods usually have the same functionality as in the super class. An advantage is that this concept is supported by many programming languages and easy to use. A disadvantage is that the subclass might inherit some unwanted methods from the subclass which can be invoked but go against the constraints of the subclass.\n \n\n\n\nFor Delegation: we dont inherit it by subclassing but inherit the method by sending a request to another class to invoke a method on an object of this class.  It means we create an attribute of the so called Delegate in the so called Receiver class. A disadvantage for delegation is that instances of classes must be initiated to use delegation. That can be more difficult with performance critic software. An advantage is the flexibility that this methods brings in comparison of the inheritance structure. \n",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596302,
      "meta": {},
      "text": "Inheritance takes already existing functionality and extends it for a more speciefic use. Delegation assembles a solution to a given use problem from parts of fucntionalities of already implemented solutions. Inheritance is perfect for enhancing a solution as it is easy to put to use directly with the common inheritance mechanism, however when some of the fucntionality is undesired it cannot hide it under the cover. Delegation on the other hand abstracts from the used classes functionalites and can assemble them flexibly. However it creates additional overhead as it requires instances for the used classes and the new class too.\nExamples:\nA file manager app on a smartphone might use inheritance from the more general built in managing system which provides the neccesary functionality, and the app can add more, for example presenting the files in a more graphically pleasant way, as previews, sorting by type, date etc.\nA fitness tracker app on a smartphone would use delegation, as it uses different system measurements, like location, time, movement. It gathers the functionality and presents the user with a simple interface. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596479,
      "meta": {},
      "text": "Inheritance is 'is-a' relationship, which makes subclasses use parents class using a 'extends' keyword.\nAdvantage of inheritance is that subclass is easy to implement parent class's code without writing new codes. Disadvantage of inheritance is that it is hard to respond to change because subclasses have strong coupling with parent class. For example, if the code is changed in parent class, subclasses are also influenced and must be also corrected.\n\nOn the other hand, delegation is 'has-a' relationship, in which there are instance of another class in the class. For implementing a function, instance of other class is created and program call its method and implements it.\nIts advantage is that there is low degree of coupling, instead polymorphism can be used. It makes program more flexibility. Its disadvantage is that an object instance has to be created to use delegation, which can be regarded as inefficiency.\n\nFor example, when you develop smartphone apps with which users can make a reservation. User can reserve restaurants, movie ticket, museum and so on. There can be restaurant class, theater class, museum class, etc. But all of these classes needs the function which make users make a reservation. Common function can be made in Reserve class and manage the function related with reservation. And restaurants, museum, theater classes inherit reserve class. This is inheritance case. On the other hand, messages like reservation success/failure can use delegation. Because there are lots of messeages, like incorrect date, incorrect number, incorrect time, etc. When the program use inheritance, it need too many classes. In this case, delegation is more efficient.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585436,
      "meta": {},
      "text": "The difference between inheritance and delegation is the way already implemented or specified functionality is used. By inheritance or either able to use already implemented methods from the upper classes or use the specification from an interface or an abstract class while implementing the method in the same class. \n\nInheritance makes sense to use when you are not sure yet how many methods you will have becasue it is easy to add and modify functionality/mehods in different classes without changing them in the upper ones. Which could also be a disadvantge because if something changes in the upper classes you might have to change something in the lower classes too.\n\nDelegation is very flexible and easy to use becasue you can easily use methods or functionality of other classes, which is an advantage, But by using methods all over the system might be a bit unclear and on top of that creating objects of the classes where the method is your  trying to use might be expensive.\n\nInheritance: \nevery tool u can use on each page is inherited from one main page design. \n\nDelegation:\nFor example if you want to answer messages immediately  on the lock screen not in the app it could use the answering service from the app by delegation rather than inheritance because if something changes in the app you have to change something on the lockscreen too.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5587006,
      "meta": {},
      "text": "Inheritance means that you use an implemented functionality in the superclass whereas delegation means using an implemented functionality in an existing object.\nOne of the advantages of inheritance is that you can easily implement (override the method in the subclass) new functionalities. One of the disadvantages on the other hand occur if you change the implementation of these methods in the superclass, there might also be changes necessary in the subclass.\nOne of the advantages of delegation is its great flexibility. You can create objects of type class from which methods you want to have access to (assuming both of these classes are in the same folder/project).\nOne resulting disadvantage is the potential inefficiency because an object instance needs to be created to have access to the required methods.\nIn the context of smartphones, I would use inheritance for functionalities like the voice assistant. As in H06E02, the user might want to have multiple voices for the voice assistant. So you implement a class voice assistant which has functionalities to read text and you implement subclasses for every new voice you want to have.\nI would use delegation for the creation of screen messages of an application. I would implement a Display class which has methods to display information on the screen and in every class that wants to display something, I would create an object of the type Display to be able to use these methods.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5588656,
      "meta": {},
      "text": "Inheritance und Delegation verfolgen das Ziel, Code-Duplikate zu vermindern und Code an verschiedenen Stellen wiederzuverwenden. Bei Inheritance hat die Klasse, die Code reused, eine IS-A-Beziehung mit der Superklasse -> sie erbt den Code von der wiederverwendeten Klasse. Man braucht kein Objekt, man bildet Subclasses, die die Funktionalitäten der Superclass erben: Konzept basiert auf Subclassing.\nBei Delegation hingegen hat die wiederverwendete Klasse eine HAS-A-Referenz auf die wiederverwendete Klasse. Diese Referenz ermöglicht es, Aufgaben an die wiederverwendete Klasse zu delegieren. Bei Delegation gibt es immer ein Objekt, das eine implementierte Funktionalität wiederverwenden kann. Ein Objekt einer anderen Klasse wird als Instanzvariable verwendet und Nachrichten an diese Instanz weitergeleitet.\n\nDelegation ist flexibler und man stellt nur Methoden bereit, die wirklich sinnvoll sind, aber evtl. ineffizienter, weil es Overhead gibt, da immer Objektinstanziierung stattfinden muss. Inheritance is einfach und straightforward zu implementieren. Allerdings kann hier eine Änderung in der Superclass auch eine Veränderung in der Subclass erzwingen. Die Subclass hängt stark von der Superclass ab und kann nicht so unabhängig genutzt werden wie bei Delegation.\n\nDer Aufbau des Userprofils, das auf dem Smartphone angelegt wird, soll von einer Superklasse erben. Wenn es Änderungen gibt, sollen diese Änderungen sich auch immer auf die Subklasse übertragen. Es gibt konkrete Funktionen, die das Userprofil nutzen kann und auf jeden Fall erbt.\nBei Appinstallation wird Delegation praktiziert: Die Verantwortlichkeiten werden an die einzelne User-Instanz weitergegeben. Hier werden jedes Mal nur spezielle Funktionen genutzt.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5593176,
      "meta": {},
      "text": "Inheritance describes a class/base, which is being extended by a new class/a more advanced version of the base version. This means, the functions of the base version are still accessible (might be modified), and additional functions were added. This brings the advantage that inheritance is very common in all kinds of programming languages and it’s also easy to use & implement. However, if not careful, it might give access to methods of the child class and also let the child class make adjustments.\n\nDelegation, as the word implies, delegates a function (or more) from the current class/base, to another class/base. This means the other class can execute the function and then send it to the initial base. A huge advantage is the flexibility of the system, however, this might create greater inefficiency, because the new class has to be implemented first.\n\n\nInheritance: The iPhone models represent the idea of inheritance because taking a closer look at the iPhone 13, this can be considered the “base model”. The iPhone 13 Pro inherits from it, all the available functions, but extends this “base” with additional functions like a third camera. \nI chose this example because in my opinion the additional features to the base model can be clearly seen and that is what a Pro model sets itself apart from the base model.\n\nDelegation: Oftentimes a selfie stick has a button attached to it, in order to take a photo. This button is mostly connected via Bluetooth to the phone and has access to the camera app. Therefore, this can be seen as a delegation, because the button is essentially catching the operation and sending it to the camera app.\nIn my opinion, this example clearly shows how functions of a phone can be delegated to additional accessories, and one can very well imagine how it works.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594481,
      "meta": {},
      "text": "Delegation advantage: \nhigh flexibility, especially during runtime. \n\nDelegation disadvantage: \nrather complicated and requires more code as we have to create a new object every time. also, many modern object oriented languages make it rather hard or time-intense to use delegation due to a lack of support\n\nInheritance advantage: \nthe concept is rather intuitive and easy to understand and it is supported by almost every programming language\n\nInheritance disadvantage: \nas subclasses extend the superclass, all functionality from the superclass is exposed to the subclass which might cause some issues with security \n\nDifference between Delegation and Inheritance: \nAs inheritance means extending from a class and therefore getting access to all the functionality, in delegation it is more precise as you only get access to certain functionality that is captured in an object of another class.\n\nExample for delegation: \napple iPhones warn the user if the phone is exposed to conditions that might damage the phone such as extreme heat. these systems try to offset some of the outside conditions, but if those get to extreme, the system delegates the task of changing the conditions to the user/owner of the iPhone. \nI think this is suitable as we see that the phone delegates a task while working on solving the issue itself. \n\nExample for inheritance: \nWhen looking at the inside of an iPhone, one should use inheritance. If the iPhone gets bigger, so should the battery, the processor or the camera in order to keep up/improve functionality. \nI think that suits well as it shows that changing one superclass changes all associated subclasses. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595210,
      "meta": {},
      "text": "In delegation, an object of another class is used as an instance variable messages are forwarded to this instance. This provides additional flexibility. \nAn example for delegation would be to use the build in camera of a smartphone in an app. You use the functionality of the existing object camera, to e.g. play a game like Pokemon Go.\n\nInheritance on the other side is a concept by which one class inherits the property of another class (the super class). The new class class, which is known as subordinate class adopts the properties and methods of the existing class. \nAn inheritance example for smartphones would be the iPhone. You have e.g. an iPhone 13 as a super class and the subordinate classes the iPhone 13 mini, 13 pro, and 13 normal. Each smartphone has a similar architecture, but based on the model some components change. The basis is the same and implemented in the superclass.",
      "score": 33.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596356,
      "meta": {},
      "text": "Difference between Inheritance and delegation:\n\t\tInheritance uses functionality of an existed Class while Delegation forward the data from one Class to another, forwarding data to another class to handle it. For example: MVC architecture.\n\nAdvantage of Inheritance: If functionality, that are needed already existed in a Class then it's time and cost effective to inherit it.\nDisadvantage of Inheritance: If some changes occure in the existed/parent class then it will effect our system too because we inherited these functionalities.\n\nAdvantage of delegation: It makes the system looks cleaner and easy understandable and every part of the system handle it's own task.\nDisadvantage of delegation: To bypass the data from one class to another, the constructor of that class should be created which might not be possible that moment.\n\nInheritance Example: Every Smartphone has Alarm, Calendar, Clock system so the latest Smartphone just inherit these functionality to the new one. \nDelegation Example: An example could be bypassing of data from one App to Another. For example: I am browsing the Internet and when i click on an Email, it automatically opens an email service (maybe gmail) and Email address written on it so the Email address is bypassed from Browser to an email service app.",
      "score": 50,
      "language": "ENGLISH"
    },
    {
      "id": 5596450,
      "meta": {},
      "text": "Inheritance is when a base class is extended by another class either by overriding operations in the base class or by adding new methods to have more functionality.\n\nDelegation is when a class is a variable in a different class in order to comfortably use the functionality of the delegated class.\n\nInheritance advantage: - easy to add functionalities\nInheritance disadvantage: - kid classes are dependant on the changes made in the parent class\n\nDelegation advantage: - easy to have all functionalities directly by delegating\nDelegation disadvantage: - could cause to lsoe overview when delegating a lot between different classes or delegating a class within a delegated class\n\nSmartphone:\nInheritance: Would use inheritance for different widgets, where the parent class gives the general functionality, but the children class extend the parent class by having specific tasks. For example the time widget would be a different children class than the weather widget. I would choose it to easily create different functionalities with the same concept of a widget, but different specialisation in the children classes.\n\nDelegation:\nWhen you have an operating system, such as android to instantly have all the security measures and functionalities available. I would choose it so I can have all functionalities of a basic operating system before adding my changes.",
      "score": 75,
      "language": "ENGLISH"
    },
    {
      "id": 5586259,
      "meta": {},
      "text": "Bei der Delegation leiten wir eine Operation an ein Objekt weiter, bei dem die Operation bereits implementiert wird. Wir verwenden also die Funktionalität eines existierenden Objekts.\n\nBei der Vererbung erweitern wir eine Basis Klasse, indem wir Methoden überschreiben oder erweitern. \n\nEin signifikanter Unterschied ist, dass bei der Vererbung keine Instanz der Basis Klasse erstellt werden muss (abstrakte Klasse) um die Methoden erweitern bzw. überschreiben zu können. \n\nDer Vorteil der Delegation ist, dass sie generell flexibler ist als Vererbung. Delegation kann jedoch ineffizienter sein, da immer eine Instanz des Objekts erstellt werden muss.\n\nVorteile der Vererbung sind, dass viele Programmiersprachen die Vererbung unterstützen und sie so meist einfach zu implementieren ist. Vererbung kann dazu führen, dass die Superklasse überflüssige/ungewollte Methoden enthalten muss.\n\nAdditionally come up with an example in the context of smartphones for each concept and explain why you would choose it.\n\n\nBei einem Plan zur Entwicklung der Software für ein Smartphone die texte vorliest ist es sinnvoll alle Sprachen von einer abstrakten Klasse Sprache erben zu lassen. So können alle Subklassen (Sprachen) die Methoden der Klasse erben und es muss aber kein allgemeines Objekt Sprache erstellt werden.\n\nDelegation kann zum Beispiel verwendet werden um eine bridge Pattern zwischen der Implementierung der Software des Handys und der Anwendung zu erstellen ",
      "score": 91.7,
      "language": "GERMAN"
    },
    {
      "id": 5587570,
      "meta": {},
      "text": "The main difference between inheritance and delegation is that in the process of inheritance (existing types: implementation inheritance, specification inheritance) the subclassing class will inherit all properties of the superclass beeing unable to hide a special selection of public attributes and methods whereas in the process of delegation a receiver intantiates a private object - called delegate - needed, to provide a client with some functionality and to which all method calls from the client are delegated, with the option to hide some functionality of the delegate the client should not have access to. \nOn the one hand, inheritance is really useful to extend the functionality of an existing superclass without any overhead but one the other hand might expose inevitably properties of the superclass which should not be avaible for various reasons. \nDelegation therefore is more flexible: the software engineer can decide which functionallity should be provided by the receiver and which functionality should be hidden from the client. As each method call must be passed through the receiver object, some overhead must be accepted when using delegation. \nLet us look at an example for each concept in the context of smartphones: Assume we have already implemented a class smartphone which offers the methods call(Person) and searchOnTheInternet(Keyword). Now some client wants to develop a smartphone for older people only offering the functionality to call someone. Here we can use delegation to hide all functionality except the method call(Person) from the user without implementing anything new (reuse). Now another client wants to have a smartphone offering addionally the functionlity to take pictures. Now we use inheritance to maintain all functionality of the existing smartphone class and enhance it. \n\n",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5590914,
      "meta": {},
      "text": "the difference between inheritance and delegation:\ninheritance uses the methods in its superclass.\ndelegation uses the methods in another class.\n\ninheritance:\npros:\n-its easy and clearly to use\n-it can be used in many programming languages\n-can easily add new functionality in the subclass\ncons:\n-we will exposes some methods of the super class that we actually don't want\n-the changes in the super class will influence the subclass\n\ndelegation\npros:\n-its more flexible \n-its might not be very efficient, because we need to create a new object instance\n\nexample for inheritance:\nin the smartphone we have address book.\nwhen we add some new addresses into the smartphone, each address use inheritance from the basic one.\ni choose inheritance for this ,because each address has name from its owner and a number .\nand we can add some extra things very easily, like birthday or something else.\n\nexample for delegation:\nwhen we want to play some thing in the smartphone, like music.\nwe need to give this work to some class like audioplayer.\ni choose delegation for this situation, because we need here to use the music playing function very flexibility.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593735,
      "meta": {},
      "text": "Vererbung bedeutet, dass man die Eigenschaften einer schon bestehenden Klasse übernimmt indem man die neue Klasse von der bestehenden ableitet bzw unterordnet. Man übernimmt einerseits die bestehenden Attribute und das Verhalten und ergänzt oder überschreibt beide. \n\nBei der Delegation wird die zu durchführende Aufgabe von der Klasse aufgenommen und an eine andere (bereits bestehende) Klasse weitergereicht. \nDadurch kann die weiterreichende Klasse genau definieren wie die 3. Klasse zu benutzen ist und bspw. manche Funktionen ausschließen.\n\nBeispiele:\n1. Vererbung: \nDie Snapchat App nutzt die normalen Funktionen der Kamera(app). Fotos und videos können gemacht werden. \nAllerdings werden diese bestehenden Funktionen ergänzt indem der Nutzer beispielsweise Filter hinzufügen kann.\n\n2. Delegation: \n\n",
      "score": 75,
      "language": "GERMAN"
    },
    {
      "id": 5593964,
      "meta": {},
      "text": "In both cases, inheritance & delegation, some kind of functionality is demanded, which is not directly implemented by our \"main\" class. There are two options now, how we can get the desired functionality.\n\n\nOne of them is delegation. Here we instantiate an object of a different class within our \"main\" class. This newly instantiated object (it's class) implements the desired functionality, which enables us to reuse the needed methods within our \"main\" class of the instantiated object. \nWhile delegation enables you to use functionalities of an existing method without overwriting it (advantage), it requires you to instantiate a new object which is costly(disadvantage).\n\nFor Inheritance, we create a new Subclass. This subclass will therefore be able to reuse methods of its superclass without the need of instantiating by calling super.method() or implement new functionalities itself, which extend or override functionalities of the superclass. \nWhile inheritance provides a clear structure within you code(compared to delegation)(advantage), it might expose unwanted methods/ functionalities to the superclass.\n\nAn example for delegation within my smartphone can be found by looking at the weather app. It uses the already existing functionality of constructing my GPS data, which is given by the smartphone itself, and then uses it to fulfill its own functionalities.\nAn example for inheritance can be found in WhatsApp. There, two different kinds of chats (personal and group chats) exists. Inheritance can be used in this case to avoid duplicate code by gathering common functionalities, such as displaying images/ messages, creating notifications, ability to start calls in the superclass Chats.\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595141,
      "meta": {},
      "text": "Inheritance: Als Subklasse erweitert sie die Oberklasse oder überschreibt deren Methoden\nVorteil: Einfach zu verwenden\nNachteil: Womöglich hat die Subklasse jetzt Methoden der Oberklasse die sie jedoch nicht braucht. \n(Beispiel in den Vorlesung Stack als Subklasse von Liste  zu implementieren. Der Stack hätte neben ihrer pop, push und top Methoden immer noch die add und remove Methode der Liste die sie aber nicht ausführen sollte)\n\nContext: Das Bildschirm des Handy, kann als eine Subklasse von Bildschirm implementiert werden. Dies ergibt sind \nda die meisten Bildschirme die selben Eigenschaften aufweisen.  \n\nDelegation; Methoden werden abgefangen und dann durch andere Klassen ausgeführt.\nVorteil: Mehr Flexibel in der Behandlung von Operationen\nNachteil: Ineffizient, da ein Objekt instanziiert werden, welche die Operationen abfängt\n\n",
      "score": 91.7,
      "language": "GERMAN"
    },
    {
      "id": 5595149,
      "meta": {},
      "text": "Inheritance means one object inherits the properties of a superior. It inherits all functionalities and properties, in the case of programming usually methods and parameters in the constructor. It's easy to implement and widely supported. Also, by adding or upgrading new functionalities to the superior class one can easily upgrade the same for its subclasses. However, the subclasses having everything implemented from the superior isn't always wanted, sometimes only certain methods should be called, or only certain attributes should exist for the subclass, the rest may even create trouble. \nDelegation does not tie the objects tightly, an object directly uses certain functionalities implemented in other objects. They do not have a 'superior - subclass' relationship, only the required things are implemented. Therefore it's more flexible to use. However it may not be as efficient as inheritance due to the objects being independent, and in case multiple properties and functionalities are required from other objects, it's more complicated to implement. \nNowadays smartphones are not just phones, but they include many functionalities of a computer as well. This is done by running an OS and softwares built for it. The OS kernel and underlying components for mobile OSs usually inherits its desktop counterpart, for example the Darwin kernel, the Linux kernel, and the WinNT kernel. Because the kernel provides basic functionalities to keep the OS running and provide basic IO, most of these services are also needed on smartphones. However the UI and most GUI programs don't inherit from the desktops OSs because of the very different device form and use cases, only certain services, modules and libraries present in desktop OSs are needed by mobile OSs. Therefore in this case delegation is used, and the rest is created anew. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595778,
      "meta": {},
      "text": "// real answer begin\nBoth inheritance and delegation give you the ability to reduce duplicate code. The difference is that inheritance extends the functionality of its superclass and delegation doesn't.\n\nThe advantage of inheritance is that if it's used for what it's thought for, then it's a powerfull feature that let's you create well maintainable code.\nInheritance means overwriting an already implemented method and also probalby calling the implementation of the super class. That leads to bad maintainable code because:\n\t1. One change in the superclass -> you have to refactor all subclasses\n\t2. Inheritance means you can say: The <subclass> is a <superclass>. In most cases Inheritance is used (especially in the second inheritance layer and deeper) wrongly. Strange structures are built where you can't even say if the <subsubsubsubclass> is a <superclass>. Then overwriting is just a tool of reducing duplicate code but its sense is completly gone. Delegation should be used here instead.\n\nThe advantage of Delegation is that you can reduce duplicate code and wrap up functionality. You don't have to ask yourself the question is <this> a <that> or whatsoever. It's easily maintainable because you just can change the functionality in a function.\nThe disadvantage of Delegation is that you cannot that easily use different implementations of the same functionality. But therefore should be used an interface with implementations (This is the good kind of inheritance if you even can call it inheritance anymore).\n\nIn context of smartphones you could use an interface for the camera functionality and make a specific implementation for every smartphone because every smartphone has a different camera and therefore you just need to work with the camera interface.\nFor the contact book I would make an own class that controls the contacts. Then the mail app, the phone app and other apps could use this class. There delegation is usefull.\n// real answer end\n\n// cynism start \nInheritance is the franatically try of avoiding delegation in order to be fancy. Everybody every written a subclass with more than two parents is a passionate masochist or just wants to see the world burn. Use interfaces and everything is fine. Rewrite your last project written in Java with Rust, then you will overthink your opinion about method overwriting by inheritance.\n// cynism end\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596144,
      "meta": {},
      "text": "When using inheritance all of the functionality of the parent-class is visible to the outside. But when using delegation you can only access the functionality of the delegated class internally or choose what to expose to the outside.",
      "score": 16.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596435,
      "meta": {},
      "text": "Inheritance means that you create a whole new subclass that inherits the attributes and behavior of it's parent class, while delegation means that you create a new class that is made for a specific problem, and then just use an instance of that class in your original class and pass on the functions.\nBoth are valid ways of creating new functionality, delegation has the advantage that it is much more dynamic and allows functionality to be accessed by other classes. A delegated class can be reduced to a single functionality, while an inheritance usually can't be reused by other classes in an elegant manner. It's disadvantage is that it doesn't follow the philosophy of polymorphism.\nOn the other hand, inheritance has the big advantage that it is much clearer what the point behind of a class really is and makes it more readable (inheritance describes an \"is-a\" relationship). It's disadvantage is that you often need to re-implement methods of the super class that sometimes make no sense in the specific use case and should not be implemented at all.\nAn (not so elegant because I am confused by the prompt) example in the world of smartphones could be made of thermal camera phones. There are phones that have a build in thermal camera (such as phones made by CAT) and on the other hand there are modules that can be used to add the same functionality via USB (such as ones offered by FLIR). The first represents inheritance, as it IS A smartphone with the added capability of taking thermal images, while the other one is delegation, as it is a module that can be added to any smartphone. You would want to use the module (delegation) when you have a set of different devices that should all share this common functionality, even non-smartphones (you can add such modules to PCs, too). The thermal imaging smartphone on the other hand should be chosen when you only want this functionality IN COMBINATION with the functionality of a smartphone (and inseparable from it). This would represent inheritance.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596567,
      "meta": {},
      "text": "Difference:\tRegarding inheritance, a functionality/ operation is implemented through inheritance of a \n\t\t\tsuperclass. The functionalities are accessible by inheritance from the subclass via\n\t\t\tsuperclass.\n\t\t\tIn contrast, delegation calls the functionality/ operation via an instantiation in another class \n\t\t\twhere the functionality is defined. It consists of Client, Receiver, Delegate.\n\nAdvantages:\n\tInheritance:\tMostly all programming languages provide inheritance, so it is quite easy + \n\t\t\t\tcost-effective. \n\tDelegation:\tIt is more flexible than inheritance as you don't have to consider all the inherited \n\t\t\t\tmethods from the parent class. Rather, you only choose the functions you need.\n\nDisadvantages:\n\tInheritance:    \tGreatest disadvantage of inheritance is probably the behaviour of methods + \n\t\t\t\tattributes between parent/ child class --> polymorphism. It can be difficult\n\t\t\t\tsometimes reaching the desired effect of a function as it can happen that the system \n\t\t\t\tcalls an overridden method in a sub/superclass.\n\tDelegation:\tIf you're focused on maintaining a very high performance level delegation might\n\t\t\t\tlead to curtailments due to the extra implementation of the class objects sending \n\t\t\t\ta request to the delegation class.\n\nSmartphone example:\n\tDelegation: \tAs you have many apps on the smartphone, every app has at least some equal methods\n\t\t\t\t(e.g. open(), close(), etc...). Here, inheritance can lead to problems as it can lead to \n\t\t\t\tmistakes between overridden methods in parent/ subclasses. In this case, delegation \t\n\t\t\t\tcan bypass this problem.\n\tInheritance: \tWhen the phone operation system receives a software update with new functionalities \n\t\t\t\tfor example, it could be useful to implement those via inheritance below the already\n\t\t\t\texisting subclasses. This can save time + money as it is easy to use. \n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5583762,
      "meta": {},
      "text": "For inheritance the class either needs to be a specification of the upper class or you can actually use nearly all of the attributes and methods. Therefore you want to prevent code duplication in your project. \nAn advantage is that it's easy to implement everything you want on top of the functionalities of another class, but this also can be a disadvantage if you don't want every method to be used by the new class.\n\n\nIn contrary, by delegating you use one class's methods to build a class with different methods that use the methods of the first class. By doing that you save up unnecessary functionalities and inheritances in your new class.\nThe advantage of Delegation is that you can use multiple classes and are not limited to one.(inheritance is limited to one class) But by doing that you also risk multiple objects being created and therefore may have memory storage problems at scale.\n\n\nInheritance:\nIf Google wants to create their new line of Google Pixels (7,  7a, 7 pro), they won't rewrite their code for every variation of this line of smartphones. Instead they will implement the basic functionalities for every phone and then use this to create the different variations with their specific functionalities.\n\nDelegation:\nIn contrary if they want to create the new Google Pixel 8 and they still have code from the Google Pixel 7 they want to reuse this code by delegating from it and implement new features on top of that.\n",
      "score": 75,
      "language": "ENGLISH"
    },
    {
      "id": 5584830,
      "meta": {},
      "text": "Inheritance is used when one wants to enhance and further develop the functionality of a base class in a child class which then inherits all the attributes and methods of the mother/father class, where existing functions can be overridden and also new functionalities can be implemented. Whereas delegation only copies existing functionality from one class into new classes by adding an instance variable to the new class that need the functionality of the existing class as well.\nInheritance:\n\tPro:\n\t\t- broadly known concept that is supported by many programming languages like Java or C++\n\t\t- doubles of code are avoided since code gets reused\n\tCon:\n\t\t- One needs to be absolutely sure that the super and child class do have an \"is-a\"-relationship because all changes that are made in the super class might cause changes in the child class as well\n\t\t- Child class might inherit unwanted or unneeded methods from the super class\n\nDelegation:\n\tPro:\n\t\t- only the needed methods can be used and the methods that are not needed are simply not \ncalled\n\t\t- doubles of code are avoided since code gets reused\n\tCon:\n\t\t- you need to add an instance variable to the delegate class which might use unnecessary much memory \n\nExamples:\nDelegation:\nA company that produces two types of smart drinking (one standard one and one special one) bottles releases two different apps that control the two bottles via your smartphone (heat up drink/cool). The apps are quite similar at the moment (as well as the functionality of the bottles) and thus use delegation since the similar behavior might change in the future since the special bottle might get updates and new functionalities\nInheritance:\nThe company of the drinking bottles releases two already at the beginning different bottles but with the same base functionality and thus for the apps inheritance is used where the standard bottle inherits all base functionality and has no further functionality but the special bottle additionally has some special functionality which is added to the inherited base stuff.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5585047,
      "meta": {},
      "text": "Inheritance is a structure that allows a superclass to have multiple subclasses which are able to override existing methods or create new methods. Delegation is a structure that allows a class catch a method or operation and delegate the operation to another object. The advantage of inheritance is that it's straightforward and clear to use, but it does not exploit full use of the parent class, which means that some methods in the parent classes might be unwanted. Delegation, on the other hand, is more flexible, since it does not require a fixed object. However, the efficiency of the structure is often questioned since it creates new instances all the time.\n\nA typical example for both cases is smartphone. On the one hand, users need to use different types of apps. Some apps require camera access, whereas others require microphone access, etc.. In this case, a superclass app with multiple subclasses who each has a unique access right is going to be a good idea. On the other hand, users nowadays receive messages from multiple applications other than the default messager, such as whatsapp, signal, telegram and so on. The notification system can be refactored into delegation. Users receive a notification, which later delegates to specific apps, as long as user wants to view the message.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585073,
      "meta": {},
      "text": "Bei Inheritance übernimmt eine neue Unterklasse die Attribute und Methoden / Funktionalitäten der Oberklasse und kann diese erweitern und auch überschreiben. Bei Delegation werden Funktionalitäten an eine Instanz einer bestehenden Klasse übergeben.\nEin Vorteil von Inheritance ist, dass man leicht spezialisierte Klassen erstellen kann, bei denen dann schon viele wichtige Methoden durch die Oberklasse gegeben sind und man diese bei Bedarf auch überschreiben kann.\nAllerding ist es ebenso möglich, dass man wenn die Oberklasse verändert wird, gezungen sein kann auch die Unterklasse anzupassen.\nDelegation hat den Vorteil, dass man einfachen Gebrauch von in anderen Klasssen implementierten Funktionen machen kann, indem man sich von den bereitgestellten Funktionen genau die aussucht, die man braucht. Nachteil hierbei ist, dass sich dabei der Speicherverbrauch erhöht, da man Funktionsaufrufe nur auf existierenden Instanzen ausführen kann.\nBei Smartphones beispielsweise macht es Sinn, dass wenn eine App irgendeinen Kontext auf dem Display darstellen will, diese App diese Aufgabe an beispielsweise das Betriebssystem weiter deligiert, da dort bereits entsprechende Funktionalitäten implementiert sind und Smartphones vergleichsweise wenig Speicher/ Cache haben. Inheritance und damit die Instanzierung eines Objects würde Speicherverbrauch bedeuten.\nWill man aber z.B. dem Smartphone eine neue Funktion hinzufügen, wie die Möglichkeit mehrere Bluetooth Geräte synchron anzusteuern, müsste man einen neuen Audiocontroller implementieren. Da dieser aber wahrscheinlich auch alle Funktionalitäten des Default Controllers haben soll, macht es Sinn die neu Verssion von der alten erben zu lassen und dann die neue Funktionalität zu ergänzen.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5585092,
      "meta": {},
      "text": "With inheritance, code reuse is implemented by using the functionalities in the sub class that are provided by a super class and extending them further in the sub class. This could for example be used if we have a superclass \"smartphone\" that provides functionalities that almost every smartphone has, and many sub classes (more specific kinds of smartphones, zB. iphone, sony mobile) that have further functionalities (zB. iphone can connect to ipad). \n\nDelegation describes a means for code reuse where an object catches an operation and further sends it to another object. For example, the class smartphone could delegate the functionality \"saveContact\" to another object \"List\" where all the contacts are administrated. \n\nDelegation offers (in comparison to inheritance) the opportunity to easily chance the object implementation as there is a mediating party. Moreover, in delegation there is generally no overriding of methods. A disadvantage of delegation is that it is inefficient, because objects are encapsulated. Inheritance on the other hand is very easy to use but changes in the parent class force the subclass to change well (at least it requires recompilation) ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585133,
      "meta": {},
      "text": "With inheritance, the subclass receives all functionalities of the superclass, regardless if it needs them or not, but no additional object has to be created.\nUsing delegation, an object of the class of which functionalities are needed has to be created, but only the required functions of the delegated object can be used.\n\nInheritance:\n-Advantage: Easy to use and supported by many programming languages\n-Disadvantage: Unneeded or unwanted functionalities of the superclass are passed to the subclass (some may even be opposing the subclasses functionalities)\n\nDelegation:\n-Advantage: Only the wanted functionalities of the delegated object are used.\n-Disadvantage: Each delegated object needs to be instantiated, which causes overhead.\n\n\nInheritance: Most operating systems of smartphones are just extensions of their previous versions, meaning they inherit all previous functionalities (with minor changes) and maybe add some additional functionalities.\n\nDelegation: Instead of implementing its own audio output, it uses an already existent audio driver and delegates the audio driver to do the output for it. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589350,
      "meta": {},
      "text": "Inheritance and delegation are design concepts of the interface specification with a common goal, to reuse code and its functionality efficiently, but they do differ in many aspects. \nFirstly, inheritance is hierarchical - as it gives objects the role of super and subclasses - and delegation isn't at all, because the Client sends his needs to a receiver which delegates it to a delegate. Delegate and Receiver aren't hierarchically related. Inheritance is about sharing all the parent functionality with the sub-classes and extending on them deeper down the hierarchy. As this hierarchy is transparent to the system, this kind of specification is called white-box-reuse. Delegation has an instance of an object handling the functionality of the interface, outside of the system itself. As we do not know the specifics of the implementation in this delegation-system, it is called black-box-reuse. \n\nOne of the many strong points of inheritance is the ability to easily extends specifications (subclasses) in the hierarchy. In other hand, inheritance forces the subclasses to use all the functionality of the parent class which is problematic, because changes in the parent class affect the subclasses and some of the parent methods which arent really needed in the subclass do still have an implementation there. \n\nDelegation is able to be more precisely effective in providing needed functionality. We can use as many delegates as we want, and with as many functions as we want. This makes the delegation very flexible. As the delegate has to be an active member of the system, instancing the delegation class can lead to a minus in performance.\n\nSmartphones can greatly gain from these two types of reusage. Imagine the system for the ipods and ipods pro. ipods pro do have more functionality implemented in their software, but the basis of implementation is the same. the ipods pro dont want to be amiss of any function the ipods have. This is a good reason to let the ipods pro be a subclass of the ipods, so they can extend on their functionality like noise-cancelling etc..\n\nDelegation could be useful when wanting a feature that uses a calendar. Mobile phones often offer the possibility to interact with the already implemented calendar application. Because of that, many applications from the appstore do not need to implemented a calendar from new and the receiver just delegates to the calendar application. An example for this are daily-planner-apss offering calendar synchronization. This design decision does safe time for implementations and personal storage for the end user.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593259,
      "meta": {},
      "text": "Inheritance extends a base class by a new operation or overrides an existing operation and the reuse is implemented functionality in the superclass, while delegation catches an operation and sends it to another object and the reuse is implemented functionality in an existing object.\n\nAdvantage of inheritance: straightforward to use\nDisadvantage of inheritance: changes in the parent class can force the subclass to change as well\nAdvantage of delegation: generally more flexible\nDisadvantage of delegation: might be more inefficient, because an object instance needs to be created\n\nExample for inheritance: \nThe parent class is class Smartphone, which has methods like call(), takePhotos(), mobilePay() and so on.  The subclasses are class Iphone, class Samsung, class Huawei. These three subclasses inherit all of methods from class Smartphone. However, class Iphone overrides method mobilePay() and implements its own ApplePay. Class Samsung and class Huawei also override this method and implement SamsungPay and Alipay.\nExplanation: \nSmartphones have a lot of brands and each brand has its own system. Most common functions are same in all smartphones, but the implementation of some functions differs due to different systems and designs. Inheritance is here better because I want to override the methods.\n\nExample for delegation:\nTo implement the function of taking photos, the delegate is class Smartphone and has methods takeNormalPhotos(), takePanoramicPhotos() and takeVideos(). The receiver is class Iphone, class Huawei. Class Iphone has own method takeSlowMotionPhotos() and class Huawei has method takeSuperNightView().\nExplanation: \nThe methods of common photo options are the same in all smartphones. However, smartphone of each brand also has its own speical options, which can be implemented in its own class. Delegation is here better.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593273,
      "meta": {},
      "text": "Inheritance makes you dependant on a base class meanwhile delegation lets you perform a task using an external class .\nthe main advantage of delegation is the seperation of concerns so that we have specialised classes we can re- use but one disadvantage is that we dont have control over the delegated task .\nWhen used correctly (the base and child classes are really related ) the inheritance makes our code easier and more maintainable  but a  downside  is that you are tied to the implementation details of the base class so if these implementations  are to be changed it will have an impact on your whole code.\nAs for when those two concepts are used in smartphones:\nIn iphones for example we have the video recording functionality that can tell if a recording is done and this functionality is delegated to the audio player so that it can replay said videos as much time as it wants.\nas for the inheritance in the smartphones : The MMS and SMS functionalities the two of them expose the same behaviour so we can assume that the MMS functionality inherits from the SMS one.And reuses its functionality changing only the message type handling",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593493,
      "meta": {},
      "text": "DELEGATION refers to black-box-esque \"outsourcing\" of functionality to an existing system that provides these services already. In the context of smartphones this would mean plugging in to capabilities provided by the phone's OS (on iOS e.g. Apple's ARKit for AR capabilities).\nThis mainly has the ADVANTAGE of both speed (such offerings are very well integrated and hence hardware accelerated) and reliability (especially safety and security, you do not need to worry about the maintenance yourself because it is in the manufacturer's jurisdiction). For graphics-related jobs this is the best choice.\nTHEN again, you may find yourself forced to implement the functionality in ways expected by the OS and may have less freedom in writing your code.\n\nINHERITANCE means subclassing from a given blueprint. You build upon what is already there instead of simply making use of it.\nOn the ONE HAND, this implies you have much greater control over your code. This makes sense for the underlying details of your application, say your backend business logic architecture serving the phone's user requests for example.\nOn the OTHER HAND, oftentimes, you will not benefit from the performance optimisation of delegation.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594948,
      "meta": {},
      "text": "Delegation:\n-delegate operation to another object (instance of the existing class) where the desired function is already implemented -> we call a method in that object\n-reuse of an implemented functionality in an existing object\nPRO: more flexible\nCONTRA: a new object needs to be instantiated, less efficient\n\n\n(Implementation/Specification) inheritance:\n-we implement a subclass of an existing superclass (potentially an abstract class) or interface\n-reuse of a specified or implemented functionality in the superclass\n-subclass should be of same \"type\" than the superclass, e.g. List - ArrayList\n\tImplementation inheritance:\n\t-the subclass just extends the superclass by adding a new functionality or overriding an existing operation\nPRO: easy to implement new functionality in subclass, easy to understand\nCONTRA: change in superclass might lead to necessary changes in the subclass as well, the subclass might inherit operations that are not desired \n\nSmartphone example: \nA smartphone is a mobile phone that users use to call or text other people, to listen to music, to take pictures, to connect to the Internet and various web servers or to navigate on Google Maps.\n\nFirst of all, a smartphone is a mobile/cell phone. They developed out of phones people just used to communicate via SMS and calls. A smartphone inherits these kind of functionalities from plain phones. A smartphone IS a phone with extended functionalities. So, I would use inheritance for the association between the classes Smartphone and (Mobile/Cell) phone. The class Smartphone (subclass) inherits methods such as call() and text() from its superclass. In order to provide the Smartphone with the functionality of taking pictures, I would use delegation. If we have a class Camera that offers methods such as takePictures() and switchObjective(), our Smartphone class can delegate the needed function of taking a picture to an instance of camera we implement as an attribute in the Smartphone class. I choose delegation here, because a smartphone is not a camera; the class Camera offers methods that should bot be accessible in Smartphones (like switching the objective, which is not possible for smartphones yet).",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596532,
      "meta": {},
      "text": "When using inheritance all the functionalities from the superclass will be reused, as the are usable in each subclass. There is no need to create an object to call the methods. A common problem is the possibility to access methods of the superclass that should not be able to be invoked. On the other side there is the need fore the creation of an object when using delegation. Here the functionalities are redirected to another implemented class. The Client thereby cannot directly access the class directly, eliminating the possibility of unwanted access.\n\nExample smartphones:\n\n\t1. Inheritance:\n\tI would opt to use inheritance when having a own picture format on the phone. It should inherit from a more\n\tbasic picture format type, so that applications that expect that broader type can still work.\n\n\t2. Delegation:\n\tWhen dealing with restricted folders I would use delegation, so that no unwanted operations can be done\n\ton those and only people with access are able to do so",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5584171,
      "meta": {},
      "text": "Delegation and Inheritance are two terms that differ from each other. On one hand Inheritance is a model technique that where one class inherits all the properties of the super class which is called after that the child class: On the other hand delegation is a behavior and means that we use instances of  objects of other class  and give messages and operations to them. The most important Advantage of delegation is its flexibility since the delegate can be changed during run time however that can be inefficient since an object instance always need to be created and delegation is also not supported by most of the known programming languages. Inheritance may be more straightforward to use since the child class inherits directly from the super class. In Addition new functionalities and method implementation are easy to do, but inheritance can present certain disadvantages since the interconnection between the parent and subclass is always there, therefore a change in the parent class forces a change in the subclasses too and inheritance may as well expose some methods from the parent class which can pose access authority problems. ",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5591450,
      "meta": {},
      "text": "Der Unterschied zwischen Vererbung und Delegation ist, dass man bei der Vererbung eine Oberklasse und eine oder mehrere erbende Unterklassen hat und bei einer Delegation zwei oder mehrere Klassen hat, die nicht von einander erben, aber die eine Klasse die Referenz auf ein oder mehrere Objekt aus anderen Klassen enthält und für diese Objekt Methoden aufrufen (delegieren) kann. Konkret bedeutet dass, statt allgemeine Methoden in einer Oberklasse und eventuell überschriebene spezialisierte Formen dieser Methode in den Unterklassen zu haben hat man bei der Delegation eine Klasse die einfach eine bereits implementierte Methode einer anderen Klasse aufruft und damit arbeitet. \n\nEin Vorteil von Vererbung ist die Möglichkeit viele Klassen von ähnlicher Art über Oberklassen zu bündeln und damit eine allgemeine Schnittstelle (Oberklasse) hat auf die man zugreifen kann.  Ein Nachteil von Vererbung ist, dass in zb Java auf dynamic dispatches aufpassen muss, die zu unerwarteten Ergebnissen bei falscher Implementierung führen können. \nEin Vorteil von Delegation ist die Möglichkeit bereits implementierte Methoden in anderen Klassen zu nutzen ohne diese zu kopieren und damit Codeduplikationen zu verringern. Ein Nachteil ist dafür, dass man keine Oberklasse von beiden hat, die eventuell gemeinsame Methoden der beiden bündeln könnte. \n\nIn Smartphones könnte man für Apps beispielsweise Vererbung nutzen, alle Apps sollen geöffnet oder auf dem Homescreen verschoben werden können, aber jede App soll individuell andere Aufgaben erfüllen können wenn man sie startet (App als Oberklasse). Bei Apps die eine Kamera benötigen könnte man Delegation verwenden. Man implementiert ohnehin für die Kameraapp die Unterstützung der Kamera, andere Apps wie beispielsweise Instagram, die ebenfalls die Kamera benötigen können einfach Methoden der Kameraklasse aufrufen und mit den Rückgabewerten selber weiterarbeiten. \n",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5594268,
      "meta": {},
      "text": "Delegations gives you more modularity and flexibility and inheritance gives you a more \"solid\" structure for programm.\n\nWhile somtimes it is a good thing that inheritance guarentees that certain methods will be present in every inherited object it can also be the case that certain methods are not needed for every child of a class, in that case inheritance adds a lot of bulky unnecessary code (for example in methods that just throw a OperationNotSupported exception) wich is why an often used code style rule is to use composition over inheritance. \nInheritance mandates the exsistance of certain functions and lets you use different objects that inherit from the same parent interchangibly wich can in some cases produce more concise code.",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5595727,
      "meta": {},
      "text": "Difference between inheritance and delegation:\nThe difference between these concepts is that in inheritance you inherit all the functionality of the superclass which is pretty easy to use and set up but it might lead to some unwanted/undefined behavior (for example you could have an inherited method that you do not want in your class as it has nothing to do with it). On the other side delegation provides you this functionality through object instantiation. It is harder to set up and it requires an additional object to be created but it removes the possibility for unsafe behavior.\n\nInheritance example: \nFor example you want to develop a smartphone app for taking and editing photos. You want to use the built in Android library for this project as it enables you to use the camera to its maximum potential. As expect to constantly be adding new functionality, inheritance will be better for this project.\n\nDelegation example:\nYou want to develop a smartphone app that will be used for banking. You again will be using some of the build in Android functionalities. As in this sphere security is everything you do not want to use inheritance as it might have some unsafe behavior. Therefore delegation is the better choice.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5595751,
      "meta": {},
      "text": "Inheritance refers to the process in which one class takes the attributes and behaviors of pre-existing class, which is referred to as base, super or parent class while delegation refers to the process of passing responsibility for a task to another class or method. \n\nInheritance\n-Advantage: Reusability, which means when a class inherits from a another class, it can access all the functionalities of the inherited class.\n-Disadvantage: Coupling increases between super class and derived class. \n\n-Example: We could have the superclass Smartphone and the subclasses Android and iPhone, who would inherit from superclass its attributes and behaviors but also have its own.\n\nI chose this example because it displays the basic principle of inheritance in an easy way since smartphones share the same basic functions like calling and texting (inherited ones from main class) but also have their own individual and unique specifications.\n\n\nDelegation\n-Advantage: Run-time flexibility which means the delegate can be changed at run-time in an easy way. \n-Disadvantage: It is not supported by most popular object-oriented languages.\n\n-Example: \nclass Whatsapp {\n    void displayMessage()\n    {\n        System.out.println(\"Hi friend, how are you?\");\n    }\n}\n \nclass Smartphone {\n    Whatsapp w = new Whatsapp();\n     void displayMessage()\n    {\n        w.displayMessage(); \n   }\n}\npublic class DelegationExample{\npublic static void main(String[] args)\n    {\n        Smartphone smartphone = new Smartphone();\n        smartphone.displayMessage();\n   }\n}\n \nI chose this example because it displays delegation in a clear way, having the class Whatsapp as the delegate and Smartphone as the delegator. From the outside it looks like the class Smartphone actually displays the message while instead it is passing the task to the class Whatsapp. \n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595831,
      "meta": {},
      "text": "Inheritance means implementing the relevant class as a subclass of a different class that offers the required functionality. This way, you can use the superclass functionality in the subclass, too.\nAdvantage: Uses less memory.\nDisadvantage: You inherit every functionality of the superclass, including some possibly unwanted methods.\nExample: The power (on/off) switch of smartphones is a button because just as any other button, it triggers a certain event upon being pressed (in this case: turning the phone on/off).\n\nOn the other hand, delegation means instantiating a new object inside the class which offers this functionality and delegating any incoming method calls to this object especially created for this purpose.\nAdvantage: This can still be used whenever a class already has a different superclass (in Java, for example, each class may only have one superclass and thus may only inherit from one class (except interfaces)).\nDisadvantage: Creates overhead through additional method call.\nExample: Smartphone processors are unable to directly detect user input so they delegate this task to the touchscreen (which does have this functionality).",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595990,
      "meta": {},
      "text": "Inheritance is when we make our class a subclass of another to inherit features. The benefit is that we inherit operations and it is very straightforward. The problem is when we inherit operations of the superclass that do not match the wanted behavior.\n\nDelegation is when our class uses an instance of another class. Then we catch operations and send it to the instance. It is usefull when we do not want to inherit all operations but much of the functionality and to be more flexible in using them, but it might be more inefficient because of creating that instance. Example is when our camera-app delegates to our real camera. The user is not able to move components of the camera, but has all functionalities he to take good pictures.",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596399,
      "meta": {},
      "text": "Inheritance in general is subclassing from another class and using implementations from the upper class. Here it's possible to get all functionalities of the implemented methods in the upper class and additionally change or in other words specialize the implementation/ functionality. In this case, it's really easy to implement further and new functionality in the subclass and all existing functionality can be used without further effort like instantiating an object. One disadvantage is, that you have to implement all methods of the upper class and if you don't need them or want to forbid using these functionalities of the parent class, you have to override all that methods. And therefore changings in the parent class could lead to unwanted new behavior in some or all subclasses and manual changes are needed.\nThe concept of delegation on the other side just sends the used operation further to another class, or in most cases another object, which is a disadvantage because you have to instantiate this object. This implementation is not as much affected by changes as the first method. It also does not have to implement all methods of this object and can delegate to many different objects. So you are much more flexible. It is also possible to black-box the implementation and implement the delegation before the real implementation is really implemented and also change the delegation to another class or method.\n\nAll Smartphones have basically the same software and they just need some specifications to the specific hardware details like display size. Here it would be great to create subclasses for every specific handy from one parent class, which provides the basic functionalities of the system. Here specification is nessecarly and delegation would lead to much Source code.\nIf an application uses the camera, you use delegation to already implemented methods in another class to use the camera and not inheritance because then you would maybe get too many methods and other hardware stuff, which would lead to bad code.\n",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5583838,
      "meta": {},
      "text": "Inheritance means extending a class and potentially adding functionality, while delegation means instantiating another class & calling methods on it.\nDelegation means having a receiver that delegates the functionality to its delegate when being called by a client, whereas inheritance has two subtypes: Implementation inheritance, which means reusing the existing functionality of the superclass, and specification inheritance, which means for example inheriting and implementing abstract methods of the superclass.\n\nInheritance is often the goto choice and is easy to work with, but has the downside of exposing public methods of the superclass. Additionally, protected attributes and methods of the superclass are also visible for the inheritor, which might be unnecessary or confusing. Also, if the superclass is changed, these changes have to be applied to the inheritor, too. It is also available for most programming languages. \nA delegation is more adaptable in these regards: By having a new class (e. g. Stack that internally instantiates a List), you don't expose unwanted methods anymore.\nUnfortunately, with a delegation, two objects must exist (e. g. Stack & List). With inheritance, only a Stack class would exist. This might affect performance.\n\nExample:\nThe phone call app should be able to work with contacts. Instead of inheriting the contact app, calls to fetch contacts are delegated to the contact app. Delegation is right here, because it prevents inheriting unnecessary contact app implementations to the phone app, because only a small part of the functionality is required.\n\nAll apps inherit an app base class, defined in the respective SDK, which enables implementing important methods, for example ones that are called when the user opens or closes the app. It is much easier and more efficient to be called on such events by overriding a method instead of for example pulling events by calling a delegate.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5587724,
      "meta": {},
      "text": "Inheritance is to be used when a class directly extends another class and needs to use and maybe change the inner functionality of the super-class.\nAdvantage of inheritance: It reduces redundancy \nDisadvantage of inheritance: You can only inherit a class at once. \n\nInheritance can be used when a smartphone has different kinds of widgets for the home screen (some bigger, some smaller, some that need access to the internet etc.). Having all of them inherit a Widget class which contains all common behavior makes it easy to reduce redundancy. \n\n\nDelegation can be used when a class doesn't need to or should not access the inner workings of another class. You only instantiate an object of a class, interact with its interface and so delegate the work to the object instead of having the work done inside of the class. \n\nAdvantage of delegation: The fact that you are not obligated to have all methods of the class of the object you delegate the work to inside of the class that delegates the work (unlike with inheritance).\nDisadvantage of delegation: It is possible that the class the work is delegated to implements the needed functionality in such a way that it is very close to the needed functionality, although not exactly what is needed, making it unusable, seeing as it is only possible to interact with the \"outside interface\" of a class when delegating work.\n\nA smartphone could use the delegation pattern when handling audio (delegating the responsibility of playing a sound to an object soundPlayer of a SoundPlayer class by calling the soundPlayer.playSound() function).\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593675,
      "meta": {},
      "text": "Inheritence is about subclasses which means that means that all functionality is implemented in a super class and the subclasses use these methods which delegation uses the functionality of an already existing object.\nThis also means that they just use already existing information and methods. \n\nAn advantage for delegation is that it is generally more flexible while a disadvantage is that it might be more inefficient because you need to create an instance of the object every time instead of just calling a method.\n\nThe advantages of inheritance are that it is very straight forward and that almost eveyr programming language supports it. While a disadvantage is that it exposes methods to all other classes which means that there might be confusion or misstakes.\n\nAn example for inheritance are messanger apps where you can make a class for sending messages and one for receiving messages and use all the methods. Otherwise you would have to create an instance per message.\n\ndelegation is usefull for taking puctures. Where each picture is an individual object because you have indiviudal operations for each object. \n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596609,
      "meta": {},
      "text": "inheritance (Vererbung) ist der Prozess bei dem eine Klasse die Eigenschaften (Attribute, Verhalten) einer anderen Klasse (Super-, Parent/Elternklasse) übernimmt. => es wird eine komplett neue Klasse erstellt die von der Elternklasse \"abgeleitet\" ist und die Eigenschaften erbt. \nVorteil: Effizienter als Delegation, da mind. eine Objekt Instanz weniger erstellt werden muss\nNachteil: Änderungen in der oberen Vererbungshierarchie können ungewollte Auswirkungen auf die Funktionalität der Klasse haben\n\n\n\nDelegation im Gegensatz bedeutet einfach, eine Aufgabe an jemanden/etwas anderes weiterzugeben. In Java wird hierzu ein andere Klasse als Instanzvariable verwendet und Aufgaben an diese Instanz weitergeleitet(z.B. mit Methodenaufrufen).\nVorteil: Flexibilität zur Laufzeit - das Objekt an dem die Aufgabe weitergeleitet wird kann zur Laufzeit leicht geändert werden\nNachteil:  Im Gegensatz zur Vererbung wird die Delegation jedoch von den meisten gängigen objektorientierten Sprachen nicht direkt unterstützt.\n\n\n",
      "score": 83.3,
      "language": "GERMAN"
    },
    {
      "id": 5591953,
      "meta": {},
      "text": "In inheritance you have subclasses from another implemantation and you are just implementing the functionality from the inherited class. \nAn advantage for Inheritance is supported by many coding languages and an disadvantage is that some unwanted methods from the subclass can be exposed.\n A new software of a smartphone, which updates the old one and have many functionalities in common, can inherit them from the older version.\n\nIn Delegetion you referrence to another object. You just send an operation to another obejct, which has already implemented the operation. \nAn advantage for Delegetion is that the flexibility in general and an disadvantage is that inefficiency can occour.\nIf a new browser is created and it doesnt have many functions and a not implemented function is called it can be delegated to another browser which has this function. \n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595114,
      "meta": {},
      "text": "Both inheritance and delegation are means to reuse existing implementations. By inheriting, a new class is created by subclassing the existing class, and the functionalities of the old class are obtained by the new class. By delegation, a new class is created through the aggregation of the existing class. The new class then offers the aggregated functionality of the existing class.\n\nDelegation is usually more flexible, but lacks efficiency due to the need of creation of a new object instance. On the other hand, inheritance is straightforward in terms of using, since all functionalities of the existing class is obtained simply by inheriting. It is also supported by many programming languages and easily extendible. However, inheritance might also expose some unwanted methods of the parent class, damaging the security of the system. In addition, the subclasses are less independent since changes in the parent class could affect the subclass as well.\n\nWhen designing the system of smartphone, the developers might consider inheriting from the class Electronic Equipment, since smartphone is a type of electronic equipment and should reuse all its functionalities. On the other hand, when reusing the functionalities like charging of the Battery class, it is better using delegation between the Smartphone and the Battery class since the smartphone does not need all the functions of the battery.\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595954,
      "meta": {},
      "text": "Inheritance:\nInheritance means creating a subclass and reusing functionality already implemented in the super class.\nThis approach is very easy to implement and straightforward to use as unlike Delegation you do not have to implement a Receiver to handle incoming requests. The downside of this is that changes in the super class might mean one must adjust the subclass as well.\nExample: When writing software or an operating system for a new smartphone with the same architecture as its predecessor one can use inheritance to reuse already implemented functionality.\n\n\nDelegation:\nDelegation means reusing already existing functionality by catching the to be performed operation and sending it to a Delegate where the operation is already implemented. This prevents misuse of the Delegate.\nThis approach is very flexible as unlike with Inheritance changes in the Delegate do not necessarily affect your functionality. But the Receiver makes this approach slower and inefficient.\nExample: When writing software or an operating system for smartphones with different architectures one should use Delegation to ensure the software can run smoothly on every phone by using the device specific implementation of certain operations.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596115,
      "meta": {},
      "text": "In a situation in which we want to have a class which implements the functionalities, which have already been implemented in a different class, we may use either inheritnace or delegation. However, even if both procesess share some similarities, they can't be used interchangeably. Using inhertance means that even if we add new methods, the methods of the 'parent class' still remain and are being used while using the 'child class'. At the same time, if we decide to use delegation, we are simply sending the methods from the receiver to the delegate. In other words, we are calling a different class, which knows what must be done and the class which calls this other class doesn't know anything about things, which must be done. This method is generally more flexible, however may not be as easy to implement and straighforward to use as the inhertance.\nI believe that a good example of inheritance in smartphones can be seen if a smartphone has many different, specialised lenses such as a wide-angle, bigger zoom etc. Then all of the lenses take basic functionalities from the \"basic\", default lense but add some new functions, which are tailored to make such 'not-basic' photos better. Furthemore, a good example of delegation in a smartphone may be viewed when an app crashes. Then the app doesn't do anything outside of informing the system about the crash and delegating the task of dealing with it. After that it's the system (not the app) that, for example, asks if we want to wait or close the app. ",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596134,
      "meta": {},
      "text": "With Inheritance you implement/copy the solution from an existing class. An advantage is that you can adapt the solution to your needs, e.g. add additional functionality. However, it is probably more effort to program as you need to reimplement stuff instead of just calling a function of another object.\n\nWith Delegation, you do not implement the solution yourself, instead you pass the problem onto another object that can solve it. The advantage is, that you do not need to know how the other object is solving it, you just take whatever it returns and pass it on. A disadvantage is, that you depend on another object. If it doesn't exist you cannot solve the problem. So you need to make sure it is initialised, first.\n\nAn online banking app on smartphones probably requires a 2 factor authentification, before you can access your account/make transfers. For that delegating to another app on the smartphone could be useful.\nSo the banking app is delegating the approval/authentification to another app. That authentification method could be very complex or changing every few months, but the banking app would not be affected.\nIf you want to develop apps for smartphones there is might be a class \"App\" available, that your specific app can inherit from. Inheritance would be a good choice, as \"App\" probably got methods like openApp(), closeApp(), sendNotification(), etc. that you can reuse in your app, but you want to be able to change them according to your needs",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596612,
      "meta": {},
      "text": "Implementation extends a base class by new functionality, so the base class needs to have these methods implemented - easy to implement interface and its functionality to subclass and many programming languages support interfaces. However changes in the parent class can change subclass or we can expose method, which we don't want to be accessible anywhere. Delegation catches an operation and send it to another object, so base class holds only instance of delegated implementation - this is more flexible because we don't have to implement or override any new/old methods. However this can have performance impact in because we need to create instance of a new object.\n\nDelegation could be used for services in an application development for smartphones because developers can implement system services as new instances and use them in their applications for notifications etc., this also protects the system service from unwanted function exposure.\n\nImplementation could be used for adding or extending functionality or services like notifications etc., so that we only have to extend implementation and all the subclasses, will be updated as well without manually changing them.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596674,
      "meta": {},
      "text": "Inheritance is reusing the functionality of the parent class in the subclass. It is easy to use, doesn't require additional objects to be instantiated and let's the programmer modify the subclass easily, changes in the parent class however are likely to cause issues and force the subclasses to be adapted. Also the subclass might be bringing with it some unwanted or irrelevant to it's task functionality of the parent class which might cause issues.\n\nWith delegation, the functionality of the other class which would have been inherited are simply delegated to an additional object of that class, usually directly composing the new class. While this method does lead to instantiation of additional objects, implying possible performance issues, the system is much more adaptive to change as the both the delegate class and the method calling class can now be much easier modified independent from each other.\n\nIf abstractly talking about smartphones, imagining the phones as classes, an abstract example for the inheritance principal would be that a Samsung galaxy note is \"inheriting\" from a Samsung galaxy, copying all of the functionality 1 : 1 while simply bringing some additional possibilities with the pen.\n\nAn Example for the Delegation principle in that model would be that the parent class of all smartphones is composed by a simple phone as a component, to which it delegates the simple functionality of a phone like callNumber(int number), writeSms(),...\nAs an additional example, maybe the idea can be better illustrated if we imagine the camera of a smartphone as a component to which the smartphone delegates the functionality for taking pictures.\nBoth of course are very abstract examples.",
      "score": 75,
      "language": "ENGLISH"
    },
    {
      "id": 5583880,
      "meta": {},
      "text": "Unterschied: \nVererbung nutzt eine Kindklasse um die Funktionalitäten der Elternklasse zu übernehmen und zu erweitern. Alle Funktionalitäten der Elternklasse sind auch in der Kindklasse sichtbar. Währenddessen nutzt die Delegation eine Instanz eines anderen Objekts um Funktionalitäten durch Aufrufen der Methoden dieses Objekt bereitzustellen. Die Klasse die die Funktionalitäten also anbietet delegiert den Aufruf zu den dafür benötigten Methoden in anderen Objekten, ohne dass dies dem ursprünglichen Aufrufer bekannt sein muss.\n\nVorteile/Nachteile: \nBei der Vererbung erhält die Kindklasse eventuell ungewünscht alle Funktionalitäten der Elternklasse und der Aufrufer kann diese auch verwenden. Andererseits ist die Vererbung eine einfache Möglichkeit um in der Kindklasse Funktionalitäten zu ergänzen. \nBei der Delegation kann genau ausgewählt werden welche Methoden dem Aufrufer angeboten werden. Außerdem können mehrere Objekte für die Bereitstellung von Funktionen verwendet werden. Daraus ergibt sich aber auch der Nachteil, dass Instanzen der benötigten Klassen erstellt werden müssen und zu Ineffizienz führen. \n\nBeispiele:\nBei einem Smartphone-Spiel kann es beispielsweise verschiedene konkrete Charaktere geben, welche alle ein ähnliches Verhalten und viele Gemeinsamkeiten haben. Hier bietet es sich an Vererbung zu benutzen, da die Funktionalitäten einer abstrakten Eltern-Klasse Charakter auch alle für die konkreten Charaktere zur Verfügung stehen sollten und dann einfach jeweils ergänzt werden können (effizient). \nAuf dem Smartphone soll eine neue Ansicht angezeigt werden, die die wichtigsten Informationen einer App als Voransicht darstellen soll. Hier sollte man Delegation benutzen, damit man zwar von der bestehenden Ansicht der App Funktionalitäten übernehmen kann aber eben nur die notwendigen und keine anderen offenbart. ",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5587032,
      "meta": {},
      "text": "Inheritance means there is a class which is extending another class and being a subclass of it. It also means that this class is forced to accept all the methods of the super class, and this is one of the disadvantages of inheritance. Moreover, it can create its own method as well. That makes the implementation of the new functionality easier, and this is one of the advantages.\nDelegation means capturing an operation and passing the duty off to another object. It does not have to accept all the methods from another class. It can choose what kind of method it really wants, and this is one of the advantages of delegation. It can only provide methods that it really needs and make sense. That makes delegation more flexible. But sometimes delegation also leads to more inefficiency, because we have to create a new object instance in order to use the method from it. This is one of the disadvantages of delegation.\nA smartphone's usage system can use inheritance to inherit the usage system from an iPad, because all the functionalities that an iPad has, are supposed to be realized on a smartphone too. Moreover, it makes possible to add additional methods on the phone as well, such as making a phone call.\nHowever, a smartphone's usage system should not inherit from a computer system, because a smartphone don't neet to be able to use windows system. So it would be better if we just use delegation and just choose the methods that we want from the computer system like opening browser.\n",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5588208,
      "meta": {},
      "text": "Inheritance is the process by which one(subclass) class takes the properties(functionalities) of another(superclass) class, \nWHEREAS delegation means using Object of another class as an instance variable and forward messages to the instance. Delegation can be viewed as a relationship between objects where one object forwards a certain method calls to another object.\nAdvantages of :\n     DELEGATION: The primary advantage of delegation is the run-time \n                            flexibility because the delegate(supporting Object) can \n                            easily be ​changed at run-time.\n                            Another advantage would be that we need not to \n                            accept all the methods of superclass, we can just use \n                            the methods of an object, which we require.\n\nINHERITANCE: It is easy to use and is supported by almost all object- oriented programming languages. We can easily implement new functionality in a \n                            subclass. .In addition to that, there is no need to \n                            instantiate multiple classes. \nDisadvantages of:\n   DELEGATION: It is not supported by all object-oriented programming \n                          languages.  It does not facilitate dynamic polymorphism \n                          and objects are encapsulated therefore inefficient in \n                          some cases. \n  INHERITANCE: In inheritance, classes become tightly \n                          coupled, if we need to make changes to a class, we \n                          need to recompile the whole code.\n                          We need to accept some methods of superclass  \n                          although we don't require them.\n\nExample of a  Phone: if we want the safety system of the phone to peep when the water gets in the phone, we can an DELEGATE the task to the audio system as we don't need all the functionality of the audio system, so an instance of the audio system can be used, therefore Delegation.\nIf the phone company decides to introduce a modern audio system in a model, they can simply INHERIT the functionality of the old one and add additional functionality to it,\n we need all the functionality of the old system, therefore inheritance.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589321,
      "meta": {},
      "text": "Inheritance:\nInheritance means extending a class. The inhereting class then has all the functions and attributes, that are not private. \nAdvantage\n\t- The non-private functions and attributes of parent class are ready to use and therefore save times, because it doesn't need to be reimplemented.\n\nDisadvantage\n\t- It's possible that unwanted functions and attributes of parent class are exposed to children class.\n\nExample : a phone has a lot of software that has different types such as password protected or not. But these 2 types of software can be inherited from the same parent class \"Software\" that has a general function such as \"can be opened\". This is good so the same function doesn't need to be made for each type of software\n\nDelegation:\nDelegation means that a class can use all non-private functions and attributes of a class that is being delegated. The delegated class is usually instantiated.\n\nAdvantantage\n\t- The non-private functions and attributes of delegated class can be used, but the delegated class is not being exposed unwanted methods or attributes, because it is controlled through the containing class.\n\nDisadvantage\n\t- It can be inefficient because the delegated class needs to be instantiated and the functions of the delegated class also needs to be wrapped with another function that calls the function of the delegated class.\n\nExample: User can change the brightness of the screen through settings. But the setting can use the functionality of already existing class to change brightness of screen. This is good so I don't need to implement again the functionality to change brightness. Also, other function from delegated class is not exposed.\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5591290,
      "meta": {},
      "text": "Inheritance uses the type system of the Java compiler to implicitly include code from elsewhere, whereas delegation requires you to explicitly implement the callout.\n\nInheritance is limited to a single parent class (and ancestors), but it can be difficult to see where your code is going; delegation is less elegant, but it allows you to bring in functionality from multiple other classes and the flow is clear.\n\nDelegation is generally preferred for invoking external functions for this reason; inheritance should be reserved for cases where you want to implement a class whose behavior is specifically similar to the base-class, so it can be treated as an instance of the baseclass by other code (ie. it is polymorphic).\n\ninheritance:\n+: full functionality\n-: exposes the base class completely\n\ndelegation:\n+: good for copying only selected functionality, more flexible\n-: may be more inefficient\n\nI would use inheritance of the class \"Smartphone\" , the class \"Samsung Phone\" would inherit from it as it can use all the methods from the more abstract smartphone. \"Smartphone\" can also be used for Huawei, Xiaomi phones etc.\n\nI would use delegation when using a RAM clearing algorithm that speeds up the phone, as I would only need that specific method and won't use any of the other methods of the class where the RAM clearing function is implemented.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5591415,
      "meta": {},
      "text": "Inheritance: \nInheritance is defined as the process of extending once class by the property of another class. Thus, the new classes takes over the attributes and behavior of the pre-existing, also called base class. \n\nAs for the advantages of inheritance, it is usually used in a straightforward manner, allowing the reduction and avoidance of code duplication. Concerning the downsides, changes in the base class / parent class will unluckily be passed through to the subclass. \n\nDelegation: \nDelegation describes the process of passing /delegating a task /duty on to another class / Object. Eventhough this approach appears to be more flexible, it might cause inefficiencies as it results in the creation of an object instance. \n",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5592949,
      "meta": {},
      "text": "You can use inheritance when implementing a new class that does basically the same as an already implemented class. Delegation is used when reusing the functionality of objects with the help of method calls/ object instantiation. The biggest difference besides the implementation is that inheritance is used for classes and delegation is used for objects. \nAdvantages of inheritance are the ease of use as well as the broad use of inheritance in a lot of programming languages. One of the disadvantages would be the problems that can occur when connecting two different classes. When changing the parent class the subclass might change too even though it should not / does not need to change. \nAn advantage of delegation can be the ease of change compared to inheritance. When changing e.g. one object the other objects might not need to change. One disadvantage would be the work that goes into a working delegation. There has to be an object instance just made for this one delegation.\n\nOne example of delegation in the context of smartphones could be the camera module of said smartphone. We have one module that is used as-is inside different apps like snapchat, instagram, or the pre-installed camera app. \nAn example of inheritance could be system features like touch input. The display itself receives input and the operating system calculates the exact position so every app knows where the input actually happened.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593108,
      "meta": {},
      "text": "Inheritance allows us to extend the functionality of already existing classes by adding additional functionalities to the already existing class in a new subclass. It is easy to implement as most of the functionalities are already given and many programming languages support inheritance (advantage). However, changes in the superclass may require changes in the subclasses which stand in the way of maintainability (disadvantage).\n\nDelegation means that requested operations, for which the actual class does not provide all necessary functionalities, are forwarded to another newly instantiated object of a different class (not a subclass) that takes on the \"task\". It allows for more flexibility as changes in one class do not affect other classes (advantage). However, this flexibility comes with some inefficiencies as a new object needs to be instantiated to process the request (disadvantage).\n\nExample Inheritance: Smartphone cameras these days allow the use of different camera angles. The lenses are built almost the same in many aspects but differ in specific details that make a difference in whether you're catching a wide-angle or else. Here they inherit many similar components/functionalities but need to be differentiated in minor aspects.\n\nExample Delegation: Facebook does this with its messenger app. Instead of making the messaging functionality available in the app itself, they delegate communication to another app that only serves this purpose. This makes sense as Facebook is not used by everyone to share contact but to communicate with others because it is the predominant communication tool. That way, the messenger app can be handled more or less independently from the main app, which increases maintainability and availability.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5595040,
      "meta": {},
      "text": "Implementation Inheritance means that you extend the base class by new operations or you override an operation that has already existed before. Delegation means that an operation is executed in another object.\n\nAdvantage of implementation inheritance is definitely that it is e.g. very easy to implement new functions in the subclass, but that comes at the cost that, as subclass and superclass are related, a change in the parent class will force the subclass to be adapted as well.\n\nDelegation on the other hand is highly flexible, but can be a little inefficient as another object needs to be created for the operation.\n\nAn example where inheritance is used for smartphones is in mobile app development, e.g. in APIs by convention implementation inheritance is used.\n\nDelegation on the other hand is used for security, e.g. in Proxy applications or server client apps.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596301,
      "meta": {},
      "text": "- Delegation: forwards a method call by an object to another object\n- Inheritance:  implemented method in the superclass\n\nsmartphone example:\n",
      "score": 16.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596442,
      "meta": {},
      "text": "Inheritance uses an existing class from which a subclass inherits all attributes and methods, while offering the possibility of defining additional methods or attributes for the subclass. Delegation, on the other hand, reuses already implemented methods, through method calls on objects. Therefore, in delegation, we don't copy these methods from the delegate class and only call them by for example instantiating an object of the delegate class.\nThe main advantage of Inheritance is, that it is very easy to implement. A major disadvantage, on the other hand is, that inheritance is not very flexible and can therefore hardly adapt to change. If you want to change functionality of the parent class, in most cases, you will have to do the same in the subclass.\nThe main advantage of delegation is its flexibility, especially its run-time flexibility, where the delegate can be changed at runtime. The main disadvantages of Delegation are, that it is not supported by all programming languages and that it can lead to inefficiencies, because it requires more object instances than inheritance would.\nSmartphones, for example, all inherit their design from the first iPhone, because their central functionality is the same. They all have a flat big touchscreen, a camera and a few buttons at the bottom. Because this design has worked for so many years and still works, it makes sense to inherit all these base features and to extend them with new technologies, like a fingerprint reader for example, over time. An example for delegation in context with smartphones could be the manufacturing process. Producing the Smartphones and their parts is usually delegated to different factories in different countries all over the world. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5583767,
      "meta": {},
      "text": "In inheritance we reuse functionality from an already implemented super class which does almost the same things our class does. In delegation we reuse the functionality of objects that already exist by creating object instances. \nInheritance is easier to use and widely supported but when you change something in the super class you might be forced to make changes to all subclasses as well.\nDelegation is more flexible but you have to create object instances which might be more inefficient.\nFor example if a company is making software for a smartphone based on Android and wants to limit some functionalities for example to increase the privacy protection of the user they should use delegation in order for the new software and therefore for the user not to have access to the unwanted functionalities. \nInheritance can be useful when a company like Apple wants to run their software on different sized and capable smartphones or tablets and therefore they need to adjust the general \"parent\" software to all the different devices. Through inheritance they can use the same general functionality on every device and only make the small changes necessary.\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5588541,
      "meta": {},
      "text": "With inheritance the specified class gets all atrributes and methods and can addtionally have its own methods and attributes. Delegation is a principle where a class has  an instance of an other class to use certain functionalities.\n\nTherefore Delegations are more agile but might be not that efficient, since you have to instanciate an object.\n\nInheritance on the other hand is implemented in many programming languages and quiet simple and fast to implement. But you are forced to implement every method of the superclass  making it dependent and also making it have unwanted or forbidden methods for your class,\n\nFor example:\n ",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5589752,
      "meta": {},
      "text": "The difference between inheritance and delegation is that inheritance extends the superclass by a new operation or overrides an existing operation, so both objects are hierarchically related. Delegation, on the other hand, catches an operation and sends it to another object or class in which the method is already implemented.\n\n\nInheritance\nPro: Inheritance makes it easy to implement a new functionality in the subclass.\nCon: If changes occur in the superclass, changes may also have to be made in the subclasses.\n\nExample: An example of inheritance in the context of smartphones is social media apps. For instance \"Meta Platforms Inc\" could have a superclass \"SocialMediaApp\" and subclasses \"Facebook\" and \"Instagram\". Both have similar methods such as 'post', 'like' or 'sending a friend request' that could be implemented in the parent class, but they also have individual methods, such as 'creating a story' for Instagram and the 'marketplace' function for Facebook implemented in the respective class.\n\n\nDelegation\nPro: Delegation is more flexible because changes in one class do not necessarily entail changes in the other class.\nCon: Using delegation can reduce efficiency because an object instance must be created and the operation must call another method.\n\nExample: An example of delegation in the context of smartphones is the ringing of the phone when someone calls you. The \"Phone\" app receives the call and then catches the \"play ringtone\" operation and delegates it to the internal speakers that play the ringtone on your phone.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5592320,
      "meta": {},
      "text": "Inheritance and Delegation are developed for Reuse. Inheritance is a kind of white-box reuse, meaning that a new class is created as the subclass of an existing generic superclass. The new class can reuse the functionalities of the superclass and it can develop a new function itself. Also, inheritance is more like an \"is-a\" relationship. On the opposite side, delegation is more like a \"have-a\" relationship, since it's a kind of black-box reuse, meaning that the new class is created through the already existing classes and can use all functionalities of them.\nInheritance and Delegation can enhance the reusability leading to less maintenance and development costs. Thus, Inheritance is supported by many programming languages, and by using it we can easily add new functions in the subclass. However, subclasses also might get some unwanted methods from the superclass. Meanwhile, subclass and superclass from Inheritance are highly coupled, in other words, if we change the code in the superclass, then it will affect all its subclasses. Using delegation will avoid this kind of situation because those aggregated classes are relatively independent, so the change in one of them won't affect the rest of them. But delegation might be more inefficient because each aggregated class of the new class must be instantiated while using which leads to a longer runtime.\n\nSince smartphones have the same functions like battery charging, shutdown, turning on, etc as much other electric equipment like laptop or iPad does. So it might be a good idea to use inheritance between smartphones and electric equipment. Also, smartphones consist of a chip, cameras, battery, screen, and so on, each of them works relatively separately, so it might be better to use delegation between them since they're all components of the smartphones.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593677,
      "meta": {},
      "text": "The difference between inheritance and delegation is that in the concept of Delegation you reuse a functionality that has already been implemented in another existing object where this functionality has been implemented (e.g.: method call / instantiation of a object) while in inheritance instead of instantiating a new object, you reuse a functionality that has been implemented in the respective superclass of the subclass you're operating on.\n\nDelegation: \n- Advantage: More flexible\n- Disadvantage: Could affect performance as you first need to instantiate an object of the class of which you need the functionality\n- Example: An app needs a certain permission (location, contacts, etc.) and therefore invokes methods on, for example, a new instance of \"AuthorizationSettings\" and then invokes the function \"askForAuthorization()\" on this instance instead of having to rewrite the code that would ask for authorization in the app itself.\n\nInheritance:\n- Advantage: Instead of rewriting a entire class that has the same code as the class you need, but needs some additional functionalities, with inheritance you can just mark your class as a subclass of the already implemented class and make use of the already implemented functionality and simply add your additional functions which makes using inheritance very practical and easy.\n- Disadvantage: the operations inherited from the subclass could include unwanted/unnecessary behavior that could decrease the performance and functionality of your program or even enable access to certain methods/attributes you should not have access to.\n- Example: Most smartphones nowadays have multiple rear-facing cameras. One could have a superclass \"camera\" that implements the basic functionality of a camera, e.g.: \"zoom()\", \"adjustBrightness()\", \"takePicture()\", ... and then create subclasses like \"wideAngleCamera\", \"telephotoCamera\" and \"standardCamera\" which then implement different focal lenghts, but all make use of the shared functionality of the superclass.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593895,
      "meta": {},
      "text": "Delegation:\n\nDelegations are generally flexible to use because we can catch a particular operation and sending it to another object. But because of necessity of creating object, delegation might be more inefficient.\n\nOn the other hand, in inheritance there is no such a necessity. Inheritance is basically the process by which one class takes the property of another other class. Implementation of new functionalities in the subclass is undemanding. The problem is; inheritance can occur some undesirable methods of the superclass in the subclass. Also inheritance causes high coupling between super- and subclass. In other words, when for example a new method in superclass implemented, then this have to be also in subclass.\n",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5594852,
      "meta": {},
      "text": "Inheritance is one core concept of OOP. With inheritance, there always is a parent and one or many child classes. All of the children inherit the attributes and methods of the parent class. Additionally, every child class can have unique methods and attributes. An advantage of inheritance is that many real-world situations can be easily modeled with inheritance. With inheritance, code can be reused, which leads to overall fewer lines of code -> improves code readability. A drawback of inheritance is performance. At compile time a dispatch table (VMT) needs to be created, and information has to be stored. (See C++ lecture)\n\nDelegation is when one class transfers the responsibility of a method to another class/object. In most cases, an object has got a reference to the object that it delegates the work. The object that delegates work to another object has got restricted access to the other object's methods and properties. An advantage of delegation is that it is more flexible than inheritance. However, delegation also creates high coupling between objects. This decreases code readability\n\nYou use inheritance whenever there is an \"is-a relationship\" and delegation when there is a \"has-a relationship\"\n\nAn example of inheritance is the smartphone itself. Every smartphone has got \"base functionality\", e.g. you can make calls, type on the screen, etc. However, there are also differences between smartphones. An iPhone runs iOS, a Pixel Android. However, they still retain the same base functionality, so they are children of smartphones. There is an \"is-a\" relationship.\nDelegation in a smartphone could be used when a smartphone app requires a lot of computational power. Instead of computing the result itself, the smartphone could delegate the work to a cloud infrastructure that does the work for it. This would require an internet connection ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594994,
      "meta": {},
      "text": "Both approaches reuse some implemented functionality. The difference is that inheritance uses the implemented functionality from a class by subclassing from it whereas delegation using a receiver to catch an operation and delegates it to an already implemented object.\n\nUp- and Downsides:\nAn advantage of inheritance is that it is easy to use. Due to the fact that there is no receiver which must be implemented. A downside of inheritance is that some inherited operations can cause unwanted behavior which can be a security risk.\nAn advantage of delegation is that the used receiver give more flexibility and freedom in the implementation.\nA downside of delegation is that it can couse unnecessary overhead because the receiver must be created additionally.\n\nSmartphone example:\nInheritance: The implementation of a WhatsApp call can use the normal call functionality as a superclass. Since a WhatsApp call need all functionalities from the normal smarthphone call implementation.\nDelegation: To post a picture on Instagram, Instagram need access to the smartphone galary. But Instagram should not have the complete access to the functionality of the galary. Therefore it exists a receiver with all functionalities Instagram should have and delegates it to the right galary functions.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595535,
      "meta": {},
      "text": "Inheritance principe is used to specialise a class with attributes and methods. A big pro of inheritance is code redundancy and readability. But it also charges the memory in order to create all object by initialisation.\nDelegation is not inheritance because it is a system that check if operation needs to be executed. So it completes the function or does nothing like atomic classes in java. A big plus is avoidance of unneeded objects and hence saving of memory and performance increment. \nA delegation concept in smartphones is preferred, because the main goal in smartphone software is to save battery charge. So whenever user does something e.g. registration in an app, system will not beginn send data to database until user doesn't press \"complete registration\" button. I would choose it in order to save battery.\nAn additional big goal in smartphones is to keep memory free, cause usually they don't have big memory cards. In this inheritance concept can be used in order to generalise, with other words subclass all routine and apps in order to reduce the programming text and only reuse methods.",
      "score": 8.3,
      "language": "ENGLISH"
    },
    {
      "id": 5595881,
      "meta": {},
      "text": "Both delegation and inheritance focus on reuse, yet they differ greatly. Some differences are:\n\t- Inheritance will lead to the two classes being interconnected and the implementation of the subclass will depend on the implementation of the superclass (e.g. polymorphism, ...). This does not happen with delegation, since only one method is depending on the other classes implementation.\n\n\t- With delegation, a method call is redirected and not processed in the delegating class. With inheritance, the method call is processed in the called upon class.\n\n\t- Delegation can relay (selected) method calls of multiple different classes (e.g. facade pattern), whilst inheritance either has to override all methods or only inherit from one class\n\nDelegation:\nPro: Can call different classes and thusly be more agile.\nCon: Can get messy, if the facade pattern is not applied, since it can be unclear, whether to call the delegator or the class directly.\nInheritance:\nPro: Easy to use and easyer to maintain -> \"clean\" (since it will only be connected to one class and it is strictly defined in the class definition)\nCon: Parent class changes will effect the child class\n\nExamples in smartphones:\nDelegation: The OS is a delegating System. An App can ask for memory or camera access and the OS will relay the result of the sub task.\nInheritance: Apps and widgets (symbols) should inherit from each other. They share a great deal of funtionality whith each other yet they have ther specifc implementations of some functions.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596224,
      "meta": {},
      "text": "Vererbung ist, wenn eine Unterklasse von einer Oberklasse Attribute und Methoden erbt. Man bezeichnet dies auch als White_Box_Reuse. Also ist die Unterklasse nur eine mit zusätzlichen Funktionalitäten, wobei es bei Delegation darum geht Funktionen und Methoden eines anderen Objekts, auf welches man eine Referenz hat wiederzuverwenden. Dies ist Black_Box_Reuse (durch Aggregation und Composition umgesetzt).\nBei der Vererbung ist es möglich Methoden der Oberklasse zu überschreiben und durch Polymorphie Abstraktion zu schaffen, was bei der Delegation nicht geht.\n\nBei der Delegation kann man lediglich auf public Methoden und Objekte zugreifen, wobei es bei der Vererbung möglich ist diese protected zu setzen, sie also nur von den Unterklassen aufgerufen werden können (super). Hier sieht man, dass die Klassen bei der Vererbung viel mehr Verbunden sind als bei der Delegation.\n\n Ein Vorteil der Vererbung ist, dass es einfach ist eine neue Funktionalität in allen Unterklassen zu implementieren, da man dies nur in der Oberklasse machen muss, wobei ein Nachteil ist, dass sich Änderungen in der Oberklasse auch auf die Unterklasse auswirken.\n\nDer Vorteil der Delegation ist dass die zur Laufzeit mehr flexibel ist. Allerdings kann es durch die Erstellung einer Instanz langsamer sein, was nicht gut ist.\n\nIm Smartphone gibt es Hardware, die verschiedene Funktionen auf die man von außen über Pins zugreifen kann und somit verwenden kann. Hier wäre für mich die Delegation am sinnvollsten, da man so besser Definieren kann, welche Methoden und Attributen von außen zugänglich sind.\n\nBei Smartphones ist die Vererbung beim entwickeln neuer Modelle sinnvoll. Diese sollten bestenfalls Funktionalitäten wie telefonieren übernehmen und zusätzlich neue, wie das im Internet surfen haben, was sich meiner Meinung nach am besten mit der Vererbung umsetzen lässt.\n\n",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5596380,
      "meta": {},
      "text": "Inheritance is when you use subclassing to access the methods of an existing class. Delegation is when you create an object of the class you want to use methods from, and access the methods through that object. \n\nInheritance is straightforward and easy to implement (+), but it can expose the inner implementation of the given class and thus makes it possible for it to be misused (-). For example, the user might be able to call functions you do not want him to have access to. \n\nDelegation on the other hand prevents such misuse, because only the methods the delegate accesses can be used by the class the delegate exists in (+). It is also a bit more complicated though and can be less efficient because a delegate object has to be instantiated for it to work (-).\n\nIn the context of smartphones: \nA special version of a smartphone that has additional features can be seen as the result of inheritance from the standard version of the smartphone. The special version has all the functions the standard version has, but it can also have new functions on top of that.\nDelegation can be seen if you look at the \"settings\" menu on your phone. The makers don't just let you edit the actual attributes or whatever defines the settings. Instead, you can tap buttons in the menu. The menu then passes along your requests and the actual settings are modified on a lower level. This way you can't mess up a setting in such a way that it would make your phone unusable.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596702,
      "meta": {},
      "text": "Firstly we can say that delegation and inheritance are the same things, but different. They basically execute the same task but in a different manner. They are both used regularly as the best way to reuse code. Delegation and inheritance, each has its own perks. The first serves to the use of an object of another class by making it an instance variable and then focusing on forwarding messages to the instance. Thereafter the focus stands on each message, that is being forwarded. However the main thing that is provided by delegation is run-time flexibility.\nInheritance is used as a direct way to use code and variables from another class.\nIn the context of smartphones I think that the best example of inheritance is a software update or restoring a backup that you made, because it takes all the data, puts it in a large folder and then copies it but also adds to it.\nThere is inheritance used also by online applications on update of the applications because all of the previous saved data is used and sometimes modified. However a big software update that comes with security changes and UI changes might also use more the principle of delegation by having data being more called upon locally and making local changes. This data gets delegated as a result of a big overhaul of a new system or application, where the previous data of the user isn't affected but the new application data is completely revamped and there are only a few changes that require delegation to the previous application data.",
      "score": 33.3,
      "language": "ENGLISH"
    },
    {
      "id": 5588246,
      "meta": {},
      "text": "With Inheritance you can organize and structure your classes easily. It also allows you to just pass existing functionality from one class to another simply by creating a new subclass which then has access to all the methods of the superclass. \nDelegation allows one to simply access functionality of a different class from your current class by simply creating one object of the desired class.  One can use all of the methods of the other class by calling its object. \nBasically Inheritance connects class vertically while delegation connects class horizontally.\nInheritance offers a good way to structure classes but it leads to a high coupling between parent classes and subclasses. So a change in the parent class could lead to problems in the subclasses.\nDelegation doesnt structure classes at all but it offers no problem with high coupling since the change of one class has no affect on the other.\n\nExample:\nInheritance gets used for the buttons of a smartphone. There is one general button which then gives its functionality to the sub-buttons like \"power on/off\", \"more volume\", \"less volume\" and so on. \nDelegation gets used for example when the \"power button\" gets pressed. The button class calls the screen object and turns the screen on or off.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5591185,
      "meta": {},
      "text": "Bei Inheritance wird wird eine Unterklasse von einer Klasse erstellt, deren Funktionalität man braucht und dann noch erweitern will. Bei Delegation erstellt man eine neue Klasse die unabhängig von derer ist die die Funktionalität implementiert, sie ist nur dafür zuständig den Methodenaufruf an ein Objekt der Klasse mit der Funktionalität weiter zu leiten. Bei Inheritance kann es sein, dass der user zugriff auf Methoden hat die er gar nicht haben sollte, da diese automatisch mit vererbt wurde. Dafür ist allerdings einfach zu implementieren und wird von vielen Programmiersprachen unterstützt. Delegation ist meist flexibler weil man sich einzelne Funktionalitäten zusammen suchen kann, allerdings kann das Programm langsamer werden, da immer neue Objekte initialisiert werden müssen.\nEin Beispiel in dem Inheritance von Vorteil ist, ist der Befehlssatz auf Smartphone Prozessoren. Hier kommen jährlich neue Modelle heraus. Damit auf diesen dann auch noch ältere Programme laufen sollten diese die alten Befehle unterstützen und neue implementieren für Zukünftige Anwendungen.\nSmartphones haben nur eine Begrenzte Akkukapazität daher sollten rechen intensive Aufgaben an Server delegiert werden. Beispielsweise bei modernen Mobilegames mit eine guten Grafik hierfür wäre Delegation die passende wahl.\n \n\n",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5594985,
      "meta": {},
      "text": "I'll explain the ideas of delegation and inheritance through smartphone models. As we know there are two ways to make any kind of new model. We can either take an existing model and develop it from there, adding new functionalities new systems and so on. Considering we already have a base for it, now it is much easier to implement, it's use will probably be the same as the previous models and everything that the previous one hand, this one will also have including a few new things. Of course that also  means that the flaws of a previous model stay with this one. This is inheritance. The other way would be to make the new model from scratch. But it still has to have the same functionalities as the current model, so on a lower level it will still call some of the same methods just in a different way. This now solves the problems of the current version because we have a new system and we don't have a structure we are limited to so it is more flexible. Of course if there was a reason for the previous system being implemented in a certain way, then this new model might be more inefficient. I'd choose delegation as a beginner simply because of the flexibility, but companies usually go with the first method.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5595046,
      "meta": {},
      "text": "Inheritance: allows to extend the functionality of a superclass by overriding or adding new methods and properties. \nDelegation: separate Object as a property that certain methods are being called on.\n\nInheritance is very easy to use since as it is supported by most programming languages. It also provides a simple way to extend or adapt code of a superclass.\nHowever it is not necessarily possible to hide code from the parent class to other object interacting with this object. Furthermore, changes performed on the parent class will be directly reflected in the subclass. This could easily lead to unwanted behavior.\n\nDelegation on the other hand is a bit more complex but therefore also provides a more flexible functionality.\nIt allows us to circumvent the problem of code of the superclass being public since we are only calling another object of which we do not expose arbitrary functionalities to other objects.\nHowever, Delegation can also be a bit more inefficient since we need to instantiate a separate object and always calls methods on it.\n\nA standard use case for Inheritance in the context of smartphones would be Views that inherit from each other. For instance, a TextView from which a TextButtonView inherits. Probably we want to make use of potentially every functionality of the TextView but only add a few extra functions to make the view clickable and there’s nothing to hide.\n\nHowever if we assume a class DataSource for a TableView, we do not want to inherit but instead delegate several function to this DataSource (e.g. number of list items, name of list items, ...). Doing this will hide the structure of the data source, restrain other classes from getting this information, and allows us to restructure it without modifying the table view.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595119,
      "meta": {},
      "text": "Der Unterschied zwischen Inheritance und Delegation ergibt sich aus der Art der Beziehung zwischen den beiden Klassen:\n-\tInheritance: ergibt eine IS-A Beziehung: d.h. die erbenden Klasse ist eine Art der Oberklasse und somit von dieser abhängig\n-\tDelegation: ergibt eine HAS-A Beziehung: D.h. die Klasse die den Code weiterbenutzt hat eine Instanzvariable, die einen Verweis auf eine Instanz der wiederverwendeten Klasse speichert. Somit gibt es einen „Sender“ und „Empfänger“ der Anfragen. \n\nVorteile:\n-\tInheritance: Kein Bedarf von Methoden die die Anfragen weiter delegieren. \n-\tDelegation: Die Klasse deren Methoden/Variablen wiederverwendet werden kann geändert werden ohne die Klassen zu beeinflussen die diese wiederverwenden. \n\nNachteile\n-\tInheritance: Nachteile die zwei Klassen die den Code benutzten werden eng mit einander gekoppelt, weshalb Änderungen der Oberklasse direkten Einfluss auf die erbenden Klasse nehmen\n-\tDelegation: Immer wenn sich die Schnittstelle ändert müssen alle Klassen die diese Benutzen ebenso geändert werden\n \nBeispiel beim Smartphone:\n-\tInheritance: \n\tFür die Programmierung der GUI von Apps bietet sich Inerhitance an, da viele \t\n\tFunktionen der GUIs bereits implementiert sind und hier gut wieder verwendet \t\n\twerden können.\n\n-\tDelegation:\n\tBietet sich für Cloudanwendungen, wie die Überstzungsapp an. \n\tHierbei eignet sich Delegation insbesondere, weil der Server, an dem die Anfrage gestellt wird eine \n\thöhere  Datenmenge zur Verfügung hat und eine höhere Rechenleistung, weshalb eine besserer \t\n\tÜbersetzung  erfolgen kann.  ",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5595822,
      "meta": {},
      "text": "(Delegation)\nDelegation means that you can use the functionality of another class, using instantons and method calls, rather than to implement all functionality in one class. \npros:\nrun-time flexibility:\nthe changes could be made even at run time\n\ncons:\nsupportability:\nthe delegation is not supported by most of the object-oriented languages.\n\n\n(Inheritance)\nThe Inheritance is the process in which one class takes the property of another class and could additionally add some new functionality.\n\npros:\nAllows you to create new classes with a reliable method, using previously developed ones without changing them. This reduces class development costs and is a form of code reuse.\n\ncons:\nIncreases the complexity of creating and modifying the class system.\n\n\n(Difference + Examples)\nThe difference of the delegation and inheritance is, that by delegation the task will be send to special class, that implement this task for example in smartphone app music when you want to listen the music you click on song and the app call or send this task to music player class, that implement this duty.\n\n\nin case of inheritance we move the common methods in the base class, the various implementations to the subclasses,  by instanton of the subclass we get the required functionality of the object. For example \nthere are a lot of controllers in smartphone app, each of the controller makes the own task but  we want to centralize the certain behavior of these controllers, that' why  we  will use the inheritance of the base controller.\n\n(Chose and opinion)\nI would prefer the Delegation, because it is easier to change and to understand the system, because by using the inheritance in big systems it could be very complicated to understand how the whole system works.",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5588072,
      "meta": {},
      "text": "Unterschied Vererbung - Delegation\nDer Unterschied besteht darin, dass bei der Vererbung alle sichtbaren Methoden und Attribute auch in der erbenden Klasse zugreifbar sind. Bei der Delegation hingegen kann ganz flexibel entschieden werden, welche Teile nach Außen sichtbar sind.\n\nVererbung:\n+ Verschiedene Implementation eines Eltern-Objektes flexibel implementierbar\n- Alle sichtbaren Teile der Elternklasse dringen auch in die erbende Klasse durch\n\nDelegation:\n+ Zugriff auf Teile der \"unsichtbar\" verwendeten Klasse kann flexibel definiert werden\n- Instanziierung der versteckten Infrastruktur aufwändig\n\nBeispiel Vererbung:\nEs sollte der Sperrbildschirm eines Smartphones implementiert werden. Da die verschiedenen Benutzer sowohl einen Pin, als auch ein Muster verwenden können sollten, wird ein Interface \"Lockscreen\" erstellt. Dieser definiert den Methodenkopf \"unlockAttempt()\". Dieses Interface wird dann sowohl von \"PinLockscreen\", als auch von \"PatternLockscreen\" auf verschiedene Arten implementiert. Durch die Eltern-Definition kann das Betriebssystem nun beide Methode anbieten. \n\nBeispiel Delegation: \nDie Ressourcenverwaltung des Smartphones implementiert in der Klasse \"RessourceReceiver\" die Methode \"retrieveRessource(Resource resource)\". Diese Methode ermöglicht es den Apps, Dateien und Internetressourcen über die Klasse der Ressourcenverwaltung zu erhalten.  Durch den Zwischenschritt durch die Klasse kann der Zugriff eingeschränkt werden, aber dennoch die Funktionalität bereitgestellt werden.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5589115,
      "meta": {},
      "text": "Inheritance describes a parent-child relationship between classes. It avoids code duplication. A disadvantage may be that the subclass depends on the parent class and does not function independently. In addition, the functionality of the subclasses is only visible at runtime. \nFor example, there is a parent class app that provides the basic functionality for apps on a smartphone, such as the graphical user interface. The child class MVGApp is a child of this class and can already use the basic functionalities and adapt them by overriding methods if necessary. This gives a good framework for all the apps, with all neccesary methods and objects given. \n\nDelegation describes a relationship between two classes where one class uses an object of the other class to use its functions. It can be described as passing responsibility for the function to the implementation in the object class. One advantage is that you only have to use the methods of the other class that you really need and don't have to take everything from a parent class. A disadvantage is that you don't see the actual implementation in the class you are using. Therefore, it is more difficult to customize special cases in the class. \nFor example, using a purchase option through the App Store. The App Store uses an object of the bookingProcess class and uses its functionality buying. The buying process functionality is not directly implemented in the appStore class. Thus, the general implementation of the buying process can be implemented once, but used in different app options. This standardizes the booking process in each class and also hinders it to be adapted.\n\nThe main difference between the two is that delegation, unlike inheritance, is not a hierarchical relationship. Therefore, with delegation, the two classes can be at the same hierarchical level.\n\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593663,
      "meta": {},
      "text": "Inheritance is the process by which one class takes the property of another other class. i.e. the new classes, known as derived or child class, take over the attributes and behavior of the already existing classes, which are referred to as parent class. Delegation is simply passing a duty off to someone else. \n\n\nAdvantage Inheritance: It is easy to implement new functionality in the subclass.\nDisadvantage Inheritence: Changes in the parent class can force the subclass to change as well\n\nAdvantage Delegation: Very flexible since the \"duty\" is only passed/delegated.\nDisadvantage Delegation: In some cases its more inefficient, because an object instance needs to be created.\n\n\n\nSmartphone Example Inheritence:  Smartphone as Superclass and Different phones as Child classes using inheritence because all different phones have the functionality of a smartphone like making calls etc. - Close connection between classes makes sense here.\n\nSmartphone Example Delegation: In a class of smartphone app an attribute is \"final\" - with Delegation we are able to enhance the attribute of another class which otherwise would not be able to get sub-classed further e.g. a smartphone app uses the GPS module to locate the users location.\n\n\n\n\n\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594064,
      "meta": {},
      "text": "There is both implementation inheritance (II) and specification inheritance (SI). II and delegation are most used in a code reuse context.\n\nWith II we define our class as a  subclass of an existing class and can thus reuse it's members (attributes, methods). \nAdvantage: II is supported by most object oriented languages. \nDisadvantage: unwanted functionality might be inherited from then parent class.\n\nWith delegation an object of the class we want to reuse is instantiated within our class (object not visible outside of the class). The public interface of our class contains methods/attributes which call the according functionality of the encapsulated object if they are called themselves. \nAdvantage:  no unwanted functionality is being made accessible to the outside of our class. \nDisadvantage: lower performance (instantiation is \"expensive\").\n\nFinally, specification inheritance is different, as it is not used to reuse the code implementation of a member, but only it's signatures (the method must still be implemented by us). \nAdvantage: Reuse of standard interfaces that have proved themselves to work\nDisadvantage: work intensive (implementation must still be done by us).\n\nLet's take a closer look at these concepts taking the example of a messenger app for a mobile phone. In order to implement a \"group chat\" we could use implementation inheritance of a class \"private chat\" which provides the method sendMessage() (there is no functionality which is not required in group chat). \nA database used in another context could be reused to store messages by using delegation (only the save() method would be reused, not for example a plotData() function). \nFinally specification inheritance could be used by reusing an existing interface to define the operations provided to the outside by a message class.\n\n\n\n\n\n",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5594471,
      "meta": {},
      "text": "Während Inheritance die Funktionalität in einer Superklasse kapselt, leitet Delegation den Funktionsaufruf an ein Objekt weiter, in dem die Funktionalität schon implementiert ist. Inheritance nutzt man zur Erweiterung einer Klasse, man bindet eine Klasse in eine Hierarchie ein. Bei Delegation bleibt die (ggf.) vorher implementierte Hierarchie bestehen. Ein Vorteil von Inheritance ist die einfache Umsetzung/Nutzbarkeit, allerdings können durch Änderungen in der vererbenden Klasse auch ungewollte Änderungen in der erbenden Klasse herbeiführen. Delegation ist dahingehend flexibler, nur die Funktionalität wird wiederverwendet, allerdings kann es ineffizienter sein, da man ggf. eine neue Instanz erstellen muss.\n\nDelegation kommt zum Beispiel in Smartphoneapps vor, wenn bestimmte Features aktiviert werden sollen. Will man in Google Maps die Ortungsdienste nutzen, so wird man an die Systemeinstellungen delegiert und es werden auch die Daten des Systems verwendet und dann von Google Maps verarbeitet.\nOrientierungsloses ist das sicher schonmal zu nutze gewesen und hier ist es auch sinnvoll zu delegieren, denn beim Erben würde eine App, etwas das potentiell ein Sicherheitsrisiko ist, auf die Ortungsdienste in einer Weise zugreifen und Zugriff erlaubt bekommen, ihr Implementierung exposen, dass nicht sinnvoll ist, da es eben ein Sicherheitsrisiko darstellen kann.\n\nMithilfe von Inheritance können zum Beispiel verschiedene Textbearbeitungsapps in Smartphones implementiert werden. Es gibt von bestimmten Herstellern (zb Apple) standartmäßige Apps auf dem Handy, die alle dieselben grundlegenden Funktionen haben, aber Erweiterungen dieser Basis sind. Hier kann Vererbung das Mittel der Wahl sein, indem man diese gemeinsame Basis findet und implementiert, die Subclasses können dann aufbauend auf dieser Basis ihre Spezifikationen implementieren und so den Code reusen.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5595537,
      "meta": {},
      "text": "Inheritance is when you already have an implemented class that does almost what you want to do. You create a new class that extends the the class that you already have. Delegation means that you use another object that is not from your class to execute an operation for you. You have a client that calls the receiver that than delegates the operation to the Delegate. \nAn advantage from Inheritance is that it is simple to implement new functionalities. You can easily extend your new subclass, you just need to override the methods that you want to change. A disadvantage is that your project isn't as flexible. Changes that occur at the parent class aren't as easy to make because they can also affect all child classes. \nAn advantage from Delegation is that it is flexible to use. You can change your original class and still all operations that delegated to another class remain unchanged. An disadvantage is that you need to create more objects. Every time you a operation gets delegated there needs to be object to execute it. So you might need to create more objects.\nIf you wanted to add new functionalities to your game without changing the game completely you could use Inheritance. You would simply build the updated game on top of your old one. Here inheritance could be useful becomes it would be easy to add many new functionality.\nAn example for delegation would be in the Uber app. If you want that drivers can rate clients like the clients rate them, you would simply use the already implemented part of rating and add new operations. \n\n",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596065,
      "meta": {},
      "text": "The difference is, that a class, which is inheritor of a superclass, gets the same functionality as the superclass and can directly access all available functions and properties as it was in its own class. Whereas in the concept of delegation, the class doesnt get any new functionality, but instead makes use of another class, which can satisfy the problem / perform a specified action.\n\nIn the context of a smartphone the the CPU cannot perform vector operations fast enough, but the app can pass the problem to the phones gpu, which is build for this kind of task. \nOn the other hand many apps make use of frameworks such as react, where theys are built on. \nThere they get all the same functionality, which the programmers can use for their needs.\n\n",
      "score": 33.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596603,
      "meta": {},
      "text": "Inheritance gives us the idea of subclasses which are a specialization of the parent class. They inherit all of the functionality of the parent class and can extend these. Delegation is different from that idea. We delagate by using an instance of an independent class and use only the functionality we need by calling the methods of the instance's class. That means we don't know how the instance's methods are implemented but we know what it does and use it for our advantage.\nDelegation in context of smartphones is shown for example if a company, building smartphones, buys the camera of another brand to build it into their products. They tell the camera company what they need and get back the requested product but they don't need to know how to build a camera. I would choose this concept because it saves you a lot of work if you use the functionality you need of an existing data structure.\nInheritance in context of smartphones can be seen if the company offers a smartphone series in two versions. One cheaper model with a normal camera and one more expensive model with a superzoom function. Ther software from the camera control of the more expensive one is the same but is extended by the new functionality of the superzoom.",
      "score": 33.3,
      "language": "ENGLISH"
    },
    {
      "id": 5585031,
      "meta": {},
      "text": "Inheritance refers to the connection of a subclass to it's superclass. The superclass is the basic, more general class that has their own attributes and methods. The subclass extends this class, and is usually a more specific instance of the superclass (car -> racecar). The subclass \"inherits\" all attributes and methods from the superclass, which however can be overwritten and changed in the subclass. This is easy to use and understand but forces all methods have to be inherited, not only necessary or wanted ones. Additionally both the superclass and subclass are then directly connected, making it more difficult to only change either one. Inheritance is usually used when there a logical or natural connection between the super and subclass. Delegation on the other does not \"copy\" methods to the Client class that wants to use it and the methods are therefore not part of the class  itself. The class that actually wants to use a certain delegated method, calls a receiver that delegates the execution request to the class to execute the request. Both instances are therefore not directly connected, but rather have a relationship, kind of like an aggrement that the delegate executes their own method for the requester. This allows for more flexibility, as only needed methods are called unlike in the inheritance where all methods have to be inherited. Delegation also does not expose the superclass as the requester does not fully knows what will be processed in the delegator. Delegation can also be used when there is no obvious natural connection between both classes.\nInheritance in the context of a smartphone is for example usefull when changing between different keyboard settings for typing on the screen. All keyboards have similar methods and attributes as the general keyboard class and therefore have a natural connection. However only small changes are made into every sub keyboard.\n\nDelegation can for example be used, if certain applications wants to connect to the internet via wifi (like whatsapp, google, etc.). Each application needs to connect to the internet by calling for example a connect() method of the integrated wifi module. This is not part of the application class itself and there is no natural connection between an application and smarphone hardware.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585648,
      "meta": {},
      "text": "The difference between inheritance and delegation is that, inheritance is to set a superclass whos features can be inherited from a subclass and delegation basically means that you use an object of another class as an instance variable and forward messages to the instance.\n\nInheritance supports the concept of reusability, when a new class should be created and there is already a class that includes some of the code that we want, we can derive our new class from the existing class. By using inheritance, we are reusing the fields and methods of the existing class. Many programming languages provide inheritance as a functionality and it is easy to implement new methods or fields in the subclass. On the other hand with inheritance private methods of the parent class can be exposed. Another disadvantage is, that changes in the superclass can force the subclass to change as well. \nFor example, normally an older model of a certain product with a basic functionality gets upgraded to an advanced model with additional features and improvements to functionality of basic model. Therefore, the advanced model extends the basic model and we can also say smartphone inherits the basic feature phone.\n\nDelegation can be an alternative to inheritance. The primary advantage of delegation is run time flexibility, the delegation can easily be changed at run time. But this functionality is not very effective in some case, because you have to create a class for the object you want to delegate. Delegation is not supported by most popular object oriented programming language.\nFor example, if a user uses an application, that can run on different devices like on a smart phone or a smart watch,, therfore the application can be switched between two devices by task delegation. The task of a sphygmomanometer on your phone can be delegated to your smart watch, so it is more practical during jogging.\n\n\n\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5587824,
      "meta": {},
      "text": "Delegation:  We work on the object level. We need to create the objects/instances that we need to call a method in this object. \nAdvantages:\n- It provides run-time flexibility. The delegate object can be changed easily during runtime. \nDisadvantages:\n- In terms of coding, delegation is not directly supported/provided by most of the programming languages. \n -Also it does not allow dynamic polymorphism.\n\nInheritance: We work in the class level. We don't need to create the objects that we will use.\nAdvantage: \n-It is directly supported by many programming languages therefore easy to use. \nDisadvantage: \n-We took all the methods from the parent class. The changes in methods of parent class will also affect child class. If the method in the parent class does not work properly, the method on child classes will not be working properly.\n\nExample:\nIf i would decide to develop an application for a smartphone, I would like to offer language options. The delegation provides run-time flexibility. I would choose delegation so that before the runtime, the users would have the option to change the language. ",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5588062,
      "meta": {},
      "text": "Inheritance allows to create a new class by subclassing and thus, it must implement all the methods of the superclass. The delegation requires a new object instance to implement its funtionalities and therefore,it allows to choose the desired funcitonality  to catch.\n\nDelegation is more flexible than inheritance, since it does not require to implement all methods of super class. However, it might be less efficient since it requires a new object instance.\nExample: the class computer might require to implement some methods of the class smartphones such as browsing the internet or accessing the email. However, if we inherit all the methods of smartphone we would have unwanted functionalities (makings calls, taking pictures). Therefore, it is better to use delegation to avoid this problem.\n\nA disadvantage of inheritance is that any change in the super class affects all the class hierarchy and can cause unwanted behaviours in subclasses. However, this aspect can also be an advantage if we want to implement a new functionality in the hierarchy, since it will be inherited without the need of rewriting in each class.\nExample: the operating system for smartphones Android can be a supperclass, with basic features that must be implemented in all the versions. This way, all the different versions of Android ( such as 10, 11, Oreo) are subclasses with additional specific methods.\n",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5592467,
      "meta": {},
      "text": "Inheritance: A subclass implements the functionalities in the superclass. \nDelegation: An object of another class is created and used as an instance variable. \n\nIn inheritance, a new class with more functionalities is built and no new object of the superclass is created for using all the method in it, while in delegation, a new object is created to reach and call the methods of another class. \n\nDelegation has the advantage that it can be used more flexibly because it can be used in any class without considering the inheritance relationship between classes, but it also has the disadvantage that it is less efficient because it creates a new object, so it may take more time than inheritance when trying to run a method. The advantage of Inheritance is that it can be clearly and directly called, and a method can be found directly without having to create an unnecessary new object. However, since the child class must inherit all the methods of the parent class, some unnecessary inheritance may occur. \n\nAn example of inheritance can be the update iteration of smartphone system. The inheritance happens when a new smartphone system inherits all the features of previous system and extends and optimizes some features. An example of delegation can be the installation and use of an app on the smartphone. After a new app object is installed on the phone, people use the features in it. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593147,
      "meta": {},
      "text": "Whereas inheritance refers to the process in which one class extends another class, with which it can then \"inherit\" the properties from the class it extends from, delegation refers to the passing on of properties to a different class. This is done by using an object instance from another class as an attribute and then calling methods on this object. \n\nInheritance has the advantage of code reuse, meaning a child class can use the code implemented in the parent class without having to re-write it. A disadvantage of inheritance is that the child classes possibly expose methods of the parent class, that should not be exposed. The advantage with delegation is run-time flexibility which means that changes can be done at run-time. A disadvantage however is that it could possibly be more inefficient, because as mentioned, the object instance must first be created. \n\nIn smartphones, the processor is the brain of the phone, it tells every part in the phone what to do. Delegation is very important, because it allows the chip to give other parts tasks, so that the chip does not need to do everything. This improves performance. An example of inheritance in a smartphone is the processor itself. It carries out many tasks and these tasks are all divided into smaller components which are all connected to eachother with inheritance. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595599,
      "meta": {},
      "text": "When inheritance is used all attributes and methods of the parent class will be available to the subclass. This can be utilized to reduce redundancy in the code as well as making maintenence easier, because editing a superclass will automatically apply those changes to all subclasses as well. This can also become a problem however, as a superclass could also provide methods or attributes that the subclass should not have access to.\nIn such cases it would be better to use delegation, where methods can be selectively implemented. It can also be used to postpone implementation details to runtime. Yet the creation of another object can potentially lead to slower execution, as well as not providing the maintainability advantages inheritance brings.\n\nIn the context of a smartphone one could imagine an app that uses the phone camera to scan foreign languages and translate them in real time. Such an application should not be able to use all features of the camera application, as it should neither be able to permanently save images nor trigger the camera flash. In such a scenario it would be best to delegate the image collection to a Camera object. \n\nA theoretical way to implement an app structure would be to make every app an individual subclass of an \"Application\" superclass. This superclass would provide startup and deletion functionalites, as well as specifiying dimensions of the app icon among other things. This would make it easier to apply system updates to all apps without having to implement the changes in every app individually.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596359,
      "meta": {},
      "text": "Inheritance:\ngiving (leting) a new subclass (inherit) all the properties of its superclass to get a desired attribute or/and functionality.\nAdvantage: easy to understand and implement\nDisadvantage: forces the creator to implement or \"use\" the full functionality of the superclass while mabe just needing a fraction of it.\n\nDelegation:\ncalling or instanciating an already existing class which offers the desired properties or functionality or comes very close to that.\nAdvantage: very flexible, lets implementor choose which functionality or properies of the delegated class is used\nDisadvantage: can be complicated and isn#t the most performant implementation form.\n\n An example for Inheritance could be if a manufacturer decides to produces different kinds of smartphones varing in size and adding small changes in functionality. Because they share most of its basic idea e.g. calling, using sms or internet features or a built in camera i would create a superclass smartphone which provides the functionality all of its share and then let them specialize their own destinct propertties.\n\nAn example for delegation could be the functionality of the cellphone modul which transmits the data. So the functionality of the modul itself can be indepented from the rest of the smartphone. So there could be e.g. different tiers of moduls distinguished by there standarts E, 3G, LTE, 5G. which could then be changed according to the changes in manufacturing because of e.g. supply chain issues.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596454,
      "meta": {},
      "text": "\nInheritance describes the relationship between sub- and superclasses where the subclasses inherit the attributes and methods of the superclass. This is useful if you have a taxonomy where the classes have similar attributes and methods and you can therefore use inheritance to limit redundant code.\n\nWhen it comes to delegation you pass a class an instance of a second class which is stored as a variable in the first class. This means you want the first class to access certain functionality of the second class not necessarily all methods and attributes. The advantage of delegation is its flexibility when it comes to reassigning the delegated object. This can be seen in the bridge design pattern where the delegated object can be easily replaced if it is outdated, etc. . \n\nIn smarphones inheritance and delegation can be found.\nFor instance, the apple iphones can all be seen as subclasses of a prototype iphone. They all have the same basic attributes like a power button and a display, but depending on the version of the iphone those attributes differ and even new attributes may be added. I would choose inheritance over delegation since you save design efforts if you stick to a prototype design. \nDelegation is seen in the ios software of iphones. The same software can be run on different iphone models and if a software is outdated you want to be able to replace it with a new update. Because of this demand for dynamic flexibility i would choose delegation over inheritance here.\n\n",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596088,
      "meta": {},
      "text": "Der Unterschied zwischen Inheritance(Vererbung) und Delegation ist, dass bei der Delegation auf Funktionen von einem bestehenden Objekt zugegriffen wird und diese an ein anderes Objekt delegiert werden. Bei der Vererbung werden die Funktion aus einer Oberklasse implementiert.\n\nEin Vorteil der Delegation ist, dass sie flexibler ist, da Methoden von verschiedenen anderen Klassen adaptiert werden können. Ein Nachteil der Delegation ist, dass erst ein Objekt erstellt werden muss, um die Delegation zu nutzen. Dies kann zu mehr Aufwand führen. Außerdem kann die Delegation unübersichtlicher sein, da Methoden von verschiedenen anderen Objekten genutzt werden.\n\nEin Vorteil der Vererbung ist die einfache Implementierung der Methode in der Unterklasse und die Übersichtlichkeit.\nEin Nachteil von Vererbung ist, dass nur aus einer Oberklasse geerbt werden kann und es somit weniger flexibel ist. Außerdem muss beachtet werden, dass Veränderungen in der Oberklasse auch zu Änderungen in der Unterklasse führen können. Diese Verbindung kann zu weiterem Wartungsaufwand führen, wenn es viele Vererbungsstrukturen gibt.\n\n\nFür ein Leseprogramm (TextToSpeech) auf einem Smartphone kann gut das Konzept der Vererbung angewendet werden. In diesem Fall gibt es eine abstrakte Oberklasse Leseprogramm in der die Funktionen startRead() und endRead() vorhanden sind. Dann könnte es für verschieden Sprachen beispielweise angepasste Funktionen wie buchstabiere() oder betone() geben. In diesem Fall ist die Übersichtlichkeit wichtig und die Objekte sind sich sehr ähnlich, deshalb sollte das Konzept der Vererbung angewendet werden\n\nFür ein Sprachassistenz System im Smartphone, wie Siri, wäre die Delegation sinnvoll, da die Sprachassistenz beispielsweise von einem Chat Objekt die Funktionen write() oder read() Nachricht oder von einem Audioplayer Objekt die Funktion start() oder stop() Musik nutzen könnte. Würde man nicht das Konzept der Delegation benutzen gäbe es zudem doppelten Code, da die Sprachassistenz eine Unterklasse mit Musik benötigen würde. Die Sprachassistenz muss in verschiedenen Bereichen agieren und deshalb ist die Delegation sinnvoll.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5596093,
      "meta": {},
      "text": "Difference: In inheritance, subclass inheritage the functions of parent class and also can override them. But in delegation, there is no inheritance between subclass and parent class. Subclass will instantiate a new sample of parent class. And by this way, subclass can do the same functions of parent class.\nInheritence:\n+: easy and straightforward to use and to implement similar functions , because we can just override the same functions from parent class, we do not need to create a new function.\n-: some inheitaged functions from parent have no use, because in subclass, the meaning of inheritaged functions differs a lot.\nExample: when the develper of an app want to update some/all functions of original version, they just do the inheritence and override the functions of parent class of the original version. It is easy and efficient to implement.\nDelegation:\n+: Very fexible, because we can \"borrow\" functions from any other classes.\n-: creating a new instance is very inefficient.\nExample: When the developer want to create a new app, and he wants use the different functions of different other apps, he will do delegation. Because in this situation, inheritence from multi classes is very very bad when u just use only one or two functions from each parent class and by the way multiclass inheritence is prohibited in many languages.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5588095,
      "meta": {},
      "text": "Usually, the debate between the two concepts arises when some object/class does some set of methods that the other class does too. In inheritance, the subclass would inherit all the methods and attributes from the superclass, while in delegation, the needed operations/methods would simply be delegated to the class that already has them implemented.\n\nAn advantage of delegation, is that you avoid going through the trouble of figuring out how to manage the methods from the super class that you do not want to be implemented for the subclass. This simply makes the system more secure, as it does not expose more than it should.\nA disadvantage of delegation might be more memory consuming and not as efficient, as to delegate the task to another object, you will first need to create an instance of it.\n\nAn advantage of inheritance, is that it can be a perfect tool to use in situations where a subclass is meant to be more specific/build upon what is already implemented in the superclass. Also, application of abstract classes comes to mind as a big advantage, as you can use the superclass as simply a default template for subclasses, without necessarily creating an instance of it. \nA disadvantage of inheritance is the opposite of advantage of delegation, as sometimes you will be stuck with handling methods inherited from superclass that should not be implemented in the sub class. \n\nIn the context of smartphones, for example if your app needs to find out the current time based on the device, it could delegate the task of providing/tracking time to the already implemented functionality of time on the smartphone, since there is no need to create an extra class if the already existing one does the job sufficiently. \n\nAlternatively, if you want to copy the functionality of a calculator, but also improve it, you could use the inheritance, since you want to specify/extend it further.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589615,
      "meta": {},
      "text": "Delegation can be an alternative for inheritance and is in some cases an application that leads to the same results. The difference is that inheritance is the code call in which one class takes the properties from another. With this, the new class or child class also accepts the parent class's behavior, methods, and attributes. In delegation, one class \"tells\" the other class what to do, thereby using an object of another class as an instance variable of the class being delegated. \n\nThe primary advantage of delegation is its flexibility. Delegation can be changed parallel to run-time, whereas inheritance does not permit this because it is anchored in the class's architecture. The disadvantage is that, unlike inheritance, delegation does not facilitate dynamic polymorphism. ",
      "score": 50,
      "language": "ENGLISH"
    },
    {
      "id": 5594503,
      "meta": {},
      "text": "Inheritnce describes the creation of a new class wich extends an existing one, whereas delegation creates a new class as well but doesn't have the necessary classes that may be requierd, so an instance of the new class is created within the class that provides the needed functionality and calls the functions of the newly created class. \n\nInheritance offers ease of use in terms of suport and implementation but through the interconnection of parentclasses and subclasses changes in the first might effect the second or the second might present security risks. Delegation on the other hand offers a great deal of flexibility in use for different classes but is less efficient due to the necessesty of creating new instances of every class that has functions that are required.\n\nAs an example looking at the developement of smartphone apps often APIs are used. Here its necesseary to use inheritance to gain the full functionality of the given API to implement the app specific methods.\nWhile developing a server client app for the phone you might not want certain types of users to be able to have certain access rights. Here delegation can help close these security risks.  ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594714,
      "meta": {},
      "text": "Delegation and inheritance are two different techniques for reusing code.\nThe main purpose of both of them is to avoid code duplication.\nInheritance :\nif a developer wants to create a class that will include the same properties and methods of another class then it's more beneficial to use inheritance which enables him to create child classes that inherit all the methods and attributes of a parent class.\nwe can take as an example   the different types of smartphones :\nwe can consider Smartphones as a parent class which includes the common methods and properties that all smartphones share such as being able to call another smartphone or using WIFI or displaying content.\nand we can consider each   different type of smartphone as a child class which inherit from smartphone  has its  own properties wich different   them from other child classes such as having a different camera setup or having different dimensions from other smartphones \n\nDelegation is simply creating an object of another class and then forwarding the method calls to it.\nit is very useful especially when inheritance is not a choice because the new class is not supposed to support all the methods of the other.\nit enables the developer to choose when to use a function and when not and he is not forced to accept all the methods of the other class.\nanother advantage can be also that delegation is run-time flexible.\nwe can take as an example a smartphone and the camera setup.\nwe can say that the smartphone delegate the camera setup.\nthe smartphone doesn't necessarily share the properties of a camera \nit uses some specific method of camera. \n",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5595758,
      "meta": {},
      "text": "The difference between inheritance and delegation is that the inheritance the subclass inherits all methods and properties from the inherited superclass. On the other hand, Delegation is the way that a class has another class as an attribute and then it has access to its methods by delegation we do not need to override the methods like in inheritance.\n*Advantage Inheritance: The subclass can either use methods of superclass or overwrite them which makes it flexible.\n*Disadvantage of inheritance: the subclass can only extend one superclass and not too many which is the variety of implemented methods is limited.\n*Advantage of delegation: The class can use many methods from other classes with the help of attributes with the delegation which makes it more effective as the inheritance.\n*Disadvantage of delegation: in some programming languages the delegation is not functional.\nIn the context of smartphones the inheritance shows up in for example in iphone 13 which reuses the functionality of iphone 12 and then provide to the client new functionalities based on the previous systems.\nDelegation is elaborated for example is that smartphones have apps with already implemented functionalities which are in the context of programming languages as objects of another class.  ",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596030,
      "meta": {},
      "text": "Bei Inheritance übernimmt die neue Klasse die Methoden der Superclass und stellt bei Bedarf neue Methoden zur Verfügung. Delegation hingegen delegiert die neuen Methoden in einer neuen Klasse und übergibt diese. Die Methoden wiederholen sich also nicht unter den Klassen.\n\nEin Vorteil von Inheritance ist, dass es von vielen Programmiersprachen benutzt werden kann. Ein Nachteil jedoch ist, dass man bei Veränderungen in der Superclass auch die subclass ändern muss.\n\nEin Vorteil von Delegation ist, dass es einfacher ist neue Methoden und Funktionalitäten hinzuzufügen, da man sich nicht in jeder Klasse wiederholen muss. Ein Nachteil jedoch ist, dass man ein neues Objekt kreieren muss.\n\nInheritance Beispiel:\nDie Superclass heißt Smartphone und besitzt mehrere Subclasses mit verschieden Marken wie Apple, Samsung und Sony. In der Superclass befinden sich die nötigsten Funktionalitäten die bei jedem Smartphone gegeben sein müssen wie zum Beispiel, dass das Telefonieren möglich ist. In den Subclasses würden sich dann Funktionalitäten befinden, welche nur bei dem einen Hersteller zu finden sind wie z.B. Facetime auf allen Apple Smartphones.\n\nDelegation Beispiel:\nDie App Health verfolgt viele Gesundheitliche Faktoren wie Schlaf, gelaufene Schritte etc. Diese befinden sich dann auf der App und können weitergegeben werden an andere Apps oder an den Arzt, um weitere Schlussfolgerungen daraus ziehen zu können, z.B. ob man gesund lebt oder nicht.\n\nDie beiden Beispiele habe ich gewählt, weil man bei Inheritance die Unterklassen schön erkennt und somit weitere Funktionalitäten, welche nur in einer Subclass aufzufinden sind. Bei Delegation finde ich sieht man in dem Beispiel gut wie Informationen weitergegeben werden um mit diesen weiterzuarbeiten. Die eine Klasse delegiert die andere.\n",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5596460,
      "meta": {},
      "text": "By using inheritance an implementation object is a subclass of other base class, so it can use its operations or override them instead. By delegation a base class \"delegates\" operations to implementation object, so there is no direct dependency between them (aggregation or composition instead).\nInheritance offers some operations already without creation of object instance. It is easy to use and implement, but it is not as flexible as delegation because base class can require implementation of some unwanted operations and changes subclass with itself. By using delegation classes are more independent, but its necessary to create an object instance for that.\nIn smartphone some apps may require access to information about calls(from call app). To avoid implementation of unwanted operations it will be better to choose delegation for that access.\nAlarm app requires most of operations in part of \"clock\" class in smartphone, so it would be better to make alarm as a subclass of clock class.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596623,
      "meta": {},
      "text": "A few techniques have been established in order to decrease the amount of meaningless derivative code, namely Inheritance and Delegation. Both techniques basically allow using other classes' similar methods in order not to write same code all over again. \nInheritance enables to create classes that automatically possess all the parent class methods, which can be overridden at the discretion of the programmer. \nDelegation's structure is easier. A programmer knows that there is already a similar public method in some other class, that does what he is trying to achieve. The given method cannot be overridden, thus one should adjust their code to use the delegation concept.\n\nThese concepts however can be found not only in the programming world. Consider a phone Manufacturer. Most of the manufacturers don't develop their own processors. This is a good example of Delegation. Developing your own processor can lead to astronomical costs and only a small profit margin that can only be achieved with worldwide scale, which most manufactures lack. Thus nearly all the companies tend to use the latest generation of Qualcomm processor and adjust their other tech and code for one.\n\nGreat example of inheritance can be seen in the smartphone camera development world. Sony is known for being the best in the world of digital cameras. Thus clearly they had a huge leap at the first stages of smartphone camera development, as they simply inherited their knowledge from full-frame cameras and used it in the context of smartphones.",
      "score": 33.3,
      "language": "ENGLISH"
    },
    {
      "id": 5587208,
      "meta": {},
      "text": "The idea of using delegation and inheritance is to reuse code and to structure your code by showing that classes relate to one another. Inheritance is used for implementing a structure of different hierachies like classes of animals in biology. You want to understand your code better and to use the general methods in the subclasses so that the superclass has the basic functionality. For delegation, the idea is to get an operation and to send it to another object, so that the instantiated object has the functionality you get with the call of a method. \nThe advantages of inheritance is that lots of different program languages provide this and to show relationship between classes. The disadvantage is that maybe superclasses provide methods that may not be used in a subclass, like the method remove is not good for a stack where you should only push and pop. \nThe advantage of delegation is to show how objects have to act so that a client first has to call a receiver that gives the request to delegate and give the information back to the client. The disadvantage is that another object has to be instanciated which needs more storage.\nIf you use a smartphone you want to send requests to a database of your bank account or travelling app. And you have a http request when you want to surf the Internet. Therefore delegation is better so that the receiver controls that you user can't misuse the system (changing, get false information, etc.)\nIf you want a operating system to use on different phones it's good to have inheritance which functionality is provided.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593487,
      "meta": {},
      "text": "For delegation you need to create an instance, an object. And then you can call a method in this object.\nFor inheritance a new class is created by subclassing. You can simply invoke a method on 'this' without caring whether 'this' has been instanciated. In contrast to delegation you are on the class level and not on the object level for inheritance. \n\nDelegation\nAdvantage: Delegation is generally more flexible.\nDisadvantage: Delegation might be more inefficient.\nExample:  A smartphone consits of several parts. If you put those several parts together they make a smartphone. So the smartphone itself does not implement all the functionality but reuses the functionality of the ease of use of the electronic control units that are part of the smartphone. So it reuses the implemented functionality in an existing object,\n\nInheritance\nAdvantage: Inheritance is straightforward to use.\nDisadvantage: A disadvantage of inheritance is that a change in the parent class can force the subclass to change as well.\nExample: You have a parent class Smartphone which includes must have attributes like model, brand and release year and must have methods like calling and messaging. Then you create several new classes like iOSPhone, AndroidPhone and WindowsMobilePhone by subclassing. The new classes reuse the implemented functionality of the superclass Smartphone and also offer new functionalities\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593626,
      "meta": {},
      "text": "In inheritance you extend/specialize an existing class, adopting all of it's methods, calling them, when their functionality is needed in another method and overriding them, if they should work differently.\nThis creates a hierarchy of parent classes and the child classes inheriting from them.  \nIn Delegation a class requiring the functionality of another class doesn't inherit it, but instead has an attribute, which holds an instance of said class. The Methods of the class can then call their counterpart in the attribute, \"delegating\" the method-call to them.\nAn advantage of inheritance is, that you don't need any additional boilerplate-methods, which sole purpose is calling a similar method another object. On the other hand inheritance can lead to way too complex hierarchies, with methods being overwritten many times. Actually finding out, which methods are actually called might require looking through dozens of files and improper encapsulation might lead to a simple changing breaking the entire system.\nA major advantage of delegation is the fact, that the class doesn't have to expose the entire interface of the other class. One of the downsides of delegation is, that every time an object of the class is instantiated an object of the other class also has to be created.\nIn the context of smartphones an iphone might inherit from a more general phone class, since it \"is-a\" phone and should therefor be capable of the same things. The Iphones Storage-unit should be handled through delegation, since an iphone \"is not\" storage, but rather \"has storage\".\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594279,
      "meta": {},
      "text": "Both delegation and inheritance serve the purpose of reusing code.\nWith inheritance, one achieves this by having classes with common functionality be subclasses of the same superclass and implemementing this common functionality in this superclass.\nWith delegation, a new class implementing the common functionality is created and all object that shall have the functionality then refernce an object of this class and pass (delegate) the corresponding method calls to this object. \nThe main difference is, thus, that, for delegation, a new object is created.\nA disadvantage of inheritance is that every class can only directly inherit from one class. So all functionality that is shared via inheritance needs to be put in a single class (or a linear hierachy of classes) even if this doesn't make sense. In this case, one should use delegation as delegation can handle genralization of multiple independent functionalities. \nA disadvantage of delegation is that from knowing the delegation objects one has no real information on the structure of the system (or, more precisely, the usage of the delegation objects), wheras, for inheritance, the superclass itself provides a lot of information about the funktionality of each subclass (namely, all subclasses have all functions of the superclass).\nFor example, all smartphones share functionality. A lot of this functionality is common for all smartphones (e.g, they have a touchscreen with touch functionality), so these features would then be summarized in a superclass \"Smartphone\", so the resuse us done by inheritance.",
      "score": 58.3,
      "language": "ENGLISH"
    },
    {
      "id": 5595867,
      "meta": {},
      "text": "Inheritance programming means that you make subclass, which inherits all of the variables and methods that already defined in the superclass. On the other hand, by using delegation you can write additional functionality that uses implements of the original class to provide the original functionality.\n\nAdventage of Inheritance\n- Inheritance provide convenience to the developer. This is because Inheritance minimalize the code duplication and make easy to add new functionality in subclass. Unlike Delegation, inheritance is directly supported by most object- oriented languages. \n\nDisadvantage of Inheritance\n-It can decrease execution speed. \n-It's hard to fix. If you modify the base class, you must also modify the inheritance class. \n- (If there are too many subclasses exist) It can increase complexity of object model.\n-Cannot be used in evey cases. For example if the parent class is final, you cannot make subclass for it.\n\nAdvantage of Delegation\n-Delegation provide run time flexibility and also flexibility in our program design. Its easy to fix and delete. \n-With delegation you can avoid misuse of methods. User certainly knows which method they called. \n\nDisadvantage of Delegation \n-Delegation is not supported in many programming languages.\n-It is sometimes inefficient because you need to create a new object instance. \n- It makes difficult to use dynamic polymorphism.\n\n3. A smartphone is an object that combines the functions of an mp3, a phone, and a computer. If a user wants to add a function of 'searching using a picture' that taken through a smartphone's camera, a function of 'taking a picture' and 'saving a picture' should be added to the searching class. If you use the Inheritance method, there is a way to inherit the camera class to the subclass of searching. Otherwise, if you use the delegation method, you can delegate some functions of the camera like \"take a picture\" and \"save a picture.\" to the \"photo search\" class.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5595908,
      "meta": {},
      "text": "Bei \"inheritance\" erbt eine Unterklasse von einer Oberklasse und kann somit deren Methoden verwenden bzw. die Methoden auf eine eigene Weise implementieren.\n-Vorteil: kann Funktionalität der Subklassen leicht erweitern\n-Nachteil: Durch das Verändern der Oberklasse muss man evtl. auch die Unterklassen anpassen\n-Beispiel: Beispiel für Inheritance ist das Gui bzw. das Betriebssystem eines Smartphones. Diese werden für jedes Smartphone individuell angepasst. Erben aber trotzdem alle von einem übergeordnetem Konstrukt.\n\n\nBei \"delegation\" wird ein Objekt einer Klasse genutzt um die Funktionalität der Klasse zu nutzen.\n-Vorteil: Muss nicht alle Methoden der Oberklasse implementieren, sondern verwendet nur die Methoden vom Objekt, die auch Sinn machen \n-Nachteil: Ineffizienter, da erst ein Objekt erzeugt werden muss (ist langsamer und verbraucht Speicher)\n-Beispiel: Beispiel für delegation ist eine App. Hier ruft das Smartphone einfach die App auf, die für alle Handys mit dem gleichen Betriebssystem gleich ist. Die Funktionalität ist hier auf der Seite der App und wird lediglich vom Smartphone genutzt.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5596033,
      "meta": {},
      "text": "Inheritance provides the methods of a implementation to its subclass (also known as subclassing) while delegation delegates an opetation to an object where the operation is already implemented.\nInheritance:\nAdv: reusabilty of the functionality of superclass.\nDis Adv: security problem , which a a class should not be able to access certain methods.\nDelegation:\nAdv: security or accessibility problem is solved by desginating only specified task to an object where it is already implemented.\nDis Adv: Is Complicated than Inheritance to implement and take additional classes to be defined to connect any two classes which could be done with inheritance in one step.\n\nSmartphone: The stock vs Skined android version\nStock Android(the version from Google itself) has some features like message, location service, or the general pixel UI which are used directly in google phone. Other Companies use their version of android like OneUI from samsung , or the oxygen os from one plus. They inherit the same functionaly in apps like message with different skin or UI. However something like you phone location service is only accesible through google play service which is an example of delegation. Where the service is delegated by the play service but  not inherited so they only get access to certain services but not all.\n",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5584887,
      "meta": {},
      "text": "In Delegation, the actual \"work\" that needs to be done is pushed down into an instance of the delegate, instead of done in the \"main\" class in runtime. This approach usually allows for easier reuse of code, as you can choose how to use and restrict the functionalities of the delegate, without changing it or knowing the actual code. However, it tends to be less efficient, because an additional object needs to be instantiated.\nInheritance instead expands upon an existing superclass at design time and allows for new, specialized subtypes with more methods or overwritten ones. This is usually quite easily to implement, for as long as you are already aware of how the chosen superclass works internally, as you can just add new methods or overwrite existing method headers.\nIf for example a smartphone producer wants to release a special version of a phone after reaching 250 million sales, it would be smart to simply create subtypes of the existing system classes and expand them with new celebration features or revamped methods, because the phone still has to be able to perform all the task of the original version, but more/better.\nHowever, if a newer Version of a Smartphone is to support Apps that only run on an older OS, then it is probably beneficial to delegate that feature to a simulated instance of the older phone's OS, so save development costs and unnecessary performance loss for user who do not wish to use said old Apps.\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585428,
      "meta": {},
      "text": "Bei einer Delegation muss man Objekte bereits bestehender Klassen instanziieren und kann dann mithilfe dieser Objekte die benötigten Methoden aufrufen, die die jeweilige Klasse der Objekte bereitstellt. So können die Funktionalitäten, die von diesen Methoden bereitgestellt werden wiederverwendet werden. \nBei der Vererbung erbt man von einer bereits existierenden Klasse, die schon eine gewisse Palette an Funktionalität bereitstellt und kann dann so diese Funktionalitäten verwenden, ohne viel zusätzlich zu programmieren. Folglich spielt bei der Delegation und der inheritance in beiden Fällen Reuse eine große Rolle. \nBei der Vererbung werden hingegen keine neuen Objekte erstellt, wie dies bei der Delegation gemacht wird. \nDie Vererbung hat den Nachteil gegenüber der Delegation, dass man gezwungen wird, alle Methoden der Superklasse zu akzeptieren. Bei der Delegation kann man nur die Funktionalität bereitstellen, die man wirklich benötigt.\nDa man nur von genau einer Klasse erben kann, ist man bei der Vererbung immer an eine Klasse gebunden, was bei der Delegation nicht der Fall ist, denn man kann verschiedene Objekte verschiedener Klassen instanziieren und hat so mehr Möglichkeiten.\n\nBei der Delegation sind drei Objekte involviert: Client, Receiver, Delegate. Der Client called den Receiver. Der Client gibt ruft den Receiver, der die Anfrage an den Delegate weiterleitet und dieser antwortet dann dem Receiver, welcher die Antwort letzlich wieder zum Client zurückgibt.\n\n1) Angenommen man hat eine Klasse Smartphone, die die grundlegenden Funktionalitäten und Attribute wie Größe, Speicher, Akkulaufzeit und einige Methoden (fotographieren, charge, Nachricht versenden, etc.) bereitstellt. In dieser Klasse wird auch die Methode supercharge() zur Verfügung bestellt. Man möchte nun ein neues Smartphone entwickeln, das jedoch nicht über die Funktionalität eines sehr schnellen Aufladens verfügt. Hier wäre die Delegation sinnvoll, denn ein Erben von Smartphone würde dazu führen, dass die ungewollte Methode supercharge() auch diesem neuen Smartphone zur Verfügung steht.\n\n2) Falls das neue Smartphone, das man entwickelt auch die Methode supercharge() haben sollte, könnte man hier von Smartphone erben, da dies sehr elegant wäre und man nicht unnötig Objekte erstellen müsste.\n\n",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5585774,
      "meta": {},
      "text": "Inheritance refers to the process in which one class extends another class, with which it can then \"inherit\" the properties from the class it extends from, while delegation refers to the passing on of properties to a different class. This happens by using an object instance from another class as an attribute and then calling methods on this object.\n\nInheritance and delegation have different advantages, but also disadvantages. One advantage of inheritance is code reuse; this means a child class can use the code implemented in the parent class without having to re-write it. A disadvantage of inheritance is that the child classes possibly expose methods of the parent class, that should not be exposed. \nThe advantage with delegation is run-time flexibility which means that changes can be done at run-time. Thus, a disadvantage is that it could possibly be more inefficient, because as mentioned, the object instance must first be created.\n\nIn smartphones, you can call the processor \"the brain\" of the phone, as it tells every part in the phone what to do. Delegation is very significant, as it allows the chip to give other parts tasks. In order, the chip does not need to do the total. This improves performance. Inheritance in a smartphone is for example the processor itself. It is responsible for many tasks and these tasks are all divided into smaller components which are all connected to eachother with inheritance.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589326,
      "meta": {},
      "text": "When using inheritance, you implement new functionalities in the subclass and reuse those of the superclass. Therefore it is easy to implement new functionalities in the subclass. But it may lead to unwanted functions of a superclass being exposed in the subclass. Delegation on the other side redirects operations to a class where they have been already implemented. Therefore it is more flexibel. But this comes with a loss in efficiency because new objects may have to be created.\n\nPhone apps are all coded in a certain language. Here inheritance is important. There is a framework you can use and then extend to your needs. For example an app always has a predefined layout. You can take the base components (e.g. a blank white space) and then adjust them, while keeping functionalities such as rescale, touch interaction etc.. You can inherit those because they do not need to be changed but must be shown.\n\nDelegation is also needed. For example an api that is used to track user statistics. You do not need to inherit the statistics but simply can call the methods on an object of the api and forward your data that then is processed by the api. This reduces code length and also makes sure that data is processed equally.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594125,
      "meta": {},
      "text": "Inheritance (\"Is-A\" relation) allows a new class to take on the properties of the class its inheriting from. It is usually used with the intent of specifying or reusing an already existing class without having to instantiate multiple classes. A disadvantage is that you have to inherit all the classes form the class you're inheriting from, even if you don't need them.\n\nDelegation (\"Has-A\" relation) passes an object to an already existing class who knows what to do with the given object and its methods.\nIn comparison to inheritance delegation only provides methods you really need instead of inheriting all of them when creating a new class and changes done to the reused class are independent of the reusing class. A disadvantage is that you have to define those instances.\n\nA new smartphone inherits previous mechanisms and functions of older smartphone models, while also adapting them to the new version. This is inheritance because you build upon an already existing object and just refine it without it being all to different. \n\nDelegation would be: A smartphone has a camera. A phone can't inherit from a camera, a phone contains a camera.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594629,
      "meta": {},
      "text": "Inheritance: We would like to implement a class with certain functions and attributes. There is another class that is already implemented that has all the functions we would like to have minus a few specifications or alterations. In that case we would use inheritance and extend the mother class and/or override some methods.\n+ easy to implement new methods\n- the subclass will also inherit functions that are not wanted in the subclass\n\n\nDelegation: When I have a class a and I would like to use the functionality (one) of an object of type class b. Then I would instantiate an object of type class b in class a and call its methods.\n+ more flexible\n- efficiency is compromised as we need to instantiate objects\n\n",
      "score": 75,
      "language": "ENGLISH"
    },
    {
      "id": 5596368,
      "meta": {},
      "text": "Inheritance is intended to be used when we want to copy the base of a certain structure and add something to it, like in programming it's like when a child class inherits the properties of the parents class and we decide to expand and change it up a bit. Advantage of this is adding stuff to already existing functions, but the disadvantage is when we want to remove stuff. When phone games are in question, perfect example of this would be an item battle pass. There are some items that the player can get for free, but when paying for the premium version of it, the player can receive the same item and some new and possibly better items on top of the already received items.\nDelegation on the other hand is intended to be used when we want to duplicate only the functionality of something and perhaps remove a function or two, since in inheritance you're required to implement all the existing methods. An advantage of this would be for example when implementing 2 classes and you use one class to have certain functions, while the other uses the same functionality but with a few extra functions. The obvious advantage of this would be saving computer space and the disadvantage would be that it's less efficient. An example of this would be the iPhone application find my iPhone and the map application. Also find my iPhone passes the duty of the map to the map application. They both have the base functionality, but some features are removed on find my iPhone like finding nearby restaurants, caffe etc. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596424,
      "meta": {},
      "text": "The difference between Inheritance and Delegation is that in Inheritance you can still access all the methods and functionality of the super class, meaning that it isn´t good for restricting access and can lead to undefined behaviour if the user uses methods that were defined for the super class but weren´t meant to be used in the new subclass. In Delegation, on the other class you create a completely different class that just makes the calls on the previously defined class. If the client only has access to the receiver, then you can control exactly which methods the client can and cannot use, avoiding undefined behaviour, that could break your system.\nOn the other hand, having inheritance is much easier to implement, since it is supported by almost all mayor object-oriented programming languages, while in delegation you must implement a completely new class and you need to instantiate two classes instead of one, which is more expensive in terms of resources.\nAn example of Inheritance vs Delegation in the context of smartphones is for example:\nFor the implementation of the Calling System. Let's say you have a list of all the missed and took calls you have made in hierarchical order. For which a List is a good starting point since you don`t know how many Calls a user will made in the future. It would be much better in this case to use Delegation, since you don´t want an insertion in the middle of the list of a new call. You always want an insertion to the List at the very end. This could be restricted using a Delegation to the standard List implementation, which allows insertions in any part of the List.\nIn the case of the List of contacts, you want all the possible methods that a List uses and maybe want to implement a new method, so inheritance is more suitable\n",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596570,
      "meta": {},
      "text": "Difference: When using inheritance you have a subclass that inherits all the methods from the superclass. In Java this is possible by using extends (or implements for interfaces). When using delegation you have to initialize your delegate class and then you call a certain function of that class when needed. So you don't use any type of \"normal inheritance\"\n\n+/- Inheritance:\n\t+: This is often times easier to use, since it is already implemented by most programming languages. Additionally it is way easier to express a \"is-a\" relationship with inheritance.\n\t-: You may inherit public methods from the superclass, that should not be available to use for the subclass. This is a disadvantage you should look out for.\n\n+/- Delegation:\n\t+: You are able to change the delegator class during run time. This is not possible with inheritance.\n\t-: You actually have to initialise an object of the delegator class, before you can delegate. This can cost time and space.\n\nExamples:\n\tInheritance: If you develop an iOS application, you automatically inherit appearance and behaviors of the iOS development kit by Apple Inc.. You can than override and extend these functionalities until you are happy with your final product. \n\tDelegation: When you install an app and this app asks for permission for certain functionalities. If you allow this functionality, you allow the app to delegate this function to a function of the operating system ot the smartphone. For example, when you install Snapchat and allow it to use your camera. Snapchats uses methode of the op. system. Therefore it delegates its main camera function to an op. system method.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5584425,
      "meta": {},
      "text": "Inheritance is the process by which one class takes the property of a parent class. Delegation is simply passing functionality off to another class. The main advantage to delegation is that you can provide only the methods that you actually need, where as with inheritance you inherit everything, even methods that are not necessary. Further the delegate can easily be changed at run-time. But delegation is not directly supported by a lot of languages. And does not support dynamic polymorphism which is a benefit of e.g. Java.\n\nSmartphone example for inheritance:\nSay you have an  app on a smartphone and you want to allow users to log in. You could inherit the entire User class with all the authentication methods. These can be called in the class now.\n\nSmartphone example for delegation:\nSay you have an app on a smartphone and you want to allow users to log in. You could delegate this entire process to another Authentication process without directly inheriting this. Now if the user wants you could also switch to Facebook authentication during runtime without having to import it before. \n\nI would definitely go for delegation in this context due to the added run-time flexibility.\n \n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5587441,
      "meta": {},
      "text": "Inheritance is a form of generalizing functionality and give it to other classes. So you can combine same functionality in different classes into one and just inherit it after to get the functionality.\n\nDelegation is more splitting up functionality into different classes. So you dont have all functionality in one class like at the inheritance that can be an advantage in terms of modularity and adaptability. The different classes interact with each other to share functionality.\n\nIn terms of smartphones the operating system can use both concepts. The basic functionality like apps and keyboard and so on are using inheritance because it doesnt need any modularity. But some examples that only some phones have are fingerprints that need to be handled with delegation.",
      "score": 50,
      "language": "ENGLISH"
    },
    {
      "id": 5588154,
      "meta": {},
      "text": "Bei der Delegation handelt es sich um eine Beziehung zwischen Objekten: Jedes Objekt der Klasse A verwaltet ein Objekt der Klasse B. Ein Vorteil davon ist, dass Delegation ein sehr mächtiges Konzept ist: Dadurch können Teile des öffentlichen Schnittstelle von B versteckt werden und Operationen von B erweitert oder nur unter bestimmten Umständen erlaubt werden. Ein Nachtteil ist, dass die Anzahl an Objekten und Funktionsaufrufen steigt.\n\nBei der Vererbung handelt es sich um eine Beziehung zwischen den Klassen: Erbt Klasse A von Klasse B, dann ist jedes Objekt der Klasse A auch ein Objekt der Klasse B. Es gibt keine zwei verschiedenen Objekte, die zueinander in Beziehung stehen. Ein Nachteil davon ist, dass Operationen von B zwar durch Überschreiben verändert werden können, Operationen der öffentlichen Schnittstelle von B aber nicht versteckt werden können. Es ist allerdings sehr leicht, neue Funktionalität zu implementieren und dabei die alte zu behalten: Man fügt einfach die neuen hinzu und aufgrund der Vererbung sind die alten immer noch anwendbar, man braucht nicht jede einzelne zu delegieren. Das ist ein Vorteil des Konzepts.\n\nIm Kontext von Smartphones könnte eine App von einer anderen erben, wenn sie ihr neue Funktionalität hinzufügt, die alte aber weiterhin nutzbar ist, denn das ist genau die Stärke von Vererbung. Das Betriebssystem (z.B. Android) sollte den Zugriff auf Ressourcen wie die Kamera durch Delegation regulieren: Die Kamera kann nur von einer App gleichzeitig verwendet werden, hier muss also Zugriffskontrolle stattfinden, was mithilfe von Delegation leicht umgesetzt werden kann.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5593454,
      "meta": {},
      "text": "In Delegation, we want to get an operation in general and then pass it on to another object, where this method/operation is already implemented. We use an intermediary object with which e.g. a client interacts. This intermediary object delegates the call to another object that executes the call. An advantage of delegation is the flexibility of the relationship between the objects. Using delegation, we can define which behaviour gets exposed and can avoid to show too much which might lead to unintended manipulation of data. A disadvantage can be the memory usage or performance, as I have to create at least one object to use delegation. An example of using delegation can be the user interacting with the operating system of the smartphone because this way, only the functionality is available to the user, but the internal information is still hidden and can be changed.\n\nOn the other hand, in Inheritance we use a subclass of an implementation that inherits the structure and behaviour of a superclass and extends this. Here, the functionality is implemented in the superclass, which can be used by the subclass due to the inheritance. An advantage of inheritance is, that it is very easy to use and to implement in the source code, compared to e.g. delegation. A disadvantage is, that through inheritance, the subclass inherits all methods of the superclass which might lead to exposure of internal details and possibilities of unintended manipulations. An example of using inheritance can be the internal access of the phone on the memory. There inheritance makes more sense, because otherwise, many delegation request methods had to be implemented.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594043,
      "meta": {},
      "text": "The difference is in how different classes interact with each other. In Inheritance, you always need to implement the methods in the parent class, making very noticeable subclasses. With delegation, on the other hand, you reuse functionality of existing objects using object instantiation and/or method calls, thus making the classes a lot more independent, and be able to a lot more flexible than through inheritance. Inheritance on the other way is a lot simpler, easier to understand, used much more frequently and supported by almost every programming language and makes it easier to add new classes.\n",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596214,
      "meta": {},
      "text": "Inheritance is used in a situation where a class \"Child\", a child class, inherits the attributes and methods declared in class \"Parent\", the parent class. An often-used alternative to inheritance is delegation. Delegation uses an object instance of another class, a \"receiver\", that forwards the request to the delegate, which then executes the request.\n\nA common advantage of both is the possibility to prevent code duplication, as you don't need to copy the code then. An advantage of delegation is showing only the relevant methods. By using a \"receiver\", you can only accept the methods that really make sense, instead of exposing just all methods of the super class in the case of inheritance, even the secret ones or the irrelevant or \"forbidden\" ones, which would be a disadvantage of inheritance. However, inheritance is supported by most popular object-oriented languages and doesn't need to create a \"receiver\" (object instance), which makes it efficient and makes delegation more inefficient (disadvantage of delegation).\n\nA concrete example might be the time measuring function of smartphones. Let's say Joon's Samsung smartphone has always a stable internet connection to Samsungs central server. Joon's smartphone wants to know the exact current time in Munich. To implement this, Joon's smartphone could inherit the time measuring system of the Samsung central server (inheritance). Joon's phone would get all the functionalities of the server's time system, which means, this inheritance would expose all (even unused or \"forbidden\") methods (e.g. a methode \"stop server time\") of the server's time system. Instead, you(Joon's phone) could ask every time the server's time system the exact current time in Munich, which however might be more inefficient as you would need a receiver instance, which receives the \"time-requests\".",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596412,
      "meta": {},
      "text": "The key difference between inheritance and delegation lies in the access the subclass has to the superclass. Delegation is built upon the idea that the subclass doesn't need and should not have access to the inner workings of the superclass, but rather use the superclass as a provider with limited but clear functions. On the other hand, inheritance does allow access to all layers of the superclass and how it works internally, so that it can be adapted and its functions can be extended to be used in more cases.\n\nAn instance for delegation is, in fact, smartphone manufacturing. Smartphone companies do not create every single piece that goes into their end product — instead, they rely on a set of various suppliers for each part, going from the chipset and the camera to the battery and microphone, just to name a few. In this case, delegation is the best since the companies producing those components are specialized in creating those, and end up making a better product after years of development and research that would take longer and cost more for a smartphone company.\n\nOn the other hand, inheritance is more present on the software side. New software can be built upon smaller prototypes made before, so it's easier to get all methods and keep on building on that. \n\n\n",
      "score": 25,
      "language": "ENGLISH"
    },
    {
      "id": 5596589,
      "meta": {},
      "text": "Inheritance gehört zu den vier Hauptfeatures (Kapselung, Abstraktion und Polymorphismus) der OOPS Konzepte. Durch Inheritance kann eine Klasse alle Eigenschaften einer Anderen erben. Die Klasse, die die Eigenschaften erbt, wird als child class, und die Vererbende als parent class bezeichnet. Mit \"extends\" wird Inheritance in Java implementiert. Ein Vorteil von Inheritance ist, dass es von vielen Programmiersprachen unterstützt wird und leicht anwendbar ist. Ein Nachteil ist, dass Veränderungen in der parent class, Auswirkungen auf die child classes haben könnten, weil sie stark zueinander coupled sind. Zum Beispiel bei Bumpers: wenn die Car Klasse zu einer Food Klasse geändert wird, dann ändern sich nicht nur alle Eigenschaften von der Klasse, sondern auch die child Autos insofern da sie nun nichts mit Essen zu tun haben und so nicht von Food inheriten können.\n\nDelegation hingegen ist die Übergabe oder Zuweisung einer Aufgabe an eine zweite Partei. Bei Delegation wird die Instanz einer Klasse als Instanzvariable verwendet und messages an die Instanz weitergegeben. Bei der Delegation wird mehr Wert darauf gelegt, wie sich Instanzen zueinander verhalten. Ein Vorteil bei der Delegation gegenüber der Inheritance ist zum Beispiel die Fähigkeit, auch während der Laufzeit dynamisch zu sein, d.h sie kann während der Laufzeit geändert werden. Ein Nachteil von Delegation ist, dass es die Software dynamischer macht, es schwieriger ist, die Funktionsweise während der Laufzeit zu verstehen, denn es ist einfacher einen Fehler zu finden, wenn die Struktur statisch ist und der Compiler den Developer dabei unterstützt. Allerdings wenn man gut definierte Delegates hat, also wenn alle boundaries klar definiert sind, dann sollte man doch leicht debuggen können.\n\nIn Bezug auf Smartphones: Ich würde Inheritance bei Apps verwenden, wenn sie gleich/ähnlich aufgebaut sein sollen. Zum Beispiel, wenn beide Apps A und B zum Schreiben da sind, dann könnte es eine Basic Writing App geben (parent class) und A & B als child classes, die die basic Funktionalitäten von der Writing App übernehmen, aber sich zum Beispiel im Design unterscheiden. \nBei Delegation fällt mir leider kein Gutes Beispiel ein, aber ich denke, dass folgender Ansatz richtig sein könnte:\nWenn man zum Beispiel in die Phone Settings geht und dort Einstellungen verändert, sagen wir mal die Bildschirmhelligkeit, dann wird die Operation an den Grafikchip weitergeleitet und dort die Aufgabe, den Bildschirm dunkler/heller zu machen, geprocesset.\n\n",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5585036,
      "meta": {},
      "text": "* Difference:\n- In the case of inheritance, we create an additional class that extends the existing class with additional operations (methods) or overrides existing methods.\n- In the case of delegation, one class delegate to another class to perform some of the operations (methods).\n\n\n* Advantage and disadvantage of inheritance:\nPro: Easy to implement\nCon: Inherits all the methods of the parent class which could have their own disadvantages\n\n\n* Advantage and disadvantage of delegation:\nPro: Delegation has flexibility, since such objects could be replaced at run time\nCon:  It has an inefficiency - objects are encapsulated (e.g. in case of stack instance of list must be held inside the stack)",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5588993,
      "meta": {},
      "text": "When using inheritance you typically have a subclass which uses/inherits some of its functionality form its parent. This has the advantage that it is relatively easy to use and supported in almost all object oriented programming languages but the disadvantage that inherited methods can be misused/used in a wrong way.\nDelegation on the other hand sends/delegates requests to an existing object which handles the request. This concept is more flexible than inheritance as you can reuse the delegate easily. However, it can at times be a bit inefficient as an object needs to be created for the receiver as well as for the delegate.\n\nAn example for inheritance in the context of smartphones would be if you took Smartphone as a class then it would be a subclass of Phone as it implements uses all the methods of phone (call, send sms, ...) and adds some more to them. I would pick inheritance here as it represents a strong relationship.\nAn example for delegation would be the an app which uses the camera to take a picture and post it. The class which implements this functionality would not be a subclass of Camera but would delegate the task to Camera as this prevents misuse of Camera methods which you maybe do not want to support in your app.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589145,
      "meta": {},
      "text": "Bei der Vererbung wird eine Unterklasse angelegt welche sämtliche Eigenschaften der Oberklasse erbt und diese nach Belieben erweitern und oder überschreiben kann. Dies kann für bestimmte Anwendungszwecke sehr nützlich sein, bringt aber auch Probleme mit sich. Die Delegation hingegen fängt anfragen ab und realisiert diese durch Weiterreichung an zum Beispiel ein als Attribut gespeichertes Objekt, welche die benötigte Funktionalität zur Verfügung stellt. \n\nVorteile/Nachteile der Vererbung:\n+ Schnell und einfach in vielen Sprachen zu implementieren mit einfacher Ergänzung der Funktionalität in den Subklassen.\n\n-Es wird eventuell ungewollte Funktionalität der Oberklassen für die Unterklassen und damit auch potentiell \nfür den Benutzer Sichtbar\n\nVorteile/Nachteile der Delegation:\n+Flexibel, Implementierung der funktionsgebenden Klasse kann geändert werden ohne das die andere Klasse geändert werden muss\n\n- Eventuell ineffizienter, da zusätzliche Objekte erstellt werden müssen und eine Delegation der Anfragen erfolgen muss.\n\nBeispiele Smartphone:\n- Wird ein Smartphone Betriebssystem für mehrere verschiedene Modelle Entwickelt, so sollte man bei der Implementation bestimmter Funktionalitäten besser auf Delegation statt Vererbung zurückgreifen, da eventuell manche Geräte die Funktionalität die von einer Oberklasse angeboten wird gar nicht unterstützen und somit auch keinen Zugriff auf den Code haben sollten. \n- Bei mit neuen Softwareupdates für Mobiltelefone kommen oft Hardwareunabhängig neue Funktionalitäten hinzu, hier bietet sich eine generell Klassenstruktur mit Vererbung an. So können die neuen Funktionen eventuell einfacher und ohne großen Aufwand ergänzt werden. ",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5589610,
      "meta": {},
      "text": "In inheritance the functionality of the superclass is automatically inherited to the subclass and can be directly  used by it or overriden to change certain functionality. This reduces copying code and makes it easier to summarize common functionalities in one superclass. However, it can also lead to unwanted functionality/behavior, as all methods are automatically included in the subclass and can not be restricted.\nDelegation on the other hand is a possibility to refer to single functionalities from a different class without inheriting from the entire class. This allows to delegate implementations to other classes which can for example be used in a facade pattern, where everything is summarized in one class while the implementations are hidden in separate classes. It can be problematic that this is sometimes less efficient, as there always have to be two classes involved.\nIn the case of a smartphones inheritance could for example be used to summarize all necessary information and functionality that any app should include in a superclass \"App\" where each App that can be downloaded inherits from this class.\nIf there is for example a similar new Messenger, delegation could be used in order to reuse and possibly adjust certain functionalities from Whatsapp without taking over all of it.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5592761,
      "meta": {},
      "text": "Delegation reuses an existing object's functionality, by referencing an instance in the \"Receiver\" class. \nWhen the client calls a method on the \"Receiver\" it forwards the call to a  \"Delegate\" object which can provide this functionality.\n\n+ Provides better security as the client has no direct access to methods of the delegation class.\n- Can be less efficient as two different objects have to be created instead of one.\n\n The camera app might use delegation to get data from the Hardware (camera sensor, Flashlight). This allows different camera modes (Photo, Film) to get information captured by the lens, without having access to all camera hardware features. This prevents extensions to get access to falsely exposed methods.\n\nInheritance allows using of a similar class that already contains parts of the desired behavior, as a base for the new object. The new object can extend the base class with new variables, and methods to achieve the desired functionality without changing the base class.\n\n- Often different subclasses need changes in the base which can destroy the functionality of other child classes.\nA child might need a certain method public in the base -> another child might expose this method which can lead to security risks.\n\n+ It makes it easy to quickly make slight changes to the base without altering the base class code.\n\nFor the UI code of popup messages on your smartphone start screen, they might differ slightly in UI design, but the main functionality is always the same. Click on it to open the app.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593821,
      "meta": {},
      "text": "Inheritance means extending the functionality of another class. The functionality is passed implicitly to the subclass and is directly part of the subclass (meaning the already implemented methods can be directly called on instances of the subclass). In delegation another object is used as an instance variable whose functionality can only be used by explicitly calling methods on it. Here one objects makes use of the functionality of another objects by delegating tasks to it through method calls. \n\nAnd advantage of delegation is that it is very flexible. Making use of functionality of other objects can already be useful if only 1 specific method of the other object is needed. This is also a disadvantage of inheritance. As subclasses should follow Liskovs substitution principle it only makes sense to use inheritance if all the functionality of a superclass makes sense in the subclass.\nAn advantage of inheritance is that functionalities can be reused without any extra code. As the methods of the superclass are also part of the subclass they can be used directly without adding any more code. However in delegation the functionality of the other object needs to be accessed explicitly (through method calls) which requires additional code and maybe even some pre-processing/post-processing after the method calls.\n\nAn example of inheritance in the world of smartphones would be that every phone type (like IPhone 11, Samsung s10, ...) can be considered as a subclass of the generic class smartphone. Every smartphone has some very common functionality like detect touch on display, opening applications, etc.. The specific smartphone types only implement some of the functionality in slightly different ways or add some extra functionality. \nAn example of delegation in the world of smartphones would be that a smartphone manufacturer could delegate the task of producing the processor of a smartphone to another chip manufacturer. The smartphone manufacturer makes use of the ability of the other manufacturer to create chips so he does not have to do it himself (delegates the task of producing the chip). In this case inheritance would not make much sense as a smartphone manufacturer is not an extension of a chip manufacturer (a chip manufacturer can do many other things a smartphone manufacturer cannot do / does not need to do like producing graphics cards). ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596125,
      "meta": {},
      "text": "In Delegation the operations are caught and sent to another object whereas in inheritance a new operation or an existing operation extends a base class. The advantages of implementation inheritance are straightforward to use, it is supported by several programming languages and easy to implement new functionalities. There are also disadvanatages such as it exposes methods of the parent class.\nDelegation is flexible as any object can be replaced at run time by another one, but it is also inefficient as objects are encapsulated.\nDelegation: The user (client) wants to open an app on the smartphone (receiver). Therefore the user \"calls\" the receiver (operating system of the smartphone) and the operating system of the smartphone sends the request to the app (delegate) and the app executes the request of the OS. \nInheritance: The Operating System of the smarthphone has several functions including opening an app. The app on the smarthphone has also the opening function as it implements the functions of the OS but the app also has other functions such as editing. The user wants to open the app and the OS calls the app to open.\n\nDelegation is the better choice as every app on the smartphone has different functions. Delegation offers the flexibility and receiver does not have to use the same methods of the delegate any more.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596264,
      "meta": {},
      "text": "Inheritance means making a subclass of a class which inherits the public methods of the class. Delegation means that an instance of a class is created which is used to call methods from that class. the difference is that if you're using inheritance, you can change what's inside the class (white box reuse) and change functionality by  adding/overriding methods but when using delegation, you only use a class and it's methods without looking at the implementation of the class (black box reuse). \nWhile inheritance is useful because you can implement the functionality exactly how you need it, everytime there are changes in the parent class, all the subclasses have to adapt to them.\nWhen using delegation, the class in which delegation is used doesn't have to inherit from any class so it doesn't have functionality it doesn't need and only uses the methods it actually needs from the other class. A disadvantage of delegation is that instantiating the objects is less efficient and uses more memory.\nFor a smartphone, delegation could be used when you click on an app and a new window should open, the class which calls the method for opening a window doesn't need to inherit from the class window, it only needs a window object because it doesn't need all the methods from window.\nInheritance would bei good to use If there are different types of contacts like friends/family and business contacts on the phone because the objecte of the subclasses need alll the functionality from the class contact.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5583668,
      "meta": {},
      "text": "Inheritance used when a class has similar functionality then a another implemented class but specifies it or changes some parts of the implementation. You change existing implementation with @Override of a method in the subclass. There is no need to instanciate a object of the super class. Used to specify signatures, visibility, retun types of  methods.\nDelegation doesn't create a subclass of a existing class, you instantiate a Object from the existing class in your new class. Now you can call the implemented methods in the existing class with point operator in new class. You delegate the method by calling the implementation of another class.\n\nInheritance:\nAdvantages: \t- same approach in many different programming languages\n\t\t\t- easy to understand how to use\n\t\t\t- new functionality in subclass is implemented without much effort\nDisavantages:\t- some behaviour or methods from the superclass may be exposed in the subclass\n\t\t\t- if you change implementation in superclass, that subclass uses without Overriding it, also\n\t\t\t   implementation in subclass changes\n\nDelegation: \nAdvantages: \t- in most cases more flexible\nDisavantages:\t- can be more inefficient, because of the needed instanciation of object\n\nExample Inheritance:  App Icon Inheritance. There is one abstact Icon class and every App Icon can inherite the functionalities. Use it because you don't need it to be super flexible and only want to change minor things like the picture -> Inheritance\n\nExample Delegation: An App could use delegation of SystemSound to change the volume of the Audiooutput by the App. Needs to be really flexible, hard to inherite -> Delegation\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589181,
      "meta": {},
      "text": "\n1. the difference between inheritance and delegation:\nInheritance uses the IS-A relationship(implemented functionality in the parent class) for re-use; \nDelegation uses the HAS-A reference relationship(mplemented functionality in an existing object) for reuse.\n\n2. Delegation:\nadvantage: flexible.\ndisadvantage: could be inefficient\nFor inheritance, there is already a base class by a new operation or overriding an existing operation.\nBut delegation means to catch an operation and send it to another object.\n\n3. Inheritance:\nadvantage: developer can get and use the information directly from the UML diagram;\n                    can be used widely(for many programming languages)\n                    subclasses can be changed easily \ndisadvantage:\n                   changes in the parent class force the subclass to change as well,   at least it requires recompilation\n                   in parent class there can be some unwanted  methods \n   \nI will choose for smartphone inheritance. Although Delegation is more flexible, it could also be inefficient. Efficient is important in the context of smartphones.\n",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5591519,
      "meta": {},
      "text": "Inheritance:\nUsed when expressing an (is-a) relationship. When you really want to show that the inheritor is a subclass of one class. By extending the class all functionalities are available in the inheritor.\nAdvantage: Easy to implement new functionality in the subclass\nDisadvantage: Inheritance exposes some (unwanted) methods of the parent class\nExample: The different models of a phone incorporate all methods of the basemodel which means it is suitable for inheritance.\n\nDelegation:\nUsed when only trying to copy and incorporate some functions of the delegate whitout exposing all other functions.\nAdvantage: Generally more flexible\nDisadvantage: Might be more inefficient, because an object instance needs to be created\nExample: A phone has the functionality to display your screen. Different apps such as youtube and safari for iphone use this functionality but extend it with certain other things. For youtube video play is possible and for safari the scrolling on websites...\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593843,
      "meta": {},
      "text": "        Inheritance implicates an \"is a\" relationship, either by extending an existing parent class (implementation inheritance) or specification of an abstract class like an interface (specification inheritance). Whereas delegation means using an already implemented class as a source, for example, class A has function foo() and this functionality can be provided via class B's bar() function. Inheritance is pretty practical for creating subclasses especially if the new class that we are trying to implement has slight modifications compared to the parent class and at the same time the attributes and methods of the parent class are valid with the child we are implementing. However, when you are using inheritance there is the burden of overriding all the pre-existing methods in the parent class. Delegation is useful to copy a specific functionality and use it quickly as wanted but at the same time when used without precaution, delegation might lead to unintended results since an existing implementation is used and every aspect is not evaluated and implemented in the new class that we are creating. \n\tTo give example with smartphones, our phones all have storage elements so if we call the parent class implemented for this job \"storage entity\" then \"storage entity with icon\" would be a subclass; which can be interpreted as an example of inheritance and, we all use social media platforms and most of them have functionalities as taking an instant photo without uploading from the storage while using this facility both accessing to camera input and using the flashlight if necessary are conducted via delegation to phones' own classes such as camera, microphone or flashlight maybe.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596374,
      "meta": {},
      "text": "Inheritance means when we have a new class or when we add a new class we can reuse attributes and methods from an existing class.   It's very useful for code reusability and very easy to use unlike other concept, its uncomplicated.Many programming languages support the multiple inheritance.It also make it easy to implement new functionalities in subclasses and minimise the amount of duplicate in the code.But it also has disadvantages.for example the super- and inherited class are tightly coupled, which means if any changes happens in the superclass may force changes in the subclass too.\nfor example Apple smartphones. Every Apple smartphone can do what any smartphone can do, that means if a class where an apple smartphone is expected we can use smartphone class instead.\nI choose this example because it similar to the list stack example\n\nIn delegation we hand over a particular task to another method or class.\n Its easy to change delegate at run-time but it doesn‘t make dynamic polymorphism easier.\n\n",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596506,
      "meta": {},
      "text": "Inheritance describes a way of Modeling relationship between to classes where one class is a child class that extends another class. If a method of the super class needs to be called, it can not only be overwritten but also be called on the super class. An advantage of that is, that you can represent a “is-a” relation and make sure, that your child can use all of the parents methods. On the other hand if you want to change the behaviour of a method you always need to override the super classes method.\n\nDelegation means to instantiate a class as attribute of another class, so you are able to pass method calls to the instantiated class. An advantage of this way is that you only implement functionality of the “child” class that is really needed. In some cases it could be a disadvantage that you can not directly change the behaviour of a method but only the values you pass over or get returned.\n\nIf you develop applications for a smartphone there are often development kits and predesigned classes for the used operating system. A case where you would use delegation is for example when implementing a \"share\" function into your application. Therefor your application would use something like a ShareHelper or smth. that allowes you to pass the data that should be shared to a method of helper. The helper would then process the tasks for showing the systems share menu. Delegation should be used because you only want to call a few methods and dont change any of its core behavior.\nWhen implementing a navigation menu inheritance could be useful to use. Because most mobile apps are using navigation menus there are classes provided by the development kit that already implement these functionality. With extending this class you can easily make use of all the functionality that comes up with every nav menu like the styling, an active tab, links and routing.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585183,
      "meta": {},
      "text": "Inheritance l refers to the extension of a parentclass by either implementing a new operation or overriding an existing one (Implementation inheritance) or defining an existing specification from the parentclass (Specification inheritance). This happens on a class level and generally no instance of the parent class has to be created. An advantage is, that it's easy and straightforward to use, one simply has to extend the class, however, it might expose methods of the parent class, if they are not private to the child classes. \n\nDelegation on the other hand refers to catching one operation and sending it to another class, which implements the functionality. This happens on the object level, so we need an instance of the other class. Delegation is more flexibel, because one doesn't have to pay attention to changing  parentclass functionalities, that address other aspects of the childclass. However, one always has to create an instance of the class, which is inefficient. \n\nAn example for inheritance is is textinput via the virtual keyboard. This is provided by the operating system, however, different Apps support different input functionalities (e.g. different visualizations of the keyboard, additional voice input that is transcribed to textinput on the keyboard. Not every App implements this functionality again but simply inherits the base class and adds the functionality.\n\nAn example for delegation is the location functionality of apps. Not every app implements their own map system but simply delegates the location searching/ displaying functionality to google maps or apple maps. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585427,
      "meta": {},
      "text": "Inheritance is when you take methods from an existing class and reuse them in your own class. So therefore it is easy to implement new Methods in the subclass. However, by inheriting it might make you implement some unwanted Methods.\n\nDelegation is when you use a object of another class as an instance variable, and forward the methods and / or attributes to the other class. Here you can generally choose which methods you want to use in the Subclass, whereas in Inheritance you must implement all methods. But natheless due to having to create a Instance of that particular class it may be more inefficient than simply using Inheritance.\n\nThe difference between both of these is that with Inheritance you use \"implements / extends\" whereas with delegation you create a new Instance of that Object (new Y).\n\n\nNow for the example: \n\nSmartphone is a class that has methods which gives access to the audio and video drivers to the user. Now for the camera app, here it makes sense to inherit the audio and video driver Methods in order to use it in the recordings.  However if it has other Methods it will also be implemented in the camera Class.\n\nWhich is why for example if the Smartphone class also has a method that checks if any new emails arrived, it wouldn't make sense to implement it into the Camera class. Here it makes more sense to delegate it in order to just use the methods that give access from the audio and video drivers. \n\n\n\n\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589451,
      "meta": {},
      "text": "So inheritance is when you have a superclass and a subclass and you as  a subclass implement all functions of the superclass which are abstract. So an example of a smartphone would be that a smartphone inherit from phone because a smartphone is a specialization of a phone. Thus, it has all functions of phone like to call other people or send them a message via text.\nWith delegation on the other hand you do not need to implement functions from a superclass because now you have an undirctional association from the receiver class to the delegate class. An example for delegation regarding to smartphones would be if you have two smartphones with different main functions but you want to reuse parts of the older version for the latest version. Therefor you don't want to implement all abstract methods of the older version and so you create a new instance in the latest version in order to choose the methods you want for your latest version.\nBut which version is better:\nIn my opinion it depends on what you want to implement and what you need therefore. On the one hand with delegation you are more flexible because the other class don't say which methods you must implement but you are also not as effective as if you were using inheritance because on the other hand inheritance is usable for many programming languages, it's easy to add something in the subclasses and you have a main structure from the superclass, but as I said before sometimes you have mehtods you don't want because of the superclass.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5590874,
      "meta": {},
      "text": "The inheritance is mainly the fact of subclassing, a new class uses the functionalities of a superclass and may add other new functionalities to it. Inheritance has the main advantage of being supported by many programming languages but on the other hand inheritance exposes some unwanted methods of the parent class.\nExample:  Every new high-end smartphone that a brand releases inherits all the software of the previous model and adds to the existing classes new features that may improve the run-time and efficiency of the usability of the phone.\n\nThe delegation is the fact of catching an operation and sending it to another object where it is already implemented, which means using an object of another class as an instance variable and forward messages to the instance. Delegation has the main advantage of being more run-time flexible but it is also not supported by most  popular object-oriented languages.\nExample: The code responsible for the camera usage uses a delegation from the code of the gallery just to show in a little image the latest image in the gallery without letting the user use all the functions he normally has access to from the gallery directly.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5591169,
      "meta": {},
      "text": "The difference between delegation and inheritance is that the reuse of an already implemented function. In Inheritance we reuse the functions by creating subclasses to classes that involve the implemented functions and adding necessary additional functionalities. In delegation we reuse the implemented methods by involving different objects to gain access to the implemented functions. These objects are client receiver and delegate. Client calls receiver, receiver asks the delegate to delegate and delegate executes the function. \nAn advantage of inheritance is that it is easier to use, you simply reuse the functions without doing extra work. A disadvantage however is the dependency to the parent class. Any change would directly affect the subclass. An advantage of delegation is the independency. It causes the developers to be more flexible. However it is not efficient, because of all the extra objects you need to create. \n\nAn example of inheritance in smartphones is FaceTime. One possibility to do FaceTime is via audio call. Another is a video call. Both of these activities include the functionality to do audio calling, but video call has an extra functionality of displaying one and others cameras. It inherits an audio call. \nAn example of delegation in smartphones is taking a photo or a video and doing a video call using FaceTime. Both of these activities use the functionality of displaying ones front and back camera. But one of them shares it with another person simultaneously and the other one saves it to our gallery whenever we choose to. One does not necessarily inherit the other but they use the same functionality. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596037,
      "meta": {},
      "text": "Delegation means the developer uses an object of another class as an instance variable, and forward messages to the instance.  On the other hand, inheritance means one subclass takes over the attributes and methods of the pre-existing classes namely superclasses. The difference between them is when a developer is using inheritance, he/she has to use every method of superclass no matter if methods are wanted or not. Using delegation doesn't force the developer to use the unwanted methods. This advantage of delegation and disadvantage of inheritance shed light on the fact that using delegation is more beneficial than using inheritance. Nevertheless we shouldn't forget inheritance's advantage and delegation's disadvantage. Unlike inheritance, delegation is not directly supported by most popular object-oriented languages. So there are also times, where using inheritance is more useful than using delegation.\nFor example, there is an app where people are registered and give their personal information. Since the employed methods for every user are the same, we can use inheritance to avoid code-duplication. In this app, we have a addNewRegisteredPeople() method in another class and thanks to this method we add new registered people's name into the list to give them registration-card. To add new people into the list, delegation is better than inheritance, since we just need registered people's name and all other attributes and behavior's of registered people are unwanted. \nI choose these example because I can create my own methods and classes to explain the difference between delegation and inheritance when I create a new app. So I can clarify the difference in a more accurate way.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596409,
      "meta": {},
      "text": "In the delegation we use the functionality of an another class, whereas in the inheritance we use the functionality of the super class. \n\nAdvantage of inheritance: - we don't need to implement anything: is is fairly simple as we use the already available methods. We can override the methods to manipulated in to get the desired functionality if necessary.\n\nDisadvantage of inheritance: -since we get the full functionality of the super class we may also receive unwanted methods that might disturb the functionality.\n\nAdvantages of delegation: Does not allow to override, so every functionality provided is definite. (Though it can be also disadvantage depending on the purpose)\n\nDisadvantages of Delegation: New instances must be created in order to use functionality. Which complicates the process a little.\n\nInheritance example: Iphone front glass. One main design with certain sizes of the front glass can be created. New models and old models would reuse the same functionality of this glass. This would create more value to the company for sure. I would do the same so that I wouldnt create different stock for different kind of glass.\n\nDelegation example: Facebook messenger is stand-alone app and when facebook user sends message someone the app delegates the other app to do so. By this they wanted to achieve another popular messaging app but actually I would not prefer to do this. Last time I sent message it was cumbersome to do so.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5584041,
      "meta": {},
      "text": "Bei der Vererbung hat man eine Oberklasse, die von der Funktionalität fast gleich ist, wie die angestrebte. Dabei ist es wichtig, dass die Unterklasse immer vom selben Typen ist als die Oberklasse (eine Queue ist z.B. nicht zwingend eine Liste, daher wäre die Implementierung als Vererbung nicht sinnvoll). Man will nur einige Funktionalitäten erweitern und implementiert hierzu noch neue Methoden und kann einzelne Funktionalitäten anpassen, indem man Methoden überschreibt. \n+ Vermeidung von Dopplung von Code, da man alles Doppelte in die Oberklasse schreiben kann\n- Wenn man eine Methode von der Oberklasse ändert, die von der Unterklasse nicht überschrieben ist, ändert sich damit auch die Funktionalität der Unterklasse. Dies ist evtl ungewollt und führt zu Verwirrungen und Problemen\nBeispiel: Ein Handy hat Applikationen. Applikationen können Spiele, Chat-Apps, ... sein. Diese erweitern das generelle Konzept einer App, sie haben z.B. auch Methoden wie openApp(), haben aber noch zusätzliche Funktionen wie startGame()\n\nBei der Delegation delegated ein Objekt eine Aufgabe zu einem anderen Objekt. Dabei ruft ein Client eine Methode auf dem Receiver auf. Diese ist dort nicht implementiert, daher sendet der Receiver die Anfrage zum Delegater weiter, der dann die Methode ausführt\n+ Flexibler als die Vererbung. Es werden nicht alle Funktionalitäten zur Verfügung gestellt, sondern nur die gewünschten. Ein Receiver kann auch mehrere Delegater haben. \n- Man braucht dazu das Objekt des Receivers und des Delegaters. Dies ist ein Speicheroverhead im Gegensatz zur Vererbung, bei der man nur ein Objekt braucht\nBeispiel: \nEine Chat-App möchte eine Texteingabe mit Sprachsteuerung ermöglichen. Anstatt diese Funktion selbst zu implementieren, ruft es die Methode sprachsteuerung() auf einem Receiver-Objekt auf und dieses sendet die Anfrage an Cloud Speech-to-Text von Google weiter, die die Methode dann ausführen und das Ergebnis zurückgeben",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5584784,
      "meta": {},
      "text": "The Difference Between Inheritance and Delegation:\nInheritance uses an 'is-a' relationship where a child class inherits the methods declared in the parent class and is able to reuse them. In contrast, delegation uses a 'has-a' referential relationship where a class reuses methods of an existing object.\n\n1 Advantage and 1 Disadvantage for Each Concept:\nInheritance:\nAn advantage of using inheritance is code reusability resulting in a reduction of code length and making the code more readable. However, inheritance also means the child class is tightly coupled to the parent class, meaning changes to the parent class also will affect the child classes, which could affect code maintainability.\n\nDelegation:\nDelegation can provide a higher amount of flexibility, e.g. the reused class can be edited without editing the reusing class. A disadvantage of using delegation is that an object instance requires to be created which can affect performance-critical systems.\n\nAn Example in the Context of Smartphones for Each Concept:\nIn the context of a smartphone app, using inheritance would be more appropriate, e.g. when constructing the app with structurally similar pages, I might create a parent class to define the common functionalities, then create child classes for each page. \n\nOn the other hand, I would use delegation whenever user interaction with the app occurs, e.g. when a user clicks on a button in the app, the button can remain ignorant of the implementation details, which are delegated to the delegate, i.e. another class.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5588856,
      "meta": {},
      "text": "Inheritance as an implementation method presupposes an extension of a base class in a new subclass by a new operation and/or overriding an existing operation, whereas by delegation an operation of an existing and implemented object is caught and sent to another object, so the main difference is that by inheritance a user can get access to every operation of the superclass, while delegation restricts the operations to ones only used in a class, which uses this object.\n\nSo one of the evident advantages of inheritance is an ease of implementing new functionality in the subclass: the one could just override the existing method for his needs and without any problem add some new required methods. The disadvantage is a risk that some (unwanted) methods of the superclass will be misused. \n\nA pro of the delegation is that it is more flexible use-wise, as we are to make with the object everything we want to, but here comes the con that the object actually must be created, that is inefficient.\n\nDwelling on examples in the context of smartphones, I would come up with an app of chess game as a good example of how inheritance could be implemented. Every piece (pawn, bishop, king, knight etc) could just override some methods (move, attack etc) of the abstract superclass \"Piece\", and no function can be therefore misused., while new functionalities are easy to implement. \nThe delegation concept could be implemented in, for instance, a special browser app for children, which could restrict the URL connection (via URL object) only to preapproved internet pages. In this case it is not a must to override all the methods (we need only some of them), and the unwanted functionality would not be misused.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593608,
      "meta": {},
      "text": "The difference between Inheritance and delegation is that inheritance uses superclass functionality when delegation sends a call for a method to another object where the functionality is implemented. \nInheritance: \n+ Easy to implement new functionality in the subclass: it is easier for smartphone devOps to maintain and add functionality to the applications \n- If the parent class is changed, the subclasses will also be changed: for example if on smartphone view of the keyboard will be changed, it will automatically be changed for all languages (however, maybe it is undesired for the Chinese language) \n\nDelegation: \n+ More flexible - no issue with parent class changes, if one application on phone cannot execute a request it delegates it to another one (authorization in some application through google account) (or caching of data with proxy pattern) \n- Sometimes can be inefficient, as additional instance needs to be created \n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595047,
      "meta": {},
      "text": "Inheritance and delegation are two different concepts.\nA class inherits from another class if it has almost the same functionality and a class like it is already implemented. Subclasses are often specialized versions of the the upper class and provide more functionality.  Sometimes functions also get overwritten.\nDelegation means catching an operation and sending it to another object that then executes the task. It basically just means outsourcing tasks to objects that already implemented that functionality.\n\nDelegation generally provides more flexibility but might cause inefficienties because instances of objects need to be created first.\n\nInheritance is much more straightforward, easy to implement (also new functionality) and is supported by a lot of programming languages. Though the subclass might not need all the functionality of the upper class and if the upper class changes the subclass is forced to also change.\n\nIf we take smartphones for example.\nMany apps use some sort of calling feature that is similiar to the standard phone call but add more functionality. Eg. Snapchat, Whatsapp calls. In this case inheritance is the better concept to use because the base layer stays the same and only features get added.\nIn case of the GPS coordination system. The operation system for example iOS handles all of it and passes down the data to the apps. The apps itself don't need to implement a new version but can delegate the task to the operating system.\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595701,
      "meta": {},
      "text": "Delegation: Catching an operation and sending it to another object that has already implemented\nIt relies on dynamic binding because it requires specific methods to call different code at runtime\nadvantages: flexibel, any object can be replaced at run time by another object that has the same type.\ndisadvantages: it doesn’t facilitate dynamic polymorphism.\nexample: in H06E01 The Firewall class delegates the method calls specified to NetworkConnection.\n\nThe NetworkConnection has arleady implemented the inheritance of ConnectionInterface, so can't inherit the Firewall, and only needs some functions in the Firewall. Delegation can reduce redundant code. When changes occur, the code doesn't need to be repeatedly recompiled.\n\nInheritance: use extends expand a subclass and existe operation by overriding\nadvantages: subclass can has all the methods of the superclass, and can continue to add other methods. can directly to use \ndisadvantages: subclasses need to be recompiled, when the code of superclass changes. \nA class can only extend a superclass.\nexample: When there is already a Student class, and TumStudent, LumStudent these classes are required, there is no need to repeat the attributes \n\nfor example,the name of a student, the methodes for example study, setName.\n Because there is a logical relationship between these classes, you can use inheritance to relate these classes. If inheritance is used, the child class can be used as the parent class, which supports polymorphism; Define TumStudent, LumStudent to be used as Student,You must use inheritance",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5585589,
      "meta": {},
      "text": "With delegation you keep the control as caller class and let just the single method, that you called, be handled by another class. If you use inheritance you get all the methods from the class, that you inherit from.\n\nAn advantage of delegation is, that you keep control and can do additional things before and after you call the method, e.g. only calling the method under certain conditions.\nOn the other hand you can't guarantee, that all your methods exist in the class, that delegates.\nWith inheritance you can be sure, that the class, that inherits from you has all your methods. This can be an advantage if you want to guaranty, that it offers all the functioanlly, but it can also be an disadvantage if you don't want to expose all your methods to this class.\n\nIf you want to take a photo with the camera in an app you would delegate it to the camera class instead of inheriting from it, as you only need the one method takePhoto() and not all the methods Camera offers.\nIf there are multiple tabs in your app you would inherit from the base tab, because you want to use all the functionally, that was implemented in the base tab.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5586396,
      "meta": {},
      "text": "Inheritance uses an already implemented functionality from its superclass. Inheritance is more straightforward and easy to implement. Furthermore, it is supported by many programming languages. However, a change of the method in the superclass results in changes for all its subclasses that inherit the method. Additionally, methods from the parent class can be exposed via inheritance. Delegation catches an operation and then sends it to another object where it is already implemented. This makes delegations very flexible since they can be changed during run-time. However, unlike inheritance, delegation is not supported by many object-oriented programming languages and it does not facilitate dynamic polymorphism.\n\nAn example of phones and inheritance would be any specific phone such as the \"iPhone13\" which then inherits from its parent class \"iPhones\" which itself would inherit from the class \"Phone\".  \nOne example where we would have to use delegation is if our \"iPhone13\" wants to use methods from the \"iPad\" class. This is because every class can only have one parent class (in Java). This would also be the case if another class would be final and \"iPhone13\" wants to use their methods.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5586834,
      "meta": {},
      "text": "a. Inheritance is the process by which one class takes the property of another other class\n+ Supported by most popular object-oriented languages\n+ Helps in reusing the code \n+ Establishes a relationship between different classes.\n- Two classes (base class and super class) are tightly coupled that is the classes are dependent on each other.\n- Inheritance exposes some methods in parent class \nExample: In Bumpers the FastCar class and SlowCar class (subclasses) inherit the attributes and methods from the Car class (superclass). \n- Inheritance is used here to express the relationship between these classes and I can use the attributes and methods in Car class straight forwards in the subclasses.\nb. Delegation is when you pass a task of an object to another one.\n+ Run-time flexibility – the delegate can easily be changed at run-time. \n- Not directly supported by most popular object-oriented languages\nExample: If I want to enhance A, but A is final and can no further be sub-classed then I need to use composition and delegation.\n",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5587332,
      "meta": {},
      "text": "In delegation functionalities make use of already existing objects in which that particular functionality has already been implemented. These objects can be \"any\" objects (any -> e.g. outside the inheritance hierachy).\nIn inheritance new subclasses are implemented which reuse functionalities of the superclass and might also have additional functionalities. Opposed to delegation in inheritance only functionalities of objects which are part of the inheritance hierachy are reused.\n\nPros and Cons for delegation:\nDelegation might be more flexible to implement in an existing system because there is no need for setting up an inheritance hierachy. Also only the necessary methods are provided.\nBased on my own experiance a potential disadvantage arises if that concept is overused in a system. That might lead to high coupling (many references between classes/packages) and spaghetti code.\n\nPros and Cons for inheritance:\nInheritance is particularly well suited if several similar objects are needed which all require an intersection of functionalities. This intersection of functionalities can then be comprised into a superclass and only has to be implemented once.\nOn the downside inheritance couples classes which makes them dependent on each other.\n\nDelegation example:\nIf an app provides the functionality of taking photos the methods from the build-in camera implementation could be reused. E.g. takeShot() (in app) could be deligated to the takePhoto() method (Camera)\n\nInheritance example:\nCould be used for the implementation of a gallery on a smartphone. A gallery contains pictures, videos, gifs etc. All these differnt typs have similar functionalities like properties, size, date, delete etc. In order to avoid duplicate code these typs could inherit common functionalities from a superclass called medium.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589008,
      "meta": {},
      "text": "Inheritance means making new subclasses from the old class and the subclasses have all the old functionalities from the old class. \nAdvantages: Firstly, it's easy for the developers to implement some new functionalities base on the old class. Secondly, all the functionalities from the old class can still be used. Actually, the new subclass is a extended old class. \n Disadvantages: Inheritance is not flexible as delegation, because the new subclass isn't independent of the old class. When the old class change, the subclass needs to change. Additionally, maybe not every method will be used.\n\nDelegation means creating an object and using the functionalities from this implement class.\nAdvantages: Firstly, it's very flexible, the class that uses the delegation can decide how to use the functionalities as it wants. It will be run-time changeable.\nDisadvantages: Every time we need to create a new object to get the functionalities, so it's inefficient.\n\nWhen I am a developer of a chat app like WhatsApp on the smartphone platform. My task is to make an update to my app and new functionality, which supports seeing the location of your friend. I will use delegation and use a google map API because I just need the map functionality from Google Maps, so I don't need to reuse all the code from the old chat app and I can change the way how I display the information about the map as I want. But when my task is to develop a new VIP chat model, which can send file more than 50MB after the user pay some money, I will choose the inheritance, because the VIP user just have some more functionalities than the normal user, they still need to use all the old functionalities.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5594974,
      "meta": {},
      "text": "Inheritance describes the concept in which an object derives its functionality from another class.\nA derived class takes the attributes and methods of its parent class and therefore immitates or overrides its functionality.\n\nDelegation on the other hand is the passing of the task to an independent Object. \nThis is often done by using an instance of this external class as a member variable or passing it as a parameter to the according function. \n\nInheritance:\n+ The functionality of subclasses can easily be extended while keeping reference to implementation of the parent object and is therefore very straight forward to use\n- Inheritance might lead to the exposure of some unwanted functions of the parent class\n\nDelegation:\n+ Implementation generally more flexible when compared to Inheritance approach\n- Sometimes more inefficient as an extra instance might need to be created\n\nExample:\nAndroid smartphones use android as an operating system and overload some of its functionality for the specific smartphone model (e.g. Functions of Samsung Fold) -> Good example for inheritance (Android os is Parent Class; Specific os functions are in derived class) -> most functionality is just used from parent and is not overridden.\n\nDelegation in this context in the way of using mutliple functionalities of different OS versions makes the system very complex and complicated to update basic functionality therefore inheritance is the way to go!",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595794,
      "meta": {},
      "text": "Delegation represents a relationship of the type \"has - a\", and works by using an object of a class as an instance variable in another class. Inheritance is a relationship of the type \"is - a\" and means that a certain class (\"child class\") takes over attributes and methodes from a \"parent class\". \n\nOne of the main differences is that in delegation the main class delegates/passes a task to another class, whithout having anything to do with it, while in the case of Inheritance, the child class is obligated to inherit every attribute and method from the main class. Delegation can be used as a substitute for Inheritance, but inheritance can rearly /never replace Delegation.\n\nPros and Cons of Delegation:\n\t+ Flexible: possibility for run-time changes\n\t+ Tasks can be delegated to different classes\n\t+ Saves unnecessary code copying by using already implemented functionality\n\n\t- Might increase complexity/ cause inefficiency\n\t- Might not be supported \n\nPros and Cons of Inheritance:\n\t+ Builds hierarchy\n\t+ Simple, convenient, supported\n\t+ Reuse of code\n\n\t- Excessive code copying\n\t- Inherited methods are slowet, because of indirection\n\t- Child classes are dependend - unwanted changes from parent class\n\t- Excessive use can lead to extemely complex hierarchy and high coupling\n\nExample: \n\tInheritance:\n\t- The new Huawei P50 pro uses the same concept for a four-way curved screen as the P40 pro, as well as \n          the same Type-C charging port, infrared blaster and microphone position, but adds new features: faster \t\t\t\t\t \n          screen refresh rate, totally different camera position and properties\n\n\tDelegation: \n\t- Hundreds of mobile phone apps offer different \"map\" features, bit for example companies for e-scooters \n          such like \"Tier\", \"Lime\", \"Bird\", \"Voi\", etc. delegate their map services to Google. (Which makes them \n          unsabe for Huawei users 😔)/ Apple uses the OLED displays of \t\t \n          Samsung for their phones./ Every phone company delegates creation of CPUs to Snapdragon and  \n          Mediatek\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5590976,
      "meta": {},
      "text": "Inheritance happens between superclass and subclass, it means the subclass also have the features/functions of its superclass. The advantage is it provides provides a hierarchical structure and reduces duplicated codes. The disadvantage is that subclasses and superclass are highly coupled, if something changes in superclass, all its subclasses will be affected.\n\nDelegation happens between two classes without inheritance relationship. One class delegates some tasks to the other. The main advantage of delegation is its flexibility. It can be easily changed at runtime and it can use the functions which it really needs instead of implementing all functions from superclass as in inheritance. The disadvantage is it doesn’t facilitate polymorphism.\n\nExample:\n\n1. I have two classes iPhone and androidPhone, they both have the functions: call(), sendMessage(), takePhoto(), to avoid duplicated codes, I make a superclass called smartphone to implement these functions there, so that I only need to write those functions once and both subclass can use them.\n2. iPhone has some functions that other smartphones don't have, eg airDrop(), applyPay(), in this case, I can not use inheritance to get those function but I can use delegation to get those function from the appleFamily class where holds all the common functions of all apple products.\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593145,
      "meta": {},
      "text": " Although in most cases delegation and inheritance lead to the same results, they differ themselves in the way they are implemented and used, which means that both have different advantages and disadvantages. \n\n Let's take for example inheritance. This is the process by which one class takes the property of another different class.The new class takes over the attributes and behavior of the pre-existing class, which is often referred to as super or parent class. However, that could lead to unnecessary coupling and the inheritance of some unwanted attributes and methods of the super class that could lead to unwanted behavior.  This inheritance can also be useful - when new functions have to be implemented in more than one of the sub classes, they can be directly put in the parent class, which will lead to it being usable by all child classes.\n\n Delegation means that you use an object of another class as an instance variable, and forward messages to the instance, in example method calls. In this way the developer isn't forced to accept all classes of the super class and instead can provide only the needed ones. But unlike inheritance, require an object instance of all the classes that it uses, which makes it less efficient than inheritance.\n\n Let's say for example that we want to make an app for smartphones. This means that is should be able to run on a variety of platforms. Although a big part of the market is taken-over by Apple, which uses the same platform for all its devices, the Android sector is a lot more divided with different manufacturers implementing Android in different ways, which means that the app has to be compatible with all of them. In this case using inheritance may prove beneficial, as it's supported by more programming languages and thus It can be used for more platforms. \n \n Delegation also has its benefits - it is more flexible than inheritance during run time and can make the program more efficient in comparison to inheritance, as the delegator can be changed as while it app is running.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593456,
      "meta": {},
      "text": "Instead of in this course until now most treated inheritance you also have the possibility to use delegation.  When using Delegation you create an new object of the class (which it should delegate to) and for example call methods on exactly this object. An advantage of Delegation is for example that unlike as with inheritance you don't have to take all the methods from the abstract super class to the subclass but can choose which ones are really appropriate and only use these. Whereas inheritance is a more general method delegation is more specific. Sometimes all the methods of the super class aren't needed and then delegation saves resources.  In case of smartphones it would make sense to use inheritance if every smartphone got nearly the same methods. But if you only need few methods of the class the subclass \"inherits\", using delegation would make more sense.\nIn the case of delegation the functionality comes from an object where it is already implemented, in the case of inheritance the functionality is already implemented in the superclass. One advantage of inheritance is also that it is really easy to implement. For example inheritance would also make sense to use for the methods nearly every smartphone has in common, like downloading apps, taking pictures that are needed by every smartphone. In case of more specific cases like special features e.g. very special camera features it would be practical to use delegation.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594215,
      "meta": {},
      "text": "When using inheritence a class can use the methods (and attributes) that are provided by the superclass, while when using delegation the class gets an object of the super class as an instance variable and methods are forwarded to the other class. \n\nAdvantage of delegation: Not forced to use all concepts that the super class is providing\nDisadvantage of delegation: No polymorphism - Methods can just be used, not overwritten\n\nAdvantage of inheritance: When creating new objects of the class the super constructer can be used to initialize, so that instance variables can be written to without problem\nDisadvantage of inheritance:  When using polymorphic structures, casts have to be checked and can cause exceptions\n\nExample for delegation: When using a smartphone app that sends requests via REST API the endpoint can be designed as a class that delegates the methods to a service class that contains the actual methods for a better structure and maintainability.\n\nExample for inheritance: \nOn smartphones there can be a class that uses the smarphones camera as a superclass and 2 classes that inherit from that class. One to take pictures and the oder one to take videos.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594770,
      "meta": {},
      "text": "Inheritance: \n- moves vertically. \n- Basically, when a class inherits, it reuses the implementation of the upper class it inherits from.  \n- Advantages are that it is easy to use and supported by many programming languages.\n- Disadvantage is that it might expose some methods of the parent class which are not supposed to be shown and that changes in the parent class can force the subclass to change as well\n\nDelegation: \n- moves more horizontally. \n- When a class assigns another class to do something, it delegates the task, therefore it reuses the implemented functionality in an existing object. In this case the client calls the receiver which then delegates to the Delegate which executes the request. \n- Advantage is it is more flexible\n- Disadvantage is that it might be less efficient\n\nExample:\nLet's assume we have a smartphone app, which is a home assistant that for example can switch on the lights of the different rooms of your house through the app. You would have a main class called RoomLights with a method switchOn(). The classes LivingRoomLights and BedRoomLights would implement RoomLights and therefore inherit the method switchOn() from their parent class RoomLights. If you would then want to switch on the light of the Living Room, the class LivingRoomLights would delegate this task to another class called LivingRoomController.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595643,
      "meta": {},
      "text": "Inheritance.\nDescription: You are a developer and met a friend who also turned out to be a developer. After a little conversation, you realized that you are doing the same thing, only you still manage the team a little bit. Conclusion - you are the same as a friend( here it is inheritance), but only do a little more(extension in the child class).\nAdvantages: The code that is already present in base class need not be rewritten in the child class\nDisadvantages: Inheritance does not take into account future changes to the parent class\n\nDelegation.\nDescription: Delegating a task from an external object to an internal one\nAdvantages: The class does not contain extra methods that it inherited from the superclass.\n\nIn the delegate field, you can substitute different objects that have different implementations of functionality\nDisadvantages: You have to write a lot of simple delegating methods. Makes it difficult to optimize for speed in favor of improved abstraction purity",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5595659,
      "meta": {},
      "text": "Inheritance has the overall methods in the superclass and then overrides or specializes them further in the subclasses, where as delegation recieves the operation that needs to be done and passes the responsibility to another object.\n\nAn advantage of inheritance is that it's straightforward to use and supported by many programming languages. However, on the other side it increases the dependencies within the classes meaning that changes in the parent and child classes can influence each other.\n\nAn advantage of delegation is that it allows you freedom in implementation and increases security however it requires a middleman, a reciever object to be instantiated, and that lowers the efficiency.\n\nAn example of inheritance is when you want to post something on instagram on your phone and then it let's you choose if you want to post a photo, story, reels... The basic functionality of posting is the same however the format and location changes.\n\nAn example of delegation is when you want to send a photo in whatsapp and whatsapp then sends you to the camera or camera roll to take or select the photos.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596103,
      "meta": {},
      "text": "With inheritance, you are subclassing from a superclass, to there change the implementation of a method or add new ones. Delegation is different in that you have a class that is not inheriting, and instead has an instance of an object that it uses for its implementation. \n\nWith inheritance, you are copying all methods and attributes of the superclass. If you want your class to be more restricted, this is a disadvantage, since you're exposing these methods and attributes and this works against the intended restriction. The advantage of inheritance is that it is faster to implement.\n\nThe advantage of delegation is that it is more flexible to use, since it doesn't require classes to be well-designed for inheritance, which is difficult. At the same time it has the disadvantage of potentially requiring more resources for classes where the instantiation is expensive.\n\nDifferent background styles (animated, static) could be implemented through inheritance. An abstract background can only have core functionality that is always required, leaving inheriting methods with no unnecessary methods / attributes they get from the inheritance. \n\nThe voice used in a voice assistant can be implemented through delegation. A voice assistant has a lot of functionality, and inheriting from it just to change the voice would unnecessarily expose the implementation details. \n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596353,
      "meta": {},
      "text": "Inheritance vs Delegation\nIn inheritance we reuse an implemented functions of a super class but in delegation we are required to use the implemented functions of existing object, its advantage is that its more flexible than inheritance because it doesn't have to depend on any parent class, so if some changes happens only the object class get affected not all the classes associated with it. It has a disadvantage that the Object of another class should have to be initialized in order to use its functionality.\nEg: for delegation we can assume that a CPU of mobile delegates apps to run when user clicks on the desired app icon. I chose it because the CPU assigns a task to the API associated with it\n\nAdvantage of inheritance is that we can override functions and its easier to implement and the disadvantage that it can affect the children classes when for eg. the modifiers of attributes/methods of parent classes are changed.\nEg: A smartphone is inherited from telephones which had only a purpose of calling. I chose it because smartphone also uses the feature(method) of old telephone(Superclass) i.e, calling.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5583732,
      "meta": {},
      "text": "Delegation: An object needs the functionality of another object, so it captures that object (operation) and sends it to the other object for function invocation. \nAdvantage: Delegation makes software more flexible through the combination of objects.\nDisadvantage: Dynamic, highly parameterized software is more difficult to understand than relatively static software and runtime performance also suffers, so that it might be more inefficient than Inheritance.\nExample of smartphones: In the part of authorization mechanism with controllable permission system is Delegation likely to be used, because it is more flexible to developed and it seprates the user and the service. Their funktion is like a security key, which makes the system safer.\n\nInheritance: Extending the elements and methods of a base class by a new operation or overriding an existing operation.\nAdvantage: Projects can be built quickly, and subsequent components can simply be implemented to meet their needs.\nDisadvantage: If there are changes in the requirements of parent class, it can force the subclass to change as well, which makes it difficult to manage the program.\nExample of smartphones: When in one app there are more classes, which accord with the Liskov Substitution, maybe in a smartphone game to creat more type of monster and npc, then it is better to use Inheritance, because it is more efficient in this situation. If we use delegation in this case, we need to write too many delegate with allmost same methode, which causes too much work.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5584656,
      "meta": {},
      "text": "Inheritance:\n\t• Advantage\n\t\t○ Supported by several programming languages\n\t\t○ Easy to implement new functionality in the child class\n\t• Disadvantage\n\t\t○ Potential risk to expose unwanted methods of the parent class\n\t\t○ Changes in the parent class results in changes to the child class\n\t• Smartphone\n\t\t○ The class SmartPhone inherits from the class MobileDevice. Class SmartPhone also has child classes such as Android and iPhone classes. \n\t\t\nDelegation\n\t• Advantage:\n\t\t○ More flexible in general\n\t• Disadvantage:\n\t\t○ May be less efficient, since creation of an new object instance is needed\n\t• Smartphone:\n\t\t○ Print function in browsers or documents\nThe smartphone delegates the print function to the real printer to print documents",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5584745,
      "meta": {},
      "text": "Inheritance defines an order of objects related to each other through a hierarchy. Common behavior can be reused and expanded.\nClose to each other related classes / objects can also better referred to and structured ( on UML and also practical with the usage of interfaces ) - Pro \nInheritance increases the coupling between base class and derived class - Con\n\nIt is a blackbox for input in order to ensure a save usage of the functions of the initialized classes it refers to. Also it resembles a collection point if you initialize more than one class it points to. \nA delegation is extremely flexibly because it can initialize every class you need to from your entire project. - Pro\nA delegation is widely inefficient and possibly dangerous because It cannot look into the initialized classes and catch unwanted inputs or possible errors / handle unwanted behavior. - Con\n\nSmartphone Inheritance resembles in each update a device receives. Each update extends the base functionality of the phone or rewrites existing features but still holds the inherited structure / composition of architecture, functions and interfaces.\n\nSmartphone Delegation is the user ui and its functions the user is bound to. You cannot just try to access certain parts because the frontend input handler would stop you from doing something possible dangerous. It will only give you a variety of save and controlled options and is kind of a blackbox.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5584773,
      "meta": {},
      "text": "My understanding of inheritance vs delegation is the \"is-a\" vs \"has-a\" relation.\nA class 'A' inheriting class 'B', is essentially of type 'A' and 'B'. So a is-a relation.\n- Useful for multiple closely related classes that could reuse code from a 'parent'-class, which is identical to either of the children-classes. If some methods has to differ at a later stage, the children can override any method, or add new methods/attributes. Even though this can be positive, it might as well make your code harder to understand, as one would expect two different classes to conform to some shared set of methods/attributes, but they override and add new ones.\n\nA delegate, or a 'has-a' relation is a looser connection between entities. Entity 'A' can have an attribute of entity 'B'. This is a clear separation of the two, and can be very helpful to decouple different , loosely related entities in your code. A negative thing is that they share nothing except one has an instance of the other. So no reuse of functionality is possible, but a nice layer of abstraction perhaps.\n\nFor smartphones I would setup my graphical drivers in a delegation way, applications requiring interaction with the actual display would have a relation to the driver, not inherit it. For the filesystem I would adopt the linux-approach and let files and folders inherit from the same parent-class, as their inode-structure mostly differ in different interpretation of their bytes. They both for instance, have names!",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5588874,
      "meta": {},
      "text": "In the case of an inheritance you mainly use it for the expression of relationships between different objects in hierarchical order and the introduction of child classes to parent classes that implement the same attributes and functioning. An example in the context of smartphones could be the development of different smartphone models, where every model still is based on the basic handy model and just inherits the different aspects. \n\nDependence on the other side is more of a flexible solution for using selected functions of the parent class. In dependance access to the parent functions is excersized by implementing a delegator class that directly calls the wanted function on an parent class object. With this you dont need to implement all attributes and functions, only the ones relevant for your desired outcome. An example in the context of smartphones could be the development of 3rd party apps based on original proprietary apps on the phone. You got your normal camera roll with looking, switching and deleting photos and 3rd party apps would not inherit those features but simply access these propositions in their own functions and improve the afterwards taken picture.\n\nThe main difference between inheritance and delegation lies in the length of time and fixity of both concepts. While inheritance is absolute and once running your program the child class can not change its dependency again and is bound to stick to its parent class, in a delegation you can simply change the delegate class and use different delegators. This makes delegation way more flexible and stronger focussed on the original class forwarding its message, forcing you to optimize the super class. ",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5593465,
      "meta": {},
      "text": "Inheritance is a white-box way of creating a class. When you create something this way, all functionality of the super class will be available and accessible to users of the sub class. With Delegation on the other hand, not all functionality of the used class will be available to users of the new class (black box) (for example creating a Class Stack: With delegation it is possible that users only access push and pop operations even if the Stack uses a list, but with Inheritance users would also be able to access other list-specific methods like insert).\n\nSo, advantages of either: \nInheritance: The subclass can be treated just like the super class, which might be desired.\nDelegation: Control what the user of the class can access/use.\n\nDisadvantages:\nInheritance: All functionality of super class is available to the user, might not be desired, and changes in the super class often need change in the sub class.\nDelegation: A lot of functionality is just \"forwarded\", so you end up having duplicate methods that just call the same methods in the delegated class.\n\nExamples in Smartphones:\nInheritance: iPhone inherits from Smartphone. Reason: It can do everything a generic smartphone can, but also more. Referring to it as a Smartphone is correct (-> \"is\"-relation, iPhone is Smartphone)\nDelegation: A Swift app wants to send local UserNotifications. Therefore, it \"uses\" the UNUserNotificationCenter. Reason: The app calls methods to schedule notifications, but doesn't need to offer the functionality itself.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595987,
      "meta": {},
      "text": "Inheritance: When a child class can derive(or inherit) functions/attributes from another class (parent). \n\tAdvantage: Function Overriding/ Date Hiding/ Easy to implement \n\tDisadvantage: If implemented badly can expose methods/attributes of parent class making it unsafe.\n\tExample: A smartphones inherits the functionality of old models.\nDelegation: Transferring the work to some object of some other class or using functions of another object where it is already implemented to serve your purpose.\n\tAdvantage: Flexibility as it doesn’t depend on parent class (as in case of inheritance) and only an object for implementation. So changes only need to be in that object’s class and not in the entire parent class.\n\tDisadvantage: Object of another class needs to be defined and initialised for its functionality to be used.\n\tExample: A smartphones delegates it’s task to some other service like in the case of a search engine. A smartphone delegates the search to Google for results.\n",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596274,
      "meta": {},
      "text": "Inheritance and delegation are the two main concepts for reuse in software development. Inheritance means that functionality is passed on from a parent class to a subclass while delegation is based on the idea of an object of one class having instances of objects of another class as attributes, upon which certain functions are called. Both contribute to writing less and more modular code. A problem with inheritance is that data is not fully encapsulated and a change in the implementation in the parent class might lead to a change of behavior in the subclass because the subclass inherits everything from the parent class. However, at the same time inheritance is. A clear advantage of inheritance is that it is more centralized, meaning that multiple subclasses can be altered by just one change in the parent class, saving time and effort. Delegation on the other hand is more flexible because only a single function can be used by the delegator while the rest of its implementation is still hidden. This is called black-box reuse. However, there is a lot of overhead generated in the memory because new objects have to be instantiated first, making the program less efficient. \nIn smartphone apps there often are ways to search global contents of the app in a search bar and to search in the own library of previously saved contents, for example in an app for reading books. Those search bar objects basically do the same thing, only operating on different data, which is why it makes sense to combine them under one parent class and let each of them override the search function. In component-based apps, there is usually a lot of delegation since the functionality is passed on to the children. Since one component can contain many others, new views can be rendered dynamically.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596489,
      "meta": {},
      "text": "Inheritance is used to extend and overwrite functionality of a base class while accessing functionality from other classes is called delegation. In an object model, Inheritance is represented by a white arrow pointing to the superclass the subclass is inheriting from and delegation is represented as either a black or white colored, square shaped arrow. Both arrows are pointing to the object the base class uses functionality from. \nA huge advantage of Inheritance that it is straightforward to use, since \"categorizing\" many objects under a \"notion\" is also used in real world scenarios. When implementing f.e. an app about animals, you can determine different animal type-classes and by inheriting those types, newly created animal classes are categorized and automatically receiving attributes.\nBut by automatically inheriting all attributes from a superclass, it may happen that some unwanted/unused functionality is being integrated into the base class.\nDelegation solves this problem by being generally more flexible. It can select which functionality is being used. But it is insufficient, since creating Objects leads to overhead. Delegation f.e. is used in an car racing app, where cars are made out of multiple components. Those components could be steering wheel, wheels, paint and so on.  But every car doesn't have every module so inherenting doesn't really make sense\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5584439,
      "meta": {},
      "text": "Inheritance is defined as extension of a parent class by a child class, such that it either further harnesses the functionalities or overrides it, varying upon the situation. Advantage: allows expanding upon functionalities of parent class in the subclasses. Disadvantage: Methods of parent class, which are unnecessary, may still apply to child class.\n\nFor example, the smartphones can be interpreted as a class in itself, and different versions and models inherit from it and obtain the basic functionalities but also add up to them.\n\n\nDelegation is defined as allotting a specific operation to another object. An advantage is that it allows more flexibility in terms of choosing objects, however compromising the performance goal through creation of an instance.\n\nFor example, a smartphone application such as weather app may delgate tasks of filtering relevant data to an API.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585732,
      "meta": {},
      "text": "In object-oriented programming, inheritance refers to the process of basing an object (prototype-based inheritance) or class (class-based inheritance) on another object or class while maintaining identical implementation.\n\n+ No duplicate code, change method only in parent class\n- Program might get complex if overused\n\nAn example in the context of smartphones would be creating a parent class Smartphone, which then can be extended by other classes of specific smartphones (). The reason why it makes sense, is that all smartphones share common features, that can be described in this parent class once and not in every class of the smartphone. These features (methods) are: calling, surfing the internet, sending messages, etc. The classes (ex. iPhone, Galaxy) that extend the class Smartphone, will be able to use all these methods AND contain their own, which actually makes the phone differ.\n\n\nAn alternative to inheritance is delegation is a way of splitting the tasks between the classes (has-a relationship).\n\n+ The structure is clear\n- Too many classes (for each task)\n\nAn example would creating a class responsible for some feature, such as a virtual assistant. Some smartphone models that support it will use these methods in their class, the rest wont. \n\n\n\nhttps://www.geeksforgeeks.org/delegation-vs-inheritance-java/\nhttps://refactoring.guru/replace-delegation-with-inheritance\nhttps://dzone.com/articles/inheritance-versus-delegation-in-java",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5586338,
      "meta": {},
      "text": "The biggest difference between inheritance and delegation is that one focuses on the use of white box features and the other on the use of black box features.\nThe delegation utilizes a black box. That is, the methods of the parent class are not visible.\nWhite box refers to visibility. That is, for inheritance, all parent class methods are visible.\nIn general, delegation is more flexible than inheritance.\nDelegation and inheritance are both just about improving code reusability, just in different ways.\nInheritance:\nAdvantage:\nSubclasses can automatically inherit the interface of the parent class.\nDisadvantage:\nInheritance has to be named when writing code to specify which class it inherits, so the relationship is determined at compile time. The specific child class relationship to the parent class cannot be changed at runtime. So the flexibility is very low.\ndelegation:\nAdvantage:\nPrefer delegation to inheritance where equally feasible. This is because delegation are safer, simpler, more flexible, and more efficient.\nDisadvantage:\nNeed to write more code.\n\nFor smartphones, inheritance can be used when implementing methods that are more basic and common to all users. For example, the selection of language, time zone on first boot. These functions will basically remain unchanged.\nBut different users download different software to the system. Then should use delegate. Because it's more like the same base system but implementing different interfaces.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589214,
      "meta": {},
      "text": "Bei der Delegation wird eine Operation abgefangen und an ein anderes Objekt weitergeleitet, dass die gewünschte Funktionalität bereits implementiert. Bei der Vererbung wird eine bestehende Klasse um Funktionalität erweitert bzw. bestehende Funktionalität wird verändert (z.B. durch overrides).\n\nEin Vorteil der Delegation ist, dass sie i.d.R. flexibler zu benutzen ist, da eine Operation an theoretisch jedes unterstützte Objekt weitergeleitet werden (es bestehen dabei keine besonderen Bedingungen an das Objekt, an das weitergeleitet wird). Ein Nachteil ist allerdings, dass der Ressourcenverbrauch höher ist, da ein weiteres Objekt im Hintergrund erstellt werden muss. \n\nEin Vorteil von Vererbung ist, dass - nicht wie bei der Delegation - nicht zwei, sondern nur ein Objekt erstellt werden muss. Zudem ist Vererbung sehr bekannt, wird oft verwendet und von den meisten objektorientierten Programmiersprachen unterstützt. Ein Nachteil ist, dass durch Vererbung evtl. ungewollt Methoden der Oberklasse preisgegeben werden. Zudem ist Vererbung nicht so flexibel, wie die Delegation, da bei einer Änderung in der Oberklasse auch die Unterklasse geändert werden muss.\n\nFür Beispiele zu Smartphones kann man sich eine einfache Zeichenapp vorstellen. Will man z.B. einen neuen Stifttypen erstellen (z.B. einer, der nach einer gewissen Zeit verschwindet wie ein Laserpointer), dann sollte man einfach den bestehenden Basis-Stift-Typen als Oberklasse benutzen, von der geerbt wird, da hier eindeutig die Funktionalität eines normalen Stifts erweitert wird. Will man allerdings eine Änderung bzgl. des Systems machen, das die Zeichnungen auf dem internen Speicher speichert, dann sollte man diese Aufgaben lieber an das betriebssystem- und versionsabhängige API/ABI weitergeben, anstatt selbst etwas zu versuchen, was evtl. einen schwerwiegenden Fehler auslösen könnte.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5591087,
      "meta": {},
      "text": "Inheritance means that one wants to use the code(methods) of a class in an other class (parent class to child class)  and only the the child classes have access to the parent class methods while as delegation means that instance variables of other  classes objects are being used to refer messages  to instances. \nInheritance\nAdvenatge: Inheritance can be used in many programming languages\ndisadventage: the access is restricted and and unwanted methodes might be given with\n\nDelegation\nDisadventage: It is not as elegant as inheritance and it can be less efficient due to the newly created object instance\nAdventage: The runtime flexibility - the delegate cann be changed throughout the runtime. \n\n\nSo an example for inheritance could be (parent class) an IPhones and when you have this parent class one can have apps that need to use those classes. So IMessage (Child Class) can only run on an IPhone, cause it needs its parents Methods. \n\nFor delegation: just a random game on a phone that can be installed at the app store or the game store and can be used on all softwares (all phones). The Apps (Methods) can use all other classes Methods (The softwares of a random phone) \n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5591352,
      "meta": {},
      "text": "Delegation and inheritance both allow reuse in the context of object design. Black-Box reuse associated with delegation is based on class instantiation and method calls. White-Box reuse associated with inheritance is rather based on subclassing and eventually adding new/refined functionality to subclasses. \n\nInheritance: The subclass has access to all methods/attributes of the superclass. This is very straightforward and doesn't overcomplicate the subclass (with eventual method class on the delegate object like in delegation). However, the sub- and superclass are closely related and any change in the second (like deleting an attribute) usually has consequences on the subclass. \nExample: A smartphone app for editing audio will inherit functionality from the app audio recorder, as it offers a refined functionality of the audio recorder app. There is no risk that this inheritance will cause unwanted behaviour to be exhibited as the two apps are logically very closely related. \n\nDelegation: In this case a client class can only access methods in the delegate class which the receiver class allows. This makes the code more robust as in contrary to inheritance, only methods are accessed which don't lead to the misuse of the delegate class. This can however have a performance downside as the delegate object is stored as a field of the receiver class and the instantiation is also expensive (compared to inheritance).\nExample: A smartphone health app needs to calculate the heart beat. For that it would be judicious to use the calculator app but only as delegate, as the health app is not supposed to give the ability to calculate square roots and exponents and only needs to access specific operations.\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595081,
      "meta": {},
      "text": "Assume we have a  class Smartphone which inherits from a class NetworkDevice. A method of this class (ND), let's say connectToNetwork(), would be implemented either as default one (in ND), re-defined in the Smartphone class directly or defined in the Smartphone class (if method is abstract in NetworkDevice class). In some sense, the method is called and executed within a Smartphone instance. While with delegation, the core implementation of connectToNetwork() will be in the NetworkCard class. And to execute the connectToNetwork() method, we will need an instance of the NetworkCard class.\nEither the Smartphone has the capability to connect to the network OR the Smartphone uses a network card to connect to the network.\n\nInheritance:\n- Advantage: It is easily modulable, as we can override the method in the subclass, and thus directly implement the code ourselves. We can even use the super class's method for a part of the implementation (using the 'super' attribute).\n- Disadvantage: We might not want to use every super-class method, but these will still be exposed to the sub-class.\n\nDelegation:\n- Advantage: The reusability of an implementation is a good thing. (to follow what was above, multiple devices could have a network card)\n- Disadvantage: Harder to debug as the class we delegate to can be seen as a black box sometimes (if we use an external compiled library)\n\nExample in the context of smartphone:\n\n- Inheritance: A smartphone can be seen as an audio communication device, and therefore need a microphone and a speaker. It uses the methods recordMic() and playSound() of the super-class CommunicationDevice\n\n- Delegation: A smartphone can also use an external audio device, such as headphones. To play sound and record to the user, the smartphone calls playSound() and recordMic() each 1ms to get the audio samples it needs.\n\nI chose this example as we can see clearly the two different usages of inheritance and delegation, and as almost everyone has a phone/headphones. (easily understandable)",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596227,
      "meta": {},
      "text": "Bei einer Vererbung erbt eine Subklasse (eigenständig) Attribute und Methoden ihrer Superklasse (Whitebox reuse). Bei einer Delegation wird eine Instanz einer Klasse in einer weiteren Klasse benutzt, welche auf Grundlage dieses Objektes dann weitere Funktionen bietet (Blackbox reuse - Form von Aggregation and Komposition).\n\nAccesskontroll wie bei Vererbung geht bei Delegation nicht. Hier kann die Klasse, welche die Instanz einbindet, nur auf die nach außen hin sichtbaren Methoden zugegriffen - vollständige Trennung.\n\nVererbung ist eines der Hauptkonzepte der Objektorientierung und lässt Polymorphie (Objekt, je nach Verwendungszweck unterschiedliche Typen) zu, Dies ist bei einer Delegation nicht möglich (deshalb receiver für Schutz nötig).\n\nEin Vorteil der Vererbung liegt in der Verbreitung und das es dem Programmierer einfach macht, neue Funktionen in einer Subklasse zu implementieren. Ein Nachteil liegt in der Verbundenheit beider Klassen - Änderungen in der Superklasse kann zu Änderungen in der Subklasse führen.\n\nEin Vorteil der Aggregation ist die Flexibilität während der Laufzeit - es kann modifiziert, erstellt, gelöscht werden usw. . Nachteilig ist, dass durch das Erstellen der benötigten Objekte es zu Performanceverlust kommen kann.\n\nBei Smartphones kann das Konzept des Smartphones als Superklasse definieren werden. Die einzelnen Hersteller erben dann die Eigenschaften (Internetmöglichkeit, Toucheingabe) und produzieren ihre Smartphones (Subklassen). Äquivalent hierzu sind abstrakte Klassen, welche von erbenden Klassen spezialisiert werden. Dies zeigt eine Einsatzmöglichkeit von Vererbung von abstrakten Konzepten und ist der Grund für die Auswahl dieses Beispieles.\n\nAls Beispiel von Delegation könnte man z.B. Apps nehmen - Instanzen werden runtergeladen und somit in das Smartphone eingebunden. Über Schnittstellen der App kann dann kommuniziert werden und alles was im Inneren der App abläuft ist nach außen nicht sichtbar - äquivalent zur Blackbox reuse, weshalb ich dieses Beispiel gewählt habe.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5596601,
      "meta": {},
      "text": "Inheritance(implementation inheritance) commonly refers to extending a base class/structure. This operation copies the old methods/use cases and can overwrite them. This amounts to mostly more specialization and functionality as the extending class structure can also implement new methods.\n\nDelegation however does not extend the base class. It has a delegation object that is used to delegate, or to redirect. This object has the fully implemented the wanted functionality. This means the base class/object does not have to implement more functionality than its designed scope.\n\nInheritance is most of the time easier to use as it is supported by many programming languages. It is also a core concept in OOP, so designing a system with inheritance could be easier. i.e. implement new functionality in a subclass. This unfortunately comes with some caveats. Inheritance exposes the subsystem to the full extend of supers functionality, this means some unnecessary funcs will be usable in subclass. Not to mention any change in super class will change the entire inheritance tree.\n\nDelegation is in comparison more flexible. It can selectively implement functionality in different delegative objects to overcome inheritances problems. It is however more expensive to run because of the extra work of creating object instances.\n\nSmartphones have common containers to display. For example widgets are containers on the home screen. Applications can extend this container to implement their own widget. The home screen manager then does not have to implement displayWidget() for each new one.\n\nFor delegation, a camera API is in a system already implemented. So applications like WhatsApp and Instagram don't implement such functionality but delegate the request to the already implemented camera API.\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5591307,
      "meta": {},
      "text": "--Inheritance\n-may expose some methods of parent class that we do not need,for example it is dangerous to implement Stack by inheritate List\n-parent class changes,the subclasses are forced to change\n+supported by many languages：c++，java\n+easy to add more functionality,like it would be bad if we create stack by manage a list as a attribute,but we want to extend more methods in stack..\n+simple and easy to understand\n\n--Delegation\n-may be inefficient,because we need manage more objects. We need a receiver and a delegate\n+rely less on delegate,more flexible\n\nExample in the context smartphone:\n->inheritance\nIf I am design a MOBA game,you see that there are new heroes in the game every month for example.So I just develope a class called Hero,which realize the basic stuff like Health Points and\nso on.What I should do now is to let the new hero inheritate class Hero and add more functions.\nThe reason is that inheritance is straightforward to use and easy to implement new functionality in subclasses.If subclass is nothing but pure extension of the superclass like here Hero,then choose inheritance.\n\n->delegation\nIf I want to design a new football game, something better than FIFA.Then I have two choices,one is to extends the classes which are provided by FIFA,and I try to add more functionality ,The other way to do is using delegation.I implement my idea,but using the classes in FIFA to realize the functionality.\nIt is clear that the first method is impractical,since there are a lot of restricts in inheritance,basically I am still restricted by the object model of FIFA.So I choose delegation to implement my idea,but only with the classes in FIFA to help me realize the funtionalities.\n\n\n",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5594856,
      "meta": {},
      "text": "Difference between inheritance and delegation: \nInheritance and delegation are both implemented to reuse code among multiple classes. But with inheritance, one class takes the properties (attributes, methods, ...) of another other class and with delegation only a specific duty is passed off to a delegate that will do execute it instead of the receive. \n\nInheritance:\nAdvantage: supported by many programming languages\nDisadvantage: some changes to the parent class, can affect the subclass\nExample: in a Spotify app on a smartphone, we can create a class playlist and make multiple subclasses using inheritance like favourites, or listenToLater...\n\nDelegation:\nAdvantage: provides more flexibility when reusing code\nDisadvantage: could lead to inefficiency as a new instance of the object is created \nExample: in a Spotify app on a smartphone, since many classes would need to shuffle songs, we can create a shuffling system and delegate it to each class that needs it. So that whenever the method shuffle() is called from any relevant class, the method is implemented.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595089,
      "meta": {},
      "text": "Inheritance is consist of a superclass and one/multiple subclasses, where the subclass inherits the method and attributes of the superclass. Inheritance can reduce code redundancy, but increases coupling in the code.\n\n Delegation consists of multiple classes, where the classes interact by creating an attribute of the corresponding class. Delegation is more flexible since you can change methods at will, however it might be less efficient since multiple instances have to be created.\n\nIn the context of a smartphone, inheritance can be used in the case of different icon buttons. We can have a button superclass with multiple subclasses, as they all have one function which is the function to open a specific application and a different picture. Delegation can be used in the case of cache cleaning. The settings page has an instance of the cache cleaning machine which has the function of cache cleaning. This allows multiple functions to be available on one page and is more flexible. \n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595284,
      "meta": {},
      "text": "Inheritance and Delegation are two different methods of code reuse. They differ in the fact that delegation just instantiates an object to *delegate* the method calls to, while inheritance gets all the methods the baseclass has.\nDelegation has the advantages that you can limit the functions accessible to whatever class is calling them. ",
      "score": 33.3,
      "language": "ENGLISH"
    },
    {
      "id": 5595797,
      "meta": {},
      "text": "Delegation represents an abstraction mechanism that centralises object behaviour. An object displays a type of behaviour to the outside, but in reality delegates responsibility for implementing that same behaviour to an associated object. Inheritance describes the process of subclassing an implementation. When we inherit from an already existing class, we can reuse the methods of the parent class, as well as add new methods to it.\nFor delegation, an advantage is the possibility of changing a reused class without having to change the reusing class - it is a very flexible way to express relationship between classes, whereas an example of a disadvantage is having to define a larger number of forwarding methods. Advantage of inheritance is for example the fact that there is no need for instantiating multiple classes, while a disadvantage would be a higher possibility of a code duplication and the fact that inheritance couples the objects very closely which makes it less flexible.\n\nExample in the context of smartphones:\nDelegation - logging into an online banking account by using faceID. When I open my bank account, it passes the duty of logging me onto the app to the phones face identification function. \nInheritance - smartphone app Spotify. Spotify has a basic version which allows users to listen to playlists but without getting to choose which song plays next. The app also has a premium version which includes the basic versions functionalities alongside with many more such as listening to music offline and picking the next song. This is a great use of inheritance, as the premium version inherits everything from the basic one, but provides many additional features.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595912,
      "meta": {},
      "text": "1. Difference between inheritance and delegation\n\nUsing delegation an aggregated class delegates a certain functionality to other existing classes, whereas in inheritance new classes of the same superclass are created which inherit the functionality of the superclass and may add a certain functionality. \n\n2. Delegation\nDelegation allows easy integration of the functionality of other classes based on what is needed, however offers limited transparency about the concrete implementation. \n\n3. Inheritance\nInheritance offers the benefit that one can rely on the functionality of the superclass which is implemented by all subclasses, however it increases the coupling between the superclass and the subclasses. \n\n4. Example\nWith the AppStore Apple allows users to integrate the functionality of external apps to the iPhone (corresponding to delegation logic). At the same time Apple has multiple apps developed by Apple itself on the iPhone (corresponding to inheritance logic).",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596508,
      "meta": {},
      "text": "The difference between inheritance and delegation is, that with delegation a class \"A\" that wants to delegate a method to a method of class \"B\" has to have an object of class \"B\" as an attribute and has implement the call of the specific methods on \"B\" that it wants to delegate to in the methods of \"A\" it want's to delegate.\nBut in inheritance a subclass has to implement all the methods of a superclass, but can extend it\n\nAn advantage of inheritance is, that it is easy to see which class inherits methods or attributes from which superclass in for example a UML Diagram. \nA disadvantage of inheritance is, that since you have to implement all methods of the superclass, a subclass might have methods implemented, that it doesn't need.\n\nAn advantage of delegation is, that a class can delegate to multiple different classes, whereas, in Java for example, a class can only inherit from one superclass.\nA disatvantage of delegation is, that if multiple classes delegate the same method and just pass it on to another class it might get confusing, where the actual implementation for the output of the method is really happening.\n\nAn example for inheritance might be, how different operating systems for smartphones are based on android, for example OxygenOS by OnePlus. These operating systems have to implement all the functionality of android which is why it makes sence to use inheritance, but they can also extend android and add specialised or extended functionality.\nAn example of delegation might be how smartphone apps delegate functions to the operating system. When you for example want to open the camera in an app, like instagram, to take a photo, the app will delegate this task to the operating system and the OS will then open the camera.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585715,
      "meta": {},
      "text": "Inheritance means subclassing (from interface or class) and therefore implementing the functionality of the superclass, thereby specifing or extending the given functionality. Delegation means forwarding an action to an object that is already implemented by, e.g., using an instance of a class and calling the required functionality of said instance.\n\nInheritance:\n- Advantage: \"Ease-of-use\", because it allows for easy reuse of a super-classes methods and attributes, if the inheriting class is similar (in terms of structure, functionality, design) to its ( e.g. subtypes of cats). \n- Disadvantage: subclasses automatically posses methods/attributes of the superclass and might have to implement or use them. Changes in the superclass might affect subclasses and force them to be changed too.\nThis is where delegation has its advantages. \nDelegation:\n- Advantage: circumvents the rattail that might be caused by changing a superclass. If you simply want to call a functionality of another class, instantiating it allows for more flexibility in the further development, because you can disregard the necessary changes/implementations that might come with inheritance.\n- Disadvantage: instantiation of an object can be very expensive, especially when more than one class is instantiated, which might lead to runtime inefficiency (clearly a disadvantage).\n\nExamples in the context of smartphones:\n- Delegation. When the context of an application has to be decided at runtime. For example when the application on different anroid os versions. Different os versions might need different interface versions.\n- Inheritance: The folderstructure in a smartphone might be implemented by using a compostie pattern (Leaf= Folder, Compositions = Multiple Folders in a Folder, both inherit from folder)\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5586212,
      "meta": {},
      "text": "Inheritance is taking the attributes and methods from the superclass to subclass and implement the functionalities in superclass. Delegation is simply catch an operation and send it to another object, and it implements the functionalities in an existing object.\n\nInheritance is easy to implement new functionality in subclass but it might inherit some unwanted methods from the superclass. On the other hand, delegation is more flexible by selecting particular methods of an object but it might be less efficient because an object instance has be created. \n\nIn smartphone, we can create a superclass class \"Clock\" and its subclass can be \"Alarm\", \"Stopwatch\" and \"Timer\". Since all the subclasses is related to time and we can create a superclass to generalised it. For the delegation example, reminder in smartphone can set up an event or task with notification which can remind user beforehand. At this case, delegation will be more suitable because some methods in superclass \"Clock\" may be useless, it simply need the function of setting alarm so delegation will be better. ",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5593860,
      "meta": {},
      "text": "Inheritance in is the process by which one class accepts the properties of another class. Inheritance requires a new class that takes over the properties and behavior of the pre-existing class. But delegating is simply giving one or more responsibilities to a pre-existing class.\n\nDelegation is more flexible in its use because it does not force you to accept all the methods of the superclass. But it can be relatively inefficient because a new object must be created when doing a delegation.\n\nInheritance can be more straightforward to use and can be used in more programming languages since most popular object-oriented languages do not support delegates directly. However, the subclass must accept all the methods of the superclass, and the subclass must change when the superclass changes.\n\nWhen you use your phone's camera app, you can open the photo you just took in the bottom left corner (open the photo app), which is a kind of delegation. There is no function to view photos in the camera app, but this function is delegated to the photo app.\nHowever, when you use the phone app in your phone, you can open the address book in the phone app (the function is built-in and does not jump to the address book app), which means you have all the functions of the address book app in the phone app, which is a kind of inheritance.\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594959,
      "meta": {},
      "text": "Inheritance and delegation are two processes that may induce similar behavior and support the concept of reusability, however, inheritance is the mechanism that allows a child/sub Class to inherit (i.e take over the attributes and methods ) a parent/super Class: \n+Advantage: easily extend the implementation and further the functionalities of the child Class.\n-Disadvantage: Dependency-> if the super Class is changed, the sub Class must be modified as well.\nDelegation is the mechanism that allows a class to use an object of another class,i.e both must either inherit the same class(white box reuse) or be related through aggregation and composition (black box reuse) as an instance variable, and forward messages to this instance (to delegate) :\n+Advantage: only methods that are needed would be provided and is easily modifiable(at run-time)\n-Disadvantage: a new instance is created, which might cause inefficiency.\nExamples in the context of smartphones:\nInheritance: an online-banking App that saves data on the server and preserves the data on the phone, assuming that each model would contain a baseEntity that describes a generic user, several different Entities would inherit this class and extend the implementation according to the status (UserEntity, ClientEntity, EnterpriseEntity....).\nDelegation: in this online-banking App it would also be reasonable to include the Proxy design that implements delegation. Assume that a user is accessing the App as a Guest without logging in and needs to make a payment, the access would only be authorized if the user is logged in as a client, and the classes would forward messages(delegate) and allow this access based on the authorization level.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595828,
      "meta": {},
      "text": "Inheritance and Delegation are both ways to use the functionality / methods of another class. The main difference between those is, that if you use Inheritance, you createa subclass of another class and \"inherit\" all its methods (and attributes) whereas if you use Delegation, you use an instance of another class to get acces to its methods.\n\nAn advantage of delegation is that you dont have to inherit all the methods and attributes of the other class, but you are able to only use the methods you really need in your case. This makes it flexible and easy to adapt.\nA disadvantage is, that you sometimes cannot know about how the method actually is implemented, what it does or which sideeffects it may has. You only care about the result. \n\nAn advantage of Inheritance is that you implicitly express a relation between your class and the superclass. Your class can then also used as an instance of the superclass, which enables more options (e.g. dynamic dispatching).\nOn the other hand you are only able to inherit from one superclass, if you need different methods from different classes it's impossible to do it with inheritance.\n\nAn example for inheritance in the context of smartphones could be the operating system. You can have different models having their own special features but all of them inherit from the same \"base\" system.\n\nAn example for delegation could be the situation when you google something on your phone. You don't care about how google acutally decides what to show you, you just rely on their algorithms to show you the best-fitting result.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596650,
      "meta": {},
      "text": "Hier existiert bereits eine Klasse mit mit bestimmten Methoden/Attributen. Erstellt man nun eine Subklasse, dann werden die Funktionen einfach weitergegeben.  \n \nOft kann dieses automatische Verhalten von großem Vorteil sein, Z.B:  Elternklasse Auto: die hat mehrer Methoden/Attribute  wie MaxGeschwindigkeit, Gewicht, Modelljahr und Schaltung. Nimmt man nun die Subklasse LuxusAuto und lässt sie von Auto erben  \n   \n, so käme ein unerwünschtes Attribut automatisch hinzu, die zu vielen Autos zwar passt aber nicht zum LuxusAuto: Schaltung. Und somit wäre das Erben hier problematisch.   \n   \nEin großer Vorteil ist jedoch, dass es diese Funktion in vielen Programmiersprachen auch gibt und somit überall angewendet werden kann.  \n\n\n\nDelegation:\nDieses Prinzip funktionier ähnlich wir eine Blackbox.   Zunächst einmal haben wir den Client, welcher in meinem Beispiel die Subklasse LuxusAuto wäre. Neben dem Client gibt es den Receiver. Dieser ist sozusagen die Subklasse  LuxusAuto   mit ihren Eigenschaften. Der Receiver ruft anschließend den Delegate auf ohne gleich die Eigenschaften des Delegates zu übernehmen. Dies führt dazu, dass beide Klassen voneinander abgetrennt sind, aber dennoch miteinander verbunden sind. Der  Receiver ist sozusagen eine Blackbox, da die Attribute von Auto \"verschluckt\" werden.  \n\n   Somit hätte man das Problem mit der nichtexistierende Schaltung beim LuxusAuto nicht.  \n",
      "score": 58.3,
      "language": "GERMAN"
    },
    {
      "id": 5589632,
      "meta": {},
      "text": "The distinction between inheritance and delegation is that delegation is more versatile, while with inheritance, changes in the parent classes may result in the subclass having to be altered as well. On the other hand, inheritance is easier to use and is covered by most modern programming languages.\n\nAn advantage of inheritance is that it is straightforward to implement new functionality in the subclass, while a major disadvantage is that the concept could be used in a harmful way, as some undesirable methods of the parent class could be exposed and thus the developer cannot rely on this concept for security reasons.\n\nA disadvantage of delegation is that it is way more inefficient and resource costing, as for every member variable class a \"parent class \" uses for delegation, a new instance of that object needs to be created. As on bigger projects this may result in a performance leak , this is one of the reasons you should use inheritance if you have the possibility to choose. The advantage of delegation is that it is way more dynamic and agile to use.\n\nIf I had a smartphone Game with different types of planes, all following the same physics, then I would use the inheritance concepts as it is easy to implement new functionalities in the  military plane and supersonic plane, while the parent plane class does not expose unwanted methods and is more efficient than delegation.\n\nTo paint the planes I would use a massive existing library, but I do not want to use the dangerous method eraseAllSourceData() in my Paint object. As it is a public method, I choose delegation for security reasons so that one of my frontend employees does not accidentally call this method.\n",
      "score": 75,
      "language": "ENGLISH"
    },
    {
      "id": 5595030,
      "meta": {},
      "text": "Inheritance is subclassing from an implementation and Delegation is catching an operation and send it to another object .\nInheritance:\nadvantage:\neasy to implement new functionality in the subclass\ndisadvantage:\nChanges in the parent class can force the subclass to change as well\nDelegation\nadvantage: generally more flexible \ndisadvantage: might be more inefficient, because an object instance needs to be created.\nexample:\nInheritance: Android originally had its own input method, but other input method companies can inherit it and change the style to add new features.\nDelegation:We want to write a comment, and we need to have text field, Image and Label. And our comment can delegate to them.\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596049,
      "meta": {},
      "text": "Inheritance creates a subclass from an already existing implementation or for an example an interface while Delegation only remaps an operation to an already existing Object\n\nInheritance:\nPros: Possibility to customize some of the existing methods while leaving other to be as they are\nCons: All Methods from the superclass will be accesible in this class\n\nDelegation:\nPros: Can use methods from different objects without granting access to the rest of the methods from said objects\nCons: has to have a refference to all the other objects used and these have to exist in parallel",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596210,
      "meta": {},
      "text": "In inheritance, one or more Subclasses inherit the attributes and methods of the superclass. This means one class contains all of the exact members of the other class and expands its functionality. In delegation however, one class catches certain operations and “hands them over” to another object, where the detailed methods are implemented.\nIt’s a Pro that Inheritance is simple to use and understand, but this simplicity comes with the disadvantage that changes to the parent class usually also modifies the subclass(es).\nFor example, in different smartphone operating systems, there are widgets offering only a subset of the functionality of the main application like a built in calendar. So you could argue that the widgets inherit from the main application, as the included functions are identical to the main application’s respective functions.\nDelegation is applicable to a broader range of different deployments, as its more versatile.\nHowever, this versatility comes with the price of object instantiation & initialization, which can in turn make it less efficient than Inheritance.\nIn smartphone voice assistants, you can chose your default application to play music, e.g. between the built-in music player and spotify. If you changed it to spotify, a request to play a specific song will then be delegated from the OS to the spotify application, which handles the request using its own methods based on its own music library.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596284,
      "meta": {},
      "text": "Deligation bedeutet, dass eine Klasse durch ein Attribut auf die Methoden einer anderen Klasse zugreifen kann. \nInheritance hingegen beschreibt ist z.b., wenn eine Klasse eine andere Klasse extended.\n\nDer Vorteil der Deligation ist dabei, dass man sich die Methoden, die übernommen werden, aussuchen kann. \nDer Nachteil bei Inheritance ist also, dass man \"gezwungen\" ist alle Attribute und Methoden der andern Klasse zu übernehmen. \nEin Nachteil bei Deligation (bzw der Vorteil von Inheritance) ist, dass deligation keinen dynamischen Polymorphismus unterstützt, Inheritance hingegen schon. \n\nWenn man in z.b. Whatsapp Emojis benutzt, dann würde es Sinn ergeben jedes einzelne spezielle Emoji von einer Eltern-Klasse \"Emoji\" erben zu lassen, die bereits alle wichtigen Grundfunktionalitäten wie Größe des Emojis usw. festlegt. Hier macht es keinen Sinn sich nur wenige Funktionalitäten aus einer Klasse herauszupicken zu wollen. \n\nHingegen würde dies bei den \"neuen\" Apple-Emojis (Die, bei denen man seinen eigenen Charakter erstellen kann und dieser dann verschiedene Grimassen, etc. schneidet, um dem Konversationspartner besser zu vermitteln, wie man sich gerade fühlt) mehr Sinn machen, dass man Deligation nutzt, da man dann nicht \"gezwungen\" ist alle Attribute, die bereits die Standartgröße festlegen, zu übernehmen. Dies wäre nicht so optimal, da die Apple-Emojis größer sind. \n\n\n\n",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5585345,
      "meta": {},
      "text": "Inheritance is the concept of extending a base class by a new operation overriding an existing operation. \nWhere on the other hand side Delegation catches an operation and sends it to another object.\nLooking at both sides there are several positive and negativ aspects to look at. Inheritance is generally straightforward to use, supported by many programming languages and allows easy implementation of new functionality in subclasses. However inheritance exposes some unwanted methods of the parent class and leads to the problem that changes in parent class can force the subclass to change as well. Whereas the concept of delegation is more flexible because any object can be replaced at runtime by another one but nevertheless it is more inefficient as an object instance needs to be created.\nA good example for the both concepts can be found in smartphone app development. For example a clothing company that wants to develop a new application is just a legal entity, it does not know how to build an app. That is why they delegate the task to a mobile app development company to code an application with all the requirements they need. The app development company uses their knowledge and look for a fitting employee (app developer) to solve the given task. In context of inheritance in this example, the clothing company would directly start looking for a app developer and hire him for the project. The would be no control instance in between.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5586740,
      "meta": {},
      "text": "Inheritance means reusing the subclass of a class to not duplicate code. Therefore the new subclass inherits all elements and functions of the superclass. \nAn advantage is an easy use, especially in Java, by simply adding the term \"extends\".\nA disadvantage is the occurrence of conflicts when in the subclass trying to add a variable of the same name as a variable of the superclass. \n\nDelegation means reusing some functionality of a class by delegating/sending them to another class (as an instance variable) to not duplicate code.\nAn advantage is the convenient application of different patterns (e.g. bridge pattern). Normally you don't have to know how the delegated function works, but only what it does, which is convenient.\nA disadvantage is that when trying to replace inheritance, the whole superclass has to be delegated, which can be quite cumbersome.\n\nIn a smartphone, there are also many delegations used. For example, when an application tries to get the present time, it can get it delegated from the main system. There, delegation should be used as not every application is a \"subclass\" of the main system, thus inheritance would be inappropriate.\n",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5591559,
      "meta": {},
      "text": "Inheritance means that a subclass of of a class is created which can have more specific methods/features (e.g. a kid is a subclass of a human and inherits his methods like eating(), but also adds methods like buildNewTeeth() )\n\nDelegation means that a receiver class is created that accepts input and delegates it to the delegate class (e.g. a printer receiver class that filters all printing requests and only delegates the valid requests to the real printer class)\n\nInheritance.Pro: It adds to reusability of the code (e.g. if we need parents in another program we can let the inherit from human again)\nInheritance.Con: It leads to high coupling between base class and subclasses and inherited methods may have unwanted behaviour (e.g. if a human has the implementation gettingAChild(), the method may not fully work for a male subclass)\n\nDelegation.Pro: the receiver class can act as a filter and only allow suitable requests (e.g. this can function as an access control)\nDelegation.Con: Implementation can lead to inefficiency, as more (receiver) classes have to be introduced, which also reroute traffic\n\nInheritance.SmartphoneExample: All android phones inherit basic features from android but every brand can then add his own features -> I would use it to make my brand unique and let it stand out with more features\n\nDelegation.SmartphoneExample: When an app tries to access any smartphone specific features like vibrate, it uses a receiver that only sends valid requests to the real delegate class with the vibrate feature -> I would use it to make the phone more safe from malicious apps",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593623,
      "meta": {},
      "text": "Inheritance uses the complete functionality of a class or interface and only add new methods. \nDelegation redirects a call  from a client. If a Client makes a request it is delegated to a instantiated object which executes the request. The request from the Client can be modified by the Receiver to fit the requirements of the method. \nA disadvantage of Inheritance is that functionality can only be added but existing methods cannot be deleted. A advantage of Inheritance is that it is very easy to use since many languages support it by default.\nA advantage of Delegation is that you have less restrictions like in Inheritance by the super class.\nA disadvantage of Delegation is that a object needs to be instantiated which can lead to worse performance.\n \nFor instance in android phones the back button of the OS could be implemented with inheritance by the apps. This way the OS can ensure, that all the functionalities of the \"control bar\" at the lower and of the display can be used even inside apps.\nDelegation could be used for closing an app. If the OS wants to close an app it can delegate this call to the app.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594327,
      "meta": {},
      "text": "Inheritance is when a class takes over properties and methods of another class where as delegation is just a relationship between instances of classes, only forwarding method calls. There dont have to be all methods as in Inheritance this is automatically the case. An advantage of inheritance is that you can show a relationship between different classes and you can be sure that all methods of the superclass are in that class. That said, a disadvantage is for example when a class cant be further splitted into subclasses but you want to enhance this class delegation would be the better choice. An advantage of delegation is that you can pick just the important methods from a class you want to call your methods and dont have to have all methods/attributes. On the other hand a disadvantage is the missing safety that a certain method is in that class so you cant pass instances of it and treat it like a that. A example for Inheritance in smartphones is when a car racing game has different kind of cars. You would choose it because there's a clear relationship between all cars. Delegation fits great if an app wants to use certain features of the phone like turning on bluetooth. There is no clear relationship and you only need bluetooth off and bluetooth on from the system.",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596176,
      "meta": {},
      "text": "Bei Vererbung werden ausgewählte Methoden und Attribute an die Kind-Klasse weitergegeben. Diese soll meistens eine Spezialisierung der Eltern-Klasse darstellen. Bei Delegation werden Aufgaben einfach an eine andere Klasse weitergegeben. Dies geschieht meist einfach mittels Instanz einer Klasse.\n\nDelegation:\n+ Wenn Aufgaben delegiert werden, kann man selber entscheiden welche Funktionen gebraucht werden und welche nicht. Bei Vererbung müssen alle angegeben Methoden akzeptiert werden\n- Bei Delgation kann nicht mit dynamischen Polymorphismus gearbeitet werden.\n\nInheritance\n+ Generalisierung <=> Spezialisierung - Beziehungen zwischen Klassen kann besser dargestellt werden \n- Eine Vererbung kann zur Ausführungszeit nicht mehr angepasst werden. Das Objekt, auf welches delegiert wird, kann aber ohne Probleme ausgetauscht werden.\n\n\nVererbung würde man bei einem Smartphone beispielsweise zwischen Elementen der Speicherhierachie (Cache, RAM, SSD) einsetzen. Diese müssen alle Daten speichern und haben einige Dinge gemeinsam, die als Vererbungshierachie dargestellt werden können. \n\nDelegierung findet Beispielsweise statt, wenn die CPU des Smartphones Daten speichern will. Diese Aufgabe wird an den Speicher delegiert. Was genau mit den Daten passiert kümmert die CPU nicht mehr.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5596298,
      "meta": {},
      "text": "Delegation is directly supported by a lot of object oriented programming. While some people prefer inheritance because it facilitates dynamic polymorphism and is usually supported by the majority of OOP languages. However an advantage of delegation is that it has run time flexibility which allows easy change at run time. \n\n(I am assuming that the smartphone is apple)\n\nAn example of delegation is downloading different lifestyles applications on the phone. Similar to sleep cycle which is delegated the task of waking the user up at the specified time. Moreover, it has additional features which are better than the traditional smart phone alarm app. Delegation is used in smartphones because because it allows the work needed to create extra functionality to be outsourced to other people. Apple allows the creators of sleep cycle to upload their app on the App Store which is an improvement of the basic alarm app. This improves the overall functionality of the phone and apple get a kickback of the sales made.\n\nAn example of inheritance in smartphones are texting apps like WhatsApp. They inherit the information of different contacts from the iPhone contacts app. In order to add a new person we have to add them through our contacts app and then they appear on WhatsApp. You use inheritance in smartphones because it can reduce the amount of memory used. If WhatsApp had to make a copy of all the data from the contacts app then it would be a waste of memory space because its just repeated data.",
      "score": 50,
      "language": "ENGLISH"
    },
    {
      "id": 5596590,
      "meta": {},
      "text": "Inheritance is used to describe hierarchical relations between classes (taxonomies) and  to reuse functionalities implemented in the parent class. Inheritance also allows to further refine and make the implementation in the child classes more specific. One advantage is that the amount of code is reduced, since implented functionality in the parent class does not have to be implemented twice. One disadvantae is that it can be difficult to determine the dynamic type in runtime (Polymorphism), if the inheritance structure is very complex. Delegation works the following way: within a certain calss, a method is called on an instanciated object of another class, which already implemented the method. One disadvantage is that storage usage is more inefficient, as a new obkct is instantiated every time. An advantage is that code is not duplicatedmas funtionality of other classes is reused. \n\nExamples\nInheritance:\nIf we imagine a generic mobile phone, which implements basic functionality such as calling, texting, internet connectivity, etc. as a parent class, than all the more elaborate phones of different brands are \"subclasses\"of this abstraction. All of them implement further more refined functionality and come up with new functionality. I think this example visualizes the concept of abstraction very well.\nDelegation:\nWhen you want to type somthing e.g. in Whatsapp, Whatsapp will delagate the typing functionality further to the smartphone, which then will display the generic keyboard. -> Whatsapp will not implement the keyboard itself, this being the reason why I chose this example.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5583852,
      "meta": {},
      "text": "With class inheritance, one is directly accessing the \"rights\" and information of a specific instance of an object (e.g. SlowCar in Bumpers Game). On the contrary,  with class delegation, one is accessing the \"rights\" and methods of an intermediary public interface. Furthermore, inheritance establishes hierarchies where the instance of the object at hand is the child of a parent superclass (e.g. Car in Bumpers). On the contrary, in the delegation, one does not establish this hierarchical relation. In delegation, we use a reference (e.g. a \"moderator\"), which will control the relation between 2(+) components. This moderator will be the channel used to pass tasks for the responsible component, hence \"delegating work\" to the responsible class.\n\nOne inheritance advantage is that it fosters code reusability, as child classes are able to utilize functionality implemented in the parent class.\n\nOne inheritance disadvantage is that it increases the coupling of parent-child classes, damaging the fundamental principle of low coupling and high cohesion. If a critical yet accidental change happens to the parent class it will affect multiple classes in the system all children are coupled to the superclass.\n\nOne delegation advantage is its inclined adaptability characteristic, as the public interface method can be more easily extended and adapted in case a scenario/requirement changes.\n\nOne delegation disadvantage is its access \"utility\". Here the moderator/reference used is encapsulated, hence one is not able to access much information/functionality from the class.\n\nI would choose to implement a simple authentication feature/service for a smartphone using delegation because I imagine that such a service does not require multiple variations of one authenticated user. Additionally, I want to restrict access to information as we are talking about a security feature hence by encapsulating my reference I reduce the endpoints to information.\n\nI would choose to implement one media gallery feature/service for a smartphone using inheritance because one overall UI design can be established {a square with a DateTime and location} and based on this super design I could extend the functionality for specific media types {e.g. videos have everything an image has, plus an event on click functionality that plays the video}.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585275,
      "meta": {},
      "text": "Inheritance is the classical object orientated programming thing. There is a superclass like animal and a subclass like dog. Dog inherites certain methods and attributes from the superclass animal and could also overwrite them. One advantage is that most methods don't need to be implemented again. But it's also easy to extend on the given methods and attributes. One disadvantage is that methods from the superclass are always available to the subclass. They can't be blocked and this could lead to unwanted use.\n\nDelegation is more of an internal implementation framework. Methods get called and the class delegates the method call to another class in which most of the functionality is implemented. The advantage is that this concept is extremely flexible since the delegating class has full control. A disadvantage is that generally most of the functionality of the delegated class will be unused, so this is a waste of space, which could lead to inefficiency\n\nExamples:\n- Using delegation for functionalities in networking for example triggering API calls. Delegation would be better suited here to make sure that no unwanted behaviour or vulnerabilities are used.\n- Using inheritance for UI-development since many interface objects are growing on each other. This is a classical example for inheritance. ",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5586588,
      "meta": {},
      "text": "The difference between inheritance and delegation is that in inheritance the base class is extended to get reused in a subclass whereas in delegation for reusability a delegation class is created so that the functionality of this class can also be used. An advantage of delegation is that it is flexible to use, however by creating a new object instance it could lower the efficieny. An advantage of inheritance is that it increases the functionality since new methods can easily be implemented in the new subclass , whereas a disadvantage could be that inheritance exposes unwanted methods in the implementation. \nIn context of smartphones one can say that in a smartphone in \"Settings\", the functionalities are delegated to corresponding views.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5587283,
      "meta": {},
      "text": "Inheritance is a concept that copies the functionallity of one superclass to another class called subclass. The subclass can then be extended even further. \nDelegation is a concept that reuses the functionallity of an existing object to pass a certain task to another object/class.\n\nInheritance gives the code structure, which makes it easier to understand. But all changes in the superclass also effect its subclass, which increases coupling.\nDelegation increases the flexibility of the code, because it can be used during the runtime of the code. But it can be less efficient, because we need to create an object for every delegate in our \"delegation-chain\".\n\nIf you want to express a relationship between two classes i would use inheritance. Assume u have a general class called smartphone and a few specialized classes e.g apple, samsung and huawei with different functionalities. Then smartphone would be a great superclass which implements all similarities. The specialized classes would then inherit from smartphone and get their own special functionalities (or even overwrite the superclass if needed). Inheritance makes more sense in that example because it helps to structure your system.\n\nImagine you have an existing class smartphone, which is final. E.g. a smartphone that has already been released like the iPhone 13 and you want to release the next version of that phone (iPhone 14), which uses some of the old functionallities. The new smartphone has new functionalities, which are implemented in the new class and the reused functionalities are just delegated to the old iPhone 13 class. Delegation makes more sense in that case, beacause if the new phone would inherit form the old one it would have all of the old funtionallities which we might not want to use.\n\n",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5587572,
      "meta": {},
      "text": "Inheritance gives an opportunity to  implement the functionality by subclassing from an existing superclass implementation. Delegation, on the other hand, is catching the operation and sending it to another object  where it is already implemented using object instantiation and method calls - so it uses only needed functionality of other objects and doesn't subclass from them like inheritance. Inheritance declares an \"is-a\" relationship, and delegation - \"has-a\".\nInheritance, supported by many programming languages, provides a possibility to easily implement the new functions and is straightforward to use. However, it can expose unwanted methods (so that the system becomes e.g. less secure) and every change to superclasses causes the change in subclasses as well.\nDelegation is designed to lean code towards behavioral approach and as such, the relationship between both parties should be arbitrary to enable code maintain flexibility. But every object, that we need, should be created - that means system becomes more inefficient.\n\nFor example,  photo library of the smartphone. \nConsidered, we have a class \"Album\". We want to implement \"Hidden pictures\", \"Screenshots\", \"Favorites\" and \"Shared album\". For the first 3 classes, we would use inheritance to quickly add some new functionality and  use the already implemented code. The shared album is otherwise (notwithstanding the name) should be delegating functionality, creating an instance of Album. This class provides access to albums and relevant functionality rather then being an album itself, so it is \"has-a\" relationship. So we can avoid unwanted behaviour of the users and provide only the functionality of the album that is required.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5588141,
      "meta": {},
      "text": "In Inheritance, the new class is a child of the parent class and can use/overwrite its methods. That way, code duplication can be avoided. However, an unwanted side effect could be exposing parent methods. In Duplication, the new class calls a method of another, preexisting class without being its subclass. This makes it more flexible, as not all the parent class methods have to be taken care of. A disadvantage is it resulting in it resulting in a higher coupling between classes.\n\nOne example for using inheritance would be when making two kinds of views in an app, one for the developers and one for normal users. In this case, both \"UserView\" and \"DeveloperView\" can inherit from the class \"View\" and therefore use shared functionality such as a menu bar, whilst the DeveloperView has additional options for testing. \n\nDelegation could be used for an app that allows the user to play multiple minigames and have one overall level.  Here, all minigames can have a \"addXP\" function that calculates how many XP the specific minigame gives. This function can then call the overall \"addXP\" function in the \"Level\" class that adds the XP in the database. This way, not every minigame has to directly access the database.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593659,
      "meta": {},
      "text": "Inheritance is the process by which one class takes the property of another class. Specifically, the child class takes over the attributes and behaviour of the super class. \nDelegation is simply passing a duty off to another class. It can be viewed as a relationship between objects where one object forwards certain method calls to another object, called its delegate.\nBy comparing those concepts, the cons and pros can be identified. The advantages of inheritance is that it's supported by many programming languages. Besides, it's straightforward to use and easy to implement new functionality in the subclass. However, it forces to accept all the methods (which can be unwanted) of the super class, and any changes in the parent class make the subclass change as well. \nDelegation, in its turn, provides with only the methods that really make sense. It' s more flexible as the delegate can easily be changed. The cons: delegation might be more inefficient because an object instance needs to be created; it is not directly supported by most popular object-oriented languages.\nExample of the above mentioned concepts. \nCase: Company wants to develop an application for a smartphone. It doesn't know how to do build it. \n1. Delegation: a Company class implements the AppDeveloper interface. It delegates to a MobileDeveloper who, in turn, implements the AppDeveloper interface. \n2. Inheritance: a Company class implements the AppDeveloper interface; MobileDeveloper inherit the AppDeveloper class. ",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5593826,
      "meta": {},
      "text": "In the context of object design, inheritance is basically the extending of a base class by new operations or overriding existing operations in a new subclass. it's the process where one class takes the property of another class. i.e. the new classes take over the attributes and behavior of the parent classes. Delegation on the other hand is simply passing a duty off to something else. It's catching an operation and sending it to another object where it is already implemented.\n\nInheritance is, of course, the more common, since it is straightforward to use. Also it is supported in many programming languages and it is easy to implement new functionalities in the subclasses. However, inheritance exposes some methods of the parent class that can be unwanted. Changes in the parent class also force the subclasses to change. On the other hand, delegation can generally be more flexible. However, it might be more inefficient, because an object instance needs to be created.\n\nAn example for inheritance in the context of smartphones is for example basic mobile functionalities. These are to send a message, dial and receive a call. So mobile brands use these basic functionalities by extending the mobile class functionality and adding their own new features to their respective brand.\n\nAn example for delegation is the use of the cloud using a smartphone. A smartphone can access or request from the cloud. This in turn accesses the cloud through delegating the request to the database, which in turn responds to requests.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594369,
      "meta": {},
      "text": "Inheritance is make a subclass that has the same methods of the upper class and can have others. Delegation is a class (receiver) that receives request and delegates it to the other class (delegator), so that the user can use the method of the delegator indirectly. Advantage of inheritance is saving time and coding as some method doesn't have to be rewritten. Disadvantage of inheritance is that a change in the upper class can affect the subclass. Advantage of delegation is that it is more flexible because we can choose which method to use and which not. Disadvantage of delegation is that it is less structured as the relationships between classes are less obvious.\nExample of inheritance is foldable phones, they inherit every features of the smartphone but with foldable screen. \nExample of delegation is smart watch, it get some informations (heart beat, voice control commands...) and delegate to the smartphone.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595095,
      "meta": {},
      "text": "Inheritance is the process of tking the functionalities of the mother class. Delegation means passing the duty to an object of another class. Inheritnce is advantageous when it is wished to have most of the functionalities of the mother class. So that one doesnt have to manually delegatecall the methods through an object. Delegation is advantageous when less functionalities are wished to have. So that the class will not  have to implement unused methods from a mother class. For the disadvantages: vice versa of both examples. An addition to disadvantages of delegation is it doesnt support polymorphism. ",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5595370,
      "meta": {},
      "text": "In both delegation and inheritance the goal is to reuse existing functionality. However in inheritance functionality is used from an existing object, i.e. a operation is caught and sent to another object where it is already implemented, whereas in inheritance functionality is used from the superclass, i.e. an subclass is created and the desired functionality is directly used from the superclass. \n\nInheritance is very straightforward, you create a subclass and can directly use the functionality of the superclass.  A disadvantage resulting of that is however, that also potential unwanted functionality is inherited from the superclass. You cannot specify which specific functionality you want to inherit, as the entire functionality is inherited.\n\nA advantage of delegation is the fact that it is more flexible than using inheritance, as it can use functionality from several classes, whereas inheritance can only use the functionality of one superclass.\nA disadvantage  however is that it might be more inefficient due to the fact that an object instance needs to be created when using delegation and also the method call must be send and the response received, which is especially a disadvantage in performance oriented applications.\n\nIn the development of a smartphone operating system, I would choose inheritance when implementing different  the view of different kind of setting menus and submenus, as they share the same base idea and layout, making inheritance very straight forward.\n\nWhen implementing the search in the settings menu, i'd use delegation as the search is a task which is used in many places in the system but, you don't want to inherit from it as you can't inherit from more important classes\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595424,
      "meta": {},
      "text": "Delegation is passing the functionality to some other class through its instance. It encourages reuse.  Inheritance is subclassing from a class that already implements the functionality.  The disadvantage of delegation is that it require an object, which means memory space.Therefore, delegation is considered inefficient and it doesnt facilitate dynamic polymorphism, which is an important concept in OOP. However, it brings flexibility to the table,since delegation can easily be changed at run-time. The inheritance is pretty clear to use, just subclass from an existing class, which therefore could be considered as being newbie friendly. Furthermore, as it is a fundemental concept of OOP, it is supported by lots of programming languages. The downside is the child class may have access to some of the methods of the parent class, which may be unwanted. Moreover, any change to the parent class will alter the functionality, which may affect the child class as well, in a bad way.  \n\nLets say we have an android app that supports note taking. The app may use an instance of the official android note app to store the notes or the app could be a semi- note taking app as it inherits from the note taking app. ",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5595522,
      "meta": {},
      "text": "Inheritance has a \"is type of\" relationship between the child and the parent class. Delegation has a \"has a\" type of relationship between the classes. While using using Inheritance, the child can use parent's methods, because child is a subclass of the parent, and therefore \"inherits\" its methods. Delegation, on the other side uses an Instance of the \"parent\" class (there are no parents and children in delegation), to call the needed method. \n\nInheritance: a 'child' is type of 'parent', so parents methods are available in child class.\n\nAdvantage: Supports Dynamic Polymorphism and is supported on most object-oriented programming languages\nDisadvantage: Difficult maintenace because of polymorphism problems\n\nDelegation: an Object has an Instance of an other Object to use its methods.\n\nAdvantage: run time flexibility: the delegation can easily be changed at run-time\nDisadvantage: Delegation is not directly supported on most object-oriented programming languages it doesn't support dynamic polymorphism.\n\nInheritance example: Samsung S20 extends smartphone, Samsung S20 uses common Smartphone methods(f.e. detect touch): (\"is type of \" relationship).\n\nDelegation example: Samsung S20 has a camera and can use its methods(f.e take image) (\"has a\" relationship).\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596231,
      "meta": {},
      "text": "Inheritance is when a child class inherits all attributes and methods of a parent class. If the parent class is abstract or is an interface, the child class needs to be abstract or an interface itself or implement the required attributes and methods. For example, if you have a Smartphone interface that defines the functionality that a smartphone has, there could be a subclass for each model that defines the required Smartphone functionality and adds model-specific functionality. For example, there could be an IPhone subclass which implements basic Smartphone functionality such as the ability to call someone or the ability to play music, but also implements IPhone specific functionality such as faceID. This makes sense in this scenario because an iPhone is a smartphone and therefore the IPhone class needs to implement all the basic Smartphone class functionality but can also have its own implementation of this functionality or add new functionality.\n\nDelegation is when one object stores a reference of another object to make use of the second object's functionality. For example, a smartphone might have several sub-parts to it such as a processor or a speaker. In this case, a Smartphone class could be used that has references to instances of Processor and Speaker classes. This way, the Smartphone class can make use of features of Process or Speaker classes such as doing mathematical operations or playing a sound. In this case it does not make sense to use inheritance because a smartphone is not a processor or a speaker and there could be collisions between the Processor and Speaker class that occur when we try to use double inheritance such as if they have an attribute or method with the same signature.",
      "score": 25,
      "language": "ENGLISH"
    },
    {
      "id": 5586727,
      "meta": {},
      "text": "Inheritance is when a class or an entity directly inherits another class or an entity and has a \"is a\" relationship with the parent. In inheritance, the child class, which inherits from the parent, also inherits all the properties and methods of the parent class as well. Delegation on the other hand is simply passing off the role to some other object or an entity. For example in H06E01, we use a networkConnection object to delegate the role of network connection to the class that actually does the job.\n\nInheritance is advantageous when \"is a\" relationship is the goal or when a class such as an abstract one needs to be implemented somewhere else. Delegation is advantageous when the developer wants to improve upon a method of the delegate or simply just wants to use the method without overwriting it.\n\nIn regards to inheritance in smartphones, there are smartphones with very good camera quality and there are smartphones with really high storage space. In the end, they're all smartphones, so if we were to model these smartphones then they'd be inheriting from the parent \"Smartphone\" class since they all share some qualities such as being able to store data and taking pictures. \n\nIn regards to delegation in smartphones, WhatsApp or other messaging apps use some form of contacts to keep track of who the user talks to, with the goal of code reuse in mind, WhatsApp would delegate the management of the contacts to the smartphone and just implement some small details like profile picture etc. on their platform.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5588031,
      "meta": {},
      "text": "In inheritance you have a implemented class that almost does the same thing as your class on the other hand delegation reuses functionality of existing objects by calling their functions.\nAdvantage for inheritance is that you follow the existing class and it leads to code extensiblity.\nThe disadvantage is that you always have to follow the leading class therefore you may have methods or attributes you don't need.\nAdvantage for delegation is that you simply copy the functionality that you need from an already implemented object and you don't have to copy all the methods and attributes.\nThe disadvantage is that it might be more inefficient because you already need an existing object instance.\nInheritance in perspective of smartphones is for example the Iphone because the first Iphone is the class from where you inherit because it has the most general functions.\nDelegation in perspective of smartphones is for example the different type of android phones who uses the necessary functions of the already existing android operating system. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594329,
      "meta": {},
      "text": "With inheritance a base class is extended by a new operation or by overriding an existing operation. The using functionality are implemented in the superclass.\nAdvantages:\n1. Inheritance is easy to implement and easy to use;\n2. Many programming languages support inheritance directly, but may not support delegation directly.\n3. With inheritance a new functionality can easily be implemented.\nDisadvantages:\n1. Unwanted operations are also inherited.\n2. Changes in the superclass can brings unwanted changes in the subclasses.\nExample: The relationship between an old and an updated smartphone system is inheritance. Most functions of the old system are maintained. Only a few functions need to be overridden for an upgrade or developers just want to add some new functions based on the old system. In this case inheritance is convenient to get what you already have and to make some small changes on them.\n\nWith delegation an operation is caught and sent to another object. The using functionality comes from an existing object instance.\nAdvantages:\n1. Unwanted operations don't expose, which is more flexible.\nDisadvantages:\n1. An object instance has to be created for the use of its functionality, which is less efficient.\nExample: There's a common function called \"open in Browser\" in smartphone apps. This is a kind of delegation. There's an object instance \"browser\" of the class \"Browser\" in the app's class, and the Browser class has a method called \"browse(url)\", to open a website with the given url. The app's class has a method called \"openInBrowser(url)\", under which the method \"browse(url)\" of the object instance \"browser\" is actually called, written as \"browser.browse(url)\".",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596477,
      "meta": {},
      "text": "Inheritance versus delegation is not just about the functionality, but also (sometimes mostly) about the flexibility.\nIn case of inheritance the biggest problem occurs when other devs want to extend our base class. People tend to do things as quickly as possible and sometimes do call specific methods in wrong sequence when it matters or do not call essential method inside at all. We are not reusing functionalities in already existing object, which would be the \"safe\" case had we chosen delegation. Even if we develop our own system further inheritance might be a problem since we have to think about the influence our base class has over all subclasses so we can change them accordingly. That's a lot of work to do and doesn't sound flexible at all!\nIn context of smartphones I would choose delegation. If we want our system to become popular, it's good too keep it devs-friendly. In case of Android, we can see much more a lot of custom ROMs which is always convincing also for more experienced users. Even if the official support for our smartphone ends, we can still keep it up to date that way.",
      "score": 16.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596528,
      "meta": {},
      "text": "Delegation and inheritance are two techniques used for reuse in object design. In delegation, an object shows a certain behavior to the outside but in fact, the responsibility for implementing that behavior is associated to another object. One advantage of delegation is that it provides runtime flexibility, however it is not supported by all object-oriented languages, which can suppose a disadvantage. \n\nIn inheritance, a new (sub-)class uses the functionalities of a superclass.  One benefit is that inheritance allows you to maintain a clear structure of the code, which is easy to understand and allows you to comprehend the implementation of a behavior. However, inheritance increases the coupling of classes, meaning that classes cannot be used independent of each other. \n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596703,
      "meta": {},
      "text": "Inheritance means, that subclasses have the methods and attributes of their parent class. This concept is more straight forward to use, because you can recycle the implementation multiple times in many subclasses. However, when you change the parent class, every subclass will change too. \nDelegation means, that a class uses another class internally. This approach is generally more flexible, because you don't inherit every functionality of the internal class, but you can use the methods you need. However, for every receiver you need to create a delegate to and this can be inefficient.\n\nSmartphone Exmaples:\nInheritance: Every iPhone (1,2,3,4,5,....13) inherits from the parent class iPhone, the general concept for every phone, that Apple makes.  Every iPhone has an Apple Chip, a Camera, a screen etc.\n\nDelegation: Every Smartphone uses a Battery. The smartphone can't inherit from the battery, because this would be stupid. However, the phone uses the functionality of the battery, for example charging and discharging\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596725,
      "meta": {},
      "text": "Delegation and Inheritance are very similiar. The biggest difference is that in inheritance a class takes for example the methods of another class meanwhile in delegation a class simply gives the things it has to do to another class. One advantage of Inheritance over deligation is that if you pass something on to a children class the other class is already known and you dont have to think about leaving out methods you do not need which saves time. This in turn is a disadvantage for delegation. Meanwhile delegation is better when you for example want to change something at runetime it is much easier than with inheritance which in turn is a disadvantage of inheritance. \nAn example for delegation in context of a smartphone would be that if you have a program for it, you can easily do a small software update because you only have to change some classes. An example of Inheritance in context of a smartphone would be that if you created a program for it you can simply reuse old features easily with inheritance in child classes.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5584022,
      "meta": {},
      "text": "- Inheritance is the process of creating a base class that is extended by subclasses, overwriting existing and adding new operations to create a more specialized version of the superclass.\n- Delegation simply forwards method calls to other objects.\n- Inheritance makes it easy to add more specific behaviour to subclasses and reuse code from parent classes, but in some cases, methods from the parent class are exposed that not all subclasses should able to access.\n- Delegation is flexible but creates overhead as it requires additional object creations for delegate entities.\n\n- Smartphone user interfaces are made up from components that inherit properties of higher-level components. A string of text will inherit a more generic view with boundaries, which in turn may inherit from another top-level view.\n- The network stack of a smartphone will forward network requests through multiple components and over multiple layers. While applications send requests, the system internally calls lower-level parts of the stack to establish a connection, transmit packets, and delegate the received response back to the application\n\n\n\n",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5585344,
      "meta": {},
      "text": "Both inheritance and delegation are part of interface specification and reuse already implemented functionality - just in different ways.\n\nWhere inheritance is reusing functionality from the superclass, delegation is doing this from an existing object. \nWhereas delegation is more flexible to use, inheritance has the advantage to implement new functionality which can be best seen in the implementation inheritance - where implemented methods from the superclass are reused but the subclassclass is also further specified by implementing new methods. Whereas delegation is more flexible, it has the disadvantage to be more inefficient as delegation is reusing functionality from an existing object which first needs to be created.\nInheritance has the disadvantage that changes in the superclass come with effort in changing the subclass aswell. For example when changing the signatures of the superclass - all subclasses have to be recompiled.\n\nSmartphone Examples:\n\nWe could use inheritance when we need different buttons on our phone. Some smartphones have more, some have less, but let's assume we have a power button, a home button, and back button. All buttons have the use that the user can press them and afterwards some functionality is triggered. Buttons have a certain size, color, position, and pressure resistance. The functionalities of different buttons varies of course, therefore the implementation of the functionality should happen in the subclasses (PowerButton/HomeButton/BackButton). The superclass Button can be implemented as an abstract class.\n\nFor example the camera could be implemented via delegation. The smartphone is not part of the camera but rather is using the implemented functionality of an existing camera object. Otherwise the smartphone would not be able to take photos which is an essential part of a smartphone.\n\n//some general aspects have been reused from my submission of last year (ga84xoc)",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5590816,
      "meta": {},
      "text": "Inheritance und Delegation sind zwei Varianten wie bereits programmiertes wiederverwendet kann. Bei Inheritance wird eine Unterklasse zu einer bereits existierenden Klasse erstellt, wodurch die Methoden der Oberklasse weiterverwendet werden können. Bei Delegation können ebenfalls Methoden von bereits existierenden Klassen wieder genutzt werden, allerdings wird hier über eine Objekt-Referenz auf die Methoden zugegriffen. Ein Vorteil von Inheritance ist, dass es einfach anzuwenden ist und von vielen Programmiersprachen unterstützt wird. Ein Nachteil, dass Änderungen in der Oberklasse auch die Unterklasse beinflussen können, was eventuell nicht erwünscht ist und somit beim Programmieren immer beachtet werden muss. Ein Vorteil von Delegation ist, dass es nicht an alle in einer Klasse bereits implementieren Methoden gebunden ist und somit mehr Flexibilität hat. Ein Nachteil ist, dass es unübersichtlicher werden kann und möglicherweise durch das Erstellen neuer Objekte sich negativ auf die Laufzeit auswirkt.\nBeim Beispiel Smartphones könnte Inheritance bei verschiedenen Versionen eines Smartphone-Models verwendet werden. Bei dem gleichen Gerät, gibt es oft verschiedene Ausführungen wie eine zusätzliche Pro-Version/Max-Version. Diese könnten, dann die Unterklassen darstellen, da die Funktionalität grundsätzlich die gleiche bleibt und somit alle Funktionen übernommen werden können. Die Unterklasse kann dann zum Beispiel im Falle einer Pro-Version noch um weitere Funktionen ergänzt werden.\nDelegation hingegen kann verwendet werden, wenn ein neues Smartphone entwickelt wird und aber einige Funktionen eines älteren Modells übernommen werden sollen. So ist es möglich nur die gewünschten Details weiter zu verwerden, ohne möglicherweise veraltetes auch mit übernehmen zu müssen.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5593662,
      "meta": {},
      "text": "By implementing inheritance you already have an existing base that you extend in a new class with new operations or overriding existing operations in the base class. By using delegation you are catching an operation and sending it to another object. So basically the difference is that you don't extend the class compared to inheritance but you have new class which catches the operations of the other class (\"delegating\").\n\nInheritance:\nAdvantage: New functionalities are easy to implement in the subclass\nDisadvantage: If you change sth. in the parent class you may have to change the subclass\n\nDelegation:\nAdvantage: it more flexible than inheritance\nDisadvantage: You always have to create a new object which could be inefficient\n\nExample regarding smartphone:\nInheritance: If a company produces more than one model of smartphones they could have one basis as parent class. Based on this class, the different models can then have different quality in terms of battery, material, ... by using inheritance. \nWhy use inheritance: You don't have to create each time a new object from sketch.\n\nDelegation: If smartphone user wants to execute an operation from it, e.g. he wants to connect to an URL, the smartphone (Receiver) receives the request and delegates it further to the servers.\nWhy use delegation: Because the servers executes the request finally",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595121,
      "meta": {},
      "text": "Unterschiede Inheritance und Delegation:\nBei Inheritance übernehmen Subklassen alle Methoden von der Oberklasse, indem sie die Superklasse extenden. Im Gegensatz dazu wird bei der Delagation eine Instanz von der Klasse erstellt, die man in seiner aktuellen Klasse benützen will, und ruft auf dieser die gewünschten Methoden auf.\n\nInheritance: \nVorteile: \nRelativ einfach zu implementieren, da Methoden schon von Oberklasse gegeben sind.\nIm Gegensatz zu Delegation von den meisten Programmiersprachen unterstützt. \n\nNachteile: \nEs werden womöglich unerwünschte Methoden von der Oberklasse übernommen.\nÄnderungen in der Oberklasse haben oft einen Effekt auf alle Subklassen.\n\nBeispiel: \nInzwischen gibt es einige Applikationen für soziale Netzwerke, die eine zweite App auf dem selben Gerät anbieten, beispielsweise für einen Zweitaccount. Da hier alle Funktionalitäten bis auf den Account selbst gleich sind, ist hier die Inheritance am sinnvollsten. Jede Änderung in der Hauptapp muss zwingend auch auf die Zweitapp übertragen werden. \n\n\nDelegation: \nVorteile: \nDie Subklassen müssen nicht jede Methode der Oberklasse übernehmen --> deutlich flexibler\n\nNachteile: \nIneffizienter, da eine neue Instanz erstellt werden muss und somit aufgrund des neuen Attributs mehr Speicherplatz verbraucht wird.\n\nBeispiel: \nApps, die auf andere aufbauen, jedoch nicht alle Funktionalitäten übernehmen. Ein Routenplaner hat eine Instanz auf eine Maps-Applikation, allerdings wird hier eine Instanz erstellt, da die Maps-App deutlich mehr Funktionen hat, die irrelevant für den Routenplaner sind.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5596312,
      "meta": {},
      "text": "Inheritance means that if Class B inherits from Class A, Class B will have EVERYTHING that Class A had (+ maybe his own attributes & functions). This would be perfect, if you want to just copy & extend Class A.\nHowever, if using Delegation, Class B would be independent from Class A, with the exception of having an instance variable of Class A, so that Class B can forward (\"delegate\") certain tasks via this variable over to Class A. This way, Class B doesn't have to take over everything from Class A.\n\nWhen developing a new phone whilst having a recently built prototype available, that has some of the wanted end-functionality already, I would choose to use Inheritance as the concept (even though technically you can't let a whole different phone inherit from a prototype, the basic principle still applies though), because i could just use the prototype & then further extend it to reach my endproduct. If I were to use delegation here, it would mean whenever i \"open up a calculator\" on my new phone, the \"calculations would still be done by the protoype\".\n\nHowever, If i want to implement an app that plays music I would have to use the phones speakers to do so. If I use inheritance to be able to get access to the speakers, I would have to expose the whole phone's base class, which means that the app would probably also gain access to camera, mic etc.Using delegation, I could use an instance of something that has access to the speaker & just basically call somethinglike \"useSpeaker\" so I wouldn't copy the whole base system.",
      "score": 33.3,
      "language": "ENGLISH"
    },
    {
      "id": 5583784,
      "meta": {},
      "text": "Inheritance uses the java compiler's type system to implicitly reuse code from the inherited class, and it is class-level in reusing the code. It also ties the child class into the hierarchy of inherited class.\nDelegation explicitly implements the callout and it is object-level in reusing codes of other methods. With delegation the calling class keeps its own hierarchy.\n\nInheritance:\nAdvantage:  It can access all the functionalities and attributes of the inherited class so it is more efficient in reusability than delegation.\nDisadvantage: A change in the inherited class will affect all the child classes. The coupling between inherited classes and child classes is higher than delegation.\n\nWhen the base class is Smartphone and other classes such as Android and IOS which need to reuse the code of Smartphone, the relationship should be inheritance. Because the classes Android and IOS need to copy all the methods and attributes of base class Smartphone. \n\nDelegation:\nAdvantage: The reused class can be changed without changing reusing class, which is more flexible.\nDisadvantage: Less elegant and efficient when it needs to reuse the methods and attributes of the whole class.\n\nWhen the base class is smartphone and the class which needs to reuse is Computer. It can reuse some functions of the smartphone but not all the functionalities and attributes. For example, when there is a method in smartphone openFiles() and it can be reused in Computer but not the method such as unlockWithFingerprints().\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5586388,
      "meta": {},
      "text": "Inheritance wird meistens im Zusammenhang mit Unterklassen verwendet. Hierbei wird die implementierte Funktionalität in der Oberklasse an die Unterklasse weitergegeben. Es wird die Funktionalität der Oberklasse wiederverwendet.\nEin Vorteil von Inheritance ist, dass es von vielen Programmiersprachen unterstützt wird.\nEin Nachteil ist, dass eine Änderung in der Oberklasse auch eine Änderung in der Unterklasse erzwingen kann.\n\nBei Delegation wird eine Operation durchgeführt, indem die Aufgabe an ein anderes Objekt weitergegeben wird, in dem diese Funktionalität bereits implementiert ist. Hier wird die Funktonalität eines anderen Objekts wiederverwendet.\nEin Vorteil von Delegation ist, dass es mehr flexibel ist als Vererbung.\nEin Nachteil ist, dass es nicht so effizient wie Inheritance ist, da eine Objekt-Instanz erstellt werden muss.\n\nVererbung wird zum Beispiel bei Smartphones verwendet, da immer, wenn ein neues Smartphone rauskommt dieses nicht immer von Grund auf komplett neu designt wird, sondern diese bauen immer auf das Vorgängermodell auf. Ich würde hier Vererbung verwendet, weil es sehr viel Zeit und (unnötige) Arbeit spart, da man nicht jedes Mal von Grund auf alles neu machen muss.\n\nDelegation wäre bei Smartphones zum Beispiel Google's Firebase Cloud Messaging. Firebase Cloud Messaging ist eine plattformübergreifende Messaging-Lösung, mit der zuverlässig und kostenlos Nachrichten gesendet werden können. Mit Google's Firebase Cloud Messaging kann man eine Client-App benachrichtigen, dass neue E-Mails oder andere Daten zum Synchronisieren verfügbar sind. Dieses Feature (oder genauer gesagt API) wird von Google zur Verfügung gestellt und wird von vielen anderen Firmen verwendet, um zu prüfen, ob neue Daten zum Synchronisieren da sind. Hier würde ich Delegation verwenden, da es mir viel Arbeit spart, da ich einfach die vorhandene Funktionalität (die Google zur Verfügung stellt) nutzen kann.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5590040,
      "meta": {},
      "text": "Inheritance is when the child class inherits or overrides functionality of its parent.\nDelegation is passing the exicution of a method to another object, outsourcing so to speak. Inheritance and delegation are similar in that they both use the functionality of another object, but how they use it is the difference. Inheritance includes or changes the other objects implementation while the delegation simply reuses it.\n\nInheritance provides an opportunity to easily extend and override the implementation on the parent, but also exposes some unwanted parts of the parent and possibly farces the child to change woth the parent.\nDelegation allows for flexible and quick functionality outsourcing, calling a method in another object while staying outside its hiarachy. On the other hand it's both a possible bottleneck and is another new object that needs its space in the memory.\n\nInheritance can describe the process of evolving functionality in each generation of smarphones. Every smartphone is its predicessor and more, often even better, faster, but somewhere it its core it may use legacy code from the very first iteration, also inheriting its weaknesses.\nDelegation is more similar to the use of online servies by on-client apps and OS, simply delegating the exicution to the already implemented function on the server, usable over all generations.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595606,
      "meta": {},
      "text": "Inheritance is when the process, where one class takes the property of another class, for example. the classes, take over attributes, and behaviours of the class. Delegation is simply passing a duty to someone else. Delegation means that we use an object of another class as an instance variable, and forward messages to the instance. It is better than inheritance for many cases because it makes us to think about each message we forward, because the instance is of a known class, rather than a new class, and because it doesn’t force us to accept all the methods of the super class: we can provide only the methods that really make sense. Inheritance is better than delegation in a case where we don't need to rewrite our code for a method, when it already exists in the parent's class, since it already has methods from the parent's class. \n\nIn a smartphone, we can say that delegation is like using a QR code scanner. Inheritance is a filter in the camera.",
      "score": 50,
      "language": "ENGLISH"
    },
    {
      "id": 5596258,
      "meta": {},
      "text": "Inheritance means that a class inherits all methods etc. of the class it is extending, so all method calls would remain inside the class, whereas delegation redirects method calls to another object. With inheritance, existing code is reused, which leads to less development costs. On the other hand, using inheritance at too many places leads to high coupling which should be avoided. When discussing delegation, a disadvantage could be latency caused by forwarding the method calls. However, delegation leads to low coupling and enables the implementation of e.g. a Proxy. \nIn the Smartphone space, an example for inheritance would be comparing iOS and Android smartphones. Even though they are different phones, they still inherit from the same class of \"phones\", since both are roughly able to do the same things. \nFor delegation an example would be cloud gaming on smartphones. All inputs are forwarded to a cloud server, which then displays the gameplay on the screen.  ",
      "score": 50,
      "language": "ENGLISH"
    },
    {
      "id": 5586465,
      "meta": {},
      "text": "Inheritance is referred to as a whitebox reuse approach, as it creates a new subclass which extends an existing class. The new class can offer additional functionalities but also all functionalities of the super class. - An advantage of this approach is transparency in the code, as the classes need to be known in order to inherit from them. It is easy to apply this concept and easy to add new functionalities in the subclasses. \n- However, the disadvantage is, that all functionality of the superclass is exposed, also unwanted features, and changes in the superclass force the subclass to change as well. \n- An example where this is useful in the smartphone-context would be different subclasses for different types of applications, and different OS-related functionalities, as this is related to the backbone of the system and transparency and high performance are crucial.\n\nDelegation is a blackbox reuse approach, as it only uses the offered interfaces of classes implemented somewhere else, without transparency of the source code. Usually an object instance of the foreign class is created in the new object, on which functionalities are applied.\n- This approach is very flexible, as it means relatively high independence of the other classes, enabling more free design choices\n- However, this can also mean less performance, as object instances need to be created, requiring space and processing power. Further, blind independence can have legal implications if not correctly evaluated\n- an example in the smartphone-context would be the development of a chat-app interacting with a server, where open-source code frameworks for servers are used to delegate tasks like connecting and sending messages. In this example high performance is not of utmost importance rather than easy implementation and focus on an appealing user interface.",
      "score": 75,
      "language": "ENGLISH"
    },
    {
      "id": 5588125,
      "meta": {},
      "text": "Inheritance causes the subclass to inherit all attributes and methods from the parent class, whereas in delegation, existing methods in other classes are used through object instantiation. \nAn advantage of inheritance is that it is supported by many programming languages, for example java, c++ or python. A disadvantage of inheritance is that unwanted methods may potentially exposed. For example if we use inheritance from the ArrayList class to implement a queue, the queue will have the method add(int index, E element) which will make it possible to insert elements to the middle of the queue - this, however, should not be possible. \nAn advantage of delegation is flexibility - the programmer can choose which methods exactly will and will not be used and is not forced to have methods that are unsuitable. A disadvantage of delegation is that it is less efficient that inheritance, since an additional object has to be created in order to use the methods of the class.\nAn example for inheritance may be that the class Iphone is a subclass of Smartphone and iherits all its methods. This makes sense because an Iphone is  a Smartphone and therefore has all the functionalities of a smartphone. \nAn example for delegation could be that a Smarthone class delegates some of its photography-related methods to a Camera class. I would use delegation in this case because a Smartphone does provide some functionalities of a camera, such as taking photos, but a camera is more specialized for this task and has more methods, that a Smartphone doesn't have, for example adjusting shutter speed.\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5588756,
      "meta": {},
      "text": "Inheritance means, that you create a subclass of a class that inherits all the methods of this class.\nWith delegation you create an instance of a class that you use so you can only use the methods that you need.\n\nInheritance\nAdvantage:\nIt is easy to use and you can easily add new functionality in the subclass without having to rewrite the whole method.\n\nDisadvantage:\nIt inherits all methods in the subclass, also unwanted behaviour that souldn't be usable in this class.\n\nDelegation\nAdvantage:\nYou don't need to accept all the methods of the super class and can only provid the methods that really make sense.\n\nDisadvantage:\nAn instance of the class has to be created which could be less efficient then inheritance of the methods.\n\n\nSmartphone examples:\nIf you take iOS for an example, there are iPhones with faceID and touchID so you can't use inheritance because then you could try to use faceID on an iPhone with a fingerprint sensor which would lead to an error. Delegation can avoid this problem by only offering the right services.\nInheritance is good for features like notifications that are always the same, so apps can implement them and easily add features if they want, but all methods that are inherited are also relevant.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5588852,
      "meta": {},
      "text": "The difference between inheritance and delegation is that delegation works by sending a signal to an object of another type to carry out a particular functionality that it has already implemented. On the other hand inheritance involves two or more hierarchies of classes in which a subclass may reuse the methods of a superclass (abstract or concrete ones). Delegation reuses functionality through up to three objects (client, sender, receiver) while inheritance reuses a superclasses' functionality through an object of a subclass.\n\nThe advantage of inheritance is the ease of use in multiple programming languages while a drawback is the fact that subclasses become dependent on the functionality in the superclasses. The dependency on a superclass means that any changes to it are reflected in the subclass.\nThe advantage of delegation is the flexibility of the decoupling between the catching of an operation and carrying out of the operation. One disadvantage that this poses is the inefficiency of having multiple objects.\n\nA class \"Message\" could be a superclass to the subclasses \"SMSMessage\" and \"WifiMessage\" because the subclasses reuse all functionalities of \"Message\" (eg. replying and emoji reactions) except for the color of the message and the way that the message is sent.\n\nA class \"ParentalControl\" (receiver) would be the receiver of a call from \"ScreenTime\" (client) when a child's screen time has exceeded a limit which is when \"AppLimit\" is delegated to obstruct the use of apps for longer. Delegation is suitable because \"ParentalControl\" has a set purpose for controlling child usage and avoids \"ScreenTime\" falsely using \"AppLimit\".",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589200,
      "meta": {},
      "text": "In inheritance, methods of the superclass are passed on to the subclass. This makes it easy to implement functionalities in several subclasses at the same time, but it also makes it easier to spread errors.\n\nWith delegation, on the other hand, the methods are specifically placed in another class. This has the advantage, for example, that it is now possible to debug specifically. Unfortunately, another instance must be created for this, which costs performance.\n\nIf you look at today's smartphones and their apps, for example, I would create a superclass Icon for the icons and then let the apps and widgets inherit from it. both need functions such as uninstalling or app info. both should be movable but have different sizes. Only the widget should be variable in size.\n\nHowever, if we consider the network connection, a delegated system is better. not every programme should have to set up its own wifi connection. for this, the operating system itself should provide a connection that offers methods for setting up the connection or to simply disconnect.\n\n",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5592846,
      "meta": {},
      "text": "Both ineritance and delegation are used during object design to reduce code duplication, but while Inheritance uses Polymorphism to define and reuse an objects attributes and methods, Delegation archieves basically the same funtionality by creating an object with the desired attributes and referencing it in another object.",
      "score": 16.7,
      "language": "ENGLISH"
    },
    {
      "id": 5593554,
      "meta": {},
      "text": "Inheritance of classes extends the functionality of the superclass by creating new functions or overwriting already given functions. This has the advantage that it is relatively easy to understand and implement, but the disadvantage that it exposes some (maybe unwanted) methods and/or attributes. I would use inheritance in smartphone apps when I am for example programming an app that works with multiple animal species.\nDelegation, on the other hand, does not inherit from the superclass, but has it stored as an attribute. This solves the problem of inheritance mentioned earlier: exposure of methods and/or attributes. But it has the disadvantage that it can be more inefficient and has more overhead than inheritance. On a smartphone I would use delegation if I want to program my own camera app, but the user is only allowed to take photos and not videos. Therefore my class does not inherit from the official camera app, but has an instance of it. Otherwise the user would also have access to the video functionality.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594090,
      "meta": {},
      "text": "When using inheritance, you most commonly want to expand the functionality of the inherited class by custom features. As such, the freedom of overwriting or exchanging certain parts of the code in the subclass is very useful (and easier to do when compared to delegation). But something to consider is that all exposed functionality from the superclass will also be exposed in the subclass, which is often undesirable.\nIn the context of smartphones an example where inheritance would be better is the hardware of the phones itself: Assuming that you only want to manufacture the phones itself but not all of the parts, you should obviously choose to implement (extend and override functionality of) the components instead of adding your own which only relay work to other parts.\n\nWhen using delegation on the other hand, the goal is often to restrict which features of the receiver should be accessible. The delegate can directly (and more easily than when using inheritance) monitor and even change what is passed to the receiver and how the response should be encoded, parsed, processed, etc. But this approach is also not without its disadvantages. For example, every time you create an object that uses delegation, you actually create two objects: the delegate and the receiver. This can cause significand overhead.\nIn the context of smartphones an example where delegation would be beneficial is authentication in apps: it does not make a lot of sense to force every app to implement their own authenticator, instead offering a systemwide authenticator (like the google login) to whom requests can be delegated to improves security and ease of development.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595837,
      "meta": {},
      "text": "Inheritance is a model technique. It is used when one wants to \"copy\" the base class. But the inherited operations might exhibit unwanted behavior. An advantage would be, that it is straightforward to use. In a smartphone-context, inheritance could be used to structure a offline application and re-use parts of code of a similar application. \n\nDelegation is a behavior. It is used, when one wants to \"copy\" the base class' functionality. That means, the functionality of an object is re-used. Generally, one is more flexible by using delegation in comparison to inheritance. On the other side, it is quite costly and thus might not be efficient because an object instance needs to be created. In a smartphone-context, delegation could be used to access costly operations (e.g. storing data) of an app by using e.g. cloud storage for computation. \n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596348,
      "meta": {},
      "text": "Inheritance allows to reuse the functionalities from the upper class, which can additionally be changed and extended.\n\nThere are two different goals for inheritance in software engineering: \n\n-The first one is to describe taxonomies, which help the programmer in identifying of application's domain objects, which are hierarchically (upper- and subclasses) related with each other. This is mainly done during analysis and elicitation of the requirements, which leads the programmer to write the code, which is understandable for everybody. The more the UML diagram gets down, the more specialized the class gets. \n\n-The second goal is to specify interfaces during object design. This is done by specifying signatures, visibilities and/or return types of all the methods in order to understand what is the public interface to the outside world of each class. \n\nPro: That helps  to increase the reusability and enhance the extensibility. \nCon: Inheritance should only be done if the code can be substituted to Liskov's Substitution Principles\n\nHere I would use iPhone as an example. There is iPhone 13, which has many same functionalities as other iPhones, but has new functionalities, like reading a live text from an image.\n\n\n\nDelegation in general means that we reuse the code not by inheriting it, but  by sending a request on another class and invoking a method on an object of that class. Therefore the implemented functionality is part of an existing object. (Client->Receiver->Delegate)\n\n\nPro: Client can't misuse the delegate and cant invoke methods, which should be publicly available to the receiver\n\nCon: sometimes need more objects to be created which makes the operations slower and inefficient",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5586466,
      "meta": {},
      "text": "The main difference between inheritance and delegation is that inheritance extends a base, class by a new operation or overwrites an existing operation. Delegation, on the other hand, catches an operation and sends it to another object. While inheritance is more straightforward to use, supported by many programming languages and enables easy implementation of new functionality in the subclasses delegation offers more flexibility. The downside of inheritance is that it comes with some (unwanted) methods of the parent class and changes in the parent class can force the subclass to change as well. However, delegation is also more inefficient, because an object instance needs to be created. \n\nTo exemplify the mentioned aspects of inheritance and delegation we take the Smartphone app Trade Republic as an example. \n\nA class \"Financial Products\" is created and subclasses such as stocks, options... inherit basic attributes and methods such as name, price,... from financial products. The downside now is that every financial product needs to have a name and a price. \n\nAn example of delegation would be the authorization process where a picture of the passport needs to be uploaded. After clicking on the take picture button the app delegates the operation to the phone system and uses the functionality of the phone camera. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589258,
      "meta": {},
      "text": "Whereas inheritance describes a is-a-relationship, delegation describes a has-a-relationship. \n\nInheritance means if superclass is a generalization of the descending class and does all that the other class do. One can also describe as sub-classes taking over attributes and behavior of the superclass. Ease of maintenance is an advantage of inheritance. When the requirements specification is stable enough and if you are not required to make elaborate changes in the parent classes which could possibly fail things everywhere else, a change in the parent class cascading to all its descendants could be a useful feature. In the other hand amount of method overriding has to be done can easily become a burden and time consuming, overriding nearly every method with a functionality that is non similar to the parent is descending classes. Also creates strong coupling between classes. I would use CommunicationDevice as a superclass and Smartphone and PoliceRadio classes as child classes. Which they all have a receiveCall() method but other than that also different methods which specify their different features.\n\nBy delegation one use an object of another class as an instance variable and forwards certain method calls to another object. As you delegate you call up a class what must be done and don't care how it does ist(blackbox), you rather care if that the class you are calling knows what it needs doing. Mostly useful  when doubting to use abstract class or the interfaces. An advantage of it is the runtime flexibility, delegation can be easily changed at runtime. Also helps for code reusability and code duplication but eliminating code duplication creates dependencies in classes which is not really wanted. I would create a  class interface Smartphone and classes aggregating it iPhone, SamsungPhone, HuwaeiPhone with the SmartPhoneController Class using all makeACall() method. That way the coupling  would be reduced of methods to their class. That way it would make clear that they are components that behave identically, but that this situation can change in the future.\n \n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589562,
      "meta": {},
      "text": "THE DIFFERENCE BETWEEN INHERITANCE AND DELEGATION:\nA different approach from what we have seen from the lecture, to explain the difference between inheritance and delegation can be that inheritance has the \"IS-A\" relationship, whilst delegation has the \"HAS-A\" relationship. In delegation we need to have an object and we send the operation to the object (client->receiver->delegate as we have seen). In inheritance, its straightforward and we can directly use, override the already existing operations as we have seen. \n\n-DELEGATION-\n\nADVANTAGE:\nIt allows \"dynamic binding\" and is  more flexible in general. \n\nDISADVANTAGE:\nA big disadvantage can be the fact that we need to create an object instance firstly. In the lecture we mentioned this disadvantage and how \"inefficient \" it is, is a key word from the lecture. \n\n-INHERITANCE-\n\nADVANTAGE:\nAs we  have discussed in the class, inheritance is more direct/straightforward to use, when we compare it with delegation because as i mentioned in the disadvantge for delegation, we need to create an object instance first. Here this in not the case\nDISADVANTAGE:\nEven though it is more straightforward to use, we should take into consideration that because of the inheriting, some methods etc. that are not wanted  can occur. For example child class inherits from parent class, and maybe some functionality/method is unwanted but they can show up due to the inheritance. \nSMARTPHONES EXAMPLE FOR INHERITANCE:\nI mentioned the IS-A relationship for inheritance. Iphone13 is a SmartPhone, SamsungGalaxy is a SmartPhone. I can create some common functionality for SmartPhone and make use of override, and SmartPhone would be a parentclass, the others would be child classes. \nSMARTPHONES EXAMPLE FOR DELEGATION:\nFor example  i mentioned the HAS-A relationship for delegation. A smartphone has a screen, has a button , has a frontcamera etc. An object like SmartPhone would need to be created. \n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594745,
      "meta": {},
      "text": "During object design, the activity Interface Specification is used to accurately describe every class interface. This involves inheritance and delegation. Inheritance refers to the creation of subclasses that resuse and possibly extend the superclass's functionality, with the superclass being either an implementation or a specification (interface). On the other hand delegation utilises instantiation and method calls with with existing objects to reuse their functionality, involving a client, receiver and delegate in the process. In general, delegation is more flexible than inheritance but it can also be more inefficient as new object instances have to be created. On the other hand, inheritance is very simple and can be achieved in many programming languages and it is also easy to implement new functionalities for subclasses. However this process can reveal some unwanted information of the parent class, and the subclass might need to change anytime the superclass is changed. As an example of delegation, many smartphones have the capability to pay digitally (eg. Apple Pay), and this could be achieved through delegation when one application (client) calls a receiver to delegate the payment process to the payment application. This would make the sense because many applications/websites would require this functionality but would not fit as subclasses of the same parent class. An example of inheritance could be an email application and its various inboxes. The general inbox could be a superclass with other more specific inboxes being subclasses with extended functionalities on the parent class. This would allow emails to be marked as read, archived etc. but also for more specific capability such as moving email from spam to general inbox, permanently deleting emails in the trash inbox etc. This easily-implemented extended functionality makes it a good choice for this concept.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595677,
      "meta": {},
      "text": "Bei delegation wird die Aufgabe an eine andere Klasse weitergegeben, da sie dort schon implementiert ist. Ein Vorteil ist, das dadurch nichts neues implementiert werden muss, allerdings lässt sich dadurch nur schwer eine andere Funktionalität für verschiedene Fälle implementieren.\nBei Smartphones zb. wenn ich im Browser eine Telefonnummer auf einer Website finde, kann ich die manchmal anklicken um dort anzurufen. Dann wird der Anruf bzw. die Telefonnummer an die Telefon App weitergeleitet.\n\n \nBei inheritance hingegen wird die bereits implementierte Funktionsweise in einer Unterklasse übernommen und dort ausgeführt. Der Vorteil dabei ist, dass die Unterklasse weiter auf das Problem zugeschnitten werden kann. Der Nachteil ist, das für einen Funktionsweise eine ganze neue Klasse erstellt wird, was zu einem großen Speicherverbrauch führen kann, wenn man das sehr oft anwendet. \nAls Beispiel kann man hier die Uhr-App und die dazugehörige Wecker Funktion nennen. Der Wecker selber ruft auch die Zeit ab aber hat noch die Funktion zu klingeln. \n",
      "score": 91.7,
      "language": "GERMAN"
    },
    {
      "id": 5595793,
      "meta": {},
      "text": "Delegation: reuses implemented functionalities of existing objects through instantiation\n\tAdvantage: Delegation is more flexible compared to inheritance\n\tDisadvantage: delegation can be inefficent because it needs to invoke objects\n\tExample: If you want to model how a smartphone is assembled you should use delegation because it \t\t \n \t\t       consists of many different parts (display, buttons, battery, processor, etc.) and uses the \n \t\t       functionalities of these existing parts, therefore delegation is the right concept to choose.\n\nInheritance: reuses a speciﬁed or implemented functionality from a super class (a subclass is extending a parent \t \t\t \n \t\t    class)\n\tAdvantage: easy to implement and straightforward\n\tDisadvantage: if a signature of a parent class is changed all subclasses have to be recompiled\n\tExample: If you want to model the different version of a smartphone, e.g. the versions of the iPhone 13 you \t \n \t\t       would have the normal iPhone 13 (which can be further specified to iPhone 13 Mini) and the iPhone \n \t\t       13 Pro (which can be further specified to the iPhone 13 Pro Max). Inheritance makes sense because \t\t \n \t\t       every 'subversion' shares a lot of similarites with its 'superversion'",
      "score": 100,
      "language": null
    },
    {
      "id": 5596018,
      "meta": {},
      "text": "Bei delegation kann man eine existierende Klasse benutzen, um eine neue Klasse zu erstellen und auch die Methoden der existierenden Klasse benutzen. Bei inheritance hingegen kann man war auch die Methoden wiederverwenden, aber auch neue Funktionalitäten hinzufügen oder auch Methoden überschreiben.\nEin Vorteil von delegation ist, dass man die existierende Klasse leicher und flexibler einbinden bzw. benutzen kann. Aber es ist etwas ineffizienter, weil man ein extra Objekt instanziieren muss.\nBei inheritance kann man leicht die Funktionalität erweitern und bzw in Unterklassen Objekte zu spezialisieren. Ein Nachteil ist, dass man manche Methoden aus der existierenden Klasse eigentlich gar nicht haben möchte.\n\nWenn man zum Beispiel ein kleines Programm schreiben will, dass verschiedene Smartphones simuliert, sollte man am besten inheritance benutzten, da Smartphones alle WLAN, Bluetooth, einen An/Aus-Schalter etc. haben. Diese Funktionalität kann man einfach erben und spezielle Funktionen, wie zum Beispiel ob ein Smartphone face id hat oder ob man mit dem Smartphone auch Radio hören kann, kann man dann bei spezifischeren Modellen hinzufügen.\nWenn man zum Beispiel Funktionen zu einem Smartphone hinzufügen möchte, wie eine App, dann wäre es Sinnvoll delegation zu benutzen, denn ein Smartphone hat sehr viele Funktionen, die vom Betriebssystem bereitgestellt werden, die man aber gar nicht alle braucht oder nutzen möchte. Zum Beispiel braucht man für ein einfaches Sudoku Spiel kein Mikrofon oder die Kamera.",
      "score": 75,
      "language": "GERMAN"
    },
    {
      "id": 5587382,
      "meta": {},
      "text": "Inheritance means that one class is derived from another already existing class. The child object has all the properties and methods of the parent object, but can also have its own properties and methods. An advantage of inheritance is that it allows code to be reused. A disadvantage of inheritance is that it can generate a lot of unnecessary code. \n\nDelegation means that an object takes over the tasks of another object. The delegated object has a reference to the original object and can access its properties and methods. An advantage of delegation is that it is more flexible than inheritance. A disadvantage of delegation is that it can lead to strong coupling between objects. \n\nAn example of inheritance in the context of smartphones would be if there was a parent Phone class and child classes for each phone type. The advantage would be that the child classes would inherit the properties and methods of the parent Phone class. So if every Phone has a charging port, it only has to be declared once in the Phone class. I would choose this concept, because most phones have a lot of features in common and these common features can be summarized in a parent phone class.\n\nAn example of delegation in the context of smartphones would be if the classes for the different Phones had to use a specific feature that only that Phone had. For example the IPhone would use a FaceID feature. Then it would call methods in a FaceID class that would handle authentication etc. I would choose this concept when there are special features to a class that only that one class needed.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589539,
      "meta": {},
      "text": "Inheritance is the process when a class takes the properties of another class by mean of \"implements\" in Java where the inhereting class is called child class whereas the other class that passes its attributes and behavior (methods) to child class is called super/parent class.\nDelegation in the other hand can be a substitute of inheritance but its in this case an instantiation of a class in another class where the instance is called here delegator. And like its name says it's basically the process of \"delegating\" a responsibility or task to someone/something else.\nA major advantage of delegation can be run-time-flexibility , since the delegation is really easy to change during the run-time. A disadvantage of delegation could be that it doesn't facilitate dynamic polymorphism whereas the inheritance does but the inheritance forces the child class to take all methods and attributes of the parent/super class while delegation doesn't.\nLet's now take an example of the smartphones world so we can understand more the concept:\nlet's say we have a smartphone company that want to create a new version of a smartphone that has all proprieties of the old version but adds to that some new features that users could like. In this case since we want to take all features of the class of the old phone we can use inheritance and add the wanted features to the new class. \nNow , let's take another example, a company wants to create a new phone with new design and features but it doesn't want to create it all from scratch since this smartphone has some basic features already created on some \"implemented\" smartphones , here we use delegation so we can instantiate the old smartphone in the new smartphone class and take the basic functions from it.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593916,
      "meta": {},
      "text": "Inheritance:\n- Description: Reuses a speciﬁed or implemented functionality from a super class and may offer new functionalities.\n- Advantage: Straightforward to use; supported by many programming languages; easy to implement new functionality in the subclass.\n- Disadvantage: Changes in the parent class can force the subclass to change as well; with implementation inheritance, the inherited operations may exhibit unwanted behavior; \n- Example: One example would be the new generation of iPhone (iPhone 13) has inherited the functions from the previous generation (iPhone 12) and maybe added new functions. New camera function such as the Movie Mode feature focuses on the subject while blurring the background.\n\nDelegation:\n- Description: Reuses implemented functionality in an existing object using object instantiation and method calls.\n- Advantage: More flexible, because any object can be replaced at runtime by any other.\n- Disadvantage: An object instance needs to be created, might be more inefficient.\n- Example: To send a photo from an iPhone owner to a person that is either not near the photo owner or not a iPhone user (cannot use Airdrop), the iPhone owner can delegate the photo sharing function to other apps, such as by mail or by social media like WhatsApp.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596081,
      "meta": {},
      "text": "Delegation is different to inheritance in the way how they interact with the object they are trying to incorperate into their implementation.\nWhile inheritance gains access to all the public and protected members of the superclass, in delegation the receiver only has a reference to the delegate-object. So access is enabled and also limited by appropriate functions in the receiver.\n\nAn advantage of delegation is that the underlying implementation is very independent and can easily be replaced and adapted.\nA disadvantage of delegation is that there is no direct access but rather a request has to be routed through a seperate object, which in return has to be created.\n\nAn advantage of inheritance is the great possibility of reusing already implemented code. This is also known as white-box reuse.\nA disadvantage of inheritance would be the fact that the inherited implementation inheritance might exhibit unwanted behavior, e.g. a stack imlemented by inhereting from a list exposes elements that should not be accessible in a stack.\n\nWidgets on your phone are an example for a good use case of inheritance. Since they all follow the same baseline of behaviour (location, size, asset), a newly created widget can inherit all the features of a base widget and add onto that implementation by for example adding a hyperlink to a weather widget, which redirects the user to their preferred weather forecast-website.\n\nAn app sending push-notifications to the user can be realized by delegating the message to the phone OS. This is necessary for the app to work independantly of both the phone OS itself its version.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596361,
      "meta": {},
      "text": "Inheritance: Extends a base class in order to get the elements and methods of the base class.\nDelegate: An object needs the function of another object, so the object is captured and sent to another object to make a function call.\nDelegation can be seen as an object-level reuse whereas inheritance is a class-level reuse.\nIn addition, if the subclass only needs to reuse a small part of the methods in the parent class, it can be achieved through the delegation instead of using inheritance.\nDelegation is generally more flexible. In contrast, inheritance exposes some (unwanted) methods of the parent class，and changes in the parent class will also force the child class to change.\nBut delegation might be more inefficient, because an object instance needs to be created. And,  inheritance is simple to use and easy to implement new functionality in subclasses. And also inheritance supports multiple programming languages.\nFor example, a thing (or a request) object does not know how to handle it, and the object passes the request to other objects to do. Then we use delegation.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596364,
      "meta": {},
      "text": "When using Inheritance to create a new class, the new class takes over every method / attribute of the superclass (depending on access modifiers). This means it is possible to use the whole functionality of the superclass. It is useful, if there is a hierarchy, where the new class is a specialization of the superclass. An example would be a class smartphone, where iPhone, Samsung Galaxy and Xaomi Lite are subclasses of the superclass smartphone.   In this case it is easy to use, as you can inherit the existing functionality and easily extend it. But in case there is no clean hierarchy between the classes, inheritance can be a problem, if the subclass offers the whole functionality of the superclass by default, whereas the subclass is not supposed to offer some of this functionality. \nWith Delegation you would take the previous superclass and just instantiate an object of it in your previous subclass. Depending on access modifiers, you can use the whole functionality of the instantiated class, just like with inheritance, but contrary to Inheritance, your class does not offer the whole functionality by default, rather you can decide on it. That way, you're more flexible when using functionality of a different class. But a system that uses lots of delegation might be harder to understand than a system structured by the hierarchy of Inheritance. An example for delegation would be a smartphone class, that instantiates a camera class, a display class and a speaker class and uses some of the functionality of these classes, but e.g., not the x50 zoom of the camera, because the smartphone has no x50 zoom. It is obvious that smartphone is not a specialization of camera and camera not a specialization of smartphone, too, so there is no clear hierarchy between the two.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589043,
      "meta": {},
      "text": "Inheritance reuses a specified or implemented functionality from an existing class. This class becomes the superclass and the new class inherits the functionality from superclass. While delegation looks at the existing object. It reuses the functionality from an existing object.  \n\nThe difference between inheritance and delegation is that inheritance takes the functionality from superclass and delegation reuses the functionality from an object. \n\nInheritance is easy to use and implement but the disadvantage is that change in superclass or parentclass forces the change in the inherited class. Delegation is more adjustable but disadvantage could be that an object needs to be created. \n\nSpecification inheritance would be if iOS and Android inherits from superclass mobilePhones. We have a hirarchy here that is why I would use the specification inheritance. \nImplementation inheritance can be used if you want to reuse the code. As an example we have Music as a class and different MusicApps inherit from Music class. Here we inherit because we want to use the functionality like playSong(), endSong().... that I would choose implementation inheritance, there is no hirarchy. \nA good example for Delegation could be that the PhoneUser (=class) calls the method selectMusic, this method uses delegation to invoke the playMusic in class MusicApp. From interface MusicApp different MusicApps inherit.  ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593693,
      "meta": {},
      "text": "Inheritance is when one object is a subclass of another and inherits its behavior. Delegation is when one object forwards requests to another object to handle them. An advantage of inheritance is that it is easy to reuse code. A disadvantage is that it can create tightly coupled code. An advantage of delegation is that it can lead to more flexible code. A disadvantage is that it can be more difficult to understand the code.\n\nAn example of inheritance in the context of smartphones would be if there was a base class of Phone and then two subclasses, iPhone and Android. An advantage of this would be that the Phone class could contain code that is common to both iPhone and Android objects, and the subclasses could override behavior as needed. A disadvantage might be that if the Phone class changed, the subclasses would need to be updated as well.\n\nAn example of delegation in the context of smartphones would be if an iPhone had a delegate object that handled requests to access the camera. This would be advantageous because it would allow the iPhone class to be more flexible, and the camera code could be reused for other delegate objects. A disadvantage might be that it would be more difficult to understand the code since the iPhone class would need to know about the delegate object and its methods.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5595686,
      "meta": {},
      "text": "Delegation and inheritance both \"help\" to reuse functionality that already exists.\nDifference: Inheritance is used when you want to \"inherit\" the methods of s super/parent class to a childclass. The childclass can still possess its own implementation of the methods that have been declared in the parent class or also possess its own attributes/methods. Delegation on the other hand means that an object of a class is an \"instance\" that forwards a specific method to another object that acts as a delegate/receiver. \nInheritance: \nAdvantage: It avoids code duplication + you have a clear structure/hierarchy. It also makes code changes more flexible (one place to change). \nDisadvantage: The super & child class are highly intertwined and bound to each other, ie you cannot use them independently. You also need refactoring if the superclass eg gets deleted.\nExample: There's a superclass \"Mobile data connection\" from which the mobile connections (eg LTE, Edge (cellular standards)) inherit similar functionalities but still differ in many parameters (ie connection, speed).\n\nDelegation: \nAdvantage: It doesn't \"force\" an object to take over all methods defined in a superclass. \nThe client has to know only the receiving end and not the delegate, thus it also offers more run-time flexibility than inheritance. \nDisadvantage: You have a lower extensibility and long chains of delegation lead to a lower inefficiency. \nExample: When you want to share a photo in your smartphone gallery, you click on the \"share button\" and a number of applications (eg WhatsApp, Email,...) appear to which you can delegate the function of sharing. The actual sharing is then done in the \"send function\" of eg Email application. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5584684,
      "meta": {},
      "text": "Using inheritance, a base class can be extended with new operations or existing operations can be overwritten. Using delegation, an operation is caught by a receiver object and sent to another delegate object, which executes the request. The difference is that in the first case a new subclass is created and the functionality of the base class implementation is reused and extended, while delegation always creates a new object instance whose functionality can be freely defined.\n\nAn advantage of delegation is that it is generally more flexible. However, a disadvantage might be that it may be more inefficient, by requiring the creation of a new object instance.\nAn advantage of inheritance is that it is very easy to implement new functionality in the subclass. A disadvantage is that unwanted methods of the parent class might be exposed.\n\nWhen developing a new smartphone game, it might be a subclass of a base class 'Application', as it should implement functionalities from the base class such as push notifications, app-icon, etc., and might extend them with e.g. specific game features. Therefore, inheritance should be used.\nWhen using a specific smartphone app, functionalities will be delegated within the MVP pattern. For example, when starting the app, a 'Start' class might delegate to a 'View' instance, to change the user's view. As there are no parent-child relationships and no methods from the other class should be exposed, delegation should be used to keep the separation within the MVP pattern.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5586472,
      "meta": {},
      "text": "Differences & example:\nEin MusicPlayer in einem Smartphone ist eine Klasse. Der MusicPlayer kann ganz old school Radio über den Antennenempfang am Handy abspielen. Des Weiteren kann der MusicPlayer über das Internet gestreamte Musik (StreamingPlayer) und selbsteigespeicherte MP3 Dateien (MP3Player) abspielen. Der StreamingPlayer & MP3Player sind Unterklassen vom MusicPlayer - z.b MP3Player is_a MusicPlayer. Die Unterklassen sind spezieller und erweitern mit einer speziellen Funktion(InternetStreaming / MP3) die Oberklasse MusicPlayer - stehen in einer Vererbungshierarchie zueinander.\n\nBei der Delegation hingegen wird eine Operation an ein anderes Objekt weitergegeben. Im Kontext vom Smartphone gibt es eine zentrale Steuerungseinheit, welche Inputs entgegennimmt und weiterleitet. Beim Auslösen der einzelnen Funktionen im Smartphone (z.b. Musik abspielen, Messenger öffnen...), leitet der Inputhandler nach Funktion die Operation an ein passendes Objekt als INSTANZVARIABLE einer andern Klasse weiter. Dort wird dann die Funktion ausgeführt. Hier erkennt man deutlich den Unterschied zw. Inheritance & Delegation. Beim MusicPlayer als Oberklasse müssen die Unterklassen alle Methoden der Oberklasse akzeptieren. Bei der eben beschriebenen Delegation wird die Operation an ein passendes Objekt weitergegeben ohne eine bestimmte Vererbungsstruktur beizubehalten.\n\nEin Vorteil der Delegation ist der hohe Grad der Flexibilität zur Laufzeit. Denn das Objekt als Delegate (als Instanzvariable) kann zur Laufzeit geändert werden bzw. ersetzt werden, wenn es der gleiche Typ ist. Beim Handy z.b kann zur Laufzeit die Energieeinstellung angepasst werden, wenn das Handy unter 20% Akku hat. Sprich wenn Handy unter 20% akku, dann wird die Funktion Hintergrundupdates nicht mehr über das Objekt XY delegiert sondern wird an das Objekt für energieffizientere Hintergrundupdates XYZ weitergeleitet - das kann während der Laufzeit gemacht werden.\n\nEin Nachteil von Inheritance ist, dass bei einer Vererbungshierarchie Änderungen an der Oberklasse automatisch auch Änderungen in den Unterklassen hervorruft, damit ist es nicht so flexibel und bei stetigen Änderungen im Verhalten müssen grob gesagt: bei der Abänderung einer Sache (z.b. Methode\noder das Handy wird jetzt auch mit mehr Megapixel in der Kamera entwickelt) der Oberklasse automatisch die Auswirkungen auf die Unterklassen (Klassen, die von der Änderung betroffen sind, z.b Speicher, Bildstabilisator) berücksichtigt werden und ggf. angepasst werden. Dieses Problem hat man (oben beschrieben) bei der Delegation nicht, da es eine flexiblere Struktur darstellt.\n\nNachteil Delegation: \nEin Nachteil von Delegation ist, dass man keine Vererbungshierarchie darstellen kann in Bezug auf Reusability. Es ist also somit keine Generalisierung (is_a Bez.) möglich. ",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5591621,
      "meta": {},
      "text": "Inheritance involves subclassing a superclass which gives access to its functionality. With delegation one delegated the operations to another object which implemented the required functionality.\n\nWhile delegation is more flexible, it can be inefficient because another object instance has to be created.\nInheritance has the advantage of being easy to use, but sometimes exposes to much of the superclass (e.g. methods of the superclass that the subclass does not or should not use).\n\nIf a component needs internet connection it should be modeled with delegation (delegating the network calls to a network component) since it should not have access to the all network settings and configurations but only be able to make well-defined requests.\n\nIf the UI has different types of buttons they can all inherit from a generic button class which defined common functionality like checking if the button was pressed and leaving details like the shape to be different for buttons. Delegation would overcomplicate things in this case.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5595213,
      "meta": {},
      "text": "Inheritance: \nthe subclasses of an Interface must to have all methods from the Father's class. Therefore we need to override  the methods that are needed.\nwe can easily add new functionalities to the subclass and at the same time will add to subclasses.\nwe could be able to reuse functionality from the superclass.\nAny changes in super class leads to changes in all subclasses.\nexample: when the  Apple's Firm will update or edit something wrong of  IOS operating system, then she just need to do the updates on the mean Interface of IOS operating system. Therefore will be excute on all IOS advices.\n\nDelegation:\n- is an object from another class, we can also invoke just the needed function from this class.\n- we could be able to reuse the functionalities of an exsiting object.\n- Flexible at run time but some programming languages do not provide this.\nexample: Apple needs just one new Feature or Funtion from Android opearing system, then she has just to delegate the needed Function by creating an object of  Android operating system class.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5584975,
      "meta": {},
      "text": "Delegation is when you instantiate an object of a class and delegate some functions of the current class to this object, thus not having to implement the same behaviour again.\n\nInheritance is when a class takes on the properties, i.e. methods and/or attributes, of a so-called parent class, and either uses them outright or overwrites some of the parent's behaviour and can also implement additional features.\n\nAn advantage of delegation is that one doesn't have to implement the same behaviour again, instead use an existing class and it's functions. A disadvantage is the performance overhead that is created through instantiation of an object and the calling of functions on this object that can be a problem in performance critical systems.\n\nAn advantage of inheritance is that when there are many classes with the same or similar implementation, one can create a parent class that will take on the similar feature, thus reducing the size of the source code. A disadvantage of inheritance is that sometimes calling methods of the superclass in the subclass can lead to unwanted behaviour.\n\n\n\n",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5589619,
      "meta": {},
      "text": "Both inheritance and delegation are ways to reuse existing methods/information from existing classes. \n\nDelegation is the black box reuse process of creating an instance of another class to use its functionality/call its methods. A major upside is the ability to control access to the class being used, but the downside is extra overhead of instantiating a new object. An example would be hardware/software methods available as classes for app developers to use, such as a camera class with methods to request access to the camera, take a photo/video, etc. This class would separately handle access to the phone camera and provide easy-to-use methods for the developer to implement whenever they need to.\n\nInheritance is the white box reuse process of subclassing from an existing class, making small modifications, etc. This can be more straightforward to implement and easy to implement new things. However, access and supportability can cause difficulties. An example would be creating a basic iOS/Android app template with methods to close and open the app, and perhaps things that provide access to hardware, such as the gyroscope and camera. This would make it easy to build a new app on an existing structure, but users could find ways to use (for example) the camera in unintended ways because some unwanted methods might be publicly exposed. A difficulty this might cause is when the parent loses some functionality that was used by the child, or the internal structure changes in a way that they're no longer compatible. \n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5592251,
      "meta": {},
      "text": "Inheritance, as used in many languages is a easy usable and the concept consists of one class taking property of another class, so a new class can take over attributes and behaviours of previously defined classes, that are also known as parent classes. An adavantage of Inheitance would be that it allows for active reuse, whilst a disadvantage would be the speed of the inherited functions being lowered as compared to the regular speed. Whilst delegation looks at giving the task to another class that is already programmed. It practically works in the way that obejects in another class are used as instance variables, towards which the messages are forwarded to, delegation doesn’t work with all programming languages and is not capable of dynamic polymorphism. An advantage of delegation would be the increased time managament to facilitate some tasks. \n\nThere are many scenarios that would consider either one or the other. For Inheritance, it would be smart on a smartphone when having apps, that some basic methods and attributes that all have, to use inheritance as it would avoid writing useless code. From another perspective, delegation, would for example be useful when opening the Calculator app on an Iphone, that when opening the app from the homescreen or from the menubar at the top, we always get the same calculator, in this case it is the same tool just in another spot, hence delegation makes sense!",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593066,
      "meta": {},
      "text": "Inheritance describes the process of creating a subclass of an already existing class that has all functionalities of its parent and only differs in a few aspects. On the other side, delegation only describes the process of making an object use an instance of another object (usually from another class), what means that not all functionalities can be used by the function that delegates its functionalities. \nOne advantage of inheritance is its easy implementation that usually only requires a keyword (e.g. extends). A disadvantage is the close connection between sub- and superclass that can lead to unwanted methods or attributes of the parent in the child.\nThe advantage of delegation is its flexibility that emerges from the loose connection between the two objects. Still, the fact that two object instances are required may lead to inefficiencies.\n\nIn case of smartphones, you can find delegation basically anywhere. For example, most services on our smartphones (like Instagram) delegate many functionalities to servers. This type of delegation is really important these days, because it allows us to disconnect the processing power and the storage of single devices and the actual functionalities of these devices.\nOn the other side, we can observe delegation by looking at the technology of smartphones. Since smartphones are basically children of normal telephones, they use inheritance to get all the functionalities we know from traditional telephones. This example shows use that inheritance plays a significant role in the development of new technologies and is a crucial aspect of today's society.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593930,
      "meta": {},
      "text": "Inheritance is when a class extends another class: it also has all the same members (attributes and functions) as the extended class, but can change their implementation or add new members.\nAn advantage would be the possibility to have an interface a user can use and an implementation class inheriting that interface class which actually implements those methods.\n\nDelegation is when a class has another class as an attribute and delegates method calls to that class.\nThe advantage of delegation is, that the class can choose which methods to expose and can intercept method calls to validate data for example.\n\nAn example for inheritance in the context of smartphones would be a class mobile phone, that defines a simple mobile phone, that can make and take calls and send and receive text messages. A class smartphone would then extend mobile phone, as it can do everything the mobile phone can do, but also more: it has computing functionality and more connectivity, which allows it to have a web browser and the user can download apps. This also shows that a smartphone is still a mobile phone.\n\nAn example for delegation would be the API provided by Android: when an app wants to access the camera, it cannot do so directly, but has to use the Android API. Android then checks if the application has been granted rights to access the camera. If it has, then it allows the access, otherwise it asks the user if the access is ok. This is to increase the security and privacy of users.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5594354,
      "meta": {},
      "text": "Inheritance is when one class takes the property of another class, which is called parent class. The new class, known as child class or subclass,  takes over the attributes and behavior of the already exiting class.\nDelegation uses an object of another class as an instance variable, and forward messages to the instance.\nBoth inheritance and delegation are used to avoid code duplication. The biggest difference between them is that, while Inheritance is hierarchal and leans towards polymorphism, delegation is not. (only asked for one difference)\nThe primary advantage of delegation is its flexibility. Since the classes are not closely bound together, the delegate can easily be changed at run-time. The disadvantage of delegation is, that it is not directly supported by most popular object-oriented languages\nThe advantage of inheritance is that other than delegation it is supported by many programming languages. It is also easy to implement new functionality in the subclass, by adding for example a new method. The disadvantage is that the tight coupling by inheritance makes the implementation of a subclass very bound up with the implementation of the super class that any change in the parent implementation can force the sub class to change.\nAn example for inheritance is: You already have a Smartphone class and want to implement a Android and IOs class. Instead of writing all the functionality of those new classes again, you can use inheritance. Smartphone as the parent class and Android and IOs as child classes. Therefore, common features, like camera and photo can be put into the Smartphone class und be used by Android and IOs.\nAn example for delegation could be that, you have a class Contact. Contact has a instance variable Call call, of the Call class. To call a contact the Contact class needs to use the method in Call callContact(). So it uses the variable call in a method to use the callContact() method in Call (call.callContact()). Since the contact class, does not need any other methods, or attributes from the Call class, it uses delegation instead of inheritance.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594872,
      "meta": {},
      "text": "Both concepts are about reusing functionalities already implemented in your code. \n\nInheritance uses or overrides code from a superclass. You can also add methods to a subclass which makes the subclass do almost the same as the superclass but with new or slightly different functionalities. Abstract classes can be used to apply slightly different functionalities to several subclasses. Inheritance is very easy to use and is supported by many programming languages, but sometimes it exposes unwanted methods of the parent class and changes in the parent class can complicate the changes that must also be made in the subclass.\n\nDelegation reuses written code of other classes and calls them by using object instantiation. This concept is more flexible because you don’t need to implement unwanted methods but it might be more inefficient, because object instances must be created.\n\nSmartphones have different time functionalities like a timer, a stop watch or an alarm functionality. These three share a lot of methods and attributes that can be summarised in a subclass e.g. attributes for hours, minutes or seconds or methods to count and measure time. In this example inheritance would be a great solution because those three classes would share a lot of functionalities.\n\niPhones can calculate your activity on your phone and can tell you which apps you used for how long. This functionality need to measure time but I would let it inherit from the time classes because of its differences. I think a delegation would be better suited its main goal is not to measure time to the millisecond. So you would have some unwanted methods that can be avoided be creating an instance of the class time.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596061,
      "meta": {},
      "text": "Inheritance:\n- The subclass inherits  all functionality of the super class and can extend it\nPro:\n- methods and attributes provided by the super class do not need to be implemented again and this way classes can be extended easily\nCon:\n- methods and attributes one doesn't want in the subclass will be inherited either way\n\nSmartphone:\nWhen a new iPhone arrives at the market it has the functionality of the old one and extends it with a new one\n\nDelegation:\n- The delegated class is an attribute of the new class and functionality can be implemented with its help\nPro:\n- functionality of the delegated class can be implemented in a way the engineer wants with just the methods and attributes he/she wants to use\nCon:\n- Because the delegated class is not visible to other classes any functionality needs to be wrapped up, so that it is hard to extend a class that way\n\nSmartphone:\nAn example for delegation would be a messenger which uses only some functionality of the basic chat system\n",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5585702,
      "meta": {},
      "text": "Inheritance means, that a class inherits from a parentclass, giving it access to all methods of the parent class with the option to also implement some new features. Delegation means that a class A uses an already existing class B for some functionality. This means, that none of the methods of B are visible in class A. The functionality of B is used by calling its methods in the body of methods in A. \n\nInheritance: \n+\nIts easy to create more specific classes that all follow a certain structure without having to rewrite code\n-\nall methods of the parentclass are also visible in the childclass, which means that some unwanted functionality might be accessible. \n\nDelegation:\n+\nThis approach allows to only use the functionalities wanted of a class, without needing to also allow access to some other unwanted functionalities. \n-\nIts costlier to use this approach, as it requires the creation and storage of an instance of the used class instead of inheriting from it. \n\n\nExample: \nInheritance: Mobile game\nWhen creating a mobile game, where there are many NPC's, creating a class that describes the general attributes of an NPC might be a good idea, since you could then use that class as parentclass for more refined NPCs that behave differently on some specific level but still adhere to the general structure of the NPC class. \n\nDelegation: Secure Banking App\nThis migth be a good idea, if you create a class for some authentification/money transfer, but then you want to limit these functionalities based on available funds, age, etc. This would allow you to reuse the basic functionality by different classes that all do some other checks before the method of the basic class is called without exposing the basic methods. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5592459,
      "meta": {},
      "text": "Delegation: An object requests the functionality of another object, captures an operation and sends it to the other object.\n\nInheritance: Extending a base class using extends.The advantage of inheritance is that it makes the subordination of two classes obvious and it's easy to implement new methods in the subclass. \n\nThe disadvantage is that The child class must inherit all methods from the parent class, so inheritance may expose some unwanted methods of the parent class and changes occur in parent class force changes to the child class.\n\nThe advantage of delegation is that it's flexible to be used, because methods can be called in other classes flexibly. The disadvantage is that an instance of the object is required to be created, which is less efficient.\n\nThe relationship between the Apple Watch and iphone, for example, is one of delegation. The Apple Watch can use the functions in iphone, such as taking photos, making phone calls and locating the phone, i.e. it calls on the functions in iphone. At the same time, the Apple Watch can also have its own unique functions, such as measuring heart rate.\n\nInheritance occurs when the phone system is updated, and this update only adds new features to the original system. In this case the old system acts as the parent class and the new system acts as the subclass inheriting all the functions of the parent class and having its own new functions.\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593865,
      "meta": {},
      "text": "The difference is, that inheritance takes the properties of another class, and the new class (child class) will inherit from the parent class (we can reuse the methods and fields of the parent class). and delegation means passing the responsibility of a certain task to another class or method.\n\nThe advantage of inheritance is promoting reusability and readability so as an example class Animal have food, legs, and color Method. The child classes cat, and dog will inherit those methods from the animal class. \n\nThe disadvantage of inheritance is, that it could lead to overloaded classes, which cause a decrease in the performance and tightly coupled codes.\n\nThe advantage of delegation is we can consider every message we want to forward, so it doesn't force us to use all the methods of the super class.\n\nThe disadvantage from delegation is, that it isn't as reusable as inheritance. \n\nas an example, we already created a super class phone in 2008, and want to add new subclasses for phones from the year 2005 until 2020. \nIf we use inheritance, we need to take all the methods from the super class (which is phone from 2008). The functions of phone in 2008 may not be available yet in the year before 2008, and it also may be outdated for phones that release after 2008. \nThat's why I would choose delegation because with delegation we can choose which specific method from the parent class (phone from 2008) we want to reuse, so it won't overload the child classes with unuseful methods.\n\n\n\n(partly taken from my last year's answer)\n\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595614,
      "meta": {},
      "text": "The difference between inheritance and delegation is that with inheritance, a new class is a child class from the already existing superclass, taking its attributes and methods. On the other hand with delegation, an instance variable of another class is created in your class and you use this instance variable for operations since these are already implemented in the other class. Basically, the operations are passed on to the already existing class by creating an instance variable of that class in your class. \n\nAn advantage for inheritance is that a class is already implemented where you get your wanted operations from. You don't have to make extra effort to implement these methods which are inherited which means it is time saving and less work. However, a disadvantage is that you have no control over which methods are being inherited since all the methods are inherited from the super class which leads to complexity. \n\nAn advantage for delegation in contrast to inheritance is that you have control over which methods are being used from the instance variable which avoids unwanted behaviour. However, a disadvantage for delegation is that it might be more inefficient since an instance variable has to be created.\n\nOne example for inheritance is when a new software update is being created. The new software update should contain most of the functionalities of the ones before and its functionalities are being specialized. \nIf there is an unwanted behaviour then it can be deleted in the superclass which makes the newest versions to also not have this function. \n\nOne example for delegation can be the locks on smartphones. Whenever a client wants to make changes or view private information, a password must be entered to be able to access these functions. In this case, the client calls an operation on a receiver and this receiver sends this request to the delegate where then the request is processed.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5586889,
      "meta": {},
      "text": "Inheritance: Having a class that already does most of the wanted functions for another class. Even though this implementation might have unwanted behavior. \nDelegation: This compared to the inheritance implementation reuses the functionalities through the usage of objects instantiation and and methods calls. And to prevent the issuse of the delegate three objects are involved. \nThe client which calls the reciever. The reciever which makes sure that the client cannot use the delegate in any other unforseen way. And the delegate itself which executes the request. \n\nThe diffrence: The inheritance implementation now extends a class by new operations or overwriting already existing operations.\nThe delegation somehow redirects the operation with catching it and sending it to another object. \n\nThe advantages: The implementation of the inheritance is supported by many programming languages, which makes it more attractive to work with. \nThe delegation is gernerally much more flexible than the implementaion way. \n\nDisadvantages: The inheritance brings the problem of it exposing unwanted methods of the parent class to the subclasses.\nThe delegation could be more inefficent in terms of flexibility, because new object instances have to be created.\n\nSmartphone Example: \nInheritance: programming a smartphone app usually needs to be maintained and updated regulary, so to  work more efficently it is easier to manage. For example a reading app. Because for an app where security is one of its key aspects, for example where the transaction of money is involved, the delegation is better as it does not expose unwanted methods. E.g. Banking app, online shopping app\n\n\n\n\n",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5594507,
      "meta": {},
      "text": "Inheritance is a concept of an object hierarchy, where parent classes have child/sub classes. The subclasses have an accsess to all the implementation and functionality of the parent class. The advantage of the inheritance is an opportunity of reusability and scaling. It is easy to implement new functionality in the subclasses, and all of new features in a parent class will be transfered to the subclasses. Disadvantage is chance of leaving some classes as unused, what leads to unwanted wasting of memory.\nAs an example of inheritance one model of smartphone can have different types of colors or different amount of memory. The model is an abstract class, which is used by the subclasses, that have the same fuctionality, but with different attributes. (Iphone 13: green color with 128 GB or red color with 256 GB)\n\nDelegation is an another concept. As opposed to inheritance, delegation is a reuse of functionality of other objects by their instantiating and calling their methods. The advantage is an encapsuling of code in another implementation and it is more flexible to design the program. The disadvantage is that the code is difficult to read, because you can't see the whole implementaion in one file. It can be also more inefficient, for example by creating of new object instances.\nSmartphone example: some apps are using other or sometimes default phone programs in their own functionality. Organizer apps are using often the \"Calender\" default app to add users's personal events to the list.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595198,
      "meta": {},
      "text": "Inheritance extends a base class with a new operation or overrides an existing operation (it reuses a specified or implemented functionality of the super class) while delegation catches an implemented operation and reuses it in an existing object. Inheritance is straightforward to use and with it you can implement new functionality in the subclass, but inherited operations can exhibit undesirable behavior. Delegation is more flexible to use, but possibly inefficient.\nFor example in the context of smartphones: there are many applications in our smartphones that use gps (like messenger or snapchat) but they do not always have to use this function. And this is an example of delegation. However, any application on the phone should have a function that allows it to update. That's why we should use inheritance here.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596313,
      "meta": {},
      "text": "Vererbung bedeutet, dass das die Unterklasse alle protected+ zugriffe besitzt und die Oberklasse erweitert. Dies ist zum Beispiel hilfreich um mehrere Klassen mit gleichen Eigenschaften zu verknüpfen in dem man diese Eigenschaften in der Oberklasse definiert, z.B. Stuhl Tisch mit Möbeln. Auch können Methoden überschrieben werden was bei delegates nicht möglich ist, weil das ja gerade der sinn von delegates ist. Ein nachteil von Vererbung ist dass das verändern der Oberklasse zu problemen in der Unterklasse führen können. Dies ist bei delegates nicht der Fall.\nEin Delegate hingegen ist das Aufrufen von Methoden einer anderen Klasse, um ihre Funktionen zu benutzen und eine gleichbleibende Schnittstelle zu erschaffen. Dies kann von Vorteil sein wenn sich die Methoden des delegates Objekts regelmäßig ändern, da hier die Bindung zwischen den Objekten während der Laufzeit entsteht. Ein Nachteil von delegates sind das sehr viel unnützer Code durchs aufrufen der Methoden entsteht, welcher die Klasse unübersichtlicher macht.\nEin Bespiel bei dem Smartphone für delegates ist das Mikrofon, welches eine Schnittstelle anbietet um die Informationen zu erhalten. Hier sollte der Output vom Mikrofon intern unabhängig von der arbeitsweise des Mikrofons sein, damit die Anwendungen immer mit dem Output umgehen sollten. \nEin Beispiel für vererbung wären die Kameras, zu mindest bei neueren Smartphones hat man mehrere Kameras, die alle Bilder machen sollen, aber in verschiedenen Arten.",
      "score": 66.7,
      "language": "GERMAN"
    },
    {
      "id": 5585251,
      "meta": {},
      "text": "In Inheritance, you use the methods given by a parent class and can expand what you need going from there. For example, being you could have a car class and the inheriting class behaves differently when it's raining. It is a quite easy concept and it is often used in many programming languages. The issues lie in it being not as clear as the delegation and changes in the parent class always lead to changes in the \"child\" class. Sometimes this is desired sometimes it isn't.\nOn the other hand, delegation describes having a \"middle-man\" between the calling object and the executing object. It is a good concept to create clearer lines and work against abuse of the system but because there is another object created it isn't as cheap as Inheritance. Here you need to check if the trade-off is worth it. \n\nsmartphones: \nThe UI is a example for Inheritance because each aspect can be used to implement lower down versions of itself. In that sense it is way better than Delegation because it fulfills each aspects that are necessary to ensure everything is working.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5586004,
      "meta": {},
      "text": "1. structure:\nInheritance has a hierarchical relationship between super- and subclass. In delegation, there is a parallel relationship between receiver and delegate.\n2. reuse:\nInheritance requires functionality by extending a base class by adding new operations or overriding existing.\noperations and reuses functionalities of the superclass while in delegation receiver receives an operation, sends it further to delegate, it reuses functionalities of an existing object.\n3. method name:\nin inheritance, a subclass inherits the same methods and method names from the superclass. Receiver in delegation could(not must) only have methods with different names from delegate.\nAdvantage:\nDelegation is flexible comparing inheritance because any object can be replaced at runtime by another of the sametype, a user can hardly misuse delegate.\nBut inheritance is straightforward to use and exists in many programming languages. It provides an easy implementation of new functionality in the subclass.\nDisadvantage:\nDelegation is inefficient because objects are encapsulated into different packages.\nInheritance can expose some methods of the superclass unwantedly. When changing the superclass, we have to recompile the subclass, sometimes even change subclasses.\n\nExample: WhatsApp\nDelegation: when we want to send/share someone links from another App to WhatsApp \nInheritance: when we want send message(voice or text) to someone, messageSender is the parent class, voiceSender and textSender are subclass\n\n\n",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5586098,
      "meta": {},
      "text": "\tBoth inheritance and delegation describe ways to reuse code in software engineering. Inheritance implements methods from a super class to a subclass so that methods in the superclass can be reused in the subclass. \n\tInheritance is easy to implement, since all you have to do is extending a subclass and thereby inheriting  the methods from the superclass.\n\tHowever, inherited methods in the subclass may show misbehavior. For instance, some functionalities of the superclass, which should not be accessible for user,  can be manipulated by the users, which poses a security threat.\n\tDelegation reuses code by sending a request to another class and invoking an object on this class. Without the invoking an object, we receive NullPointException.\n\tDelegation is preferred because it is more flexible, so the two classes implementing delegation don't have to be of the same type, which is less restrictive.\n\tDelegation is usually not efficient because it goes through following stages: Instantiating an object, sending method call, waiting for response, which can cause method-call-overhead and affect performance negatively.\n\tFor instance, on a chat application where smartphone users have to send messages to many users at the same time, using delegation might be better because such applications are not performance-critical and using inheritance could show unwanted functionalities to users such as exposing the location of users.\n\tAn emergency call application saves the phone numbers of local hospitals, police, fire department etc. In such an application using inheritance is better, as it doesn't invoke overheads and is time-efficient.\n\t\n",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5586668,
      "meta": {},
      "text": "Während inheritance mit Vererbung zu übersetzen ist, würde ich Delegation mit Vertretung übersetzen. Die Unterschiede: Bei Inheritance gibt es eine \"Oberklasse\", welche ihre Methoden an ihre spezifischeren Unterklassen weitergibt, welche diese entweder übernehmen, aber teilweise auch überschreiben oder erweitern. Bei Delegation ist das Prinzip ein anderes. Hier wird eine Basisklasse durch eine andere vertreten, welche die aufgerufenen Funktionen mit der der Basisklasse sozusagen merged und übersetzt und dann an die Basisklasse weitergibt/weiterschickt, so dass diese damit arbeiten kann. \n\ninheritace:\n+ das klassische Modell der Erweiterung von Klassen und daher auf/mit vielen verschiedenen Programmiersprachen nutzbar.\n- Änderungen in der Oberklassen wirken sich direkt auf die Unterklassen aus. Dies kann zwar gewollt sein, aber auch schwere Fehler nach sich ziehen bzw viel Anpassungsarbeit.\n\nDelegation:\n+ Sehr flexibel, da durch die \"überstetzung\" die unterschiedlichsten Implementierungen möglich Genacht werden\n- kann ineffizienter sein, durch den übersetzungsvorang bzw die Notwendigkeit eine Instanz zu erstellen.\n\nAls Beispiel für Delegation würde ich die Kalender App sehen. Es gibt verschiedene Arten von Kalender Ereignissen: Die geteilte, die normalen, die von anderen Apps, die von einem Kalender Abo... Hier bietet sich Delegation an, da intern alles das selbe Kalendar Ereignis ist, die verschiedenen Arten nur hin konvergiert werden müssen. Die von anderen apps werden nicht durch den Benutzer sonder von Apps erstellt. Die geteilten von anderen Personen. Alle erstellen das Ereignis anders, aber intern ist es bei allen dasselbe, was der basisklasse entsprechen würde.\n\nEin Beispiel für Inhertance wäre die App Animationen und standardisierte Grundfunktionalität. Apps sind aller sehr unterschiedlich von der Implementierung, Nutzen, sinn etc, vollkommen unterschiedlich. Allerdings müssen diese gewisse Normen einhalten, die sich mit inheritace gut implementieren lassen. So zum Beispiel das öffnen der Apps, die immer gleiche zurück-taste und typischen Animationen...Diese müssen alle Apps können, sodass diese die standartisierten Methoden durch die \"Oberklasse\" vererbt bekommen. Jedoch haben die Apps viele eigene Methoden, weshalb sich Delegation dafür nicht eignen würde. \n",
      "score": 83.3,
      "language": "GERMAN"
    },
    {
      "id": 5591092,
      "meta": {},
      "text": "Inheritance: a structure where classes exist in a hierarchy, instantiated through the keyword “extends”. A lass that extends a superior class can use its functionality without implementing it, but not the other way around. \nPro: very clean way to structure a project if the subclasses are more specialized versions of the superior class\nCon: might inherit functionality that they should not have and show unwanted behavior. \n \nDelegation: a class calls public methods or uses objects from classes they are not inheriting from. \nCon: code can get messy since every class that is being used needs to be imported and method calls are more complex. \nPro: On the other hand, cratering a subclass can seem wrong or confusing in some contexts, when both classes only have very few things in common. \n\nExample Inheritance:\nOn IOS there is a lockscreen A after switching on the phone. A similar screen B can be seen when using the dropdown gesture on the upper left-hand corner, only that this version of the lockscreen has more functionality (shows more information) than screen A. A could therefore be a subclass of B (Given that both screens are represented through java classes) because only minor changes are being made and a grate part of class A is similar to B.\n\nExample Delegation:\nThe drop-down gesture executed in the upper right-hand corner shows a personalized collection of shortcuts, one of them being a simple timer. The functionality of this timer is executed by apples time app instead of being implemented in the dropdown menu. Therefor, the menu calls the time app (given that both entities are represented as java classes) and uses delegation. \n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5592703,
      "meta": {},
      "text": "Delegation means that when a specific method is called on a object (A) the object (A) creates a new object (B) of a different Type and (A) invokes a method on the new object (B) that provides the result for the initially calles method. \nWhilst in inheritance a class is using the functionallity that is provided by another class, that is then becoming the superclass, by reusing everything from that class and potentially adding new methods and attributes or overwriting other methods. \n\nSo with delegation you can delegate to different other classes and only use the methods you really need which means you are more flexible in how you implement the new class.\nBut instanciating a new object is expensive and should not happen to often, therefore delegation should not be used for frequently called methods to keep the execution faster.\n\nInheritance is easy to use since you will only have to implement the changes that you want to have compared to the superclass and already have a basic structure given from the superclass.\nBut unlike in delegation you can't pick which methods you wan to use from the superclass. That means all the methods from the superclass will be visible in the subclass/ for the user and can only be changed in their functionality which makes it harder to hide unsupported/ forbidden methods. \n\nIn the context of smartphones an example for inheritance could be, that samsung is using android for their os but is overwriting some features with their own. An example for delegation could be that when listening to spotify you can connect your headphones with your phone and spotify is delegating this task to the \"bluetooth handler\" of the os.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593524,
      "meta": {},
      "text": "Inheritance means that we have a superclass and we want to implement or specify the functionalities of the superclass in different ways. The subclass can inheritance all funcitonalities of the superclass and create its own functionalities according to the requirements.\nDelegation happens when we only catch a part of the operations we need to a receiver, in which we create an instance of the class, exploit only those functionalities.\n\nThe advantages of Inheritance are: This kind of idea is straightforward, natural and easy to implement. Most of the programming language support this structure. But on the other side, the subclass implements every method of the superclass, including the unwanted ones. Besides, the subclass will be influenced by the changes in the method from the parent class if the method is not overwrited.\nIn the case of delegation we can choose the functionalities of the delegate, instead of accepting them completely. This leads to flexibility. However, the creation of an instance of the delegate may cost some time and space.\n\nIn the context of smartphones for example, I choose inheritance for a calculator. The basic calculator on the phone contains only addition and some fundamental operation. But we want many other functions, it is really useful to design a calculator for math and a calculator for science. These two kinds of calculator inherit the basic functions and add new functions.\nAs for delegation, when I develop a social networking software on smartphones, I want to read the contacts of the user, seeing whether some friends of the user also use this networking software. But I just want to read the contacts without modifying the information or create a new contact. In this case delegation is better.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595098,
      "meta": {},
      "text": "Inheritance is the relationship between the superclass and the subclass. Every method of the superclass has to be implemented in the subclass, while delegation is an alternative to inheritance for reusing code among multiple classes, which are not in a super/subclass. Some of the advantages of inheritance are : it is straightforward to use, easy to implement new functionality in the subclass and supported by many programming languages. On the other side there are some disadvantages of inheritance: because the methods in the subclass are based on the superclass, therefor some unwanted behavior might be transmitted, and changing the method in the superclass, might lead to the changing of the subclass.  Advantages of delegation are : generally more flexible, allows dynamic binding. Another reason to use  delegation is in the case when decisions are made final at design time or at compile time, therefore sometimes, it is desirable to delay design decisions until runtime, therefore the bridge pattern allows to delay the binding. Disadvantages of delegation are that because an object instance needs to be created, that means it might be more inefficient. \nOne example of delegation in the use of smartphones is the method of taking pictures. The phone has a default method which allows the user to take pictures, but the phone has multiple application which uses the same function, even if the default command is not the superclass of the other application. An example of inheritance of phones is the function we can observe in Iphones, while we have the default method to call other people, we have the same function to start audio calls via FaceTime, therefore the default option is in a superclass of the FaceTime class.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595362,
      "meta": {},
      "text": "If there are functionalities in one or more classes, that you want to use in (an)other new classe(s) as well, this can be accomplished by delegation or inheritance. The difference between those is, that in delegation the new class is created by the aggregation or composition of the class(es), that feature the desired functionalities so that the new class now has all the functionalities of the existing class, whilst in the method of inheritance the new class is generated by simply subclassing it, so that it has all the functionality of the superclass(es) and possibly other functions as well.\n\nAdvantages: Inheritance: Straightforward to use. Delegation: Generally more Flexible.\nDisadvantages: Inheritance: exposes some possibly unwanted methods of the parent class. Delegation: Possibly more inefficient since object instance creation necessary.\n\nExample for delegation: let's take a ticket booking smartphone app as an example. You have a TicketBooking Interface with a bookTicket() method, which is subclassed by the classes TrainBooking and AirBooking. Both of them override bookTicket(). If we now want to implement a class TicketBookingByAgent, that can book Air and Train tickets, we will have to use delegate the bookTicket() call to the TicketBooking Interface, because extending TicketBookingByAgent by two classes is not possible.\nExample for inheritance: The ticketBooking app uses a calendar API, but only objects of class Event can be passed to it. If you now want to add a addToCalendar() functionality to the BookedTicket class, you will have to make it extend the Event class, to enable it to be passed to the Calendar API. Delegation would not work in this case.\n",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596199,
      "meta": {},
      "text": "The main difference difference between inheritance and delegation is in the visability of the \"other\" class . \n\nIn the case of inheritance, the subclass is able to see all the methods and attributes of the upper class which can lead to unwanted behavior. As a positive inheritance is straightforward to use and supported by many programming languages.\n\n\nIn the case of delegation the \"lower\" class has the \"upper\" class as an attribute and therefore can only access the \"upper\" class through its public methods. This approach is generally more simple and leads to less coupling and changes in the \"upper\" calss must not affect the \"lower\" class. As a negative this approach is slightly less efficient because an extra instance of the \"Upper\" calss needs to be created.\n\nA smartphone needs a way to connect to a network. From PCsthere already exsists a class called \"NetworkConnection\". Now it would be possible to create the subclass \"SmartphoneNetworkConnection\" and extend its functionality to smartphone use. But with this approach every change in the PCs class \"NetworkConnection\" also needs to be taken into account in the \"SmartphoneNetworkConnection\" class. Therefore a delegation approach in which \"SmartphoneNetworkConnection\" saves an instance of \"NetworkConnection\" and adds additional functionality to the class works better.",
      "score": 50,
      "language": "ENGLISH"
    },
    {
      "id": 5596518,
      "meta": {},
      "text": "The difference between inheritance and delegation is mainly is that with inheritance the new class is created by defyning a new subclass which has the same functionallities as the Superclass and can add own functionallities.\nWith delegation through Aggregation and Komposition instances of a different class are used to define a new one, so the new class can use the functionallities of the instances class.\nSo to wrap it up: Dellegation works on Object-level while Inheritance works on Class-level.\nAdvantage of inheritance is deffinetively the reduction of redundant code. Disadvantage of inheritance are shared functions in sub and superclass (same method bodys e.g.) witch can lead to unwanted mistakes.\nAn advantage of delegation is its flexibility compared to inheritance which means, if you only nead one method from a different class delegation is a lot better. A disadvantage is definetely the efficency because of the instanciation costs.\nIf you look at the different types of smartphones one would deffinetely use inheritance. So for example an abstract Superclass would be Smartphone, which is divided into smaller subclasses of their brand, so for example Huawai, Samsung, IPhone, Nokia. Basicaly all of them share specific functionalities like call() or message()and attributes like shape, screen,... .\nBecause Huawei ans Samsung for example use the same operating System you might use delegation to use specific methods which are implemented in one of them and you only need a few methods/attributes provided by this class.\n",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596696,
      "meta": {},
      "text": "Two major concepts of reusing functionality:\n\nInheritance: \nThe new class is created by subclassing from an already implemented class, that is very similar to the desired class. The subclass is able to reuse all the functionality of the superclass and may also implement new functionalities. It is also possible to inherit from a specification, an abstract class, where all the operations are specified but haven’t been implemented. The subclass then has to implement all the specified operations of the superclass. \nInheritance is understandable and easy to use and it’s supported by many programming languages. Moreover, new functionality can be easily implemented in subclasses. However inheritance may expose unwanted methods of the superclass and inherited operations might exhibit unwanted behavior. Furthermore, cahnges in the parent class can result in changes in the subclasses as well.\n\nDelegation:\nDelegation describes the concept of reusing functionality of existing objects by using object instantiation and method calls. There are three objects involved in the process: a client calls the receiver, who then sends the request to the delegate. The delegate then executes the request.\nGenerally delegation is more flexible than inheritance, but it might be less efficient, since an object instance has to be created. \n\nExample:\nThere is a superclass Smartphone with a call -& text method and the subclasses \"IPhone\" and \"Samsung\". Both subclasses inherit the functionality of Smartphone and can reuse it.\n\nIn order for the classes \"IPhone\" and \"Samsung\" to resuse the functionality of \"Smartphone\" without inheritance, IPhone and Samsung must call the functionality of an instantiated Smartphone object.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5584140,
      "meta": {},
      "text": "Inheritance means that we have a superclass and subclasses, and in subclasses there could be new operations or override operations from the superclass.  The advantage would be that it would be easy to implement because there might be common operations of sub- and superclass. Another advantage would be that since inheritance we can use it straightforward.  Disadvantage would be that if we need changes in the superclass, we then need to do changes in each subclass, so the process might be complicated. \nExample: SamsungPhone and ApplePhone are subclasses from the abstract superclass Smartphone. \n We first define Smartphone with suitable operations e.g. to open a website or to make a phone call, and then do specification inheritance to specific those operations. Because SamsungPhone and ApplePhone are both smartphones, they only differ from how they work, as a result, the structure is similar, so it is better to choose inheritance.\nDelegation does not have anything to do with sub/superclass.  The two classes are on the same level and there could be a Receiver and a Delegate.  The advantage is that every object is able to be replaced by another one, so it is very flexible.  But at the same time the disadvantage is that we can only implement them seperately and inefficiently. Example: Smartphone and Keyboard could be delegation, because we use Keyboard to type on a smart phone.  This concept is better because there are not same operations but e.g. the operation type() in Smartphone calls the operation in Keyboard. ",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5585061,
      "meta": {},
      "text": "In a nutshell, delegation means that you aren't inheriting code, but you are using an object of another class as an instance variable, forwarding messages to the instance. Inheritance is a mechanism in which one object acquires all the properties and behaviors of a parent object, by becoming a subclass. Inheritance ties a class into the hierarchy of classes it is inheriting from (\"is-a\" model) where as with delegation it can keep its place in its own hierarchy and delegate calls to another. \nAdvantages of inheritance is its minimization of duplicate code, its flexibility, as it makes the code flexible to change, its option to override methods of the base class, and finally its data hiding as one can decide which data to be kept private. Disadvantages on the other hand is that it decreases execution time and that it becomes complicated when you want to alter the parent class. \nAdvantages of delegation are that is even more flexible than inheritance. Disadvantages are that as it instantiates an object every time used, it becomes inefficient. \nAn example for delegation in smartphones could be in the operating system, as the \"main operating system\" has instances of the displayGUI, the speakerController and other things it has to control. Inheritance in a smartphone could be when you are using a more professional camera app, it inherits the usability of the normal camera of the phone and adds some more functionality. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5586936,
      "meta": {},
      "text": "Inheritance is the so-called white box reuse. That means that everything from the parent-classes is visible and useable in the childclass. This can be abused to change and interfere in the parent class. However no new object has to be generated to use the functionabilities of the parent class, which causes better performance.\nDelegation is the so-called black box reuse. You are delegating your problem to another object, which will return your result. However you con't care how this is calculated in particular. In this approach you can't access anything you shouldn't, which makes it safer. However, in general, the delegation approach is a bit slower because of additional overhead from generating those objects.\n\nThe share button on your smartphone is a typical example for delegation. If you want to share a contact to a friend via instagram, you don't want instagram to have complete access to your whole contact system. You want the contact system to only return the right contact so instagram without them knowing all the others.\n\nIn mobile games on the other hand, it might be good to use inheritance between different objects, like the player and npcs being combined in a parentclass person. This may lead to a higher performance or a lower power consumption, due to less objects. In this example, there isn't even a real downside, because there normally is no sensitive data in mobile games.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5590230,
      "meta": {},
      "text": "Inheritance zielt darauf ab, dass eine Subklasse alle Parameter und Methoden der Parent Klasse erbt und diese zusätzlich noch um eigene speziell auf diese Subklasse zugeschnittene Methoden erweitert. Dadurch können schon implementierte Konzepte der Oberklasse wiederverwendet werden. \nKonträr dazu zielt die Delegation darauf ab, dass bestimmte Funktionalitäten durch andere Klassen implementiert werden. Von diesen Klassen werden dann Instanzvariablen gespeichert, wodurch auch in der an sich unabhängigen \"Receiver Class\" die Funktionalität erhalten bleibt.\nEin Hauptunterschied und Vorteil der Delegation Class ist dabei, dass da mit Instanzvariablen gearbeitet wird nicht jede Funktionalität der Überklasse sichtbar ist und weitergegeben wird. Dies ermöglicht also eine flexiblere und genauere Programmierung. Jedoch zeichnet sich die Inheritance meist durch eine einfachere Implementierung aus, welche in den meisten Programmiersprachen unterstützt wird. Jedoch hat die Vererbung noch das Problem, dass Änderungen in der Parent Class auch zu Änderungen in der Subclass führen und somit die Flexibilität einschränken. \n\nIm Beispiel von Smartphones könnte man um bessere Bilder zu entwickeln beispielsweise eine Spezialisiertere Version eines Smartphones erstellen. Statt dem gewöhnlichen IPhone 10 hätte man nun das Iphone 10 Pro mit 4K Kamera. Dies würde klar die Inheritance Methode wiederspiegeln, da alle alten Features des Iphones im neuen integriert sind, nur noch zusätzlich mit der verbesserten Kamera.\n\nKonträr dazu könnte man jedoch auch eine per Bluetooth verbindbare und steuerbare Kamera mit jedem Handy verbinden (damit auch mit dem iphone 10). Dadurch hätte man nur die gewünschte Funktionalität zusätzlich an das Gerät integriert. Dies würde die Delegation Methode wiederspiegeln, da nur im Bereichd er Bildaufnahme Funktionalität an das ergänzungsmodul deligiert wird.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5591002,
      "meta": {},
      "text": "Sowohl bei Delegation, als auch bei Inhertinace will man Funktionalität wiederverwenden können. Der Unterschied zwischen Delegation und inheritance ist, wie man implemented functionality wiederverwendet. Bei Delegation wird ein ein neues Objekt, welches die Funktionalität bereitstellt instaziert und Methoden des Objekts aufgerufen es werden also die Operationen \"weitergesendet\", um die jeweilige Funktionalität zu verwenden. Ein Vorteil ist von Delegation, dass es flexibler ist, denn ich kann quasi jede Funktionalität, welche  andere Klassen haben, der Klasse durch eine einfache delegation bereitstellen, ohne großen aufwand. Ein Nachteil ist, das insbesondere die Erzeugung von großen Objekten sehr ineffizient ist. \n\nBei Inhertinace hingegen, wird von einer Klasse geerbt welche die Funktionalität bereitstellt und es kann in der neuen Klasse neue Funktionalität hinzugefügt werden, aber auch die der Oberklasse verwendet werden. \nEin Nachteil von Inhertinace ist, dass ich immer alle Funktionalität der Oberklasse habe, auch diese die ich nicht möchte. Ein Vorteil ist aber, dass ich gemeinsame Funktionalität mehrere Klassen einmal in der Oberklasse definieren kann und dann viele Klassen einfach davon erben können und es einfach neue Funktionalität in der Oberklasse hinzugefügt werden kann, wenn diese benötigt wird. \n\nWenn ein Smartphone grundlegende features, wie Eine Benutzeroberfläche braucht, wurde ich dies in der Oberklasse definieren, da dass jedes Smartphone braucht, Jedes Smartphone kann dann davon erben. Wenn das Smartphone eine spezifischere Funktionalität, wie ein LIDAR Scanner hat Würde ich Delegation für die Funktionalität anwenden, denn nicht jedes smarthonen hat diesen und es wäre unnötig, wenn alle Smartphones diese Funktionalität durch eine Oberklasse implementiert hätten. Also würde ich ein neues Objekt mit der funktionliät erstellen in diesem spezifischen Smartphone und nutzen. ",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5593918,
      "meta": {},
      "text": "When speaking of java for example, inheritance is known in the context of the keywords include and extends, which let an object inherit all functions and properties of a superclass. Advantages of inheritance are, that the concept is often offered in many programming languages and it leads to good readable code due to the strict structure, assigned methods and properties. A big disadvantage is also, that inheritance exposes methods from parent classes that shall not be seen in the subclass. A smartphone can be modelled using inheritance. We could create an abstract object with some basics, like communication (see below), a display... and let smartphones inherit from this class, to add a camera property, or a Tablet, which does not have a SIM slot and furthermore we can re-inherit them to create devices with all their properties, e.g. smartphones with 4 cams.\nDelegation on the other hand means that another object as an attribute is in charge for some functionalities, since data is transferred via the delegated object. Unlike inheritance the object will not expose unwanted methods, but most important, it offers runtime flexibility by choosing the delegation object at runtime. Disadvantages on the other hand may be, the inefficiency of an object instantiation and that some programming languages do not offer concepts to easily use delegation. In the context of smartphones, the wireless communication may be implemented via delegation. It can be easily determined at runtime (Bluetooth, WiFi direct, Mobile Data, WiFi...) and be forwarded to the delegator.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594999,
      "meta": {},
      "text": "The difference between inheritance and delegation is that inheritance makes use of functionalities by creating subclasses that can broaden the functionalities of the superclass. Delegation on the other hand is the using the functionalities of the other classes by object instantiation and method calls.\n\nThe advantage of delegation is that it is more flexible. in general. A disadvantage for that would be it could be more inefficient due to the fact that the object instance needs to be created.\nAn advantage of inheritance that it gets supported by many programming languages and it lets you implement new functionalities in the subclass easily. A disadvantage would be that some methods of the parent- class will be exposed to the superclass due to the nature of inheritance that were intended to be private.\n\nAn example for inheritance would be when you develop an app for managing the university. In that case there needs to be two types of people accessing the app, the professor and the student. Therefore, you can create the superclass Person for both of them in order to generalize some functionalities.\nAn example for delegation would be when the UI of the university app above has some buttons, a text bar etc. that needs to be added to every page (homepage, course-overview, admission to exams etc.). Therefore, one can use the the delegation-method with the relation \"has\" to delegate the functionalities of a button in the homepage to the class Button for example.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595762,
      "meta": {},
      "text": "Inheritance:\nEine Klasse wird zur Unterklasse einer anderen und übernimmt dadurch alle ihre Methoden.\n- Vorteil: Unterklasse kann als Oberklasse behandelt werden, gut für Klassen mit gleichen Attributen, Elementen, Methoden\n- Nachteil: Jede Unterklasse hat nur eine Oberklasse und muss alles von der Oberklasse übernehmen, nicht so flexibel\nBsp: für ein Smartphone braucht man eine bestimmte Art von Subsystem, also kann man jede Unterklasse vom Subsystem nehmen \nDelegation:\nEine Klasse ruft mit einer Methode, die Methode eines bereits vorhandenen Objekts auf \n- Vorteil: flexibel, man kann ohne Einschränkungen auf die Methoden anderer Klassen zugreifen\n- Nachteil: man muss zusätzliche Objekte erschaffen, um die jeweiligen Methoden aufrufen zu können, verbraucht Speicher\nBsp: Das Smartphone ladet ein neues Update, durch Delegation kann man einfach neue Objekte zum bestehenden System hinzufügen",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5596038,
      "meta": {},
      "text": "Unterschied zwischen inheritance und delegation: \nBei inheritance lassen wir die Klasse A, die wir neu erstellen wollen, von einer anderen Klasse B erben. Dadurch ist die Klasse A eine Unterklasse von der Oberklasse B. Das bedeutet, die Methoden die in der Oberklasse implementiert wurden, können in der Unterklasse genutzt werden.\nWohingegen bei delegation die neue Klasse A ein Attribut vom Typ Klasse B hat. Wenn dieses Attribut in Klasse A instanziiert wird, dann können über dieses Attribut Methoden aus Klasse B aufgerufen werden.\n\n\ninheritance: \nVorteil: Wird von vielen Programmiersprachen unterstützt \nNachteil: Da alle implementierten Methoden der Oberklasse an die Unterklasse vererbt werden, kann das dazu führen, dass man in der Unterklasse Methoden ausführen kann, deren Funktionalität nicht erwünscht ist in der Unterklasse. \n\ndelegation: \nVorteil: flexibler \nNachteil: Es muss ein Objekt instanziiert werden -> ineffizienter\n\n\nBeispiel smartphone:\n \ninheritance: Verwenden von inheritance für access control. App auf dem smartphone nur zugänglich für einen festgelegten Personenkreis, identifizierbar durch Fingerabdruck. Klicken auf App -> Fingerabdruck verlangt -> Prüfen ob Fingerabdruck zu berechtigten Personen (in Liste a) gehört, falls ja -> App öffnet sich. Dafür ist Software A zuständig. Innerhalb der App weitere Bereiche, die nur für einen kleineren Personenkreis zugänglich sind. Z.B. bei einer messenger App gewisse Chats. Software B erbt von Software A. Klicken auf Chat -> Prüfen ob Fingerabdruck zu berechtigten Personen (in Liste b) gehört, falls ja -> Chat öffnet sich\n\ndelegation: Auf smartphone Klasse Timer, u.a. Methoden von Timer: startClock, stopClock, setTime. Klasse Stopuhr soll Funktionalität von startClock und stopClock aber nicht von setTime haben. Klasse Stopuhr hat Attribut von Klasse Timer. In Klasse Stopuhr gibt es die Methoden startClock, stopClock, welche die entsprechende Methode in Klasse Timer aufrufen.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5596514,
      "meta": {},
      "text": "General, both inheritance and delegation used to reuse code in a software project. The difference between the two interface specifications is that with inheritance the method we want to use is already part of a superclass and with delegation this method is part of a subclass. With inheritance the superclass has already an implemented method which we subclass and reuse in end and with delegation there is no reuse by inheriting the code but by sending a request to another class and evoke a method with this request.\n\nThe comparison of the two concepts shows that inheritance is easier to handle but disadvantage of inheritance is that the inherited method in the subclass might show undesirable behavior because they are publicly available in the subclass.\n\nDelegation circumvents this problem by interposing the receiver. Thus, it is no longer possible for external classes to access the methods of the subclass directly. On the other hand, this concept of delegation can be more inefficient because of this set up especially if you have performance critical systems.\n\nIn the context of smartphone inheritance could be used when a third-party app wants to use methods provide by the operating system of the smartphone as these requests to the operating system should be more efficient, so the app runs smoothly.\n\nDelegation could be used within critical classes in the operating systems as those methods should not be publicly available to third-party apps. An example could be privacy related methods that should not be exposed to others.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5585535,
      "meta": {},
      "text": "Inheritance *inherits* (: methods from a base class. It extends the classes base operations by new operations or overriding already existing ones.\nMost programming languages tend to have inheritance functionalities for this, so implementation tends to be (very) easy. However inheritance may -and often will- expose the original classes functionality, and this may be unwanted behavior. Additionally the parent class influences the child class, so changes in one may lead to necessity of adaptation in the other. \nIn a Smartphone app for example one could build a baseline app-class that contains methods for processing inputs, and displaying elements within the app. In order to build your app you can inherit from this base-app. Since the idea is that the base-app only provides the utmost basic functions no unwanted functionality will be exposed to the custom app.\nDelegation *delegates* operations to another class. This can help avoiding the exposure of unwanted functionality as well as adding some flexibility. However this may generate additional overhead and be less efficient, due to more classes being created.\nIn a smartphone delegation may be used to access the smartphones Sensor system. An application would delegate the retrieval of sensor values to the smartphone OS. This will not expose any more data to the app than necessary, especially since the OS could check if the app actually has the correct access rights. In addition, since the exact algorithms for calculating values from raw data may very well change Parent-Child issues could be avoided.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5587714,
      "meta": {},
      "text": "Während bei der Vererbung direkt alle Funktionen (mit entsprechendem Modiefier) der superclass vererbt werden, wird bei der Delegation eine Referenz auf ein Objekt einer Klasse angelegt und die benötigten Methoden dieser über selbige Referenz aufgerufen. \nLiegt also der Fall vor, dass in einer subclass nur bestimmte Methoden oder Daten der superclass benötigt werden ist es sinnvoller, Delegation zu nutzen. Der Vorteil hier ist, dass nicht alle public Funktionen der superclass zwingend von außen aufrufbar sind und so Fehler vermieden werden können bzw. durch den Entwickler nur die wirklich passenden Funktionen selektiert werden können. Außerdem ermöglicht Delegation, z.B. über das Bridge-Pattern, Anpassungen der Funktionalität zur Laufzeit. Im Kontext von Smartphones wäre ein Beispiel für das Konzept das Google-Suchleiste-Widget, das standardmäßig auf den meisten Home-Screens zu finden ist. Hierbei wird nur ein kleiner Teil der Funktionen, die die Google-Suchmaschine bereitstellt, benötigt und nutzbar gemacht weshalb es sinnvoll ist eine Delegation zu verwenden. (Falls nicht bekannt was ein Such-Widget ist :) : https://support.google.com/websearch/answer/9208897) \n\nWerden in der subclass jedoch alle Funktionen der superclass benötigt ist eine direkte Vererbung sinnvoll, da diese den Code passender strukturiert und in dem speziellen Fall keine redundanten, fehleranfälligen Funktionen für die subclass bereitstellt. Außerdem wird das Konzept der Vererbung meistens direkt durch die Programmiersprache unterstützt und ist somit leicht anzuwenden. Im Kontext von Smartphones würde das Konzept beispielsweise bei Social-Media-Accounts zum Einsatz kommen. Ein spezieller Account könnte von einer Oberklasse erben, die einen allgemeinen Account (also ohne bestimmte Daten etc.) erben, da dieser genau die benötigten Funktionalitäten enthält. ",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5592113,
      "meta": {},
      "text": "Inheritance is the concept of either generalizing various classes of the same general type to one superclass, by picking out common methods / attributes, or specifying a general class to more specific subclasses, that take over all the methods / attributes of the superclass.\n\nOn the contrary, delegation is a concept of catching methods / operations of certain classes / objects (which aren't implemented) and delegating them to another class, in which the given method / operation is implemented. It is used in the reuse concept to avoid duplicates. If you have a client, the delegation concept also insures that the delegate is not abused / missapplied by the client, by first sending the client's request to a receiver class and then delegating it to the delegate class.\n\nAdvantage inheritance: is supported in numerous programming languages\nAdvantage delegation: allows for more flexibility\n\nExample inheritance smartphones: An example of inheritance in the context of smartphones is a real-world examples of different type of phones. A phone is everything with the ability of making calls to another phone. Thus, \"phone\" can be seen as the superclass of all types of phones. Mobile phones and landline phones are subclasses of \"phone\" and \"button phone\" and \"smartphone\" are subclasses of \"mobile phone\". I chose this example, as every phone can be generalized to a device making calls, but different types of phones can be specialized in terms of their looks, functionality and portability.\n\nExample delegation smartphones: For delegation, i have two examples: quick replies in notifications and functionalities of voice assistants. Quick replies are part of the operating system of smartphones and once users makes quick replies, they are delegated to the corresponding method of the messaging app, where it is then sent. A voice assistant also delegates certain tasks to apps / other software, like showing google web results. I would choose delegation in those contexts, as it makes the quick reply system and voice assistants much more compatible with different software. Apps are able to provide necessary implementations of messaging etc. to the assistant / quick reply system and it does not have to be implemented from scratch every time, as only the message text + receiver matters to the assistant.\n\n",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5595641,
      "meta": {},
      "text": "Inheritance extends a certain class by adding new functionality aside from the already existing implementation of the super class. Changes on existing functionality is then overwritten. On the other hand, delegation just passes requests to a certain functionality to the Delegate. It functions as a wrapper for the Delegate. \n\nInheritance is easy to use, as it is intuitive and does not require to delegate function calls to the Delegate.\nHowever, once the structure of the superclass changes, the subclass might has to change, too. \n\nDelegation therefore is flexible in terms of changes in the delegation class. However, passing the requests to the Delegate can create more (maybe unneccessarry) overhead.\n\nIn the context of a smartphone, a hardware abstraction layer (HAL) could use inheritance. The HAL provides a minimal implementation e.g. of a battery module that can be extended (by using inheritance) and a manufacturer extends this by e.g. adding quick charging.\nDelegation could be used for a Network Abstraction, that  ",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596130,
      "meta": {},
      "text": "The main difference between inheritance and delegation is that inheritance is used to extend or modify methods by implementing a new subclass, whilst delegation is used when we want to implement something that uses functionalities within another class already implemented.\n\nOne advantage of inhertiance is that it is easy to extend: we can simply create a new subclass that has different/additional functionalities to its subclass. We can also easily change the general behavior of all subclasses - simply by changing it's parent class. \nThis advantage however can also become an issue: we might not want all subclasses to change when we change the parent class. Also some subclasses might not want to provide all the methods of it's parent class as they might be unnecessary \n\nOne advantage of delegation is that it's flexible: Implementing your own queue for example is a lot easier if you make use of the already existing methods in List. You can simply take the functionalities of the List that are useful \nHowever, unlike with inheritance, delegation is not necessarrily supported by all programming languages.\n\nI would choose inheritance when it comes to social media apps. There are many different types of social media apps that all work somewhat differently. However, in it's core they're still social media apps, thus they all inheritate from it.\n\nI would choose delegation when it comes to apps that use the camera, because those apps make use of some functionalites provided by the built in camera of a smartphone.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5583965,
      "meta": {},
      "text": "At inheritence, the subclass can do everything the supperclass can do. This could lead to unwanted behaviour, beacause not every function should always be used from the upper class. But it is easier to implement because you do not have to call the class with the wanted function.\ninheritence is a good example for whitebox reuse.\n\nIn delegation, you call the method of another functin within the new class. This allows us to pick more flexible wich part of the other class we really want, but can be more complicated and maybe slower.\nDelegation is a classical blackbox reuse.\n\nAn example for inheritance in smartphones are the functionality for apps of getting an icon on the starting screen. Every app should get one, without edge cases.\nBut not every app should get the permission to make photos, for that, the allowed apps should use delegation to the OS.\n\n\n",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5585691,
      "meta": {},
      "text": "A difference is the connection between classes. In inheritance there is a subclass that inherits all methods and can call them on its own. The subclass cannot exist without the superclass. In the subclass methods with the same signature can be overwritten, which is not possible with delegation. With delegation, there are independent classes, whereby an attribute of the other class is stored, to which the method calls then are \npassed on. Thus with the delegation a method call cannot be accomplished independently, since always more objects must be generated.\n\ninheritance:\nA major advantage is the ease of use and thus the reuse of code. Thereby methods can be inherited from a subclass, which can save a lot of time.\nOne disadvantage is that when a change is made in the superclass, the subclass is also changed. This can be desirable, but this static binding also transfers errors to the subclasses.\n-> This could be applied to a smartphone manufacturer that produces different model series, but they all have the same basic functions and differ only in special featurers\n\ndelegation:\nOne advantage is run-time flexibility, since the object to which the methods are passed can also be changed during run-time. \nOne disadvantage this has, is a loss in performance, since on the one hand more memory is required to store at least one further object. It takes longer to execute a process when calls are made to other objects. This is because things are written/read to the stack each time.\n->This can be used in a banking app to ensure that an action cant be misdirected.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589410,
      "meta": {},
      "text": "We can describe the term inheritance as one of the most important factors to create a new class from an already existing class. The new class we created is the subclass and the other class existing before the subclass is called superclass. The structure of inheritance is a mechanism in which the subclass acquires all the properties and behaviours of the superclass.\n\nWe can describe the term delegation as the usage of an object of another class as an instance variable.",
      "score": 8.3,
      "language": "ENGLISH"
    },
    {
      "id": 5594441,
      "meta": {},
      "text": "Inheritance generally occurs when a class implements its (extended) parent-class' methods. In lieu of this it takes the parents methods, overrides them and/or adds its own methods. Delegation on the other hand simply implements another classes methods, without having to implement/override them itself. Because of this delegation generally offers less code (duplicates) than inheritance, inheritance on the other hand is a generally recognised concept, intuitively available in simple form in most (object orientated) languages.\nAn example for delegation in smartphones may be the camera (phone can take picture, but calls on the function of an \"external\" hardware part) - In a similar way, it would call on the microphone's software (which in turns controls the hardware), if it's use is required, offering the advantage of having outsourced possible processes (of actually recording, not displaying), which would otherwise not be used by anything else in the device.\nOn the other hand, an example for inheritance in smartphones might be the actual running apps in conjunction with the OS. The OS generally detects screen inputs, but once an app is launched, it may choose to not use the OS's input detection, but rather it's own: By not receiving the data rerouted via a middle process (OS), the actual response time may be faster (Compare: input -> OS -> app vs. input -> app).\nSimilarly, the use of the speaker system could be inherited: An example is the use of YouTube whilst listening to music - in most cases, if there is music running from a music app but playback of a video on YT is started, this will override the music app's use of the sound system.",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596237,
      "meta": {},
      "text": "Inheritance is when one class has all of the the methods from another class and more. It expands the functionality of superclass. Delegation is when there is a specific class has only methods needed for this class. With Inheritance it is easier to implement new functionality than with Delegation, because subclasses is easier to create than completely new classes. But Delegetion is more flexibale, because you only need to change one class, and with Inheritance if superclass is changed, subclasses need to be changed as well. Also some subclasses might inherit from superclass unwanted methods, that are useless for them.\nExample: most smartphones have a button with functionality to turn on and turn off screen. This is delegation, because the button has only these specific methods, that no other objects have.\nTouchscreen inherits all methods, like showPictures(), from oldfashioned Screen, and also has a new method detectTouching(). This is Inheritance. Theese examples show the difference between two concepts.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596422,
      "meta": {},
      "text": "The Inheritance lets one class take the property of another class. So the child classes take over all the attributes and behaviour from the parent class. this avoids code duplication so you do not have to code everything over and over again although you can still change the methods defined in the parent class in the child classes. Inheritance is hierarchical. And you can simply implement the  functionalities that are similar for all child classes in the parent class and have less work and much more usability as you can change things easier for all classes and also for single classes. \nWIth the Delegation you can simply pass tasks to another class. So one class sends the work it catched to another class where it is already implmented thus you can reuse the code there and have less coding work.\nTHe Inheritance is more static but also more structured then the Delegation. The delegation can take place during run time whereas the inheritance aims at the entity of an object which can only occur during compiling.\n\nOn a smartphone you have many different buttons the have different functionalities and purposes however I would implement a Button class all Buttons would be child classes to to implement the basic properties and attributes of all buttons since they are all quite similar and it would be easy to structure.\nwhen a button is pressed I would implmement a listener class that catches the pressing of a button and then sends that message that the button X was pressed to another class to do the action behind that. Here it is easier to delegate the work to another class and have one listener class.\n",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596564,
      "meta": {},
      "text": "Remark: I reused / adapted my last year's solution.\n___________________________________________\n\nInheritance works by extending from a superclass (having the same methods, attributes and adding some more functionality) whereas with delegation, another class is used to perform a specific task since it has already implemented some useful functionality.\n\nAnother difference is that delegation is more flexible than inheritance because with delegation we can use different classes as a delegate whereas with inheritance we are fixed by the way we implemented the inherited class.\n\nAlso, with inheritance we are bounded to extend the superclass even when we don't need all the functionality provided by the superclass, and we also need to make changes when changes in the superclass occur. On the other hand, inheritance is easy to implement, can be easier to read, unterstand and documented whereas delegation might get more complex and incomprehensible.\n\nLet's say we want to implement an online shop to sell different smartphones. It makes sense to have a smartphone class as well as different subclasses for the different smartphones (inheritance) because they share a decent amount of common attributes and functionalities and can be extended with additional parts above that.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596639,
      "meta": {},
      "text": "The main difference between delegation and inheritance is that delegation is implemented by creating an instance of the delegated object inside another object to use its methods, while inheritance is the process of creating a whole subclass of the respective class to have similar methods.\nDelegation: \n-Advantage: Changing the delegate at run-time is pretty easy => run-time flexibility\n-Disadvantage: Is not supported by the most popular object-oriented languages.\nInheritance: \n-Advantage: Is supported by the most popular object-oriented languages and provides dynamic polymorphism.\n-Disadvantage: Changes to the system structure are resource-intensive (you have to deal with a whole child-class, not just an instance of one like the delegation does)\n\nFor example, the delegation of functions from a smartphone would be useful if I had to create a smartphone from scratch, meaning that I would pay other big smartphone companies a trademark fee to be able to use their existing design and feature for my own smartphone. But nevertheless, it is still my phone and I can change every aspect of it in no time. On the other hand, in order to incorporate the previous features (but possibly improved) from an older model, many companies often use the inheritance concept to copy-paste and later improve the design and features for a newer version of the same smartphone.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585246,
      "meta": {},
      "text": "\nUnter Delegation versteht man eine dynamische Methodenanbindung. Das heißt, dass ein Request an den Delegator geschickt wird, der die passende Funktionalität holt und es dem Client zurückschickt. (Übertragung der Funktionalität auf ein Objekt)\n\nUnter Inheritance versteht man die Vererbung. Das heißt, dass eine oder mehrere Klassen von einer Oberklasse erben und die Attribute und Methoden der Oberklasse in den jeweiligen Unterklassen übernehmen. Außerdem ist es den Unterklassen möglich bestehende Methoden der Oberklasse zu überschreiben und zu erweitern. (Übertragung der Funktionalität auf eine Klasse)\n\nDer Vorteil von Delegation ist, dass es flexibler ist als Inheritance. Das ist, weil man verschiedene Funktionalitäten ansprechen kann, ohne dass es zu Fehlern kommt. Allerdings ist Delegation ineffizienter, da immer ein neues Objekt erstellt werden muss und der Request gesendet und darauf verarbeitet werden muss.\n\nInheritance hingegen ist leicht verständlich. Die Struktur ist klar und es ist einfach neue Funktionalitäten hinzuzufügen. Der Nachteil von Inheritance ist, dass alle öffentlichen Methoden der Oberklasse in die Unterklasse übernommen werden. Funktionaliäten der Oberklasse, die nicht mehr von der Unterklasse benötigt werden, werden auch übernommen. Das kann dazu undefiniertem Verhalten führen. \n\nFür das Bespiel Handy würde ich Delegation bei der Auswahl der Apps, die man starten will, verwenden. Da verschiedene Apps verschiedene Zwecke erfüllen und dementsprechend verschiedene Funktionalitäten haben, wäre Delegation viel besser, damit keine Fehler passieren. Immerhin soll man z.B. beim Hinzufügen einer neuen Nummer nicht plötzlich Buchstaben eintragen können. \n\nFür die Funktionen innerhalb einer App würde ich mit Inheritance verwenden. Innerhalb zum Beispiel einer sehr flexiblen Taschenrechnerapp möchte man z.B. neue Funktionalitäten wie eine Matrixmultiplikation hinzufügen können. Da eignet sich Inheritance gut für.",
      "score": 91.7,
      "language": "GERMAN"
    },
    {
      "id": 5585562,
      "meta": {},
      "text": "The difference between delegation and inheritance is that delegation uses object instantiation and method calls in order to reuse the functionality of other objects. Inheritance uses already implemented functionalities of the superclass.\n\nAn advantage of inheritance is that it is easy to extend an already existing class and add new features and functionalities and it is not necessary to create a new object (less expensive). But sometimes this advantage can lead to the exposure of unwanted methods of the superclass. \nAn example for inheritance is that you have a smartphone class as superclass and want to implement different smartphone-types (iOSSmartphone, AndroidSmartphone,...). In order to do so, it makes sense to use inheritance, because some base-functionalities can be reused by those subclasses and it will reduce the written code.\n\nDelegation has a solution for the disadvantage of inheritance: One of the main advantages is that the developer can choose which methods are wanted/unwanted, due to the creation of a new object. It is way more flexible.\nOn the other hand it can be inefficient, because of the creation of new objects.\nAn example for delegation in context of smartphones can be a class, which is part of an app, that includes administrator functionalities. To instantiate objects that do not include those functionalities it is useful to implement another class that creates an object of the administrator class and reuses the wanted methods.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5587509,
      "meta": {},
      "text": "Inheritance and Delegation are both alternatives for fixing the same problem.\n\n\nInheritance:\n\t\tWith inheritance, we simply use and modify the methods and properties of a parent/super class. \n\t\tThereby we work with actual code and  work/execute the relevant class directly and by our self.\n\n\t\n\nDelegation:\n\t\tWith delegation, previously established functionalities can be reused by using object instantiations \t\t\n\t\tand method calls. Unlike in Inheritance, this is not done by implementing methods themselves or by \n\t\tinheriting them from a parent class, but rather by simply calling the method of interest in any actual \t\t\t\t\t\n\t\tinstance of a class without touching the code of the other class\t\n\n\nExample:\n\n\t\tif we talk about. ",
      "score": 16.7,
      "language": "ENGLISH"
    },
    {
      "id": 5588066,
      "meta": {},
      "text": "In inheritance, implemented functionality is reused from a superclass. In delegation, implemented functionality is reused from an existing object. This means that delegation needs an instantiated object, while inheritance doesn't need an instance of the superclass. Additionally, with delegation we can fine-tune which functionality we want to reuse.\n\nThis means that an advantage of delegation is that it's more flexible, because it doesn't depend on a superclass However it's potentially less efficient, because an object needs to be instantiated. \nOn the other hand, inheritance is more straightforward to use, as subclasses directly inherit the functionality from the superclass, and implementing new functionality can be done through overwriting the inherited parts. A clear disadvantage of this, is that not all inherented functionality is wanted, so inheritance may expose some unwanted methods of the superclass.\n\nIn the context of smartphones, one example of inheritance would be that an apple phone, samsung phone, etc are all subclasses of a class \"Smartphone\". An apple phone or a samsung phone ARE \"Smartphones\", and they all offer functionality that's central to the term smartphone, which is inherited from this superclass. An example of such an inhereited functionality would be a method call(), or a method text(). \nAn example of delegation would be an app reusing functionality from the smartphone itself (In this context, from the smartphone's OS). For example an app like truecaller or whatsapp would delegate some of the call functionality to the phone (such as using the microphone, outputting the audio, etc).",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589823,
      "meta": {},
      "text": "Inheritance extends a super-class either by adding a new function or modifying (\"overriding\") an already existing functionality, but no instance of the superclass has to be created in order to access already existing methods, instead the can be called with the word \"super\".\nAn advantage of inheritance is that new functions can be implemented easily in a subclass.\nHowever can a change in the superclass also require changes in the subclass which is a disadvantage.\n\nDelegation is - as the name suggests - passing on a task. It reuses a functionality which has already been implemented in a different object. \nTherefore an object instance of the class where the functionality is already implemented has to be created in the calling class. The task is then sent to this instance. E.g. Class S delegates to class D. For this purpose we need an instance of D in class S. We can pass the argument which is given to the method in S directly to the instance of D which calls a method from D.\nSince an instance of another object needs to be created for delegation to work, this can lead to inefficiency. On the other hand delegation allows run-time flexibility. The delegate, in our case class D, can be changed at run-time.\n\nYou should use inheritance for a smartphone app which provides two apps. A base level app and a pro version which inherits from the basic version but implements additional features.\nDelegation should be used when a text view is used that responds to various input by the users. The app has to call on delegate functions accordingly.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5591841,
      "meta": {},
      "text": "Delegation is when an object uses another object to execute a method. In contrast to that inheritance is when an object inherits from another class in through that gets access to the desired method.\nAn advantage of using delegation and disadvantage of inheritance is, that the object doesn't have adapt itself to changes in the parent class. Whereas the other way around when an object inherits the method it doesn't have to create an object to use it.\n\nAn example of inheritance in the context of smartphones would be individual setting in the settings app. Here it makes sense to have an abstract settings class and then each individual setting has its own class, where it is implemented.\n\nAn example for delegation would be using the camera. Many apps use the camera and it wouldn't make sense to inherit from it to take a picture, it's more intuitive to use a camera object to take a picture",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5592563,
      "meta": {},
      "text": "In inheritance, a class inherits the methods of it's superclass and therefore also has all the functionality of the superclass.\nThis is used, when you know, what the system looks like and just want to reuse the functionality of some certain functions and attributes.\nThere is the difference between inheritance and delegation. \nIn inheritance, you know the system and reuse some functions. In delegation, you just know, how to communicate with the class, you delegate all the tasks to. You don't have to think about the implementation.\nThat's the job f the other class.\n\nThe advantage of inheritance could be, that your code is better structured in certain tasks and therefore easier to read. The relationship between related objects is more clearly expressed.\nA disatvantage of inheritance could be, that you can call the methods of the superclass, even though, you are not allowed to use them.\nWhen an app communicates with the operating system, to check, if there have been any inputs, the app can't inherit the functionality of the operating system. That would mean, that the app can do things, only the operating system should be able to do and read all inputs. Not just the ones directed to the app.\nFor that use case, deligation would be best. The app delegates the task of listening for inputs to the operating system and waits for an answer.\n\nThe advantage of Delegation is, that you don't have to know about the implementation of the Code.\nThe disadvantage of Delegation is, that you may have a lot of unnecessary and slow code, that you have no control over.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596338,
      "meta": {},
      "text": "Inheritance is used for seperate different elements/objects that behave and are used in the same way.\nDelegation on the other hand is much simpler, as it just 'delegates' certain activities/methods to other elements, that are not similar in behavior or appearance.\n\nInheritance: + is used especially to avoid code reuse\n\t\t    -  too much inheritance can be more complicated\n\nDelegation: + is easier to implement\n\t\t    - not appropriate at times\n\n\nExample: Inheritance for smartphones would be used to seperate different models (e.g. Galaxy A50, Galaxy S9, etc.), while a phone delegates to the camera for example to take a picture.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596697,
      "meta": {},
      "text": "Inheritance means that a (sub)class extends a (super)class by adding to the already existings methods (and variables) their own ones or by owerwritting methods. A benefit is that adding new methods in subclasses is easy, disadvantage is that the subclass might inheritate unwanted methods.\n\nDelegation: You delegate a task to another object. Benefits is that it is more flexible, however you might have to initialize a new object.\n\nSmartphone apps with used technologies/softwares that not every smartphone has: I would use Inheritance because you could build a basic superclass and specify in subclass on different smartphone models.\n\nSmartphone time: Delegate to the smartphone system to tell the time.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5584566,
      "meta": {},
      "text": "Inheritance can be used for reuse of already implemented code. A subclass implements the functionality of the superclass, The subclass extends the superclass by a new operation or it overides an already existing operation.\nAn advantage of inheritance is the ease with which new functionality can be implemented in the subclass. A disadvantage is that the subclass may be forced to change due to changes in the superclass. In the context of smartphones, inheritance can be used for building different smartphones which are all based on the same underlying hardware. E.g. a company may build the fundamental part of a smartphone which can be used to build several different versions of smartphones which are all using the same fundamental parts.\n\nDelegation uses the functionality of already existing objects by instantiating the objects and then using their methods. An advantage of delegation is its flexibility. Objects can be easily instantiated in order to use its methods in other classes. A disadvantage is the ineffieciency of delegation because instantiation of objects is costly. In the context of smartphones, delegation can be used while building the smartphone. E.g. a company may be buying certain parts of the hardware from other companies, like the processor, and use it in their own smartphone. Thereby using its functionality.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589406,
      "meta": {},
      "text": "Differences\n\nBy reusing with inheritance we use either an already implemented functionality from the superclass (Implementation inheritance) or we use a functionality that was specified in the superclass (Specification inheritance). But either way, we are using a functionality from the superclass in the subclass.\n\nIn reusing via delegation we must have an object, that has this functionality that we want to use and we can use it via requesting to this object. (-> by calling a method)\n\n\nInheritance Advantage: We can easily use functionalities of the superclass without having to implement them again (and we also don't have a code duplication therefore.)\n\nDisadvantage: We might not want some of the inherited functionalities in the subclass. (It might not be suitable for this specific subclass.)\n\nDelegation Advantage: Delegation is very flexible, we have the option to only use the called functionalities, we don't have to have all the methods of that class like we do in inheritance.\n\nDisadvantage: If we don't already have an object, whose functionality we can use, then this object has to be created and this takes up some memory place and means more work (->Inefficiency).\n\n\nSmartphones Example\n\nInheritance: The making calls app can inherit from the app that has the numbers of the people, because we can use all the methods such as adding a new number etc. in the making calls app.\n\nDelegation: The app that has the numbers (and informations) of people can use a method from the calendar app, when setting a new (birthday) event in the calendar. But the other methods shouldn't be visible.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589787,
      "meta": {},
      "text": "Inheritance vs. Delegation:\n\tIn Delegation a class is called, which calls another class, who again delegates the original request(class) to another class, etc. So in order to do the original request, the request has to be pushed from one class to multiple others to reach the class that can do the. request. In inheritance there is a direct connection and the request will be executed by using a function from the superclass instead. \n\nInheritance:\n\t+ straight-forward to use since there is just one direct connection between the two classes\n\t- might expose methods/features you don't want to have\n\nDelegation:\n\t+ flexible to use\t\n\t- less efficient, since the request goes through many classes until execution\n\nSmartphones - Examples:\n\tInheritance: If the smartphone has an email function and wants to add a message functionality for sms/wifi messages (whats app etc) it can use inheritance and therefore inherit the functions from the superclass (email) and use it for sending the messages.\n\n\tDelegation: If you use smart home devices such as light bulbs in your home and you control them with your phone, you can use delegation. the request turn off light for example can be delegated to multiple classes before it reaches the class which actually turns off the switch in the light bulb wire.\n\t\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5592893,
      "meta": {},
      "text": "Inheritance means that you implement/reuse all the features of a superclass. Whereas delegation doesnt reuse the functionality in the own class, but gives the command to another class to do so.\n\nTherefore delegation needs an already existing object which then can be given the commands. Which could be inefficient, if it always has to be created. On the other hand delegation is good because you dont need to use all the functionality of the other object but just the methods which are useful for you (hide implementation details).\n\nInheritance is kind of the other way round, because you inherit from a superclass which means you have all functionalities of that class even those you dont want/need. In practise inheritance is the easier way to reuse functionality, because its more intuitive, better extentable and more supported (eg. by programmingLanguages)\n\nExample for inheritance i would say the lockscreen and normal background because both are backgrounds(superclass and liskov) and have mostly shared functionalities. But the implementation might slightly be different, e.g the scaling of the image(normal has to be slideable/bigger because you can have more pages, but on the lockscreen you only have one view)\nFor delegation i would say the share feature, because when you are in the gallery and want to share a picture. The gallery isnt a subclass of telegram, only needs the one share function of telegram and therefore gives this command to it, which might lead to a new instance(telegram has to be opened)",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593012,
      "meta": {},
      "text": "Inheritance reuses a specified or implemented functionality from a super class i.e. the new classes take over the attributes and behavior of the pre-existing classes, while delegation reuses implemented functionality in an existing object. Delegation can be viewed as a relationship between objects where one object forwards certain method calls to another object.\n\nInherintance\nAdvantage: Inheritance is straightforward and easy to implement.\nDisadvantage: If you change the signature of the superclass, all the subclasses have to be recompiled.\nExample: Basic mobile functionality is to send a SMS, make and receive calls. The brands, which produce smartphones, are using this basic functionality and extending it by adding new original features. For example Apple brand manifactures its new model with advanced operating system like iOS 15.5. The new iOS uses the previous functionalities and adds more to them. Another example are the monthly updates of every social media apps like Instagram, which provide new interesting actions for the users e.g. liking people's stories. I chose this example because it's relatable and easy to understand.\n \nDelegation\nAdvantage: Delegation is flexible to be changed at run-time. \nDisadvantage: An object instance needs to be created and that leads to inefficiency.\nExample: Instagram app has a feature for uploading stories in the user's profile which shows the pictures that are stored in the phone's gallery so that the user can chose one of them and then upload it. This shows the communication between the two apps and I think it describes delegation, so that's why I chose it as example.\n\n\n\n\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594144,
      "meta": {},
      "text": "The main difference between inheritance and delegation is that inheritance results in a child class who is containing/inheriting all methods and attributes of a parent class whereas delegation is just catching a certain operation and transmitting it to a delegate which executes the operation. Inheritance is mainly to avoid code duplication as all methods and attributes from the parent class are being copied implicitly. The child class which inherits all these components can also extend its own class to add functionality and override existing operations to optimize them. Delegation just gives access to operations of a delegate to another class in that sense, there is no copying and inheritance involved. That's why delegation is more flexible than inheritance as the class using delegation is only calling the operations of the delegate which has to implement them, you can say that its just all about providing an API to call them methods in the delegate. Though, it might be more inefficient as the class using delegation needs to instanciate an object of the delegate to use the methods. Inheritance on the other hand is pretty straightforward to use and is also supported by many programming languages. It is quite easy to implement new operations in the sublass. unfortunately Inheritance exposes all methods of the parents class, even if u don't want them to be exposed. Changes in the parents class obviously mirror to the subclass which you also might need to optimize again after changing something in the superclass. For example, in context of smartphones, i would prefer the apps to use delegation to access system functions or operations of the operating system as it would be safer and better than giving the app every possible function an OS has to offer by inheriting them because there is no reason for an app to be able to use all system components including critical ones. Inheritance would be useful for OSes which should derive from other OSes like iOS from Darwin/macOS or Android from Linux respecitvely. Using interitance here would be very time-and rescource-saving and we would be able to optimize the OS for its respective platform which inheritance allows.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595205,
      "meta": {},
      "text": "A.\n\"Vererbung\" benutzt für gewöhnlich eine bereits implementierte Methode aus den Oberklassen einer bestimmten Klasse, die mit ihr in einer Vererbungshierarchie steht.\nPro:\n- Es ermöglicht effiziente Wiederverwendung\nContra: \n- Vererbung legt die öffrntlichen Methoden der Oberklasse offen und ermöglicht Zugriff/Manipulation\nB.\n\"Delegation\" benutzt eine bereits implementierte Methode aus einem anderen Objekt, so wird eine Aufgabe sozusagen an ein anderes Objekt weitergegeben, welche diese dann für einen selbst erledigt.\nPro:\n- ermöglicht eine Verringerung der Verkoppelung von Klassen\nContra: \n- schwieriger zu implementieren als Vererbung\n\nIch nehme fürs Beispiel an wir simulieren ein Smartphone mit jeweiligen unterschiedlichen Smartphone-Sorten mittels OOP.\n\nVererbung:\nMit einem Smartphone soll man telefonieren (unabhängig vom Smartphone-Typ) können. Wenn wir nun ein Smartphone von Sorte X haben, könnten wir nun Vererbung nutzen, um auf die Methode \"telefonieren()\" in der Oberklasse zuzugreifen, da ein Telefonat egal welches Smartphone immer gleich funktioniert. Wir nutzen also die bereits implementierte Methode aus einer Oberklasse.\n\nDelegation:\nDa Smartphones eine Reihe an Funktionen ermöglichen, haben wir auch Funktionen, die nichts mit dem Smartphone an sich zu tun haben. Beispielsweise eine Uhr-App: Hier können wir die Aufgabe die Uhrzeit zu berechnen wir also an einem Stellvertreter abgeben, und dieser liefert uns die benötigte Zeit zur weiteren Verwendung z.B. Anzeige in der UI.\n",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5595983,
      "meta": {},
      "text": "Inheritance means that a class with new functionality is a subclass of another class that contains functionality required for the new class. Delegation means that the new class stores an instance of the other class and delegates function calls to that class. \nAn advantage of inheritance over delegation is that it is an easy way to extend the functionality of an existing class without writing boilerplate code.\nA disadvantage is that the derived class also exposes all public members of the base class, which could be misused. \n\nAn advantage of delegation over inheritance is that it is possible to hide functionality of the other class.\nA disadvantage is that calls to methods that are delegated include another layer of indirection which can have a negative impact on the performance.\n\nInheritance could be used in smartphones to make it possible to have a common interface for different types of network connections, e. g. WiFi or cellular network. \n\nDelegation could be used in a smartphone to allow multiple apps to take pictures with the camera. These apps are not based on the camera app. If a user wants to send a picture in a chat message, the request is delegated to the system's camera app. ",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596023,
      "meta": {},
      "text": "Vererbung: Das bedeutet, dass Klassen (sog. Unterklassen) von anderen Klassen ( sog. Oberklassen) die Methoden, Attribute etc. erben und ggf. überschreiben können. \n\n\t-\tVorteil:\tEs wird von sehr vielen Programmiersprachen unterstützt\n \t-\tNachteil: \tEine Änderung in einer Oberklassen kann zur Änderung in der Unterklasse zwingen. \n\t-\tBeispiel:\t\n\nDas Smartphone sollte bestimmte Funktionalität haben, wie bspw. Anrufen, Nachrichten schreiben und Fotos machen. Im Nachhinein, wenn man ein Betriebssystem wählt sollte dies, die Funktionalitäten des Smartphones erben.\n\nDelegation: Das bedeutet, dass ein Objekt automatisch Eigenschaften und Funktionalitäten, die selbst nicht explizit definiert wurden von einem anderen Objekt übernimmt. \n\t\n\t-\tVorteil:\tEs ist sehr flexibel und man erbt nicht die ganze Funktionalität wie bei der Vererbung\n\t-\tNachteil:\tDa es Instanzen benötigt bedeutet dies, dass es zur Ineffizienz führt\n\t-\tBeispiel:\t\n\nDas Smartphone selber sollte nicht die Funktionalitäten von anderen Apps machen, sondern es gibt für z.B. eine andere Kameraapp die Funktionalität weiter an das Objekt.\n\t",
      "score": 83.3,
      "language": "GERMAN"
    },
    {
      "id": 5596635,
      "meta": {},
      "text": "Inheritance is an extension with subclasses of a superclass. The subclasses can take certain attributes/ or can override them for the Superclass.  Delegation however catches an operation with the \"receiver\" and sends it to another object, the \"delegate\". \n\nThe advantage of Inheritance would be that it is easy to use for new implementations and is supported by many programming languages. Its disadvantage would be unintentionally exposing some methods of the superclass to the subclass. \n\nDelegation has the advantages of being generally more flexible and can use the functionality of a method without having to override it. disadvantages of it would be that it might be more inefficient because it needs an object instance to be created and it might not be supported by as many programming languages as Inheritance is.\n\nUpdates for Smartphone apps can be used as examples for Inheritance. You already have a base structure you don't want to change, but to improve. So the methods in the subclass can override methods of its superclass without changing them there, the base structure. \n\nWidgets for your Homescreen can be seen as an example of Delegation e.g. the weather app widget. It shows you the most important information from the app itself and lets you check certain things on the widget itself. So the most important functionalities are on the widget, but for more detailed information and more functionalities, you have to go to the app itself.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596701,
      "meta": {},
      "text": "While inheritance takes the whole properties of another class, delegation means that you use another class as an instance variable. Because of this, methods invoked with inheritance are guaranteed to be instanciated, but inheritance should only be done when  you can follow liscoff substitution principle.\n\nAn advantage of delegation is that it is run-time flexiblity. The disadvantage is that you cannot just assume that the object is already instanciated.\n\nAn advantage of inheritance is that it lets code be reused, which leads to easier maintenance. Also as mentioned before the called methods are reliable, but inproper use of it may lead to wrong solutions and unused data in base class may lead to wasted memory.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596720,
      "meta": {},
      "text": "Inheritance: inheriting an existing class A to use As functionality to provide a new functionality.\n\t- can potentially exhibit behavior by the superclass that is not wanted, e.g. other methods that were implemented by the superclass\n\t+ sub-classing can go very fast as most of the functionality is usually already implemented\n\nDelegation: delegating the task given from class a to another object o of an existing class c\n\t+ hide functionalities of class c by using only specific functions and directly operating on object o, keeping o private\n\t- existing class c needs to be instantiated and therefore consumes resources\n\nExamples:\n\tDelegation: Payment integration into an app. The new app aist needs an in app payment option. It therefore instantiates a class given by googles integrated payment system and uses this to fulfil payment.\n\tInheritance: UI of android smartphone shall be changed. The components needed to change the UI are already implemented in the android OS. One does not need to reinvent the wheel, but can simply inherit the needed UI class and override the methods to display the UI. As the UI is used often additional delay by delegation to another class does not occur.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585681,
      "meta": {},
      "text": "First Delegation means that you use an object of another class as an instance variable. This instance variable we use to pass on some work of our class to another class. So here we reuse the implemented functionality or attributes of an existing (random, not related) object. Inheritance means creating a subclass from an existing implementation. Thus here we reuse the implemented functionality or attributes of a superclass. \n\nThis also means that in delegation we need a instance to reuse functionality while in inheritance we can just use it. (con of delegation, pro of inheritance). But regarding delegation we are more flexible than inheritance since we can design a new object instead of being dependent on a upper class that maybe has functionalities that we actually do not need. \n\nDelegation reduces coupling which generally good for software projects. Furthermore if you have taxonomies of \"is-a\" relationships you can reduce code duplication with inheritance. \n\nIt would make sense to have some pattern how things are displayed in the smartphone using inheritance. So making a upperclass \"App\" that has some properties like an open() method would reuse the code for the frame of an app. This would speak for inheritance. This means that when changing something how apps generally behave we just have to change the upper class of the App instead of all Apps.\n\nIn the camera app of a smartphone one component is usually that you can edit a picture (adjust the filters) . When creating a smartphone camera app we could include this functionality using delegation. First we just need certain methods of this component that are really specific (inheritance would not make much sense here). Furthermore we can update this edit component when we have new ideas. \n\n\n\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5586045,
      "meta": {},
      "text": "Inheritance describes 'is a' relationships, so every B that inherits from A is always also a full A. Delegation describes 'has a'/'uses a' relationships, so there is generally no hierarchy between an A using a B via delegation.\nInheritance is best suited to model hierarchies or implement interfaces, as it enforces full implementation of the parents functionality in the child and thus allows for runtime polymorphism. This however also limits the use cases of inheritance strictly to such cases, where a child is always a superset of its parent. If class B should only provide a part of the functionality of A, delegation would be more well suited, as this enforces no strict hierarchy and thus allows for tailoring the provided interface to only the required parts, by wrapping or hiding provided functionalities. However, where inheritance provides all and only that which is necessary in one object, delegation typically instantiates multiple objects while only using parts of their functionality, resulting in unused resources.\n\nWith smartphones, an example that illustrates both concepts is speakers. Not every smartphone has speakers or requires them, thus it wouldn't make sense to include them in our 'template smartphone'. Some families of smartphones do use speakers, but since they are not included in the abstract 'template', this has to be delegated. This is good practice, as small electronic parts are usually assembled separately from another by individual specialized companies. However, when a smartphones uses speakers of model 'X' this is also an example of inheritance. Speakers 'X' don't uses some abstract 'template speaker' to function, they are an implementation of this template. Model 'X' is a speaker, thus making inheritance the natural way to model it.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5592471,
      "meta": {},
      "text": "Inheritance reuses implemented functionality in the superclass and often also extends this functionality in the child class.  It expresses an \"is-a\" relationship  (e.g. \"Dog\" and \"Penguin\" inherit from \"Animal\").\nAdvantage: It is supported by many popular programming languages and allows runtime polymorphism or method overriding \nDisadvantage: May expose unwanted methods or attributes of the parent class.\nExample: Let's say that we're modelling different mobile phones, their functionality and parts, that a company such as Apple released over the years. For this model, inheritance is fitting to visualize the similarities between the phones. (iPhone → 3G, 4, 5, 6, 6s, SE, 7...). All the smartphones have the same basic functionalities like making a call and taking a photo, but also their own features. There is an \"is-a\" relationship.\n\nDelegation, on the other hand, makes use of an already implemented functionality of a specific class by, for example, sending a request to this class to invoke its method. \nAdvantage: As it doesn't have to take over the behavior of an existing class, it's more flexible.\nDisadvantage: Creating a new object instance makes it more inefficient  \nExample: Face ID and typing in the password manually (Passcode) is a possible example for delegation. The functionality of unlocking the smartphone is already implemented in the class Passcode so calling the \"unlock()\" method in FaceID without having to override \"enterPasscode()\" of Passcode is more fitting.\n\nSo their main difference is the following:\nInheritance uses the functionality of an existing class by introducing a new (child) class, while delegation just passes the task off to another class -without creating a new one.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594247,
      "meta": {},
      "text": "Inheritance means reusing the functionality of other classes in form of subclasses. The advantage of using inheritance is that all the functionality of the superclass is used without writing extra code. A disadvantage is that some unnecessary functionalities, which are only used by the superclass are still available in the subclass. This gives extern users the chance to use methods, which are not created for that class. In smartphones, you can find inheritance in the smartphone apps. The apps of Android are based on Java, which means most apps are using superclasses like Thread or Iterator to inherit the functionality.\n\nDelegation is the reuse of object instances from other classes. The advantage is that delegation still gives the class the possibility to access the functions of a class, but it avoids the usage of wrong functions by an extern user. A disadvantage of delegation is the inefficient use of storage caused by the extra instance needed to create the object. In smartphones, you can find delegation in the app store. When you are downloading apps you create a new instance of the app on your smartphone, which gives the user full access to the functionality of the app but avoids the wrong usage.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5594768,
      "meta": {},
      "text": "Inheritance uses an super class, from which all methods and attributes are inherited to a certain lower class. So every attribute and every  method exists in that lower class, along with methods and attributes that were added manually. Inheritance is very easy to use (supported in many languages) and is quite efficient. A contra is, that sometimes, certain methods or attributes are unwanted what could lead to unwanted behavior of the inheriting class. This problem is tackled by delegation which creates a new object and uses certain methods and attributes of this object. This makes it possible to not use every method and attribute of an existing object. This is a clear advantage if you want to only use specific methods or attributes of a certain class. Compared to inheritance, delegation is not that efficient.\nExample for inheritance: Imagine you have a smartphone application in which tutors can communicate with students. So the student and the tutor class inherit from upper class Person that has the attributes name and gender and the methods chat(). Additionally, tutors can block users that violate the terms of conditions and have the additional method blockUser().\nExample for delegation: Imagine having a Database application that only allows a user to add data and access Data. By delegation, a new object is created that has a List and only invokes the methods add(), get() and contains() of that list. So all other functions a list has, are ignored which is exactly what we want.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5595818,
      "meta": {},
      "text": "Inheritance and delegation are ways to reuse code.\nWhen using inheritance you reuse the existing code by creating subclass of the existing code. This brings the advantage, that you can easily use existing functionality and add new functionality or chance the functionality of some methods. A disadvantage is, that you are not able to hide the existing methods, so these can still be used, even if you don't intend that other use these any more.\nWhen using delegation you reuse the existing code, by creating a instance of the existing class and using the functionality they provide. One advantage is that you don't have to know the code of the existing funtionality. You can just use it. So if something changes in the existing code, you don't have to change anything in the new code, as along as the signatures don't change. One disadvantage is",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596557,
      "meta": {},
      "text": "Inheritance - is the process by which one class takes the property of other class, taking over the attributes and methods of the parent classes. Simply saying, Inheritance is sharing of code among multiple classes. Delegation in the other hand means that an object of another class is used as an instance variable, and  forwards certain method calls to another object.\n\nInheritance advantage: Inheritance reduces code duplication. \nInheritance disadvantage: If the functionality of the parent  is changed, the functionality of the child class will be changed as well. \n\nDelegation advantage: run-time flexibility\nDelegation disadvantage: could lead to confusion and inefficiency by forwarding too many methods \n\nInheritance Example:  by Google-smartphones - the base functionality/OS of the the smartphone is build upon the google services like Calendar, Handout, Chrome and etc\n\nDelegation Example: When smartphone uses a third-party application for, for example, reading and opening zip-file, when this functionality is not provided by standard OS. \n\n\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596655,
      "meta": {},
      "text": "Inheritance is the concept where a child class inherits and is able to take over all the class attributes and methods of the superclass.  It helps us to avoid code duplication and to support polymorphism. The disadvantage is that the super- and sub-classes become highly coupled. An example could be using app twin: we could have a \"parent\" main account and a \"child\" sub-account. Because they would have different permissions, their functionality would be similar but overridden in child class.\n\nWith delegation, we simply use the object of some class as an instance variable and then delegate duties to it. This is particularly convenient when we do not need to override or inherit all methods of class but just want to access its functionality. However, it does not support polymorphism. Perhaps, an example would be using the default app on a smartphone. When we want to open something, the system would not care about the details on how to perform it, it would simply delegate the task to the default app automatically. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5584005,
      "meta": {},
      "text": "Inheritance and delegation play a big part in the interface specification during object design. They are different ways to realize a new functionality for the interface by reusing existing functionality in the system. Like the name implementation inheritance implies, subclasses to already exisisting classes are created, which inherit certain methods that make realizing this new class possible. An advantage of this way is, how efficient it is to implement, because you just need to quickly create a subclass that extends the superclass. But a superclass inherits all its public or protected methods and attributes, which could also mean that the new subclass has methods, which could prove inconvenient for its original purpose. An example for smartphones would be how many app classes inherit from the notification class, but override the notify Method to only change the message, because otherwise notifications are the same.\nDelegation reuses already implemented functionality by using an object of the class to call the desired method in the new implemented method. Therfore the relationship between the new class and the old one with the used methods is that of a one sided dependency. The advantage there is how easily the delegation to the object can be changed. The need to create a instance of a class for every delegation to another class, which proves inefficient, can be seen as a downside. In the smartphone a flashlight class could delegate lighting up the camera to the camera class by using its flash method for a desired amount of time. Because the flashlight is just a long flash.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593646,
      "meta": {},
      "text": "Bei einer \"Inheritance\" gibt es eine Eltern- und eine Kindklasse. Die Kindklasse erbt alle Attribute und Methoden der Elternklasse und kann neue hinzufügen. \nBei \"Delegation\" arbeitet eine Klasse dagegen mit Objekt(en) einer anderen Klasse, diese können als normale Attribute aufgefasst werden, es liegt also insbesondere keine direkte Erweiterung einer Oberklasse vor.\n\nBei einer Inheritance ist die Kindklasse quasi eine Erweiterung der Elternklasse (Whitebox Prinzip). Bei Smartphones könnte es beispielsweise die Oberklasse App geben, welche Eigenschaften wie Version der App oder Menge an Speicherplatz speichert. Eine Unterklasse könnte Google Maps sein, eine spezifische App, mit den Eigenschaften der Oberklasse (z. B. 1.1 GB Speicherplatz, Version 4.3.2), aber auch eigenen Eigenschaften wie zB. letzter Standort. \nEine Inheritance hat den Vorteil, dass man Komponenten hierarchisch aufbauen kann, wodurch ein Projekt eine klare und schnell verständliche Struktur erhält, da dieser Aufbau auch in unserem Alltag oft aufzufinden ist.\nEin Nachteil ist, dass die Elternklasse Methoden/Attribute zu Verfügung stellt, welche von der Kindklasse ggf. nicht gewollt sein könnten. \n\nBei einer Delegation arbeitet eine Klasse auf einem Objekt einer anderen Klasse (Blackbox Prinzip). Beispielsweise arbeitet ein App-Store eines Smartphones mit einer Liste von Apps, auf welchen beispielsweise vom Store Methoden wie \"herunterladen\" aufgerufen werden. \nEin Vorteil von Delegation ist, dass man flexibler mit anderen Klassen arbeiten kann, da zusätzlich zu Verfügung gestellte Methoden kein Problem darstellen, da diese nicht direkt von außen aufgerufen werden können. \nEin Nachteil ist, dass ähnliche Methoden ggf. noch mal geschrieben werden müssen, da man von außen nur auf die Methoden einer Klasse zugreifen kann, was zu vermeidender Redundanz führen könnte. \n\n \n\n",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5593897,
      "meta": {},
      "text": "There are several differences between inheritance and delegation. \nTo understand the differences, we need to have first a short description of both concepts. When you inherit from antoher class, you create a sublclass, which reuse the functionality of the superclass and get therefore the desired functionalities. \nDelegation means, that you use the functionalities of an instance of antoher class in your class, and therefore get your desired functionalites. The difference is, that you have an concrete instance of another class in your own  class, while with inheritance you get the functionalities from an superclass, which is often abstract.  The advantage of inheritance is, that you can easily get the desired functionalities, without initializing a concrete instance of a class. The disadvantage of inheritance is, that you often get a lot of undesired additional functionalities, which often the user not need, or should not be able to use. The advantage is, the better overview and structure a system gets through inheritance. You avoid a lot of duplication of code for exemple, because the subclasses can access  the functionalities of the superclass. The advantage of delegation is, that delegation comes along with great flexibility. The disadvantage is, that compared to inheritance it can be insufficient, because you have to initialize an object, in order to use delegation. \n\nSmartphone Context: \nInheritance in the Context of  Smartphone: \nIf you would have different GUI interfaces for several standard applications in your smartphone , which all needs for exemple similar attributes, like log in button, exit button etc... . In this case it makes sense, if you have a superclass, which predefine the attributes, so that you don`t have to implement these separately. Through the advantage, that you avoid a lot of code, I would \ndecide to use the inheritance strategy in such a use case. \nDelegation context:\nIf I want functionality of a certain class for the development of a system for a smartphone-app and don`t want the possibility to accidentally override it, I would take delegation instead of inheritance. \n\n ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596503,
      "meta": {},
      "text": "Bei Vererbung nimmt man eine Klasse, die schon gewisse Funktionalität, die man benutzen könnte um die benötigte Funktion zu implementieren und macht seine eigene Klasse, in der die Funktionalität implementiert werden soll eine Unterklasse von dieser. Dadurch kann man auf die Funktionen der Oberklasse zugreifen und mithilfe dieser die gewünschte Funktion leichter implementieren. Vorteilhaft ist, dass dies in fast allen Programmiersprachen funktioniert, ein Nachteil ist jedoch, dass eventuell Funktionalität der Oberklasse ungewollt durchscheinen kann, was ungewollte Funktionalität und damit Sicherheitslücken bringen kann. \nIm Kontext von Smartphones würde ich Vererbung benutzen, wenn es um eine App geht die dazu genutzt werden kann um mp3 Dateien abzuspielen und zu kürzen, da sämtliche Funktionalität der Oberklasse auch in der Unterklassen benötigt wird. Durch das erben von einem schon implementierten mp3 Player kann von diesem die abspielfunktionalität übernommen werden und diese so modifiziert werden, sodass das kürzen auch möglich wird.\n\nBei Delegation hingegen wird eine Vermittlungsklasse implementiert, die den Funktionsaufruf entgegen nimmt und an eine Klasse weitergibt, in der die Funktionalität schon implementiert ist. Vorteilhaft ist dabei, dass im Vergleich zur Vererbung die Funktionalität der Klasse zu der der Funktionsaufruf weitergegeben wird nicht durchscheint, die zusätzliche ungewollte Funktionalität wird also vermieden. Performanztechnisch kann diese Lösung wegen der Instanziierung der Klasse an die delegiert wird jedoch schlechter sein als die Lösung mit Vererbung.\nIm Kontext von Smarthphones würde ich Delegation benutzen, wenn beispielsweise innerhalb des Programms eine Website dargestellt werden sollte. Die Anfrage wird an einen Webbrowser weitergeleitet, der die Seite darstellt und die gerenderte Grafik wieder zurückgibt. Delegation wird hier benutzt damit keine ungewollten Extrafunktionen vom Webbrowser durchscheinen.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5596658,
      "meta": {},
      "text": "A delegation means that you use an object of another class as an instance variable. It is a relationship between objects where one object forwards certain methods to another one. For example , if you want to share or send something from one smartphone to another, you would use delegation . The primary advantage of delegation is flexibility. But on the other hand, it may be not that efficient , because we have to create an object as an instance everytime we delegate. \nMoving to inheritance . It is the procedure in which one class inherits the attributes and methods of another class.  When you want to subclass from a superclass and they must have the same type. Taking the smarphone and its apps as an example. In this case, the smartphone is the mother class, nad every app is a subclass. It is gonna use everything that the phone has. An editing app needs to access pictures and videos of the phone. A pdf app needs to access the files of the phone. The advangtes of using inheritance are how it is well supported by so many programming languages unlike delegation. And it is easier to be implemented. But it can also as a disadvantage expose some unwanted methods of the parent class . ",
      "score": 58.3,
      "language": "ENGLISH"
    },
    {
      "id": 5591173,
      "meta": {},
      "text": "Inheritance consists in extending a base by a new operation or in overriding an existing operation, this means that a class is already implemented which does almost the same as the sublcass, while delegation refers to catching an operation and sending it to another object where it's already implemented.\nThe inheritance is straightforward to use (advantage) and easy to implement, but the changes in parent class forces changes in the subclass as well (disadvantage). Delegation is flexible because any object can be replaced at runtime by another one (advantage), but it is at the same time inefficient as the objects are incapsulated (disadvantage).\nIn terms of delegation of smartphones' app in Apple for example, every app has to own an app delegate object to respond to app-related messages. For instance, the app notifies its delegate when the app finishes launching and when its execution status changes. Moreover, app-related messages are often routed to the app which is delegated for handling the situation. \nOn the other hand, regarding inheritance, I will talk about the smartphone app Instagram: the developers probably used a parent class which includes a generic filter and which is a starting point for creating new other filters. These filters are made into a child class containing a unique algorithm for filtering a photo a certain way so that the customer can use a specific filter. Subclasses are created to make a more readable code base, rather than having one huge class.\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594188,
      "meta": {},
      "text": "Inheritance reuses implemented functionality in the superclass and is subclassing from an implementation. \nadvantages: easy to implement, the structure of the program is more clear and supported by many programming languages.\ndisadvantages: the change in the superclass leads to the change in subclasses and seposes some unwanted methods. \n\nDelegation reuses the implemented functionality in an existing object or creates the instance of the class. \nadvantages: easy to use and more flexible.\ndisadvantages: calling too many methods will let the program hard to read and need to create the object instance. \n\nIn the context of smartphones, the inheritance can be like the update of every system. When we want to update the system level of the phones, the new version still should have the same function as the old one, the update part is like adding some new functionalities, but it will substitute the old one, so we use the inheritance here to inherit all methods from old one.\n\nBut when we want to create another branch of this system in another branch and at the same time keep this system structure. We need to use delegation that the new branch system will use the implemented functionality from the existing one and only change the part they want to create for other users. It will not influence the original one but only with an instance of the original one. \n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594949,
      "meta": {},
      "text": "Inheritance describes the process of one class taking the property of another class. This class, also called child class, takes over the attributes and the behavior orf the pre-existing classes, which are also called super or parent class.\nOne advantage of inheritance is that it promotes reusability and thus enhances reliability at the same time.\nOne disadvantage of inheritance is that Inheritance increases the coupling between base class and derived class and therefore a change in base class will affect all the child classes.\nDelegation on the other hand is simply passing a duty off to someone or something else. It means that you can use an object of another class as an instance variable and forward messages to the instance. It therefore describes a relationship between objects.\nOne advantage of delegation is run-time flexibility because the delegate can be easily changed at run-time.\nA disadvantage of delegation is that it is not directly supported by most popular object oriented languages, additionally there are situations where a large number of forwarding methods must be defined which is very time expensive and can be confusing.\n\nMy example in terms of smartphones for Inheritance would be a very basic one that does not go into detail at all but furthermore is based on a superclass called SmartPhone and for example three child classes called Android, iPhone and WindowsPhone that all inherit the most important attributes of a smartphone. It is very simple to understand therefore I decided on going fo the example.\n\nDelegation can be used and is often seen in IOS in conjunction with UIApplication to manage interactions with the system. In order to do that UIKit creates an app delegate object early in your app’s launch cycle so it’s always present and this is then used to for example initialize your app's central data structures. I decided on this example because it describes a major usage of delegation in iPhones.\n\n\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594967,
      "meta": {},
      "text": "Delegation is a type of interface specification that provides to use our code flexible, effectively and cleanly without unexpected classes or methods. Instead of adding new class or methods one subclass can delegate other already existing subclass to use any method from that subclass. \n\nOtherwise by inheritance new functionality can be easy implemented in subclass. But changes in a superclass can influence on condition in a subclass. Another advantage of the inheritance is that, he is supported by mostly programing languages.",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5595288,
      "meta": {},
      "text": "Difference： Inheritance is that a new class is created by subclassing, and the new class reuses the functionality of the superclass and may offer new functionality. \n(implementation inheritance is subclassing from an implementation and specification inheritance is subclassing from a specification) While delegation is catching an operation and sending it to another object where it is already Implemented, and it can reuse the implemented functionality in an existing object.\nInheritance  disadvantage: if you change the methode name of the superclass, all the \nsubclasses have to be changed.\nInheritance advantage: when you want to use mehtode from superclass in another word Api, you must use inheritance. You dont want to use only all Methodes from superclass and you just want to use only one Methode, you really want to use and make ssense for you. And with Inheritance u can also see the methode for the class very easy and clear, that means that you just use class Mehode for your unique use  goal.\ndelegation advantage:  run-time flexibility ,the delegate methode can easily be changed at run-time.\ndisadvantage it can not express the relationship from each class and just use the functionality from delegation.\n\nExample Inherientce, There are a lot of apps in our smartphones. like we use rewe app to buy some foods and when we pay for bill online, we must use paypal or credit cards pay functionality api in our smartphone. It uses 100 procent inheritance.\nDisadvantages. when we use no cable charge to charge our smart phone, we just use the phone nfc functionailty to charge our phone",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5595361,
      "meta": {},
      "text": "Inheritance and delegation are two ways to reuse code. For re-use, inheritance implies extending a base class by a new operation or overriding an existing operation whereas delegation is realized through catching an operation and sending it to another object.\n\nInheritance is supported by a wide range of programming languages like Java, C++, PHP, and Python, pretty straightforward and is simple with regard to adding functionalities to subclasses. This eases adding new features to a smartphone application. But when it comes to changing the overall structure, it may be necessary to e.g. change some methods in certain parent classes in the app's code. As a result, the developers may also have to change the affected methods in the respective subclasses, which can take a lot of time. \n\nGenerally, delegation is more flexible as you can keep classes small and specialized without having to add more and more methods to classes when implementing a smartphone app. But delegation could make the app development more expensive as it might be more inefficient, because an object instance needs to be created.\n\nAll in all, I would rather chose inheritance as it gives me lots of flexibility with regard to languages and the adding of subclasses. And when making apps, I rarely make big changes to important parent classes, so changing I don't really have a big issue regarding maintenance whenever I have to change a method return type for example.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5595499,
      "meta": {},
      "text": "1/ Description of difference: \nWhile inheritance and delegation are both used to reuse code, inheritance does so by building upon an existing class with new operations and / or overrides while using the is-a-relationship; delegation does catch an operation and implements the reuse of functionalities by instantiating another object -- thus its methods can be reused while not knowing details on task conducting. \n\n2/ Inheritance: \n+ Ease of implementing diverging functionalities in sub-class \n- Hierarchy might require changes in child class due to changes in parent class\n\n3/ Delegation: \n+ Flexibility of this approach\n- Inefficiency due to instantiation of an object\n\n4/ Example (smartphone / inheritance): \nBasic touch functionality of apps on homescreen -- It makes sense to use inheritance for the basic touch functionalities (e.g., what happens if I press normally, if I press long, if I press hard on an app on the touchscreen). There is a default mode what happens, e.g., it opens, i can move the app on the screen, but certain apps might add further functionalities, e.g., a short-cut to write a message once a quick menue pops up, in a child class that extends the shown quick menue from the parent class. \n\n5/ Example (smartphone / delegation):\nReferencing between apps -- It makes sense to use delegation for opening hyperlinks in a certain app, e.g. WhatsApp, that then opens another app on the smartphone. It is not necessary to now how exactly this is done, but rather that the other app is opened as intended. \n\n ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596131,
      "meta": {},
      "text": "Inheritance: the child class inherits all methods and attributes( not private ) from the parent class , so that they can   use them directly.\n BUT \nDelegation: the delegated class offers its methods and attributes ( not private ) to the delegating class so that it can acces to them but not use them directlly.\n\n+ Inheritance is easy to use and straightforward, the methods and attributes are inherited by the child classes.\n\n- However the Delegation has to create always an other object to send the operation to it ( delegated class ) => inefficiency. \n\n+ One advantage of Delegation is that it prevents direct use of the classes and attributes only if they are needed so it has more security and protection of the data \n\n- One inconvenient of  Inheritance is that whenever changes occur in the parent class, they occur automatically in the child class which is unwanted sometimes. \n\nExample for using Inheritance: For smartphone Apps, whenever there is an update, some basic operations or functionnalities (for example the method that plays/changes Music for Spotify) need to be the same between the new and the old version, so it can be implemented with inheritance in order to save time and effort while the functionnalities are the same.\n\nExample for using Delegation: Some Apps can interact with each other and access to some of the functionnalities of the other App but do not necessarly inherit their attributes or classes. \nFor exemple when we open Youtube from Messenger. We Open Youtube, use it but we are always opening it from an instance in Messenger.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596296,
      "meta": {},
      "text": "Taking a class A and a class B. WIth inheritance class B is an extention of the class A, B adds extra functions to the Code of class A while taking over the properties of the parent class. While with deligation class A would pass on work(method calls) to class B by using an object of another class as an instance variable. In this case class A dosent care what and how excactly happens in the class it deligates to.\nInheritance also ties your class into the hierarchy of classes you are inheriting from which can be very static and exposes the details of the parent class . With delegation you can keep your place in your own hierarchy and dont need to change that, overall is deligation very flexible and the instances can be changed at runtime.\nInheritance is very easy to use/understand and efficent. Deligation on the other hand  can be inefficent since the objects are encapsulated\nI would use inheritance for the programming of software updates, a parent class can define the basic structure and elemantary functions. the subclasses can then define the newest updates.\nDeligation would be practical for example in app where you want to enhance the login security, but that class responsible is final and cant be subclassed further. Instead of changing the hierachy etc we can deligate to another class object for the wished function and keep our structure.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596530,
      "meta": {},
      "text": "In Interface specification, both inheritance and delegation are different ways of reusing existing functionalities, but from different components. Delegation reuses existing functionalities in an already existing object, whereas inheritance reuses functionalities of a superclass by extending it. Specifically, Implementation inheritance reuses already implemented functionalities and Sprecification inheritance reuses specified functionalities of a superclass. Furthermore, inheritance is used to describe the taxonomy of a code hirachy, during requirement analysis and analysis. \n\nWhen comparing, inheritance is very intuitive to model and understand a system and new functionalities can be easily added by simply defining these in the subclass. On the other hand does inheritance expose eventually unwanted functionalities and methods of the superclass to the subclass. Furthermore, changes in the subclass are inflexible, as it would mean that all subclasses would have to change as well. In those cases, delegation is far more flexible and discrete, as it \"delegates\" an operation to a whole new object. By doing this, changes are far more easy to implement and as it is a whole new object, it does not reveal its inner functionalities. \n\nA good example of inheritance would be the the deployment of new smartphone models. New smartphone models have different new functionalities, but generally they also do \"inherit\" functionalities from a previous model, as it does not make sense to develop a whole new smartphone. This reuse of functionalities clearly depicts inheritance. A good personal example for delegation is when I developed an app for smartphones on flutter. When I wanted to display a video player, I used functionalities of open source libraries rather than implementing it completely by myself.\n",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5584848,
      "meta": {},
      "text": "Inheritance and delegation have the same goal of reusing existing code. The difference is that inheritance reuses code in a \"white box\" manner which means the class uses methods from the super class and may add functionality. With inheritance there is a  hierarchical relationship created between the subclass and the super class. In contrast when using delegation a class only provides additional functionality through the aggregation to another class. The sender-class only delegates the work to a receiver-class  which means there is no hierarchical relationship present between the two classes but rather a co-existence.\n\nSmartphone-Example:\nDelegation:\nMany Smartphone-Apps that want to use contacts e.g. an E-Mail-Application might want to use delegation in order to send methods that require access to the contacts to the phone specific contacts-application. If the mail app needs information on some contacts it just delegates the request to the \"real\" contacts app on your phone which provides the wanted information. By doing this the E-Mail app can be implemented more lightweight because the contacts don't need to be saved separately in the app and also the app can make use of the already existing code of the preinstalled contacts app.\n\nInheritance: \nAn example of inheritance in smartphone app development would be the fairly new Whats-App Business application. The whole application user interface and functionality can be reused with only minor adjustments to fit the new customers requirements. The Whats-App Business app could be implemented as a subclass of the main Whats-App application. Therefore the functionality of the \"normal\" Whats-App is already present without writing a single line of new code.",
      "score": 50,
      "language": "ENGLISH"
    },
    {
      "id": 5586406,
      "meta": {},
      "text": "The biggest difference between inheritance and delegation is that for the fist of the two, already existing classes are used to create a subclass which inherits, as the name implies all functionality from the father class and allowing new functionality to be added on top. Delegation on the other hand creates an object of the existing class which acts as a delegate which is able to use only the needed functionality of that certain class. As mentioned above inheritance is also easier to use but can cause the new object to have methods that are not needed, which can create issues later on. Delegation is in this regard better because only the methods which are needed are able to be used, but one downside would be greater inefficiency caused by the instantiation of the given object.\nWhen it comes to smartphones, one example for inheritance would be creating new apps where inheritance would be useful because opening apps and creating the basic functions of opening them would benefit from inheritance because the running and opening of them is the same, while also using the greater efficiency of inheritance. Delegation would work better for gestures on phones which shouldn't be reused while using other apps because of the resulting conflict and the phone not knowing what to do.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5589048,
      "meta": {},
      "text": "Inheritance is when a class is extended and its operations are overwritten in the subclass or new operations are added.  Delegation is when an operation is sent to a different object that has already implemented the needed functionalities. \nDelegation has the advantage of being flexible because as long as two objects have the same type, one can be replaced by the other. However, it can be inefficient, because objects are encapsulated. \nInheritance, on the other hand, is easier to implement, as it's more straightforward, supported by most programming languages, and new functionalities in the subclasses are easy to implement. However, subclasses depend on their superclasses, meaning any changes made to the superclass are made and must be considered for the subclass as well.\n\nAn example of delegation in smartphones could be the tracking of personal data. In recent years some smartphones have made it impossible for apps to track the personal information of the user without the user's explicit consent. This means that apps can't track this data themselves, but instead requests this data from some central source. Delegation here reduces the points of failure and ensures users are only tracked with their consent.\nAn example of inheritance could be changing screen brightness. Many apps could have the ability to change screen brightness, for example, Amazon Prime could change it to the maximum when watching movies or Twilight (a blue light filter) could lower it as it gets later to adjust one's eyes before going to bed. Even though the conditions and functions for changing the brightness might be different, all apps simply extend the functionality of changing the screen brightness from a central brightness-changing system.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5590757,
      "meta": {},
      "text": "By using inheritance we create a subclass from an exciting class to reuse the already exciting functionality from the superclass also in the subclass. An advantage of inheritance is, that the concept of subclasses and superclasses is allowed in many programming languages. On the other side, a disadvantage is, that the superclass has maybe some methods which should not be implemented in the subclass. That can lead to complications. In comparison to that, Delegation is about creating an instance in one class and sending that information to the class of the instance. The advantage is that this concept is way more flexible because you can decide by yourself which methods you want to use in a class. A disadvantage is, that it can lead to inefficiency because you always have to create an instance of the class to implement the functionality.\nExample for Inheritance: \nWe have an app on our smartphone that represents an online shop. This online shop sells different types of products. There is a menu where you can select the type of product, for example, there is a sub-item called laptops and smartphones. These two sub-items of the menu have the same structure but have different content and small differences. So you could say that the two menu items are subclasses of a general menu item, from which they inherit the basic methods.\nExample for Delegation:\nThere is a widget on the smartphone's home screen from which you can call up your favorite with one click. This widget could then hook an instance of class Phone. When you click on the widget, the method of the phone class would then be used to call using the instance.\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5591785,
      "meta": {},
      "text": "Delegation is on an object level, inheritance more on a class level.\nBoth are a ways to reuse existing classes. The difference is that delegation is a black box and inheritance a white box. That means when using delegation, one needs to actually create an instance of a class and use this object for calling the wanted methods. Inheritance on the other side is a way of subclassing (in Java Polymorphism) so the methods of the superclasses are inherited and can be overwritten. So inheritance can extend the wanted functionality (+ Inheritance) whilst delegation can only use what is offered, but therefore inheritance is more code and not as flexible as delegation. Because for delegation the actual implementation is irrelevant, just the functions are used. (+ Delegation)\nBut at the same time delegation can lead to a worse performance than inheritance. The created objects can increase the time as method calls need to be sent and then the response is awaited. (- Delegation)\nInheritance automatically offers all functions from the parent class, which is not always wanted, f.e. a stack inheriting from the class List, has but shouldn't have access to push/pop. (- Inheritance)\n\nSmartphone and iPhone is a good example for inheritance. Smartphone is the superclass and iPhone is a subclass. iPhone uses the functions and attributes provided by smartphone f.e. camera, take picture ... and adds additional ones.\n\nApps might use delegation in order to control specific actions on the smartphone without getting access to all functionality. For example the camera app uses the actual camera hardware with delegation.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594225,
      "meta": {},
      "text": "You use inheritance, if you want one class to take the property from another class (i. e. when a subclass shall take over the attributes and behavior of the superclass. Delegation is used, when a class shall pass on duty to someone/ something else.\n\nInheritance:\nAdvantage: You can use each function of the superclass and don't have to implement them again. (you have many classes, which should have commom methods, but have some different attributes i.e.: chess pieces should all be able to move but only the pawn can promote)\nDisadvantage: You copy the whole functionality of the super class (you want to create a Stack out of a List: you have unwanted methods like removeAt you shouldn't be able to perform on a Stack.\n\nDelegation:\nAdvantage: You can use/ copy the funtionalitys you like (you want to create a Stack: you can use a List and only use the wanted methods like add and just ignore unwanted methods like removeAt)\nDisadvantage: You have to implement each Delegation you want and don't have them by default like with inheritance (in a class you want to use the method print() and delete() from another class. You have to implement both)\n\n\n",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5595026,
      "meta": {},
      "text": "Inheritance is mainly used when some new code should extend existing code. It is indicated by the keyword \"is\", for example \"A bird IS and animal\" -> bird inherits animal. Delegation, on the other hand, is used when existing code can be reused to build a different kind of concept. For example, \"A stack uses a list to store its data\".\n\nInheritance can be unflexible sometimes, because the superclass may have some functionality which is not desirable in  the subclass but cannot be altered. But there is no need to create an instance of a new object, which makes it more efficient.\nDelegation has more implementation overhead, because every function has to be passed through the Receiver first before it reaches the Delegate. But this also makes it far more flexible.\n\nIn a Smartphone, delegation would make sense to delegate network traffic through the gsm modem. Inheritance would not make sense here, because a network connection should class should not have functionality for phone calls or sms.\nWhere it would make sense, to use inheritance, though, is when implementing the functionality for the front- and back-camera. As both, the front- and back-camera are a camera, they may inherit a camera superclass.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595583,
      "meta": {},
      "text": "The first, most obvious, difference is the implementations. Whilst you use inheritance, you need to extend from the class where you need the functionalities from, you need to create an instance of the class where you want the functionalities from in delegation. \nAnother big difference is the right use for them. When you want to use the whole class you are trying to acces, you should use inheritance. When you only want the given methods of a class, it's probably better to use delegation and thus this concept is also more flexible, since you don't need to overwrite the methods and just call them and create your own functionalities around them. With this comes an disadvantage of inheritance. Since you expose more from the class, the user can maybe interact with attributes or methods which he isn't supposed to.\nA pro of inheritance is the time you safe when you use inheritance in the right places. This is the case when you want to use the methods 1:1 like in the class you extend from. You don't need to implement any of those methods, since you can use them from the parent class.\nThe big disadvantage when using delegation is the disc space that need to be reserved for every instance of the class which is created. When you scale this quite big, this can result in slowing down the system.\n\nIn the example of a banking app with different roles, you should secure that each profile can only acces their allowed acounts. There is one security class and different security classes for each roll. It is better to use delegation in this case, since inheritance may expose access to parts which the user isn't supposed to access.\n\nEach page of this banking app should follow the same structure. So each page should have the same basic operation and designs. There it is better to implement a class page, which follow the concept of inheritance, since it saves much time, when you don't need to change the elements which always have the same structure.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596537,
      "meta": {},
      "text": "Vererbung(Inheritance) bedeutet, dass ein Objekt von einem anderen Objekt erstellt wird und alle Eigenschaften und Methoden dieses Objekts erbt. Der Vorteil der Vererbung besteht darin, dass Sie ein neues Objekt erstellen können, das einem vorhandenen Objekt ähnelt, ohne den gesamten Code für das neue Objekt neu schreiben zu müssen. Der Nachteil der Vererbung besteht darin, dass viele Duplikate in Ihrem Code erstellt werden können. Dies kann die Wartung erschweren. \n \n Delegierung liegt vor, wenn ein Objekt einige seiner Verantwortlichkeiten an ein anderes Objekt delegiert. Der Vorteil der Delegation besteht darin, dass der Code modularer und einfacher zu warten ist. Der Nachteil der Delegierung ist, dass der Code verwirrend sein kann. \n \n Wenn Sie beispielsweise eine Smartphone-App mit einer Liste von Kontakten erstellen, können Sie die Vererbung verwenden, um ein neues Kontaktobjekt zu erstellen, das von einem vorhandenen Kontaktobjekt erbt. Auf diese Weise können Sie den Code eines vorhandenen Kontaktobjekts wiederverwenden, ohne ihn neu erstellen zu müssen. Alternativ können Sie mithilfe der Delegierung ein neues ContactList-Objekt erstellen, das für das Speichern und Verwalten von Kontakten zuständig ist. Dadurch wird der Code modularer, aber schwerer verständlich.",
      "score": 91.7,
      "language": "GERMAN"
    },
    {
      "id": 5584259,
      "meta": {},
      "text": "Inheritance is the using and gaining acces for a class to all functions and attributes (except private ones) of another class. (reuse classes)\nDelegation is when a specific function that is already implemented in another class gets called by this class without having to be a subclass of this class (reuse functionality) This can also mean that one class delegates the work to many other classes.\n\nAdvantage Inheritance:\nEasily to use and widly spread accross all programming languages\n\nDisadvantage Inheritance:\nChanges in a super class can lead to changes in sub classes which could lead to a mess if there is a big structure of inheritance e.g. 100 layers\n\n\nAdvantage Delegation:\nIs more flexible because the call to another function can be changed easily\n\nDisadvantage Delegation:\nTo much delegation could make a software hard to maintain as there has to be kept always track of all changes in the other software or components.\n\nInheritance is in the context of smartphones can be used for the operating systems of different phones. Bot have are subclasses of the \"mega\" Operating system because they both do mostly the same thing except for some minor differences.\n\nDelegation in the context of smartphones could be that a phone calls an app and this app redirects the call to a function implemented by another app but the result would still be shown in the first app.",
      "score": 75,
      "language": "ENGLISH"
    },
    {
      "id": 5584411,
      "meta": {},
      "text": "Inheritance describes that a new class, the sub-class, has at least the same attributes and methods as the class it inherits. Meanwhile in delegation the \"delegate\" simply knows which functionality is needed and is able to fulfill it without having same attributes or behavior. The class that calls the delegate just wants one specific thing done, from which it knows that the delegate can provide it. The main advantage of delegation compared to inheritance is run Time flexibility, but it could be less efficient, since a new object instance has to be created. An advantage of inheritance is that it is, unlike delegation, supported by many programming languages. A disadvantage is that it might expose some unwanted methods of the super class.\n\nAn example of delegation in the context of smartphones would be the outsourcing of mobile service (SIM cards) to external providers like Telekom. It makes sense for the smartphone manufacturers to not offer it themselves, so they can focus on their main product, the smartphone.\n\nAn example for inheritance would be apps that use other apps' resources, for example an app that lets you edit photos or videos from your camera roll. Another good example is the \"health\" app on iPhones, which can collect data from various points, but also can collect the most important ones itself. It makes sense to use inheritance here, because of the shared functionalities and used resources.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596415,
      "meta": {},
      "text": "In case of inheritance an existing implemented functionality of a superclass is being reused by subclassing from it, when in delegation an operation is being send and executed by an object, where the needed functionality is already implemented. Inheritance is not as flexible as delegation: for example there are some constrains on which type the inheriting class should have ad changes in the superclass may lead to changes in the inheriting classes. However, inheritance is supported by many programming languages (for example Java) and is easy to perform, because the big part of the needed functionality is usually already implemented in upperclass. Inheritance might also expose some unwanted methods of the parent class. On the other hand, inheritance can be more efficient then delegation : in the inheritance the parent class doesn't have to be instantiated in order for the child class to inherit its functionality, which is no the case for delegation, where an object instance needs to be created.\nExample Inheritance:  the smartphone app version  of the lecture system should provide students with the possibility to enrol /view materials/submit homework/registrate for an exam for elective and obligatory lectures. The needed functionality is already provided in the class Lecture so classes  Electivelecture and Obligatorylecture should reuse the implementation of Lecture.\nExample Delegation: we also want not authorised users to be able to view the materials of courses, however they should not be able to have access to other functionalities, so in this case we would want to delegate viewMaterials method to an instance of class Lecture.  \n",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596428,
      "meta": {},
      "text": "Inheritance describes a relation between classes or functionalities where one only extends the other. We use it when we have some functionality that already works well and only want to add some extra feature to it that extends it while the original functionality radians unchanged. \nAdvantage: Easy to understand, inheritance of classes is provided directly by many OO Programming languages.\nDisadvantage: High dependency on parent class, oftentimes in real world programming, relations between classes are more complicated so that inheritance requires adapting the parent class changes, which makes the code a lot more difficult instead of making it easier just to force the use of inheritance. \nSmartphones: In WhatsApp, when you make a regular voice call, you can \"upgrade\" it by adding video transmission. I would choose to build the video call as a feature on top of a regular voice call because you can rely on the existing voice transmission and just have to add video transmission on top. Also, this way the implementation of a regular voice call stay the same and caan still be used as always\n\nDelegation adds an intermediate object that delegates the method call to the \"real implementation\" object. This makes sense when you can somewhat reuse an existing functionality, but the relation between functionalities is not that straight forward or the intermediate object can prevent misuse\nAdvantages: More flexible than inheritance, can cover complex problems\nDisadvantages: Adds a lot of (possibly unnecessary) overhead\nSmartphones: Using a proxy in your web browser will add  functionality (e.g. block inappropriate websites), but also slows down the speed because of the additional layer in between",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5587462,
      "meta": {},
      "text": "Vererbung ermöglicht, dass eine Klasse die Funktionen einer anderen übernimmt, während Delegation einen Auftrag an eine andere Klasse übergibt, diese dann etwas berechnet und die ursprügliche Klasse das Ergebnis zurückbekommt und weiterrechnet. Falls eine Klasse eine Art der Superklasse ist (zb Soda machine und candy machine als Arten von vending machines), dann macht Vererbung sinn. Die Parentclass könnte eine Funktion haben wie displayPrice oder giveItem, welche direkt von der Unterklasse übernommen werden, da diese ebenfalls diese Funktionalitäten erfüllt. Delegation hingegen macht z.B. bei einem Array sort sinn. Jede Klasse könnte Arrays verwenden, weswegen wir in der Klasse Arrays die statische Methode sort haben. Falls irgendeine Klasse nun ein Array sortieren will, kann es das Array an die Arrays Klasse übergeben, die das Array sortiert und das sortierte Array zurückgibt. Die Klasse muss aber keine Array-Klasse sein, weswegen hier Vererbung keinen Sinn macht. \nVererbung Vorteil: Macht das System strukturiert und gut verständlich  Nachteil extra Speicher und viel Code für neue Klasse\nDelegation Vorteil: Sich keine gedanken um die Implementierung machen, einfach Methode nutzen Nachteil: aber auch keinen Einfluss auf die Implementierung haben\n\nBeispiel Smartphone\nIn den Einstellungen eines Smartphones ist bei allen Ein/ausschaltbaren einstellungsmöglichkeiten ein kleiner schieberegler, erstellt man eine Abstrakte Klasse SingleSetting mit der Funktionalität dieses Knopfes, kann man neue Settings erstellen und davon ergeben und hat direkt alles Implementiert, es fehlt nurnoch was dieses Setting dann umstellt. Delegation hingegen dann, was dieses Setting ändern soll. Will ich den Dark Mode ein/ausschalten, gebe ich diese Aufgabe dann an die entsprechende Klasse weiter, die dann den Darkmode einschaltet",
      "score": 83.3,
      "language": "GERMAN"
    },
    {
      "id": 5587865,
      "meta": {},
      "text": "Inheritance: Child classes übernehmen die Attribute/Eigenschaften der parent classes und implementieren Funktionalität gegebenenfalls neu/ähnlich/angepasst/spezifischer\nVorteil: Möglichkeit des Gebrauchs von dynamischen Polymorphismus. Zudem weit verbreitet in sprachen.\nNachteil: Inheritance lässt sich nicht während runtime anpassen. Es werden auch ungewollt alle Methoden der parent class bei Vererbung mit exposed\nExample: Smartphone app für Kinder zum erlernen von Tieren und deren Eigenschaften. Eine Unterteilung in Kategorien wie Säugetiere, Vögel, etc. und die konkreten Tierarten lässt sich hier am besten mittels Vererbung der jeweils gemeinsamen Eigenschaften realisieren, da alle Tiere einer Kategorie ähnliche Eigenschaften/Fähigkeiten besitzen die es für alle darunter zu implementieren gilt.\n\nDelegation hingegen: Funktionalität wird an Instanzen/Objekte anderer Klassen ausgelagert/übergeben/diese aufgerufen wo sie möglicherweise bereits besteht\nVorteil: Delegation lässt sich während der runtime anpassen, somit flexibler. Zudem müssen nicht alle Methoden der anderen Klasse mit übernommen werden sondern nur benötigte.\nNachteil: Keine Möglichkeit/Nutzbarkeit von dynamischen Polymorphismus. Ineffizienter durch nötige Objekt Instanzen.\nExample: Smartphone browser für Schulgeräte der unangemessene Inhalte aus dem Internet filtert. In einer Klasse kann dabei die URL auf Zulässigkeit überprüft werden oder geschaut werden ob ein Lehrer ohne aktive Beschränkungen eingeloggt ist und das eigentliche Aufrufen der Seite während Runtime nur bei erfüllten Zugriffskriterien dann an eine extra Klasse zum laden/anzeigen der Webseiten ausgelagert/deligiert werden. Somit können auch nur die benötigten Methoden wie das laden oder schliessen einer URL in der eigentlichen Klasse zur Zugriffskontrolle übernommen werden und an die jeweiligen Methoden der anderen Klasse weiterleiten und es muss nicht jede Funktionalität der Webklasse mit übernommen werden und speziell neu/doppelt implementiert werden, wie es bei Vererbung der Fall wäre.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5588680,
      "meta": {},
      "text": "Vererbung führt dazu, dass die Funktionalität einer Superklasse in den davon erbenden Klassen direkt zur Verfügung steht und durch weitere Methoden ergänzt werden kann. Das ist ein sehr intuitives Konzept, welches Erweiterungen leicht umsetzen lässt. Auf der anderen Seite können so auch ungewollt interne Informationen über die Implementierung einer Klasse oder Struktur offen gelegt werden, welche zu ungewolltem Verhalten führen oder zu Angriffsoberflächen werden können. Bei Veränderungen der Superklasse sind womöglich Anpassungen in den Subklassen nötig. Sollen jedoch alle Funktionalitäten der Superklasse genutzt werden können, ist Vererbung die beste Wahl. Bei einem Messenger-Service über den sowohl Bilder, Videos als auch Texte verschickt werden sollen, ist eine Vererbungsbeziehung zu einem konventionellen, rein textbasierten Nachrichtendienst somit ideal.\nBei der Delegation versucht man die oben genannten Schwächen durch mehr Flexibilität und Sicherheit zu ersetzen. Durch einen Receiver zwischen Client und Delegate können z.B Methodenaufrufe überprüft werden und nur dann weitergeleitet, wenn das auch gewollt ist. Das kann zwar etwas ineffizienter durch den Overhead bei der Instanziierung des Receivers sein, ist aber in vielen Fällen eine gute Lösung.\nWill man z.B. ein Ziffernblatt für Telefonnummern implementieren, will man nicht eine gesamte Tastatur oder ASCII-Zeichensatz zur Verfügung für den Nutzer stellen. So können illegale oder bösartige Eingaben vermieden werden indem nur die nötigen Funktionalitäten, Zahlen wählbar sind, die nur intern dann mit der gesamten Tastatur (über eine Assoziation oder Feld) verbunden sind.\n",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5589004,
      "meta": {},
      "text": "Inheritance is where one or several classes inherit from a parent class, gaining all their attributes and methods, and adding on their own. Inheritance can be chained, but you can only inherit from one class. An advantage of this is that it is very easy to understand and implement the source code. A disadvantage however is that structures and models can easily become very difficult to interpret if you have more than a small number of subclasses. Furthermore, the methods in the parents can be exposed reducing the security of the system. Similar classes/interfaces also then require their own class, adding to the clutter. Instead one might use delegation.\nDelegation is where a specific function of a class is extracted out to a class/interface where the function is already implemented. When the client calls the main class (receiver) it then delegates the message to the delegate class to execute the function, while still not repeating any code. This is advantageous as it allows for more flexibility in the code, by allowing reuse of interfaces/classes for example. However this does cause inefficiencies, as more calls and potential overhead are then required for the same functionality.\n\nAn example of where to use delegation in smartphones would be time. You can delegate the functions which require time (eg turn notifications off for x time, display time, alarm for x time, etc) to a delegate interface class like Time24Hour or Time12Hour. This is a better use case for delegation, because otherwise each app which uses these functions would require its own subclass of Time or would repeat the source code. A better example for inheritance would be text fonts, which each inherit from an abstract Font class, and contain their own character sets and display methods. Since each of them has diff. values for attributes and are not really calling functions themselves, inheritance is a better idea.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5590359,
      "meta": {},
      "text": "Inheritance is used for extending a base class by a new operation. Furthermore you can extend a base class by overriding existing operations. A big advantage of inheritance is that is generally more flexible. This might cause that it is more inefficient because it requires to create new object instances.\nDelegation is more focused on catching operations and sending it to another object which makes it easy to use, easy to implement new functionalities in subclasses. Furthermore it is supported by many programming languages. Even if it is easy to use delegation comes with a big disadvantage. Chnages in parent classes can force the subclasses to change as well which could cause problems with the implementation.\n\nExamples:\nInheritance: \nNehmen wir an wir wollen mit einer APP Fotos aufnehmen, welche direkt Filter anwendet die von der normalen Kamera nicht zur Verfügung gestellt werden.\nAnstatt eine neue Kamera einzubauen und ein Aufnahmesystem zu entwickeln, nutzt die APP die normale Kamerafunktion und fügt einfach nur Filter hinzu. Dies erspart den Entwickler:innen viel Mühe und vereinfacht viele Prozesse.\n\nDelegation:\nBeispielsweise kann als Beispiel für Delegation ein Nachrichten Messenger wie WhatsApp sein, welcher es ermöglicht live Locations zu schicken. Hierbei wird die Funktion des Handys genutzt und weiterverarbeitet. Hierbei wird diese Funktion einfach abgefangen und an WhatsApp weitergeschickt.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593052,
      "meta": {},
      "text": "Inheritance: Extends the super class (base) by adding new methods or attributes or overriding the existing ones. The new subclass will be directly connected to the base, meaning that it will have access to the base operations and attributes. (Cost memory) But depending on the situation could be both a good or a bad thing. For example: let's have a base Phone and subclasses Smartphone, Basicphone, Featurephone. This way, all the phone subclasses will be able to call and sent SMS. But only Smartphone can use Wi-Fi and touchscreen. If we do it the other way around with Smartphone as a base and use Inheritance all. That will mean that all other phones can do what Smartphones' can, which is not true.\n\nDelegation is catching an operation and sending it to another object. If we don't want to use all the operations from a class just a few of them, then it is better to use delegation, that way we will use only what we need to. For example: let's have a class Camera that can make photos and videos as a \"Delegate\" and class Smartphone as a \"Receiver\". That way, the Smartphone can use methods as photoTake and videoRecord that are needed, but don't have to use all the other attributes and methods specified for Cameras only.",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5594885,
      "meta": {},
      "text": "Interface specification, used during object design, has the aim of enhancing REUSABILITY. It includes concepts below:\n\nINHERITANCE\nThe concept when a class(called child or subclass) inherits methods and properties from the main class(parent - superclass). In this case, functionalities in the parent class can be reused in different child classes. The main class can both include implementation or be an abstraction. IS-A type and hierarchical relationships are provided here.\n\n-  Adv: Avoid code duplication. \n- DisAdv:  Two classes become tightly bounded.\n\n(Example) - Mobile app WhatsApp provides different chats for 1to1 and group conversations. Here, for example, Chat abstract class might be created, then Individual & Group ones can extend it. Or, the Camera inside phones, which provides different types of Video recordings such as Ordinary Video, Slo-Mo, Time-Lapse, the last two ones can be subclass of the first one.\n\nDELEGATION\nThe situation when in the class an instance variable of an object of another class(receiver/delegate) is created, which already provides the desired functionality. \n\n-  Adv: one is not forced to accept all the methods of the super class.\n- Disadv: no dynamic polymorphism\n\n(Example) - All the Notifications of the Smartphones have the functionality of ringing the sounds, in this case, the Sound section already provides this fucntionalities, but for Notifications we need only some of them So, the Sound object might get created in the Notifications and it can delegate to Sound to play rings, when necessary.\n\n",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5595433,
      "meta": {},
      "text": "Inheritance enables you to extend functionality of a base class in a subclass that inherits (almost) all properties from the parent class. This is a pretty straightforward concept which is supported by most programming languages. The problem is, however, that inherited functionalities may behave differently than desired, such that functions need to be overriden and the behaviour becomes unforeseeable. Inheritance would for example be used in the context of a smartphone app that supports a standard View Controller which's functionality is extended to support advanced functionalites for a game that you're programming. Delegation is when functionalities are delegated from one class to another, already existing class, such that functionalities can be reused. This is a more flexible and secure concept because operations cannot be misused. However, using delegation might also be more inefficient because objects may first need to be instanciated. In a smartphone, this concept makes sense when it comes to in- and outgoing connections: Instead of directly communicating with the cellular module, an app makes calls to a connection manager which checks for malicious behaviour and delegates function calls to the cellular module.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596116,
      "meta": {},
      "text": "Inheritance means that we subclass from an already existent method in superclass that we can reuse it. Delegation means we reuse a method by sending a request to another class and invoke an object of this class to avoid null pointer. \nInheritance: Advantage:- Straightforward to use\n                     Disadvantage:-changes in the parent class force the subclass to change as well\nDelegation:-Advantage:- generally more flexible \n                   - Disadvantage:-might be inefficient because an object instance needs to be created\nIn the concept of Smartphones for example Delegation is used. When the phone is locked. the user has to type the password . By sending the password a request will also be created and sent. Either the phone is unlocked if the password is correct so the request is accepted or the phone is still locked by incorrect password and the request would be in this case rejected.\nAlso Inheritance is used in Smartphone object.  each application on the smartphone inherit methods from the class Smartphone GUI and do some changes on this methods.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596152,
      "meta": {},
      "text": "When using inheritance knowledge of / access to the source is required since the programmer is extending/implementing another class/interface.\n\nDelegation, basically, is just forwarding data to another object/class/system of which we do not necessarily know the source code or anything else. Only knowledge on how to use it is required. \n\nExample inheritance\nWhen creating a new smartphone OS one can implement Android OS and add desired features and so on.\n\nExample delegation\nWhen implementing a voice assistant one can just send the recorded voice to a service (e.g. from Google/Amazon) and grab the response.\n\n",
      "score": 33.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596729,
      "meta": {},
      "text": "difference inheritance, delegation: \n-In inheritance one class inherits all the traits from the parent class. \nThe subclass then adds additional functionality. Whereas in the delegation, the classes don't \"copy\" any of the traits from the parent class. \n-Instead, they delegate functionality to other classes/instances that perform the required computation and simply return the result. \n-This can be more efficient as creating subclasses costs more than just having a network that is disjunct and performs specific tasks. \n\nsmartphone example: \n-> There is one class that handles user input from the touch interface and one that manages what the respective input means when the user touches a specific area at a given moment. \nIn inheritance, there would be different classes inheriting from the \"touch-screen-input\" class adding additional features like \"button-touched\". This however would require an immense amount of different classes that inherit from this parent class. \n-> Therefore I would use delegation. In this case the class \"touch-screen-interface\" delegates the user input to the respective classes that then perform the computation in the context of where and when the user interfaces with the screen. \n",
      "score": 50,
      "language": "ENGLISH"
    },
    {
      "id": 5585361,
      "meta": {},
      "text": "Both inheritance and delegation aim to limit the existing problem of code duplication by reusing already existing features and sharing common functionalities. Inheritance does so by enabling a subclass to use already implemented code in a more specialized class than the super class, also known as white box reuse. This is especially useful when the subclass is of a similar kind like the super class, since new methods can be easily implemented in the sub class. However, the inheritance structure sometimes requires to adopt methods from the parent that one would not like to feature in the sub class.\n\nDelegation on the other hand is also referred to as black box reuse, since it is no longer necessary to have the source code available. It is sufficient to access the given functionality via the external interface of the class. By that there are no such comparable requirements, making this solution more flexible. However, due to the necessity of instancing, this can be more resource intensive. \n\nIn a smartphone context, if I had to develop a new class for a dark mode, I would try to inherit common functionalities from the general theme class and reuse everything possible, since they should both be similar enough. If I were to develop a new photo app, I would try to incorporate functionalities like opening  the camera via the external interface, since this seems a common functionality that many systems may need, however not all from the same structure.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5586764,
      "meta": {},
      "text": "With inheritance the parent class contains the general functionality all classes have in common whereas the subclasses implement the more specialized behavior. With delegation instead in order to add new functionality a new object is aggregated to the current one which contains the desired additional specification. So in difference to inheritance there is always a new instance as an attribute of the already existing object.\nTherefore on the one hand with inheritance you don't need any additional resources for creating a new instance because the special functionality is contained in the subclass which at the same time inherits from its parent class but on the other hand that means that it automatically provides all the methods of the parent class. That can get a problem if you still want to use the already existing code of the parent class but do not want the user to have access to its methods. With delegation however you need new resources to instantiate a new object but instead you can define what methods and attributes the user is supposed to have access to because the reused code is encapsulated to another instance.\nAs an example for inheritance you could take the messages of a messenger because all types (e.g. audio messages, text messages...) have the same base functionality that can be reused but since they are all message objects it would make sense to let them all have the functionality of the parent class. Delegation could be used with an app that uses the camera module. You would let an external class handle the live view of the camera because for instance classes within your app should not inherit methods for directly changing settings of the camera.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5586983,
      "meta": {},
      "text": "Delegation means one can delegate a method call to another method. This means functionality can be resused. Three elements are part of this, the client that calls the receiver and the receiver who delegates to the delegate.\nA benefit of delegation is flexibilty however a disadvantage can be the that it can be inefficient.\n\nInheritance means that one class inherits methods and attributes from another class but can additionally implement more functionality that isn't available in the mother class. This makes it quite easy to use which is a benefit, however it can also lead to methods being exposed even when that is not desired. Additionally a change in the parent class can lead to the subclasses being changed as well, which causes more effort.\n\nAn example for delegation could be an app (client) that requires access to the phone camera delegating the call to access the camera, to the part of the software that administrates the camera  (receiver) which then again  delegates the camera ( delegate)\n\nAn example for inheritance could be the filesystem on the phone. All files are of the type file, but there also can be subclasses such as photos, videos, audio files etc that inherit basic attributes and methods from \"file\" but then also implement their own based on the type of format they are. ",
      "score": 75,
      "language": "ENGLISH"
    },
    {
      "id": 5589528,
      "meta": {},
      "text": "Inheritance is the concept that describes the situation when a specific child class B inherits (so gets) the methods and properties from a more general parent class A. It describes an \"is a\" relation between B and A. So B is an A. \nExample: \"An apple tree is a tree\".  Sometimes, delegation can be used as an alternative to inheritance. When you use delegation, you just forward some method calls to another object. The advantage of delegation is the runtime flexibility but therefore it does not support polymorphism. When using inheritance, you can use the polymorphism feature but therefore you do not have the runtime flexibility. Concerning smartphones an example for inheritance would be that there is a parent Class App, that all apps developed for the phone have to inherit in order to follow certain basic functionality rules of the enviroment.\nAn example for delegation could be that the internet browser can delegate certain functionalities (Open Document, click on mailto-link, click a phone number) to an external app/api.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594849,
      "meta": {},
      "text": "Inheritance reuses methods and attributes - in general the behavior - of a parent and can be seen as a child class of a specific type/parent. This results in a strict hierarchy of classes and objects in which each child class can expand the functionality of its parent.\nDelegation on the other hand describes the concept in which an object \"delegates\" the functionality to another object that is referenced in the Delegator class. The advantage of this approach is that the functionality can be chanced at runtime - where at Inheritance the hierarchy is strictly preserved and cannot alter at runtime.\n\nA smartphone has plenty of functionalities, most of which you are able to customize according to your preferences. As an example, one can chose on of many apps as a dialer in order to use the phone functionality. When using delegation in this case, you could change the current dialer used for phoning at runtime, e.g. download a dialer app, and activate it by letting the smartphone delegate the phone functionality to this app.\n\nWhen developing an app for smartphones, the os of the smartphone must know how to deal with this app - e.g. how to start the app and display stuff. Therefor the concept of inheritance can be used so that the os is provided an interface which represents an abstraction of an app implementation. The os can then use the methods and behavior specified in the interface to interact with the app, knowing that this app must provide these funcionalities.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594873,
      "meta": {},
      "text": "Delegation: Reusing the functionality of already implemented objects\n\t=> an advantage of delegation is it's flexibility in comparison to inheritance, since objects can be instantiated \t\t \tduring runtime (Example: A smartphone always has sound, the phone passes what kind of sound needs to be made to the soundcreation object.)\n\t=> Disadvantage: can lead to less efficiency, due to the need to instantiate an object\n\nInheritance: A situation where a subclass B (child class), inherits the methods and attributes of a superclass A (parent class) while also offering some new functionality. The idea behind this is the prevention of unnecessary doubled up code.  \n\t=> Advantage: More efficient code & decluttering\n\t(Example: Having the contact list in whatsapp inherit from the phone contactList, with additional functionality \t \n        existing in the form of an online checker and status update)\n\t=> Disadvantage: If a change occurs in the superclass, this also effects all children\n",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596225,
      "meta": {},
      "text": "The difference between inheritance and delegation is that with inheritance a subclass has the same attributes and performs the same methods of the superclass, while in delegation, there is an instantiation of a second class that allows to perform some methods implemented in that second class in the primary class.\n\nInheritance\n- Advantages: when two classes have a similar behaviour, inheritance is better since we can reuse many methods implemented by the super class and the code is cleaner.\n- Disadvantage: the subclass has to implement all the methods in the superclass, so it may be the case that the subclass ends up having unused methods.\n\nDelegation:\n- Advantage of delegation: is useful when we only want to reuse some methods of another class, whithout the necessity of implementing it again in the class. We can only create an instantiation of the class that has already implemented it and delegate it, the two classes are more independent form each other.\n- Disadvantage: if two classes are very similar in behaviour, delegation is not as optimal as inheritance.\n\nExample 1: In every smartphone we have icons to identify apps, they can be of different sizes depending on whether they are grouped into into boxes or not. SmallIcon extends class Icon. Inheritance is a better option since SmallIcon will make use of all attributes and methods implemented by Icon, they have similar behaviour. \n\nExample 2: The apps Chrome and Translator don't have similar behaviours but Chrome delegates the method translateWebpage() to Translator. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596323,
      "meta": {},
      "text": "Using inheritance the developer can extend an already existing class, reuse its functionalities, modify and extend it.\nThis allows for easy implementation of new functionalities but changing the superclass can cause issues with already implemented sub classes.\nUsing delegation the developer can use already existing Methods of other classes by catching them and sending them to another object, This allows for great flexibility because you can just use existing methods from all other objects and redirect them to any object you like. However this approach might be more inefficient because of the potential need to create new instances of other classes.\nIn Smartphones you would probably use delegation for showing notification popups when you turn on the phone, by using the provided functionalities from the OS and just calling the method in your app.\nYou would use Inheritance if your app has user accounts with different functionalities. in this case u would have a class \"user\" and to other classes \"user 1\" and \"user 2\" which extend the class user.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596367,
      "meta": {},
      "text": "Inheritance is the practise of building a class on top of the functionality and structure of another class. This is useful for avoiding code-duplication, and making complex systems easier to understand. The pros of inheritance are that it's largely supported by programming languages, well-known and not complex to wrap your head around, and it's easy to make changes to the whole structure by chaning just the parent class. The cons are that when you make changes to the parent class, you have to change the subclasses as well, and that letting all the subclasses access the functionality of the parent class, you might 'leak' something that shouldn't be visible from the subclass. This can be partly mitigated by using access modifiers in the parent class properly (private, protected, etc.).\n\nOn the other hand, delegation is the practise of reusing only a distinct functionality, or a set of functionalities of another class, in a controled manner. This means creating an object of the delegate class in the recieving class, and using the methods/attributes of that class in the methods of the new one. The first pro of this is that this gives you more control over what is visible and accessible from the recieving class. The other, is that this also gives you lot's of flexibility and room to create things, like completely new abstract data-structures like stacks with the help of lists, or ring-queues with arrays. The con is that this instanciation of the delegate object makes things less effecient, and that there are situations where inheritance is obviously the better choice, like with many similar objects (generalization/specialization).\n\nThe difference between these two forms of reuse of software, is that inheritance is mainly useful for implementing the functionality of one class to multiple subclasses that share that same core functionality, while delegation is better for situations where you want more control over the methods of the delegate class, the visibility to the outside user of that class and you don't need the same functionality for many other classes.\n\nIn the context of smartphones, inheritance is like the reuse of the same model of a phone, the iPhone for example, where the core of the phone's functionality and features don't change, but the product ends up being different every year. The ability to take phone calls, take pictures, read messages, having a touch-screen, etc. don't change, they're 'inherited'. Delegation could be described well with the example of smartphone manufacturing. Most smartphone manufacturers don't make all the parts of the phone themselves, they 'delegate' the production of, for example, the cameras for the phones to other third parties. You as the end user don't have the ability to buy those parts yourself and sometimes you don't even know where they've come from. This might not be related to software, but the principle is the same, using the functionality (camera or silicone chip factory of third parties) in your object.  ",
      "score": 0,
      "language": "ENGLISH"
    },
    {
      "id": 5596496,
      "meta": {},
      "text": "With delegation the \"reuse\" happens by sending a method call another class and invoking a method on an existing object of this class.   \nPros: Delegations are flexible. Any form of extension to a class that can be achieved by inheritance can be done by means of a delegation.\nCons: Inefficient, due to the fact that an object needs to be instantiated, needs also time for sending the request and receiving the response. The class structure may also seem not as clear in comparison to the structure using inheritance.\nExample: Some set of entities/programs are in need of service use, SIM card functionalities. Therefore, a SIM card class with its inherited functionalities can be connected to smart phone apps class.\n\nInheritance is when the super class has the implemented method, that can be reused in inherited from it classes.\nPros: The methods are defined only once in the super class and can be reused multiple times in all children subclasses, thus any changes made don't need to be repeated; new functionalities in the subclass can be easily added. It makes a program structure readable and debuting process is less complex.\nCons: All children classes are under the influence of changes in the super class.\nExample: smartphone apps(for example fitness apps) that have several pages developed in the same style, use a parent object to define the base and then create subclasses from it for each page.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596497,
      "meta": {},
      "text": "Inheritance is used if a base class, that already has a lot of the desired functionality, exists. This class is then extended and new methods are added or methods from the super class are overridden. This type of reuse is very simple to use and makes it very easy to add new methods to the subclass. However, using inheritance exposes the functionality of the super class and therefore might lead to unwanted behaviour. \nIn the context of smartphones, inheritance could be used to create the contact list. Since a contact list supports all of the functionality of the List class like inserting, deleting, finding and sorting, the contact list can be implemented as a sub class of the List class. \n\nDelegation reuses existing functionality by catching an operation and delegating it to a different object. The client calls the receiver, which sends the request to the delegate. Only the delegate actually executes the request. This way, unwanted methods in the delegate are not exposed to the client and the receiver guarantees that the client cannot access any functionality they are not supposed to. The price for this safety is that a receiver needs to be instantiated, which may lead to inefficiency compared to inheritance.\nIn the context of smartphones, delegation could be used for app organization. A delegate class provides functionality to open, close, move or delete apps. However, there are some apps like the settings, that the client is not supposed to be able to delete. Therefore, the clients request are send to the receiver, which catches any unwanted behaviour like deleting an undeletable app before it forwards the request to the delegate.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596549,
      "meta": {},
      "text": "In inheritance a class extends another class, while with delegation it delegates functionality to a different class, usually stored in a reference attribute.\n\nWhile a class may only ever extend at most one class, this allows the class to be passed as parameter for functions, that take the superclass as argument and override methods (polymorphism). While it is possible to have multiple delegations and that can help make the code cleaner and more readable, the classes the functionality is delegated to in most cases can’t interact with the „source class“.\n\nFor example with smartphones:\n\nCustom apps may extend the Application class and override methods such as onStart(), etc. This allows to store all apps in a list and not lose functionality (polymorphism).\n\nWhen they want to, for example, send notifications to the display, they make delegate that to a separate NotificationManager. In most cases, there shouldn‘t be more than one NotificationManager, so why extend from it and not just delegate to it.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5587398,
      "meta": {},
      "text": "Bei 'inheritance' wird eine (Ober)klasse um neue oder überschriebene Methoden/Operationen erweitert. Bei 'delegation' dagegen wird eine Methode/Operation von einem schon bestehendem Objekt von einem anderen neuen Objekt verwendet. \nEin Vorteil an Inheritance ist, dass einfach neue Funktionalitäten in der Unterklasse erstellt werden. Problematisch ist jedoch dabei auch, dass Veränderungen in der Oberklasse womöglich dazu führen können, dass die Unterklasse sich auch verändern muss. \nDer Vorteil an der Delegation ist ihre Flexibilität. Sie ist nicht an eine Oberklasse gebunden und damit \"freier\". Es kann jedoch (je nach Fall) auch ineffizient sein, Delegation zu verwenden. Das liegt daran, dass immer eine Objektinstanz erstellt werden muss. \n\nBeispiel Smartphone Inheritance:\nIn der Kalender-App im Smartphone findet man z.B. verschiedene Monate vor. Jeder dieser Monate hat eine Anzahl von Tagen und einen unterschiedlichen Namen. Hier bietet es sich an eine Oberklasse \"Monat\" zu implementieren, mit den dazugehörigen Monaten als ihre Unterklassen. Hier ist die Hierarchie gut verteilt und macht das Modell sehr übersichtlich.  \n\nBeispiel Smartphone Delegation: \nWenn man einen Messenger-Dienst in einem Smartphone implementiert, kann es oft sehr sinnvoll sein, schon viele Implementierungen eines ähnlichen Dienstes zu übernehmen (z.B. eines E-Mail-Dienst). Hier wird einfach nur die Funktionalität einer anderen Komponente benötigt, soll aber nicht überschrieben werden oder ähnliches. \n\n",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5587862,
      "meta": {},
      "text": "By using delegation , people can use all public methode of the delegate class with one‘s choose. But by using inheritance ,classes will get all the attributes and methods of their parents class through inheritance . \n\nAdvantage  of delegation :  Compare to inheritance ,  using delegation , we do not have to get all methods and attribute from the father class . We can use the methode of the delelated class by choice.\n\nDisadvantage of delegation : By using delegation , one or more object should always be instantiated.\n\nAdvantage of inheritance : Classes can easyly get attributes and methods from the father class . And child classes can extend more functions(or override) base on the father class .\n\nDisadvantage of  inheritance : By using inheritance , classes have to inherit all attribute and methode which maybe it does not need . \n\nIn the context of smartphones i will choose inheritance .  Because more functions could be extended (or overrided) but the basis function of smartphones should be inherited . So we do not have to use delegation and always instantiate new delegated object in  new classes.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5587871,
      "meta": {},
      "text": "The difference between inheritance and delegation is, that in one case a class inherits all functionality of its superclass and can add new operations or override existing ones while in the other case an operation of a class is transferred to another class.\n\nThe advantage and disadvantage of inheritance are that it is simple and therefore easy to use while having the drawback of possibly inheriting some unwanted operations of the superclass.\n\nThe advantage and disadvantage of the delegation are that it is useful to delegate functionality into separate classes and therefore has a cleaner structure while having the issue of working with delegated operations in a black-box view.\n\nAs an example of inheritance, a smartphone inherits the functionality of a regular phone, because it also can call phone numbers. Therefore a regular phone is the superclass of a smartphone. Also, it adds new operations a phone doesn't have like connecting to the internet, running applications and so on.\n\nAn example of delegation is that smartphones delegate the charging operation to the charger because most smartphones don't have an integrated charging cable.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593376,
      "meta": {},
      "text": "Inheritance also called White box reuse in Object Design, creates a new class by subclassing and the new class reuses the functionality of the superclass and may offer new functionality. So that the new class inherits all the methods of the superclass and can use or override them and furthermore create new methods.\nDelegation is also called Black box reuse (modeled with aggregation and composition), creates a new class through the aggregation of existing classes, the new class offers the aggregated functionality of the existing class, for example, the new class has an attribute of type of the aggregated class through which the new class can access the methods of the aggregated class but not override them.\nAdvantage inheritance: reuses already existing code, in a efficient way, it is possible to override inherited methods and change the functionality. Straightforward to use, and supported by many programming languages.\nDisadvantage inheritance: the inherited operations might exhibit unwanted behavior in the subclass. and changes in the superclass can force the subclass to change as well.\nAdvantage Delegation: generally more flexible\nDisadvantage Delegation: Might be more inefficient, because an object instance needs to be created.\n\nexample Delegation in context of smartphones: A good example is a comment/tweet on Twitter, it consists of a text field, the image of the user, and a label(name). These three classes are connected with aggregations to create a comment. Because every class provides unique behavior.\n\nexample Inheritance in context of smartphones: A smartphone can have different user modes in which the user can access different apps/funtionality, for example a family account on Netflix, there are two different kinds of user account which inherit from a superclass user, AdultUser and ChildUser, the AdultUser can access every movie but the child can only access movies which are children friendly and not restricted for teenagers under 18.\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593914,
      "meta": {},
      "text": "- Delegation is an alternative to inheritance for reusing code among multiple classes. delegation uses the HAS-A reference relationship to do the same. An object needs the functionality of another object, so it captures that object and sends it to the other object for function invocation.\n   -advantage:run-time flexibility .because the instance is of a known class,so it can be changed flexible at run time. less coupled among classes than inheritance.\n   -disadvantage: Very confusing if set incorrectly.\n-example\n I have many bank cards from different banks, I can have an  delegate app and add all of them into this app, and in this app I can see the balances and statements of different cards.\nbecause if i need to open and instal all the apps of different bank ,it is too complex .and if i use delegate app ,i can see all the details from all cards ,so than i can manage my finantial state.\n\n-Inheritance uses the IS-A relationship for re-use;On the basic of superclass,the subclass can have more methods. \n   -ad:Through override method we can esaily use all methods from superclass and we also can creat new method.\n   -disad:the new subclass is forced to adapt all methods of superclass,two classes (base and inherited class) get tightly coupled.\n-example:I have a Smartphone class and will have derived classes like IosIPhone,AndroidPhone,WindowsMobilePhone\nI need the basic functionality, but need to create new functionality in a different system.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595863,
      "meta": {},
      "text": "1. Differences between inheritance and delegation:\nIf a system is using an INHERITANCE approach, whenever it needs to reuse a feature, it will use previously defined methods, which were INHERITED from a super-class, meaning the methods are defined/called by the system itself. On the other hand, when a system uses the DELEGATION concept, rather than calling methods defined by the system itself, it DELEGATES it to a different object/system/class, acting almost like a \"proxy\".\n\n2. Advantages:\n\t- Inheritance: This approach leads to easily implementable and expandable subsystems, meaning it works well when your objective is to be able to easily expand functionalities in them.\n\t- Delegation: This concept is great for its flexibility when dealing with a multitude of different approaches, especially when these rely on complementing features, rather than re-implementing them.\n\n3. Disadvantages:\n\t- Inheritance: If the super-class is changed, it may lead to changes in the child-class, which might lead to unwanted behaviors, when calling the inherited methods.\n\t- Delegation: Since a secondary class has to be called, this implies a secondary class has to be instantiated, created and stored. If overused, this system can end up demanding a large overhead/memory usage.\n\n4. Examples (Smarthphones):\n\t- Inheritance: Suppose you have a Camera App, with different photography modes (Standard/Rectangular, Square, Panorama, Portrait, etc). Deep down, all of these are using the same camera input/capturing mode, and its implementation, so it makes more sense to have a generic standard camera behavior, which is inherited by the other specialized options, which extend these base features.\n\t- Delegation: On the other hand, suppose you have a system which allows app developers to connect an interface (\"gadget\") within a smartphone's menu screen to their app. In this case, the gadget does not need to inherit systems/classes from the app, it can either: delegates pre-existing methods to the app or handle special gadget methods alone. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595910,
      "meta": {},
      "text": "Inheritance means that an object extends a parent object and all of its methods. However, if you have a subclass that only needs a part of those methods you would use delegation. Delegation means if a class is used, then the class with the function it needs is instantiated in the class at runtime and the methods use the methods of the instantiated class. Delegation means that you use an object of another class as an instance variable, and forward messages to the instance.\n\nThe primary advantage of delegation is run-time flexibility. The delegate can easily be changed at run-time. The primary advantage of inheritance is that it is simpler and has fewer lines of code.\n\nThe primary disadvantage of delegation is complexity.\nThe primary disadvantage of inheritance is you always inherit all methods to the subclass even if these aren't used.\n\nSmartphones\nInheritance is used ",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596326,
      "meta": {},
      "text": "Inheritance bedeutet, dass eine Klasse von einer anderen erbt und dabei diese Klasse um Operationen erweitert oder Operationen der Oberklasse überschreibt.\nBei der Delegation hingegen wird eine Funktion auf ein Empfänger-Objekt aufgerufen, welches die Operation zu einem anderen Objekt weitergibt welches diese bereits implementiert hat.\nEin Vorteil der Delegation ist die erhöhte Flexibilität gegenüber der Inheritance.\nNachteilig ist bei der Delegation, dass diese ineffizient sein kann, weil erst eine Objektinstanz erstellt werden muss.\nEin Vorteil der Inheritance ist, dass diese von sehr vielen Programmiersprachen unterstützt wird. \nGleichzeitig ist es ein Nachteil der Inheritance, dass diese ungewollt Methoden einer Elternklasse offenlegen kann.\nWürde man ein Programm entwickeln in dem verschiedene Smartphones als Objekte dargestellt werden können, so würde ich das Prinzip der Inheritance anwenden und eine Elternklasse \"Smartphone\" erstellen sowie verschiedene Kinderklassen die für verschiedene Marken von Smartphones stehen wie \"iPhone\", welche wiederum Kinderklassen haben welche spezifische Smartphone Modelle repräsentieren wie etwa \"iPhone 4\". Aufgrund der vielen verschiedenen Ebenen bietet sich die Inheritance hier perfekt an. \nWürde ich hingegen die Software für ein Smartphone entwickeln, so würde ich für jede App die auf die Kamera zugreifen kann das Prinzip der Delegation anwenden und die Operationen zur Nutzung der Kamera an ein zentrales Kamera Objekt weitergeben anstatt für jede App einzeln die Operationen zur Nutzung der Kamera zu implementieren.",
      "score": 83.3,
      "language": "GERMAN"
    },
    {
      "id": 5596472,
      "meta": {},
      "text": "Inheritance is used for implementing a class which is a property of another class (child and parent classes). Child class implements its own methods and variables as well as the ones belonging to its parent class. Inheritance is \"supported by many programming languages\", which makes it reachable. However, it is also possible that inheritance exposes some methods of the parent class, which programmer doesn't intend to share. It would make sense that a smartphone company uses a parent class for fundamental features of its every phone model. The smartphone company would then create additional features based on the models memory, price etc.\n\nOn the other hand, delegation is basically passing an operation to another object, where it is already implemented. Delegation is mostly more flexible than inheritance, since it makes possible to pass functionalities forward without creating a class and thus without forcing to implement every other methods/variables of the class. Yet, depending on the situation, it may also be more \"inefficient, because an object instance needs to be created\". Delegation could be used for personal assistants such as Siri. It passes the orders, e.g. calling someone, from the smartphone-user to the app. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5591860,
      "meta": {},
      "text": "Inheritance vs. Delegation: \n\nInheritance is when a class extends another class. This means that there is an implemented class that does a lot of things the new class should do, which is why we then inherit from the implemented class to access its methods and attributes, without having to newly implement it.\nAdvantage Inheritance: Organise your code and allow for a very clear relationship between classes. Prevents copied code, when many different classes use very similar functionality. \nDisadvantage Inheritance: Inherited method calls can lead to unwanted behaviour that is not exactly applicable for your desired behaviour.  \n\nIn contrast, delegation uses an object of another class and its method to get the return value of that method. \nWhen you want to implement a new method within your new class, you don't inherit method functionality from a parent class, as is the case with inheritance, but rather you instantiate an object from another class and pass messages to a method from that object. You can then use the return value that you received from your delegate to manipulate further and implement your desired functionality. \nAdvantage Delegation: Delegation is more flexible. \nDisadvantage: More inefficient because new object instance is created. \n\nSmartphones: \nDelegation: When phone gets called, the user should be notified. Instead of making the Call inherit from the class Notification, the method, receivesCall creates a new instance notification on which it calls deliver() to Homescreen passing the information of the receives call method. \nInheritance: 2 Classes audio call and video call, inherit from the class call and both implement the method connectToAudio. However the video call additionally transmits video footage via connectToVideo. \n\n\n\n\n\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5592112,
      "meta": {},
      "text": "Inheritance is the process by which one class known as the subclass takes attributes and functions of the pre-existing class, which is known as super class. The main advantages of inheritance is overriding the methods of the super class to make it meaningful to the derived class and it is straightforward to use compared to delegation. One disadvantage of inheritance is if a method is deleted in the super class then we will have to re-factor and another disadvantage is that it can allow unwanted methods of the super class in the subclass.\nWhereas delegation is basically passing the responsibility to someone else that mean the task of an object to another one. The main advantage here is run-time flexibility that mean the delegate can easily be changed at run-time. But since the objects are encapsulated delegation happen to be inefficient.\t\n\nExample: while programming a smartphone app that offers a restaurant’s reservation system the programmers thinking about if they use delegation or inheritance of the class Calendar to use the functionality of this class. Since they want to use the same functionality of the Calendar class without allowing accesses to all the methods such as setTime(Date date) which sets the calendar’s time to a given date, they decide to use delegation of Calendar in RestaurantCalender by creating an object of Calendar in RestaurantCalenar and calling only the wanted methods. But in case they want change and override one of the Calendar’s methods they will use inheritance by making the class RestaurantCalendar a subclass of Calendar and override the methods they want to modify.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593294,
      "meta": {},
      "text": "Delegation:\nDelegation means that you use an object of another class as an instance variable, and forward messages to the instance. It can be viewed as a relationship between objects where one object forwards a certain method calls to another object. the delegate can easily be changed at run-time (run-time flexibility). Delegation is used when you pass an operation to another object.  \nadvantages and disadvantages:\nThe delegate can easily be changed at run-time (run-time flexibility).\nbut it could be inefficient in case of encapsulated objects\nFor instance by using cameras, smartphones forward the method calls to the object responsible for the camera to take a picture or a video. Because of  the delgation other apps on the phone could use the camera components by also forwarding the operation to the camera without exposing other components of the phone.\ninheritance:\ninheritance specifies that there is an is_a relationship between the classes. the subclass inherits the methods and attributes of the superclass and can override them.\nadvantages and disadvantages: \nnew functions are easily implemented in subclasses but changes in the parent class will change in the subclasses as well because they are inherited.\n+ Supported by many programming languages and easy to use\n- methods of the parent class are exposed\nfor instance the software version IOS15.5 is a subclasses of IOS 15. It inherits all the original methods and feature. For changes  like new or updated features the functions of the methods get an updated or new implementation. \n\n\nDelegation passes an operation to another object and inheritance passes the methods of the parent class down to the subclass.\ndelegation hides the methods whereas the methods of the parent class in inheritance are exposed.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594884,
      "meta": {},
      "text": "Inheritance in programming consists in a child class taking the attributes and behaviour of a parent class. \nDelegation can be an alternative to inheritance, it consists in using an object of another class as an instance variable to which you forward a message. \n\nInheritance allows us to access all the properties and functionalities of a class and therefore helps reduce code redundancy, however inherited functions work slower than normal functions.\nDelegation has many advantages like making you think about each message you forward, and not forcing you to accept all methods of a super class. However, it is not directly supported by most popular object-oriented languages.\n\nKnowing that, inheritance would be, for example, most suited for passing a class to an existing API. Whereas delegation would make more sense when you just want a functionality of a method, for example.",
      "score": 75,
      "language": "ENGLISH"
    },
    {
      "id": 5596009,
      "meta": {},
      "text": "Inheritance means there is a subclass that has access to implementation from the superclass it inherits from which it can extend or override. \n\nAn advantage is that you can manage many similar classes with the same base functionalities, without needing to implement these over and over. \nA disadvantage is that you cannot pick individual methods that you want the subclass to have access to and ignore the rest: this can be undesirable if the classes are not similar enough. \n\nInheritance could be used to handle access: for example if a parent sets a screen time limit for their young child's phone, they should be able to adjust this time given that they identify themselves with a password. However, both parties should be able to see the average screen time etc., meaning a password gives you more action possibilities not different ones. \n\n\nDelegation means that a class A has an attribute of class B, on whose instance A can call methods that are implemented in B.\n\nAn advantage of delegation is that you can hide implementation details and make the architecture more comprehensible. \nA disadvantage is that, because you need an instance of every class you want to delegate to, delegation is not as scalable as inheritance. \n\nDelegation could be used for a dark vs. light mode of a phone. Opening an app should automatically \"delegate\" the request to the app's corresponding version (light or dark), if available. I would use delegation, because light vs. dark mode is a difference in implementation, not an extension - there could be two classes that implement similar functionalities, but in opposite ways, they do not extend one another.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596558,
      "meta": {},
      "text": "While in inheritance you have to write the new operation or extensing it and just subclassing. In delegation the operation already exist but it is send to another object. \n\nINHERITANCE \nAdvantage : It is cleaner for methods implementation due to you know exaxtly which object is doing what. \nDisadvantage : sometimes with implementation inheritance when subclassing one class from other might be unwanted behaviors. Like in the example of the faccade when you do not want to show all the methods to the user. \n\nDELEGATION \nAdvantage : It is very convenient just to add the method to another class and easy to understand. \nDisadvatage : you have to create another object and can be less efficient \n\nEXAMPLE : \nIn the case of smarthphones and because we do not want the user to have unwanted behaviors I think the example of VIEW-PRESENTER-MODEL, I will apply delegation here because in this case any method that the user calls can be send to the presenter and then to the model. \n\nIn the case of inheritance : lets say that we have main activity and child activity when the use of hircachical child can be used and we do not want to write another class with the same methods and this one is just extended. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596731,
      "meta": {},
      "text": "While in inheritance a child class has to take over the attributes and methods of its parent or so-called superclass, delegation could be thought of as passing duties without a restriction to implement all the methods of parent class. So as can be seen in the explanation of the concept of delegation we are having a flexibility advantage compared to inheritance. While we can make changes with delegation in the run-time unlike inheritance, unfortunately, the supportability of delegation by popular coding languages is low. And in practice inheritance is used much much more even delegation offers a flexible and in my opinion better approach to lots of problems. When we want to state a is-a relationship then inheritance would be better as reuse concept in our code but it is not flexible as delegation and we need more implementations with inheritance generally. \n\n",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5583823,
      "meta": {},
      "text": "Inheritance:\nIn Java programming, a class takes over the property of another class. A distinction is made between child and parent classes. The child class inherits the properties and behavior of the parent class. The child class can have its own attributes and methods, but must inherit the entire implementation of the parent class. The advantage is that you can easily implement new functions in the child class. However, the subclass depends on the parent class, so changes in the parent class may also result in changes in the subclass. \n\nDelegation:\nDelegation means that you use an object of another class as an instance variable and pass messages to the instance. This is better than inheritance in many cases because you are not forced to adopt all the methods of the superclass. Therefore, you can provide only the methods that are really useful. The disadvantage is that you have to create an object instance, which can lead to more inefficiency. \n\n\nSmartphones\n\nInheritance:\nAndroid smartphones and iPhones are both subclasses of smartphones. They inherit all the basic functions of a smartphone. They are both distinguished by their own special features. \n\nDelegation:\nThe relationship between an iPhone X and an iPhone XI. The newer iPhone does not take over all the functions of the older iPhone. It only has the same basic features and improves the user interface or performance, etc. Therefore, it only needs to call certain features that are the same on both phones. \n\n\n",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5585521,
      "meta": {},
      "text": "The difference between delegation and inheritance is, while in delegation a object from a different class is created in order to use the classes methods in the initial class, inheritance describes a subclass of the initial class and so the subclass inherits the inital classes methods. \n\nA disadvantage of inheritance is that a new class has to be created, an advantage could be that the subclass can modify the inherited functionality or add new ones.\nAn advantage of delegationis that it is run-time flexibile, a disadvantage could be that it is not possible to overwrite methods \n\nAn example for inherticane regarding phones could be the newer models that are being released. They inherit the predecessors functionalities, improve them and add new ones.\nAn example for delegation could be tablets as they have some similar functionalities that can be delegated, but also has to handle different tasks to a smartphone.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5586871,
      "meta": {},
      "text": "In inheritance one class extends another one. So the parent class passes the attributes and methods on to the child class and more attributes can be added. In delegation a class simply implements an interface etc, so the class has an interface object as an attribute. \nOne advantage of inheritance is that operations and attributes can be added and overridden very easily, but if something is changed in the super class, the changes also occur in the inheriting class and might cause errors.\nDelegation is good for its flexibility, but might be more inefficient since there´s always an object instance that has to be implemented first.\n\nExample for Inheritance: \n\nExample for delegation: the basic functionalities of different apps like swiping or typing can be interpreted as a delegation, since the functionalities are needed in many apps, so a new implementation is not needed, but still can be adapted\n",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5588487,
      "meta": {},
      "text": "Delegation is for reusing functionality of objects with an instantiation of an object and method calls on that object. It is flexible, because only the required functionality can be used, without using the unwanted functionality. However, it can be more inefficient, as an object should be instantiated.\n\nInheritance is for extending a superclasses' functionality and/or redefining (overwriting) an existing functionality. It is easy to use and implement new functionality in the subclass. However, a potential change in the parent class can force changes on the subclass.\n\n\nFor instance, when the user wants to copy a link from an application, and presses the designated \"copy link\" button, the app doesn't inherit anything, but just delegates the functionality to System's Clipboard class (e.g System.getClipboard().add(\"Text\");) , so that it can reach to the clipboard and put the text in there. \n\nBut in a smartphone, Biometrics is a superclass of Fingerprint and Face Recognition (in smartphones that includes both of them). So the Fingerprint sensor can overwrite the methods from Biometrics (e.g proveBiometric(), scan() etc.) and extend with new methods like addNewFigerprint(), scanUpperHalf(), scanSides(), mergeFingerprint() etc.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5588492,
      "meta": {},
      "text": "Inheritance and delegation are two different concepts to generalize code and to avoid code duplication. With inheritance one class inherits all the attributes and methods from the parent class as well as can implement special classes and attributes on its own. Whereas Delegation does not have this close relationship between classes. In delegation a task is passed off to another class. Thus, creating a new instance of this class as an instance variable and then invoking methods on this instance. The benefit of this compared to inheritance is that one doesn´t have to inherit all the methods and attributes, but can rather choose which methods  to take. Downside would be that you do not have the benefits of dynamic polymorphism and not save the same amount of code.\nIn the GUI of a smartphone I would use inheritance for the different app symbols. One parent class for the general app symbol with length and width and then different subclasses for Google apps, Microsoft apps and etc. Hence, general similarities would be in the parent class and the different subclasses would have special addition, which makes the symbols differentiable. For all the apps that require an internet connection delegation would most like be more appropriate to send a request over a webClient to send and receive data from internet sources. Thus an instance of a webClient class would be created and methods be invoked inside the app class.",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5589815,
      "meta": {},
      "text": "Bei der Vererbung wird eine neue Klasse B als Unterklasse der Klasse A erstellt, daher erhält die Klasse A alle nicht privaten Attribute und hat Zugriff auf diese sowie auf nicht-private Methoden der Oberklasse. Es können nun neue Methoden sowie Attribute hinzugefügt werden und damit die Funktionalität ergänzen/ verändern. Währenddessen wird bei der Delegation eine Instanz einer anderen Klasse erzeugt, und nun wird die Aufgabe an diese Instanz \"delegiert\", in dem die entsprechende Methode auf der Instanz aufgerufen wird. \n\nBei der Verwendung des Vererbungskonzept hat man Zugriff auf die Implementierung der Elternklasse. Dies ist zum einen ein Vorteil, da es einfach ist neue Funktionen zu implementieren, andererseits kann es von Nachteil sein, wenn sich die Implementierung der Elternklasse ändert, da man die Kindklasse nun wahrscheinlich anpassen muss. Auch ergeben sich konzeptuelle Probleme, wenn man eine Klasse als Unterklasse deklariert, die nicht immer ein Spezialisierung der Oberklasse ist. Der Nachteil des Delegation-Konzeptes ist, dass man die oft Ressourcenaufwendige Instanziierung eines Objektes benötigt. \nEin Vorteil ist jedoch gegenüber der Vererbung, dass man deutlich flexibler ist, da man sogar während der run-time verändern kann, an wen die Aufgabe delegiert wird. Während das Delegationskonzept aber nicht direkt von vielen OOP-Programmiersprachen unterstützt wird, wird Vererbung von sehr vielen bekannten Sprachen unterstützt.\n\nWenn zum Beispiel eine Firma mehrere Apps für Smartphones entwickelt, kann es sinnvoll sein, ein Grundgerüst der Apps (Navigationsleiste, Grunddesign, ...) in einer Oberklasse zu definieren, und nun neue Apps als Unterklasse zu definieren. So können bei Bedarf Funktionen einfach erweitert/ überschrieben/ verändert werden. Außerdem ist eine konkrete App (NotizenApp, Audioplayer) immer eine App (--> ist-ein-Beziehung). Wenn nun Pushbenachrichtigungen gesendet werden sollen, ist es geschickt, dies an eine Klasse zu deligieren. Schließlich gibt es hier keine (\"ist-ein-Beziehung\"), auch muss eventuell für neue Betriebssysteme die Art, Benachrichtigungen zu senden angepasst werden (Änderung der Implementierung) und es ist daher eine eigene, nur über die im Interface spezifizierten Methoden erreichbare Klasse am besten geeignet.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5592672,
      "meta": {},
      "text": "Both inheritance and delegation are used in software engineering in order to reuse functionalities that are already implemented and therefore make the source code more compact and avoid duplicates. The big difference between both methods is that for inheritance, you create subclasses of existing classes that inherit all features of the superclass and can furthermore be extended with more functionalities. The disadvantage hereby is that you need to create quite general superclasses so that all subclasses can match the methods and that sometimes there are inherited methods that you do not need. In contrast for delegation, you use existing classes in the way that you instantiate objects and only use / call the specific functionalities/methods that you need. You, therefore, don't own all properties of the object you are using (e.g. private / protected attributes / methods are not available) but only the external interface / functionalities the class provides and also do not need to make use from all of these. A disadvantage may be that if you only want to use a few functionalities of a huge object you have a lot of memory through instantiation but you only use a small part of it. \n\nAn example where inheritance can be applied to smartphones is that most of the time when a new IPhone is developed, it has all functionalities of the previous version had but is extended with some extra functionalities.\nDelegation can be used when you use the iCloud for memory. The functionality of storing data is in big parts not implemented in the phone itself but used from an external object and delegated. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596136,
      "meta": {},
      "text": "When using inheritance already implemented code from a parent class can be used directly by its subclass, whereas when using delegation the methods are called indirectly: The receiver is called who then sends a request to the delegate who then can execute the task.\n\ninheritance:\n+: very simple and easy to implement and use\n-: unwanted behavior in methods of subclasses can arise due to methods in the parent class\n\nexample: If you have a contacts app on your smartphone and you want to have different groups of contacts. I would use inheritance, because they all have methods like \"call()\" or \"writeEmail()\" which would be used in the parent class. And the subclasses like Friends would have a method \"writeWhatsapp()\", whereas coworkers would rather have \"startMeeting()\".\n\n\n\ndelegation:\n+:  less unwanted behavior, because the client cannot misuse the delegate since the receiver controls the access\n-:  since you need an object instance delegation can be less efficient\n\nexample: In security settings of a Smartphone I would use delegation, since there should be no unwanted behavior. Nobody should be able to change the security (e.g. password of the phone) without knowing the original password. To make sure of that the receiver can make sure that the delegate is not misused to hack the security.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596215,
      "meta": {},
      "text": "The difference:\nBoth inheritance and delegation reuse existing functionality. In inheritance, the implemented functionality of the superclass is extended. Delegation, on the other hand, uses an existing object to implement the functionality.  One advantage of inheritance is its straightforwardness. This is because it is achieved simply by extending a class. On the other hand, if the method signature or method in the superclass is changed, all corresponding methods in the subclasses must be re-implemented. Delegation is more flexible in this regard because you are already using an existing object to get the functionality, if you change the method in the object, you don't have to change it in the class you are using. One of the disadvantages is that you have to instantiate an object in the class to use its functionality, which leads to lower efficiency.\n\nExample:\nAn example of inheritance could be the deprecated versions of smartphones. If we consider them as classes, the newer versions of smartphones always inherit from the old versions by inheriting them and using them as a basis for construction. Therefore reusung functionality such as touch screen and so on.\n\nAn example of delegation could be the use of the same processor in different smartphones. In this case, the smartphone does not inherit from the processor, but the processor is an object (part) of the smartphone that implements the desired functionality. The smartphone instantiates the processor during its construction. \n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596309,
      "meta": {},
      "text": "Both inheritance and delegation can be used to extend the functionality of classes.\nInheritance achieves this by adding or overriding functionality of the base class e.g. by adding additional methods to the class. This has the advantage of being easy, simple and fast to implement. However, it might bring the disadvantage of exposing implementation details to the parent class.\nA smartphone related example of inheritance might be the development of the central phone processors. When new functionality is added, often times the existing chip / ISA is extended and the functions are not delegated to an additional chip. This is a great application of the inheritance pattern because of the added efficiency.\n\nDelegation adds new functionality by adding a new class to an object of which the original class holds a reference. Then the new functionality is invoked by invoking methods on the new object, i.e. by delegating the call. This approach has the advantage of being very flexible, especially since the delegate might be lazily initialized or replaced at any time. On the other hand it might carry the disadvantage of a slight performance penalty due to the additional object instance.\nIn a smartphone one example of a delegate might be app which displays the homescreen on the android operating system, which can be chosen by the user and gets called by the operating system. This is a great application of the delegate pattern because of the flexibility it brings.\n\n",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596413,
      "meta": {},
      "text": "In delegation, a duty is simply passed off to someone/something else, but Inheritance is the process by which one class takes the property of another class (child-parent-relationship).  So in the delegation, one sends an operation to another object where it is already implemented. In Inheritance, one child class can reuse the functionalities of its superclass and it can also offer new functionalities.\n\nDelegation disadvantage: Unlike Inheritance, delegation is not directly supported by most popular object-oriented languages, and it doesn’t facilitate dynamic polymorphism.\nDelegation advantage: It is generally more flexible\nInheritance disadvantage: A change in the superclass can lead to problems in sub-classes, which then are forced to change as well.\nInheritance advantage: Implementing new functionalities in subclasses is pretty easy and as already said it is supported by many programming languages.\n\nIn Context of Smartphones:\nThere are many types of smartphones like iPhone, Samsung, etc. but they also have many functionalities in common like calling, taking screenshots, etc. So in this context, it would be a better choice to use Inheritance by creating a superclass called Smartphone which includes functionalities like calling and attributes like release year, etc. So all types of smartphones inherit from this superclass, and they have then specific functions.\nBut for common smartphone features like camera etc., you can use delegation and let the operation be done via someone else like camera class. So Inheritance creates an \"is-a\" relationship (iPhone is a smartphone), where delegation delegates work to another object like camera functions to camera-object.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585499,
      "meta": {},
      "text": "Während der Objekt designe Phase wird das System auf die Interface Spezifizierung untersucht. Dabei wird das Konzept der Delegation und der Vererbung zwischen Klassen ausgenutzt.\n\nBei der Delegation werden bereits vorhandene Funktionalitäten von anderen Klassen ausgenutzt und verwendet. Vorteilhaft ist hierbei, dass Aufgaben flexibel an andere Klassen weitergegeben und genauso von anderen Instanzen verwendet werden können ohne sie in jeder Klasse implementieren zu müssen. Auf der andern Seite kann diese sehr ineffizient sein, da man zum Teil auf deren Implementierung angewiesen ist und es so zu Verzögerungen kommen könnte. \nIn Smartphones kann dieses Konzept so verdeutlicht werden: zum beispiel möchte eine MessangerApp die Funktion eines Anrufes anbieten. So wird einfach an die bereits vorhandene Telefonfunktion des Handys (mit der schon eingetippten Kontaktnummer) weitergeleitet ohne diese selber implementieren zu müssen. \n\nBei der Vererbung unterscheidet man zwischen der Implementation Inheritance und der Spacification Inheritance. \nGenerell betrachtet man bei der Vererbung bereits vorgegebene Implementierungen und versucht diese in den vererbten Unterklassen zu verwenden und auszuweiten bzw. neu zu überschreiben. Ein Vorteil hierbei ist, dass man die Unterklassen um neue Funktionalitäten einfach und schnell erweitern kann. Genauso kann man Klassen mit ähnlichen Attributen oder Methoden in einer gemeinsamen Oberklasse zusammenfassen und deren Verwaltung übersichtlicher gestalten. Gleichzeitig kann es durch den Polymorphismus zu unerwartetem Verhalten kommen und das System schwer nachvollziehbar machen. \nBetrachtet man das Beispiel mit den Smartphones: Oberklasse = Smartphone hat allgemeine Funktionen: Anrufen, SMS schreiben, Internetzugang. Unterklassen vererben alle diese Funktionalitäten und können um weitere Attribute erweitert werden: Smartphone mit touchsreen/Tatstaur/Telfontasten...  ",
      "score": 83.3,
      "language": "GERMAN"
    },
    {
      "id": 5585728,
      "meta": {},
      "text": "Inheritance means that the subclass uses code from its superclass. This is especially useful if there are multiple subclasses of one super class and they all have almost identical attributes or methods. It is an advantage that it is not necessary to instantiate an object for this. A negative side effect could be that a class inherits behavior that is unwanted/unneeded.\n\nIn Delegation a class reuses the code of an existing object which needs to be instantiated before the class can access its methods, this can be an disadvantage. An advantage of delegation is that if the object is changed this does not necessarily mean that the class needs to be changes as well.\n\nInheritance could probably be useful in a chess app. Where all figures have a color, a type (like pawn, knight, queen etc.) and a move method and could inherit these from a figure superclass. Inheritance makes sense because they all figures share basic properties. \n\nDelegation could for example be used in WhatsApp if all the chats are seen as classes it would make sense to call the method initiateVideocall from a Videocall class. This would reduce the length of code since the initiateVideocall method works the same for all chats/contacts and only needs to be passed the phone number. Also if something changes in the way video calls are initiated. Not all classes but only one needs to be changed.\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589212,
      "meta": {},
      "text": "In the case of aggregation a class contains an object of another class and use its functionality. The advantage is that a class can aggregate many other classes, not just one, and use their functionality. However, additional time and memory is required to initialize and store the objects in memory.\n\nIn the case of inheritance, a class is a child of another class, so all methods of the parent class are available, without creating an additional object. The creation of an additional object is not required, so the performance will probably be slightly higher and less memory is required, however, the class can only inherit from one other class (there are, of course, languages with multiple inheritance, but Java is not among them).\n\nWhen writing applications for the phone, you can meet these two principles. For example, an application developer may decide to use the functionality of another application for his application, then this is aggregation. However, you can also take an application that already implements some of the necessary functions as a basis and then add the missing functionality using inheritance.\n\nI would choose the first option because then the code is better structured.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589548,
      "meta": {},
      "text": "1. Difference between inheritance and delegation: \n\nWhereas with inheritance we are subclassing from an implementation, in Delegation we are catching an operation and sending it to another object where it is already implemented.\nSo when we delegate we need an instance. We invoke the method on an existing object. \nInheritance implements functionality in the superclass, and reuses it by inheriting or overriding an existing operation in it.\n\n2. Also provide an advantage and disadvantage for each concept:\n\nDelegation is more flexible but might be more inefficient, because an object instance needs to be created.\n\nInheritance is straightforward to use, is supported by many programming languages and it is easy to implement new functionality in the subclass.\nBut inheritance exposes some (unwanted) methods of the parent class and changes in the parent class can force the subclass to change as well.\n\n3. Additionally come up with an example in the context of smartphones for each concept and explain why you would choose it:\n\nWith Inheritance it would be difficult to implement new functionalities like faceRecognition in the parent class if new Versions or Models of Smartphones are created, that have more functionalities.  The older Versions could be forced to  inherit the changed methods and could not support them. But the new functionalities, like the face recognition, could be implemented easily in new subclasses, so that script could expand with then new phone models.\n\nWith Delegation the Software for the Smartphone would be much more flexible, I can remove and add Delegater as I wish, and would not have to be aware of all the old functionalities to know what I can & have to do. I would prefer Delegation in the case of implementing a new functionality like face recognition, cause I could control more what I am implementing and what classes and methods I use, without unnecessary old stuff.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5592313,
      "meta": {},
      "text": "Deligation works by having multiple classes that receive operations and send them to the next class. This makes it possible to reuse the functionality of a class in basically all circumstances, on the other hand, it may be not very efficient because those classes have to be instantiated and many instances of objects are created. Inheritance works by reusing an existing class as a \"baseline\" and adding or also overwriting functionality. It is a very simple concept that is easy to use and it is supported by many programming languages, but it also makes the whole structure more \"fragile\" because every change of a parent class also changes ALL of the subclasses. In a smartphone, I would for example use deligation for the functionality and communication of the many different processors of the phone because I would want to be flexible in what functionalities I reuse, I would not want one processor that has 10 \"parent processors\" and then has all the functionality of them. I would use inheritance for the Camera System/ Camera App of the phone (if it has more than one camera), the different cameras of the phone could inherit the basic functionality like \"taking a photo\" of a general camera class and then add more specific functions like night-mode or wide-angle.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5593132,
      "meta": {},
      "text": "Inheritance is when our object inherits the entire functionality of another object. This is great when we know that all of that functionality is needed and that it won't result in security leaks. It is also easy to use and won't make it hard for upcoming functionalities to be implemented. On the other hand, if we need only certain parts of the other object, inheritance may be an overhead and may even result in security leaks. An alternative could then be delegation. This way, we can limit to which extent our object uses the functionality of another one and have more flexibility. The only downside could be inefficiency, since an object instance must be created.\n\nAn example in smartphones could be when a phone comes with pre-installed apps. This could be viewed as inheritance, because they are there always by default.\nOn the contrary, apps which a person can install trough an app manager such as Google Play can be viewed as delegation, since their installation is optional. If the appManager was an object of our class, it would look like: appManager.install(newApp).",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594377,
      "meta": {},
      "text": "Interhitance ist das Konzept, bei dem man alle Möglichkeiten einer Oberklasse bzw. übergestellten Instanz erbt. Hierbei sind alle Methoden und Parameter von dieser auch Bestandteil der eigenen Klasse und Klassen, die die eigene Klasse nutzen, können alle diese Funktionen nutzen. Ein Vorteil hierbei ist, dass man die ganzen Funktionen nicht selbst zusätzlich in seinem Code einbauen muss. Ein Nachteil ist allerdings, dass somit alle Optionen an die benutzende Klasse übergeben werden, auch diese, die eigentlich nicht nutzbar sein sollten.\n\nBei Delegation nutzt man auch eine übergeordnete Klasse. Hierbei wird diese allerdings nur als Objekt in der eigenen Verwendet und man ruft selbst nur bestimmte Methoden dieser auf. Hierbei kann man somit besser selbst bestimmen, welche Möglichkeiten der Anwender hat. Ein großer Vorteil ist, dass man somit die Funktionen genau selbst beschränken kann und nur genau die Methoden übergibt, die auch nutzbar sein sollen. Ein Nachteil ist, dass man alle Funktionen nochmals selbst in seinem Code einbauen muss und somit viel mehr Code schreiben muss, der eigentlich \"unnötig\" wäre.\n\nEin Beispiel in der Welt der Smartphones ist beispielsweise, dass wenn man in einer App auf \"teilen\" klickt, immer zuerst eine Oberfläche des Betriebssystems geöffnet wird, die diese Funktion dann nur an die ausgewählte Funktion weiterleitet. Das wäre dann ein Beispiel für Delegation. Ein Beispiel für Inheritance wäre die Nutzung der Kamera, da alle Apps, die die Kamera benutzen, auch vollen Zugriff direkt auf diese haben.",
      "score": 91.7,
      "language": "GERMAN"
    },
    {
      "id": 5594707,
      "meta": {},
      "text": "First of all, delegation makes sure that we use another class by sending a request to another class in order to invoke the method on an object in this class. Actually we need an instance of this class to avoid the null pointer exception for example, while the inheritance is also a type of reuse as the delegation but the inheritance is reusing another class to benefit from its attributes and methodes by extending or implemeting the reused class. \n\nIn the one hand the advantage of delegation is to make sure that the client or user is not able to access methodes that he shouldn't. this actually helps prevent the misuse of methodes that are not availble for the public, a problem that is not avoided by the inheritance concept.\n\nIn the other hand the advantage of inheritance is much easier to implement than the delegation.\n\nwe can take example of trading app. in order to prevent the user from changing a trade after closing we do need to implement based on delegation and not inheritance.\nIn another example, an app which needs optimisation and changes more than usual, it will be better to use inheritance, a concept that makes it easy to implement new functionality in the subclass \n",
      "score": 75,
      "language": "ENGLISH"
    },
    {
      "id": 5594892,
      "meta": {},
      "text": "Vererbung und Delegation sind beides Konzepte mit denen man die Wiederverwendbarkeit in einem System versucht zu verbessern, damit man nicht gleichen Code immer und immer wieder schreiben muss. \nGrundsätzlich benötigen beide Klassen Funktionalitäten die bereits in einer anderen Klasse implementiert wurden. Vererbung sollte dann verwendet werden, wenn alle öffentliche Methoden der geerbten Klasse eins zu eins benötigt wird und keine Adaption erforderlich ist. Delegation ist dann sinnvoll, wenn man ein Teil der Funktionalitäten benötigt und noch Adaptionen benötigt.\n\nVererbung: \nPro: leicht zu implementieren\nContra: kann Methoden sichtbar machen, bei welche man das gar nicht möchte\n\nDelegation:\nPro: flexible; kann Methoden hiden, welche man nicht zeigen möchte\nContra: im Gegensatz zur Vererbung nicht gleich Performant, da im Konstruktor ein Attribut initialisiert werden müssen\n\nSmartphones:\nVererbung: \nAlle Smartphones erben von Phone, welche die Logik für Telefonieren und SMS schreiben implementiert.\n\nDelegation:\nSmartphones haben meist eine Internetverbindung, deswegen besitzt ein Smartphone auch noch ein Attribut von Socket. Jedoch benötigt man nicht alle Funktionalitäten von Socket. Man möchte nur E-Mails senden und im Internet surfen können. Deswegen implementiert man in Smartphone die Methoden surfWeb(), getMail() und sendMail(), welche mithilfe des Sockets ihre Funktionalität implementiert.\n\n\n\n\n",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5595722,
      "meta": {},
      "text": "Inheritance is when a class takes all the attributes and methods of another class, while Delegation is using an object of another class as an instance variable, and forward messages to the instance thus you don#t have to accept all methods of a super class.\nThe advantage of delegation is run-time flexibility, because the delegate can easily be changed at run-time.\nThe advantage of inheritance is you can save time and effort, because you can simply reuse the code of the parent class without having to rewrite it.",
      "score": 50,
      "language": "ENGLISH"
    },
    {
      "id": 5596693,
      "meta": {},
      "text": "The difference between inheritance and delegation is, that with inheritance we extend a class with a subclass that has added operations or overrides existing operations, while delegation reuses already implemented functionality of existing objects by catching an operation and sending it to another (already implemented) object. \n\nThe advantage of delegation is that it is more flexible because we create an entirely new class, but this also on the other side might be more inefficient, because an object instance is needed. \n\nThe advantage of inheritance is that it is easy (straightforward, but also in terms of minimal added complexity) to add new functionality in the subclass, but on the other side the subclass is very dependent on the parent class and changes of the parent class are forced onto the subclass.\n\nInheritance: Dating app with like and superlike. Like stores date of the like, the time span you looked at the profile and the rating you gave the profile (1-10) (=class with 3 attributes + needed operations). Superlike has additional operation to send reminders every 10min that you superliked someone. This is the superlike subclass of the class \"like\", that has this added operation. Since it is only one added operation, but all other attributes and functionality are same, it makes sense to use inheritance.\n\nDelegation: When you talk to your Siri on Smartphone and tell it \"set alarm for 10:30\", Siri will delegate the operation of setting of your alarm to your alarm clock. Considering the amount of different operations Siri also can do which are not at all connected to alarm clock, it wouldn't make sense to make Siri a subclass of alarm clock. Delegation gives the needed flexibility.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5584654,
      "meta": {},
      "text": "Inheritance:\nExtend the existing group with some new methods and attributes.\n\nAdvantage: Direct to use, simple to run, support many programming languages\nDisadvantage: Changes to the parent class also result in changes to the subclass, inheritance leads to the exposure of some superclass methods\n\nExample: Smart phone computer software will carry out specific categories, including geometric computers, algebraic computers and so on.\n\nDelegation:\nTransform some methods of the same operation into a new group and create new methods.\n\nAdvantage: More flexibility\nDisadvantage: New object entities need to be created, resulting in inefficiencies\n\nExample:  Switches between apps with the same functions on smartphones (such as social software instagram and facebook)\n",
      "score": 58.3,
      "language": "ENGLISH"
    },
    {
      "id": 5585207,
      "meta": {},
      "text": "In Delegation, functionality is acquired dynamically at run-time by objects collecting references to other objects. The advantage of this approach is that implementations can be replaced at run-time. This is possible because objects are accessed only through their interfaces, and it does not interfere with existing components and leads to more robust code. The disadvantage of it is that the behavior of the system may be harder to understand just by looking at the source code. A system using object composition may be very dynamic in nature so it may require running the system to get a deeper understanding of how the different objects cooperate.  \n\nOn the other hand, Inheritance allows us to inherit all the properties of the base class and can access all the functionality of the inherited class. However, we break the encapsulation as the dependency it creates between child and parent, when a class inherits another class, we include all methods and attributes from the parent class and expose them to the child class. That creates a tightly coupled relation between child and parent class, also against the idea of object-oriented, which is to hide the complexity in the object and interact by an interface.\n\nOne example of it is that when you are using the \"toolbar\" control on your smartphone, we select a specific emoji displayed on the emoticon keyboard and the system's own keyboard switch (WBComposeToolBar view) button, the view controller (WBComposeViewController) needs to call different functions according to the button pressed. The function at this time is that when the button of the WBComposeToolBar view is clicked to switch, we can use the Delegation method to inform the WBComposeViewController view.\n\nAnother example of these in the context of smartphones is the display of a monitor, although you have a colorful monitor- ColorMonitor, you may want to use it as a black and white monitor- BWMonitor from time to time(for some special effect of for photography purpose), in this case, the inheritance of Class cannot be changed at Run-time.  But for Delegation, it's easy, just change the display delegate in the monitor from color to black and white, and the monitor will be completely painless.\n\n\n\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5586039,
      "meta": {},
      "text": "With inheritance the developer creates a subclass from an existing implementation, the reuse is made possible because the subclass also contains all methods from the superclass.\nWith delegation the called function sends the operation to another object where the needed functionality is already implemented. The reuse is given because an already existing function is used.\n\nSmartphone apps could be implemented through inheritance. There is a abstract superclass App which has e.g. the methods start() and uninstall(). Each single app could overwrite the start() method to implement its functionalities. The uninstall() method remains the same because its process is the same for every app.\nUsing inheritance in this context makes sense because it makes specialization easily possible.\n\nAn example for delegation is using a website on a smartphone. The user opens the browser app which delegates the inquiry to the webserver. The browser makes sure that the user does not misuse the webserver and gets what he wants, which is the HTML code in this situation, and for this reason it is sensible to use delegation in this context.",
      "score": 58.3,
      "language": "ENGLISH"
    },
    {
      "id": 5590259,
      "meta": {},
      "text": "Inherance is building a class hierachie using super and subclasses. Delegation means to use other calsses as attributes in the \"main\"class. Both can reuse code and classes \n\nInhariance is vervy logic. It is easy to implemnt, but the reuse leeds to l lot of unwantend methods. Furthermore there can be problems beacause of Ploymorphie and changes in a superclass. \n\n\nDelegation is often means a lot of coupling beacause an new class is needed. As an advantage it is more flexible. Can often be used for more apllications. \nThe monitor of an smatphone can reuse the application sigs on the screen as an attribute ",
      "score": 75,
      "language": "ENGLISH"
    },
    {
      "id": 5590956,
      "meta": {},
      "text": "When you extend a class and add new methods that are specific for this new class or override the existing methods of the superclass its called inheritance. Its advantage is that it creates a structure in code that is really easy to understand and saves time implementing lookalike classes. Its disadvantage is that if you change something in the superclass it actually forces you to  change the child class as well, which affects your freedom on coding. As an example if you want to implement SamsungPhone and ApplePhone classes, you can basically create a class called Smartphones, which has basic smartphone features and then implement these two specific classes that inherit from Smartphone class, since they both have common features. \nIn delegation you basically catch an operation and send it to another object. It is good because it is time flexible which means that it can be changed at run time. However, an object instance has to be implemented which might be inefficient. For example you have a calculator app in your phone and you want to show different text messages for different calculations based on if its a multiplication ,addition, subtraction or division. With delegation, without creating a class for every calculation type, with creating an instance of a class that has an appropriate method you can solve the problem. \n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593738,
      "meta": {},
      "text": "Inheritance: a class implements attributes and methods from parent class-so we can say it reuses a specified functionality from this parent class, while delegation reuses implemented functionality in an existing object-a class calls a method from another class. It makes explicit the dependencies between the reused class and the new class. \n+: Delegation is a preferable mechanism to inheritance as it is flexible, it does not interfere with existing components and leads to more robust code.\n-: as it has to invoke many objects, it is inefficient.\n\n+ inheritance: It is preferable to delegation in subtyping situations as it leads to a more extensible design, it is easy to implement and many programming languages support inheritance. \n-: Parent and child class are tightly coupled, which means that if we make changes to parent class, it will affect all the child classes inheriting from it.\n\n In a smartphone news app we have already created a code for displaying headlines of the news in  highlighted text(1st style) - then want to apply the same for two respective buttons linked to the headlines. Here:choose inheritance so as to avoid redundancy- duplicate code, by making the first writing style a parent class and making the second style to inherit from it: we delete properties like layout width and height from second style, since we can take it from first style.\nIn a chatclient system: delegation- chatclient calls the layer under(so the layers call a function from another class. In this way, we can send the request from upper layer(chatclient) to the layer under without having any details about the classes.\n\n\n\n\n\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595041,
      "meta": {},
      "text": "Difference: 1.the 2 classes which follow the inheritance concept always have some same operations in two classes,but by Delegation concept, the 2 classes can not have same operation.\n2. the purpose of the inheritance is to extend a base class with new operation\nand the Delegation is:one object requests a functionality of another object to catch one operation and  send it to another object\n\nInheritance\nadvantage: \n1. can direct be used\n2.  many programming language can follow this concept \n\ndisadvantage:\n1. if the parent class changes,the subclass must change;\n2. some methods in parent class will be composed\nexample:i want to implement a new method named changePrice() in Smartphone class,so an abstract operation changePrice() must be implemented by the subclass of the abstract Smartphone class.\nReason: i want to change the price for all the smartphones, which means that i need to do same operation in all smartphone classes,in this case, i can easily use the inheritance in Smartphone class,and the subclasses of smartphone class can inherit changePrice() method from Smartphone class.\n\nDelegation:\nadvantage:\nFlexibility any objects can be replaced\ndisadvantage:\n Low efficiency\nexample: i want to implement an attribute with Smartphone set(Smartphone[] smartphones) in App class,so App class has the instance of smartphone class,so it catch the smartphone and send it to App class.\nReason: In App class i use an object(Smartphone set(Smartphone[] smartphones)) of smartphone class as an instance variable, and forward messages to the instance.(i do not do same operation as in smartphone class in App class.)And it satisfied the definition of delegation.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596444,
      "meta": {},
      "text": "The difference between inheritance and delegation is, that inheritance extends a base class by new functionality or overrides an existing operation, whereas in delegation an object catches some operation, possibly operates/modifies/calculates something internally and afterwarts delegates the operation by sending it to another object.\n\nInheritance:\n\n+\nReducing redundant code. You can extend an existing class in contrast to copying the existing code. In the end you have a shorter program, which is easier to understand and easier to maintain.\n\n-\nMaybe you don't want some of the implementation of the parent class to be exposed and accessible, which you can hardly if at all prevent with inheritance.\n\nDelegation:\n\n+\nDelegation is generally more flexible. You can design which methods are freely accessible by yourself and delegate the needed ones to the delegation-object, whilst being able to compute stuff inbetween the delegation too.\n\n-\nFor example the object that calls are delegated to, has to be instantiated, which uses ressources and can, if delegation isn't even needed, be very wasteful and time-consuming.\n\n\n\nSmartphone Exmaples:\n\nInheritance:\nModel different smartphones:\nStart with \"Smartphone\" class\n-> child classes \"Iphone\" // \"Samsung\", ...\n-> These could also have subclasses, \"Iphone 13\", ... // \"galaxy\", ...\nChoose inheritance here, because each specialization only adds functionality whilst also implementing superclasses.\n\nDelegation:\nA lot of smartphone apps (e.g. Lieferando) use an instance of Google Maps to show maps. Obviously they delegate your requests to Google and show you the result (e.g. zoom in/out -> load data).\nYou choose delegation here, because Google Maps already has the functionality needed, no need for inheritance",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596516,
      "meta": {},
      "text": "Delegation could be an alternative to inheritance.  In delegation instead of making subclass with extra functionalities, class can use already existing class and delegate these tasks to that class. This can lead to more flexible structure, because it doesn’t force you to accept all the methods from the class you would other wise inherit. It can also be more run-time-flexible since the delegate can easily be changed at run-time.  Delegation also has its disadvantages. It is not so well supported in all programming languages as inheritance. Also the class where functionalities are delegated needs to be created and this can be costly.\n\nIf we think about smartphones, smartphone is most certainly subclass of a phone. Smartphone is a phone and it more or less needs all the functionalities that traditional phone has, calling, sending text messages etc. It also has some functionalities that traditional phone doesn't have, like access to internet. On the other hand smartphones usually have camera. I don't think its reasonable to think smartphones as subclass of camera, but rather to delegate picture taking functionalities from smartphone to camera object.  Also actual cameras usually have more functionalities than smartphone cameras.",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5587363,
      "meta": {},
      "text": "What is inheritance ?\n\n→ Inheritance is when a class take (inherit) the properties and the behaviors of another class and can add others (properties and behaviors). The child class inherit the properties from the parent class. \n\nWhat is delegation ?\n\n→ Delegation, on the other hand, is to delegate a task to an object that can achieve the task. It can be alternative to inheritance and can used in the bridge pattern.\n\n⇒ Problem such as duplicated code when using inheritance to reuse the code, can be resolved by delegation. Because while delegation there is technically no duplicated code. \n\nWhat is the advantages and disadvantages of inheritance ? \n\nadvantages : \n\n- The code re-usability: we can get all the properties and behaviors of a class without duplicating the class, by just inheriting we can make this happens.\n\ndisadvantages : \n\n- The two classes, the parent and the child, get very coupled. You cannot use one of them independent anymore.\n\nWhat are the advantages and disadvantages of delegation ? \n\nadvantages : \n\n- Every component can be independent from the other. The delegating object doesn’t have to know anything about the other objects.\n- The delegating object is very flexible and can be used in different context and with other classes. It is just needed for a specific task to accomplish.\n\ndisadvantages : \n\n- The problem with delegation is that the code of the delegating object is not explicit and known to us. Which make it sometimes hard to understand and to deal with.\n\n## Smartphone example\n\nFor example if the company wants to develop a new smartphone, it can take another one and add some functionalities to it. And this is the inheritance. The new smartphone inherited the functionality of the first one. I choose this example because it highlights how we take the functionality of a smartphone and we build the second one on it. And the second new one will be dependent on the first one in everything. If we make changes on the first one the second one will be influenced because the second phone is based on the first. \n\nAnother example is when a company want to develop a new model phone, she can take a processor (as an example) from another company and add it to the phone. This way we delegate an object to anther party to do the task. I choose this example because it highlights the delegation as is handing something to another party to accomplish something.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5587518,
      "meta": {},
      "text": "Implementation inheritance extends a base class by a new operation or overriding an existing operation. The subclass rewrites all methods from superclass.\nPro: Generally more flexible\nCons:  Might be more inefficient, because an object instance needs to be created\n\nDelegation catch an operation and send it to another object, which means the receiver adds delegation as an object.\nPro: Easy to implement new functionality in the subclass\nCons: Inheritance exposes some (unwanted) methods of the parent class\n\nExample in Smartphones：\nIf Apple would add a new camera lens to iPhone 14 compared to 13, then they can use a subclass for 14 that extends 13 and write the software for the new lens. The software contains all functions in 13.\nBut if iPhone 14 want to reuse the zoom function from 13, Apple don't need to take all camera class but use delegate to combine 13 to reuse the specific zoom function. \n",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5592241,
      "meta": {},
      "text": "In inheritance, the functionalities (methods, attributes) of the superclass are passed on to the subclasses so that the instances of the subclasses can use these functionalities directly. However in delegation, the receiver class instantiates (delegates) the sender class, in order to be able to use the methods provided by the sender class. In contrast to inheritance, there is no hierarchical relationship in delegation, so that not all methods of the sender class are necessarily adopted in the receiver class.\n\nInheritance leads to a direct dependency between the parent class and the subclass, so that if a change is made in the parent class, the subclasses must also be adapted to this change, which limits flexibility, since changes to the base class require careful consideration(runtime flexibility is also limited.) Nevertheless, inheritance offers the possibility of adding new, non-shared functionality to various subclasses that inherently have the same structure but differ slightly, such as FastCar and SlowCar in the Bumpers game.\n\nDelegation requires the object instantiation of the receiver class, in order to use the necessary methods in the receiver class, which decreases the runtime efficiency. Nonetheless use of methods through instantiation of the class also provides the opportunity to benefit from polymorphism, so that some decisions can be delayed until the runtime (bridge pattern).\n\nClassification of mobile applications in smartphones is a good example of the use of inheritance, as all applications, despite their internal differences, have some basic functions in common, such as sending notifications, using mobile data, requiring user authentication to access account information/camera, etc., which can be specified in a superclass. In smartphones, whether to use mobile data or wifi connection is a decision that is delayed until runtime. Therefore using delegation (bridge pattern) would make in this situation more sense, since delegation enables more flexibility than inheritance, as the methods for internet use will be delegated either to the wifi or mobile data class/system during runtime according to the wish of the user.\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595630,
      "meta": {},
      "text": "Inheritance is a concept that allows a child class to call methods of it's parent class as it 'inherits' the parents (visible) methods and attributes. Inheritance operates in local context - i.e. in the context of a particular class. In that class (in languages like Java) you can access fields and methods of the current class and the parent class using `this` and `super`. The advantage of inheritance is a clear class structure, which often corresponds to the actual relationship between the classes and works well with tree structured relationships. For instance dogs belong to the biological family of \"doglike carnivores\" (Canidae), which itself belongs to the class of mammals (Mammalia). That could be represented with a `class Dog extends Canidae` and `class Canidae extends Mammalia`. Or your smartphone is really just a cellphone with extra features and an IPhone is just a specific subtype (child-class) of a smartphone.\n\nOpposed to inheritance there's also the concept of delegation. This pattern is more suited for a component-structure! Contrary to inheritance here the operations happen in a non-local scope - in particular, in the delegated classes! For instance a smartphone has a camera, a flashlight, a central processing unit as well as a screen (and many more components). Now a smartphone action, say: `phone.takePhoto()`, can be delegated to it's components in a chain of events: `flashlight.turnOn(); camera.takePhoto(); cpu.postProcess(); screen.displayPhoto();`.\nThis simply represents a different kind of relationship (for instance, you wouldn't say that a camera is a sub-type of a smartphone, neither would you say that vice-versa).",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596649,
      "meta": {},
      "text": "Der hauptsächliche Unterschied ist, dass einmal die wiederzuverwendende Funktionalität, dierekt in in unser neuen Klasse enthalten ist, hineingeerbt wurde (Inheritance).  Bei delegation hingegen, haben wir nicht all die benötigte Funktionalität dierekt in unser Klasse, viel mehr nutzt unsere Klasse ein instanziertes Objekt einer anderen Klasse um darauf die benötigten Methoden aufzurufen, sich sozusagen zu an der Funktionalität der anderen Klasse zu \"bedienen\". Hier deckt delegation keine unützen oder wohlmöglich sogar \"geheimen\" Details der verwendeten Funktionalität auf, sondern ist im Gegensatz zu inheritance selektiv, muss aber immer den Umweg über das initzialisierte Objekt gehen.\n\nDelgation: \nVorteil:\n\tDer reuse von Funktionalität kann durch die Delegation an ein Objekt der \"benötigten\" Klasse viel besser selektiert und kontrolliert werden, ist also flexibler\n Nachteil:\n\tHat mehr Overhead, also wohlmöglich ineffizienter, da Objekt der entsprechenden Klasse erstellt werden muss\n\nInheritance:\nVorteil:\n\t\"Besitzt\" alles an potentiell benötigter Funktionalität der parent class, somit auch kein Overhead\n\tDaher sehr leicht zu implementieren und zu nutzen , da man \"einfach\" nur noch erweitern muss\nNachteil:\n\tPotentiell ungewünschte Information (Sicherheitsgründe, geheime Details der Implementierung, usw.)\n\twerden im Regelfall(private modifier) auch offengelegt.\n\tAußerdem: abhängig von parent class bei Änderungen\n\nDelegation Beispiel:\nEine App benötigt Zugriff auf das Internet. Nun werde ich natürlich meine App nicht von meiner Network-Klasse erben lassen, da diese zwar dann vlt. die paar gewünschten Methoden hätte, aber auch noch viele unütze (vlt. Sicherheitsgeährdende) mehr. Deshalb nutze ich Delegation und erstelle ein Objekt der Netzwer-Klasse um mir gezielt die wenigen Methoden \"rauszupicken\" die ich benötige. (abstrakte Beschreibung!)\n\nInheritance Beispiel:\n\nIch will ein Nachfolger Smarphone zu meinem Vorgänger Modell bauen. Hier macht inheritance Sinn, da ich große Teile meines Vorgängers (parent) übernehmen will, ein paar davon verbessern (Programierkontext: \"@Overwrite\") und ein paar neue Funktionalitäten in meinem neuden Modell implementieren will ( neue Methoden).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5591510,
      "meta": {},
      "text": "Inheritance is achieved in java through using the \"extends\" keyword.\nThe class inherits all attributes and methods from its superclass.\nInheritance is very useful if you want to create specialized subclasses which use the superclass as a base template and add additional features on top of it. If you use inheritance you can call methods that have the superclass as a parameter also with the subclass without having to change the method.\nThe disadvantage of inheritance is that you must inherit all methods and attributes and if you don't want the client to have access to certain methods then inheritance might get in the way.\n\nDelegation is achieved through having the desired class as an attribute inside your object.\nThrough delegations you can use only parts of a class while leaving the rest inaccessible for the client.\nThough you have to create both the object itself and the delegated class object inside it which can be inefficient.\n\nIn context of smartphones I would implement the homescreen app symbols through delegation as the actual implementation of the app happens somewhere else and the object just stores the app's name, icon and delegation to the implementation.\nFor the UI layouts I would use inheritance since it would be much easier to add individual features to each layout through inheritance\n\n",
      "score": 75,
      "language": "ENGLISH"
    },
    {
      "id": 5593182,
      "meta": {},
      "text": "Inheritance is used when a class wants to extend another classes Functionality or be one Realization of the Parent-Class. Delegation is used when one system uses another classes Functionality but they dont extend each other but rather are on a equal level. \nInheritance is useful when alot of similar Classes are needed, each with slight differences but can get inefficient when used with to few or to different subclasses.\nDelegation is useful when another system is developed independently from the other and you can change one system without having to change the rest, but it can get very counter intuitive and weird when used wrong.\nModeling Browsers as one Interface and making subclasses (eg. Chrome, Edge etc.) all with some special, some general functionalitys(Inheritance) but use Aggregation when the Browser uses a search Engine.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5593871,
      "meta": {},
      "text": "Inheritance means that a subclass inherits from a superclass. It inherits all attributes and methods. That means the subclass has to overwrite und reuse all methods of the superclass. And with every change in the superclass, the subclass needs to adapt (they are highly coupled). But it is quite easy to specify subclass with extra attributes and methods.\nDelegation means that a class uses (public or even protected) attributes and methods from another class by creating an object of it.  Further delegation is more flexible through changing details in classes, but it is even more inefficient, because the objects calling each other are encapsulated.\n\nExample: if we have a class 'Smartphone' and want to create a new specific phone 'IPhone 15' with three extra cameras, we could first use inheritance regarding to the superclass 'Smartphone'. In 'Smartphone' all features of a classic smartphone are described, like it has a touch display, a front and back camera and it can play music. All those features our new phone can use already because of inheritance and of course we can implement even more like a finger ID sensor. \nNow, for our three extra cameras we want to copy some technology from real good reflex cameras. So we use delegation to create an object of a class 'ReflexCamera'. We want to use some of the methods of the object, but don´t want to be forced to overwrite and use all methods. The system of the class 'ReflexCamera' should not be changed, just used externally of our new phone. ",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5586346,
      "meta": {},
      "text": "Inheritance describes a \"is a\" relationship, that means, the subclass is one kind of the superclass. Therefor the subclass often uses the attributes or methods of the superclass.\nOn the other hand, delegation describes a \"has a\" relationship, which means you need to create an object of the utilized class. You can use the instance variable to delegate certain tasks of one class to another.\n\nDelegation is usually more flexible as you can have an instance of every object and don't have to implement methods of the superclass. However, if the creation of this instance is expensive, it might be more inefficient than inheritance. \n\nInheritance is supported by many programming languages and is also very easy to use.\nHowever, you have to accept all methods of the superclasses or override it in the desired way. Moreover, changes, made in the superclass, can lead to the need for changes in the subclass.\n\nexample delegation:\nConsider a restaurant app, where you can reserve a time slot and transfer it to your calendar. As the calendar is not a reservation app, nor the other way around, inheritance would not make sense here. Therefor, it makes sense that the reservation system has an attribute of the type \"Calendar\", on which it can call the method \"enterAppointment\".\n\nexample inheritance:\nWithin your calendar you can classify your events. Every event has a certain day, time and reminder as an attribute. But there is a differentiation between repeated and unique events. Therefor, it makes sense to have one abstract superclass that contains the joint attributes and two subclasses that use the attributes of the superclass and have additional specifications.\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5586519,
      "meta": {},
      "text": "While delegation catches an operation and sends it to another object where it is already implemented and it reuses the  implemented functionality in an existing object, inheritance on the other hand does subclassing from specification, such as an interface and the specification is an abstract class where all the operations are specified but not yet implemented. The inheritance reuses specified functionality in the superclass.\nTherefore the main difference lies in the structure of the implementation of the methods, attributes and properties. While delegation calls all the 3 from different classes, the inheritance uses them from the superclasses and implements a lot itself.\nAdvantage for inheritance is that it is really easy and straight forward to implement and supported by many programming languages but a disadvantage is that if you change something in the parent class you might be forced to change it in the child class as well even if you do not want that.\nLooking at delegation it is positive that it is generally more flexible but negative is that it might be more inefficient than inheritance, because you need to create an object instance.\nExamples regarding the context of smartphones are following:\nLooking at inheritance a smartphone is the upper class of the operating systems like IOS or Android, so the smartphones is the overall system that can be implemented from the subclasses.\nRegarding the delegation if you are sent a link via a messaging app and you tap it you are delegated to a web browser that connects to the server and opens the link.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5586709,
      "meta": {},
      "text": "Inheritance ist eine Reuse Technik wobei die Funktionaitäten einer Oberklasse in deren Unterklassen wiederverwendet (und oft erweitert) werden. Zum Beispiel, wenn wir eine Oberklasse Smartphone haben, dann hätte diese Unterklassen wobei die Art des Smartphones spezifiziert wird (z.B. Android oder iOS). Die Oberklasse hat hierbei generelle Funktionalitäten welche jedes Smartphone kann (z.B telefonieren). Die Unterklassen greifen diese wieder auf, jedoch können sie auch weitere für den bestimmten Typen spezifische Funktionalitäten anbieten (z.B. kann ein iOS Smartphone face timen).  Inheritance ist zwar leicht zu nutzen und ist super um nach und nach neue Funktionalitäten in den Unterklassen zu implementiern wenn nötig, aber sobald die Oberklasse verändert wird, hat dies (manchmal unerwünschte) Auswirkungen auf die Unterklassen.\n\nDelegation ist eine weitere Reuse Technik bei welcher eine Operation abgefangen und an anderes Objekt weitergeschickt wird, wo diese Operation bereits implementiert wurde und dann ausgefhrt wird. Zum Besipiel, könnte die Funktionalität \"savePhoto()\" an eine Instanz der Klasse \"PhotoGallery\" deligiert werden anstatt diese Funktion in der Oberklasse \"Smartphone\" zu implementiern. Dies ist zwar flexibler als Inheritance, aber ist häufig ineffizienter weil eine neue Instanz des Objektes geschaffen werden muss.\n\nZusammenfassend ist der grobe Unterschied, dass bei Inheritance Funktionalitäten einer Oberklasse in deren Unterklassen wiederverwendet wird, während bei Delegation die Funktionalitäten eines bestehen Objektes in einem anderen Objekt durch Instanzierung des wiederverwendeten Objektes  wiederverwendet wird.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5592970,
      "meta": {},
      "text": "In the concept of inheritance classes have subclasses that can use the superclasses' functionalities. Inheritance is mainly used during requirements elicitation and analysis and during object design. \nIn the concept of delegation functionalities of objects that already exist are being reused by object instantiation and method calls. \nTherefore, the difference between those concepts is that in terms of inheritance the superclasses are well known and provide the childclasses with ALL of their functionalities while in terms of delegation new classes are being instantiated and only the relevant methods are provided. \nDisadvantage of inheritance: when superclasses are changed, subclasses might have to be adapted as well which leads to more coding effort and time consumption. Advantage: Inheritance is easier and less time consuming to implement and to insert new functionalities in subclasses.\nDisadvantage of delegation: its inefficiency due to the creation of object instances. Advantage: Delegation is in general more flexible.\nSmartphone-related example of inheritance: the superclass is the appstore while the subclasses consist of certain groups of apps or individual apps. This is a suitable example as the apps have to have all of the appstore's abilities of being installed, deleted, send messages or can be viewed and searched in the appstore ect. but they also have individual functionalities. \nExample for delegation: several apps instantiate the standby modus of the smartphone and use certain methods of it like playMusic (spotify) or receiveMessage (Whatsapp). This is a suitable example as the apps that are also able to work in standby modus do not need all functions of the system's standby modus, but only certain ones for their functionalities. \n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593853,
      "meta": {},
      "text": "Using inheritance we can build hierarchies where subclasses override, implement and extend the behaviour (or the interface) of superclasses. Delegation works the \"other way around\". One class encapsulates some functionality and other classes instantiate this class to USE the provided funtionality, but they can't mess with/override/extend the internal implementation of the class. Quite the contrary, we can even use delegation to restrict acccess to the operations of a delegate.\n\ninheritance:\npro: a properly structured superclass makes it very simple to implement new functionality in the subclasses  because one just needs to override one or more methods that handle the behaviour one wants to change/extend\ncon: there's high coupling between the sub and superclasses because implementation details of the superclasses leak to the subclasses\n\ndelegation:\npro: very good abstraction of the internal implementation of a class because users can only access the API we deliberately choose to make public\ncon: the objects to delegate to must be instantiated somewhere which can get ugly/complicated really quickly e.g. when many different objects want to share an instance of another object. Therefore other patterns like dependency injection are needed to handle this complexity.\n\nExample: App-System\nInheritance: A messaging app extends the generic App-Class provided by the smartphone OS because it wants to extend/implement the methods the OS will use to e.g render the UI.\nDelegation: A messaging app uses an instance of a NotificationManager provided by the smartphone OS to invoke methods that display Push-Up-Notifications. We use delegation here because we only want to use the notification functionality like a blackbox, but not implement/extend it.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594367,
      "meta": {},
      "text": "Inheritance allows one class to take all properties and functionalities of a parent class.\nDelegation focuses instead on having a delegate class, which we send messages to and which is responsible of dealing with them.\n\nOne advantage of inheritance is that it offers specialisation (a generic parent class offers some functionalities which are then made more precise by its children)\nOne disadvantage of inheritance is that changes to the parent class will need reword on the children classes (changes need more time)\n\nOne advantage of delegation is its run time flexibility (allowing the system to change the delegate class at run time)\nOne disadvantage of delegation is that it doesn't represent the relations that exist in the world, which inheritance can show.\n\nExample of inheritance: a parent class iPhone13, a children class iPhone13Pro.\nThe iPhone has some guidelines on how its UI should look, the apps it offers and its components.\nIn addition to that, iPhone13Pro adds some components, overrides the display component with a newer one and offers some more functionalities, such as the ability to work with ProRes Videos.\n\nExample of delegation: a smartphone uses a provider's network to send data to the cloud. We can imagine a class Smartphone and an interface Provider, which offers some functionalities like sending data, retrieving data...\nAfter booting up, the smartphone connects to Vodafone. But a couple of hours later, Vodafone is down, so the smartphone switches to Lidl, another provider, with the same functionalities.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596106,
      "meta": {},
      "text": "Inheritance and delegation are both types of reusage. With inheritance you obtain every component of another instance whereas with delegation you only use certain functionalities of another instance.\n\nTherefore using delegation is more flexible, since you only use functionalities that you actually need. However delegation is less efficient since you need a running instance of which you want to reuse the functionalities.\n\nImplementing functionalities of a parent instance can make the code more specific for your case, however you also implement every other function of the parent instance which you might not want or shouldn't have access to at all.\n\nFor example having a smartphone with an outdated camera.\nWith inheritance you would buy a new smartphone and transfer all your data to it, so that you have a new camera. But the problem would be, that this phone has an annoying voice assistant preinstalled which you cannot change or remove.\nWith delegation you would buy a new smartphone from which you would take out the camera and put it into your old smartphone. That way you still bought a new phone which costed a fortune and is now unusable since it needs the camera to correctly operate. Also it could happen that the new camera is not compatible with your older smartphone.\nIn this example inheritance would be my preferred choice, because with inheritance I would have a better price performance ratio.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596362,
      "meta": {},
      "text": "Inheritance is used to create class using a superclass which provides the functionalities needed to implement the new class. This superclass can have implementations OR just specification of operations.\nDelegation is used to get a certain functionality of the class by providing an object of the class that we want the functionality.\n\nInheritance: \nAdv: It is easier to use to implement the new functionality.\nDis: Parent class might provide not needed /ORWANTED methods and attributes which might cause unwanted behavior.\nDelegation: \nDis: Inefficient to create object instance\nAdv: Not unnecessary details are visible by the class that is using the functionality of created object.\n\nDifferent icons of apps should inherit from a general class that contains constant variables such as the size and location of the icons. However, cooler and picture and other additions provided to developers can be added on top of it. General ICON -> TO more specific icon implemented by developer.\n\nDelegation can be used in widgets like in IOS to access only certain functionalities like news data /stream of byte or new images. Here the widgets shouldn't inherit all the functionalities provided by NewsData class as a lot of unnecessary details will be provided. \n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596622,
      "meta": {},
      "text": "The difference between inheritance and delegation can be clearly demarcated during object design. \nInheritance is a form of reuse that works by subclassing from an implementation. This means that functionality is specified in the superclass and reused in the subclass. It can also be called white box reuse, as all functionalities can be used without having to specifically instanciate an object to call a method upon. Delegation or blackbox reuse on the other hand works by implementing functionality in an existing object, that has to be instanciated.\nAdvantage of inheritance is that you can avoid a lot of code duplication if a lot of core functionalities from the super class are needed in the subclass.\nAdvantage of delegation is flexibility at run-time, as you can change the delegate at run-time.\n\nInheritance Smartphones: Superclass: Applications, Subclass A: Photography Apps, Subclass B: Finance Apps, Subclass C: Gaming Apps. Choose Inheritance since you can reuse a lot of functionalities from the Superclass (like being clickable from the home-screen etc.) but you can specify unique uses in the subclass (like accessing the phone's camera, connecting to payment options etc.)\n\nDelegation Smartphones: you want to build a chat messenger with internet call functionality. You shouldn't use the built in telephone app as a superclass, since cellular could be used in your chat messenger, which could lead to unwanted rates for your users. You should rather delegate the calling functionality by using an object from an existing class that you can use in your internet call method.",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5583776,
      "meta": {},
      "text": "Inheritance is the concept of creating a subclass that inherits properties from its parent's class, while delegation is the concept of outsourcing functionality from one class into a different class, that does not expand the original class.\n\nThe biggest advantage of inheritance is the avoidance of code duplication, because the code from the parent class can be reused. A disadvantage, however, is that the code can get more difficult to read and more complicated when introducting inheritance.\n\nThe main benefit of delegation is the improvement of maintainability and flexibility of the program's code. By being able to modularly use different classes and their functions independently, changes can be made much more easily. A disadvantage, once again, is that (especially if the code is not documented well) delegation can lead to code that is more difficult to understand, because the developer needs to follow all of the references to the functionality of the other classes.\n\nA good example for inheritance in the context of smartphones would be the main class InternetBrowserApp for all internet browsers and an inheriting class for each individual browserapp (for example Google Chrome, Safari, Firefox, etc.). Functions like connecting to a website can be provided by the InternetBrowserApp class, while individual functions like favoriting websites can be implemented in the subclasses.\n\nAn example for delegation in the context of smarphones, would be using the functionality of the operating system in an app. Implementing a slider in an app that controlls the volume (of the system!) by using the smartphone's api uses the principle of delegation because it utilizes a functionality of a different class.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5585488,
      "meta": {},
      "text": "Inheritance is used to create subclasses after you distinguished a superclass, which is related to the subclasses and are almost the same. The subclass has access to all methods and attributes(via super() in the constructor) of the superclass.\nThe primary advantage of Inheritance is that it's directly supported by most popular object-oriented languages and it facilitates dynamic polymorphism. Delegation doesn't.\n\nHowever Delegation includes to use an object of another class as an instance variable, which is not almost the same as the other class.  It can be viewed as a relationship between objects where one object forwards certain method calls to another object, called its delegate. Attributes are not accessible, just via getter. \nThe main advantage of delegation is run-time flexibility , because the delegate can easily be changed at runtime. \n\nExample: \nThe superclass iPhone has subclasses like iPhone X, iPhone Max, iPhone XS, ...therefore it makes sense to use inheritance to access all attributes and methods via the superclass, because they're all almost the same. \n\nThe class iPhone needs information about the chip storage seize in the constructor. The Classes iPhone and Chip are not similar - therefore a object of chip gets created as an instance variable, to be able to use the informations of the chip like getStorage() in chip in the class iPhone. ",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5586221,
      "meta": {},
      "text": "The difference between inheritance and delegation is that with delegation, the class that the client attempts to use doesn't do the work itself, but instead delegates the operation to the class that will perform the action requested by the user. With inheritance, a class inherits the methods of a superclass and can furthermore add new operations to the already existing operations of the superclass and/or override the superclass methods.\n\nAs often in computer science, there are trade-offs you need to take into account if you want to make a choice on which one to pick. Delegation is generally more flexible, but it may get slower because you need to instantiate objects of different classes, which is an expensive operation. On the other hand, inheritance allows for easy implementation of new functionality in the subclass on top of the already inherited functionality. The drawback is that sometimes, you don't want all the functionality of the superclass to be visible to and usable by the client.\n\nInheritance: Let's take the example of a university app, where a login exists and proposes different features for students and for tutors. Here, it would be a good idea to have inheritance, where both those classes inherit from a superclass Person, which might have the basic information and functionality that both student and tutor share. Then again, a tutor might need other functionality than a student. These differences would be implemented in each subclass (a tutor might be allowed to correct an exam, but not to take one, and vice-versa for the student).\n\nDelegation: For the google search bar in the Chrome app, it would be a good idea to use delegation, because it would be easy to change or add additional elements with delegation. It would be able to use the functionality of a Text Field and a Button class, but you could easily add an Image to it.",
      "score": 75,
      "language": "ENGLISH"
    },
    {
      "id": 5587135,
      "meta": {},
      "text": "Reuse of own Submission SS 21:\nInheritance: \n- functionality of a class is passed on to a subclass in a direct or overridden form. \n- The superclass has a direct influence on the methods of the subclasses. \n-> Disadvantage if you change the methods of the superclass, all subclasses must be adapted, which may not be wanted.   \nAdvantage: Inheritance is common in many languages, and it is easy to understand.\n \nIn the context of smartphones: A company offers a particular model as both a smaller version and a normal-sized one (Apple did this as well). Let's call the Model UniversePhone. One could model the upper-class UniversePhone. The Classes UniverseMini and UniverseClassic inherit from it. Inheritance is characterized by this \"is_a\" connection.  \n\nDelegation: \n- one class does not inherit functionality from another but is merely provided with it via an \"intermediary\". \n- middleman is called a receiver. \n-> Task: catch the method from the class that provides the functionality, pass it on to the class that needs it\nAdvantage: high flexibility at runtime because the participating objects can still be exchanged during the runtime.  \nDisadvantage:  Delegation is not supported by all programming languages and all the objects are encapsulated. \n\nIn the context of smartphones: A user wants to deactivate an app (via the Settings class). The app is deactivated, but the user cannot do this directly in the app implementation. Instead, a method is called in the Settings class, which calls the method in the App class, thus delegating the functionality.  ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5588583,
      "meta": {},
      "text": "By inheritance the wanted class is a subclass of an already existing one and has the same (public) methods as the parent class. By delegation the wanted class calls a method from the existing class by creating an instance of the already existing class and calling the needed method - the new class is not a subclass of the already existing one.\n\nThe advantage of inheritance is that new functionalities are very easy to implement in the subclass, but the inheritance can lead to some unwanted behavior by exposure of the methods in the parent class. The advantage by delegation is that it's more flexible than inheritance, but is the performance can be lower, because an instance of an object is being created. \n\nAn example of inheritance in the context of smartphones can be the icons of the apps, for example - the YouTube icon inherits from a basic class of an icon. We can see delegation in the following example - we have the music player of the phone; when the user pushes the start button the player delegates the action to for example Spotify, which actually plays the music. \n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5591793,
      "meta": {},
      "text": "Inheritance creates a subclass with the same functionality . The subclass can contain new methods.\nDelegation reuses the excact same methods and attributes in the subclass from the parentclass. Everything already exists. \n\nDelegation is more flexible than inheritance, an object can easily be changed while the system is running. The disadvantage that comes with that is that the systems are mostly not that efficient. \n\nInheritance is straight and easy to use and also makes it easy to implement new functionality to the created subclasses. \nDisadvantages are that changes in the parentclass also forces the new created subclass to change aswell, also methods of the parentclass are exposed.\n\nExample for inheritance:\nMultiple cars from the same company but different models (BMW 3er, 5er, etc.). Every one of these have same attributes and functionalities because they are from the same brand and they are cars, but one maybe has more horsepower, the other one has different lights, etc.\n\nExample for Delegation:\nJust sends an operation to another object where its already implemented. Website with search bar just redirects you to google search results if you want to search something.",
      "score": 75,
      "language": "ENGLISH"
    },
    {
      "id": 5594914,
      "meta": {},
      "text": "inheritance:\n\tIn the inheritance there is a child and a parent class. The child class reuses a functionality that is already provided in the parents class.  The child uses all methods of the super class.\n\ndelegation:\n\tHere you use an object of another class that already exists as variable. You don't need to use all methods of the super class here. This makes it more flexible than a inheritance.\n\nThe advantage of a delegation is, that you don't need to change every subclass once you change the super class. \n\nExample for inheritance: \n\tThe inheritance can be used for example for specific features, which stay more or less the same. For example the parent class is camera and each implementation will always need to have certain methods like takePicture(), takeVideo(), storePicture() etc. If those are always needed and don't change often an inheritance makes sense. \n\nExample for delegation:\n\tDelegation may be used to model the smartphone itself and the features it provides. For example old phones weren't able to take pictures. If you were to use an inheritance here instead of delegation every type of smartphone would have to implement the method to take pictures. This would be a lot of work to model for every smartphone and old ones wouldn't be able to take the pictures. The delegation is better here, because it is more flexible  which considering the rapid development of smartphones is a huge benefit.",
      "score": 50,
      "language": "ENGLISH"
    },
    {
      "id": 5595439,
      "meta": {},
      "text": "Inheritance happens when one creates a class and takes on properties of another pre-existing Class. The Class that takes on the properties(attributes and methods) is called child and the other parent.\nFurthermore, the child class can extend its functionality by either overriding inherited methods or creating new ones.\n\nDelegation happens by just passing an operation to another object. It can be used as another method of inheritance since it can use an object of another class as an instance. There is no implementation or any of that sort. It only calls other Classes and makes it return a behavior.\nThey can be similar but are essentially different approaches.\n\nDelegation is more flexible than inheritance because it can change during run-time. But it is also a bit more inefficient as it needs to create an object instance.\nInheritance is easier to use and is supported by many programming languages. But it can also expose unwanted methods of the parent Class since the child inherits its properties. \n\nI would use inheritance for the implementation of widgets. For example, in IOS, there are widgets for weather, maps, calendar, and a lot more based on installed apps. The parent class would be widgets with a basic structure of a container. They can be inherited by a weather widget which can override the container to show data with an API.\n\nI would use delegation for the implementation of app functionality with no need for overriding. I could use it to implement play music outside of the app. The functionality is usually provided inside the taskbar. \nUsing delegation here is more flexible than the usage of inheritance with parent-child relationships where changes in parent also affect the child. Here, I can delegate the task to another function in another class (like MusicPlayer) and get the immediate effect.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595697,
      "meta": {},
      "text": "Inheritance:\nInheritance's focus is to enhance extensibility and reduce redundancy. You reduce the risk of introducing inconsistencies during changes, by factoring all redundant behavior into a superclass since you then only have to make changes in one class instead of in all subclasses independently. Also, inheritance can be accomplished by using abstract classes or interfaces and only specifying the functionality in these. You then have to implement the specialized behavior directly in the subclasses.\nA huge advantage of inheritance is that it is supported by many modern programming languages (f.e. Java). On the other hand, often data members in the base class are left unused which may result in memory wastage. \nApp Alerts would be an example for inheritance in context of smartphones, because the feature are mostly implemented as interfaces which app devs can use in der applications. \nDelegation:\nIs an alternative to the inheritance that should be considered when you want to reuse. With delegation, you create explicit dependencies between a reused classed and a new class. A class is delegated to another class if it implements a function by resending a message to another class. A significant advantage of delegation is that it doesn't interfere with existing components. But in opposite to inheritance, it isn't supported by most popular OOP languages. \nThe time features of a smartphone are an example of delegation because if application needs the current time f.e it will request it f.e. of the given timescheduler.\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596008,
      "meta": {},
      "text": "Inheritance vs. Delegation\n\nInheritance is basically extending the class an so getting access to all methods an objects in the super class. In delegation, we create an instance of the class we want, and so by using that object, we get access to all the class methods and functions.\n\n- Inheritance :\n\nadvantage : Inheritance is easier to implement, as you only need to \"extend\" the class to get everything. No extra space needs to be allocated unlike delegation.\n\ndisadvantage : If changes happen in the super class, the subclass will have to face these changes as well. This might create errors and unwanted problems.\n\n- Delegation\n\nadvantage : A lot more flexible, because it won't be affected by any changes in the super class. Nothing else needs to be modified in the class, because we only have an instance of the class.\n\ndisadvantage : Because we need to create a new object instance, this could result in more inneficiency, as more space and memory need to be allocated to the new object. Inheritance doesn't have this problem.\n\n- Examples :\n\n1. In the context of smartphones, a company could have a specific type of phone, but different models. For example, the color might differ. In this case, inheritance would be better. You only need to change the color, so you can inherite everything from the superclass.\n\n2. In an other case, the phone brand company might want to use a new type of software and integrate it to a different phone. This might be better done with delegation, as we only use the functionalitites of the new software wihtout changing the whole structure of the system.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596132,
      "meta": {},
      "text": "Inheritance: Bei der Vererbung wird die Funktionalität einer Klasse in eine unterklasse übernommen oder die Methoden einer abstrakten Oberklasse in der Subklasse implementiert.\n-Vorteil: einfache Umsetzbarkeit bei Modellierung , kann leicht durch anderen unterklassen erweitert werden\n-Nachteil: hoher aufwand bei veränderung der Oberklassen, da die Unterklassen dadurch ebenfalls angepasst werden müssen\n\nDelegation: Bei der Delegation werden bestimmte Zuständigkeiten im Rahmen eines Vorgangs übertragen.\n -Vorteil: Flexibilität bei Modellierung , bestimmte Objekte leicht ersetzbar\n-Nachteil: Verschachtelter Aufbau und ineffizient, schlechte übersicht\n\nKonkretes bsp für eine Delegation wäre, wenn man jmd in einem Smartphone auf einer bestimmten Social Media App eine Nachricht liken möchte und\ndie Zuständigkeit vom Eintippen auf dem Display bis hin zu der spezifischen Like-Funktion übergibt. Dabei werden Klassen, die in diesem Beispiel keine Rolle spielen , unberührt. \nDa man Bedenken muss, dass hier nicht alle betroffene Klassen von einander vererben müssen, ist eine Vererbung in diesem Fall nicht wirklich sinnvoll.\n\nBei der Vererbung hat Smartphone als Oberklasse zb SamsungSmartPhones und AppleSmartPhones als Unterklassen die jeweils verschiedene Eigenschaften haben.  Hier ist es sinnvoll auf Vererbung zurückzugreifen, da die einzelnen Smartphone unterklassen die gleichen Attribute vorweisen (zb. Preis, Erscheinungsjahr, Bildschirmgröße etc) , als auch die gleichen Methoden (zb telefonieren(), chatten(), spielen () etc..). Wenn eine neue Handymarke auf dem Markt kommt dann kann man mittels eine weiteren Unterklasse dieses Modell einfach erweitern (zb. GoogleSmartPhone).",
      "score": 91.7,
      "language": "GERMAN"
    },
    {
      "id": 5596153,
      "meta": {},
      "text": "While inheritance is used if we need a new class that is almost equal to an already implemented class, we use Delegation if we need functions for a class that another existing class already implemented. This is because Inheritance reuses a class by inheriting all the methods and attributes, while Delegation reuses the functionality of another class by having an instance of the class and calling methods on it. \n\nA problem with inheritance is, that you might inherit methods that you don't actually need. The advantage of inheritance is, that you can save implementing all the methods if the subclass is very similar to the superclass, for instance, List -> ArrayList\n\nA problem with Delegation is that for it to work, you need an instantiated object that makes use of the class you redirect your problems to. An advantage of Delegation is, that you can apply it easily to more than one other class. While inheriting from more than one class is pretty hard, we can use Delagation to have multiple objects that we can redirect the problems to.\n\nAn example for smartphone Inheritance would be the new generation of a phone. If a new phone gets released, most of the functions are exactly like they were in the last phone. Only a few things are changed or new functions get added -> Specialization. As a specific example the new IPhones have used the same calculator app for years. Delegation would be an app, that is available for any phone to use like the YouTube App, that pretty much every smartphone has integrated.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596644,
      "meta": {},
      "text": "With inheritance, we have a parent(super) class and some sub-classes(Childs), the sub-classes inherit all classes from the super class. An advantage of the inheritance is that it is easy to implement new features in the subclasses and it is supported by many programming languages. A disadvantage would be that inheritance exposes all classes from its super class, some maybe unwanted.\n\nDelegation would be if we create a separate object for that purpose. Delegation is overall more flexible than the inheritance, but it is more inefficient as we have to create more objects.",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5586760,
      "meta": {},
      "text": "Inheritance reuses a class by subclassing.\nSo when the internal representation of that superclass changes it always effects the subclass, which is a downside of inheritance.\nDelegation is more flexible in that point because it can offer certain functionality by communication with the interface of the delegated class. So internal changes of this class doesn't effect the Delegation class.\nBut this \"sending of messages\" of course comes with the downside, that everytime a functionality is used one additional method has to be called in order to execute the operation on the delegated class.\nEasier with inheritance is the implementation of new functionality because it does not have to be mapped somehow to the provided interface, but can be implemented directly on the inner representation of the Superclass.\n\nWe could define an abstract class which implements the most basic form of a smartphone: a processor, memory, storage, a display with touchscreen and two buttons, one for power and the other for changing volume.\nIf we would want to implement a smartphone which has a fingerprint reader this would better be made by subclassing because it needs a secure communication with the smartphone, so just internally, without exposing any information to the outside.\nA good example for delegation would be a simple smartphone camera. Nowadays smartphones have at least 2 cameras so a Mulitcamera could delegate calls to a specific camera which can be chosen by the user. By subclassing the implementation of one camera would need to be \"copied\" inside the Multicamera which wouldn't be practical.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5587385,
      "meta": {},
      "text": "The Difference between Inheritance and Delegation is that for inheritance one is extending a so called base class by new or overriden functionality this can be done either by Implementation or Specification Inheritance (Subclassing from an implementation vs. from a specification) whereas for Delegating one outsources an operation to another class meaning one catches it end sends it to another object. \nInheritance is easy to use and can be done in many programming languages but it can expose unwanted methods from the parent class. \nDelegation is flexible but can be more inefficient since one always has to create an object instance to us its functionality.\n\nAn example for the use of delegation in the context of smartphones would be scrolling through your contacts and calling one. There the functionality of the calling it self is delegated and not done by one contact list.\nAn example for inheritance in the same context is that a smartphone is a specialisation of a normal phone.\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5588877,
      "meta": {},
      "text": "Inheritance reuses a (specified or implemented) functionality. It refers to when a superclass is expanded by a subclass that adds new operations or overrides existing ones, whereas delegation refers to when an action is captured and transferred to another existing object. Delegation is very flexible but inefficient, whereas inheritance is simple to use, supported by many programming languages, and can be expanded with new functionality. However, the main disadvantages of inheritance is that it exposes the parent class's public methods, and if the parent class is changed, the subclass must be changed as well.\n\nExample in the context of smartphones:\nFor Inheritance:\nThe smartphone is a subclass of the class mobilephone. Therefore it is an inheritance. A smartphone has the same functionalities as the mobilephone but adds new functionalities and operations to it like e.g. internet usage and usage of apps.\n\nFor delegation:\nFor example, a delegation is when a method from the \"Camera\" class is called. For example, \"Camera.takeSnapshot()\". This delegates the method call to the Camera class and the camera has the bundled functionality.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5588960,
      "meta": {},
      "text": "When using Inheritance the developer doesn't need to create an object, but can just use all protected and public attributes and methods of the superclass. When using Delegation first an object of the class has to be created. Then they can use the public methods and attributes of the class through the object. \n\nThe big advantage of delegation is its flexibility and the possibility to hide everything of the class. It is much easier to change the class, without disturbing developers who delegate from it. A disadvantage would be the inefficiency, because always an object has to be created. \n\nOn the other side inheritance is more efficient and also easier to use, because the programmer can just start using the accessible methods of the superclass. So it is very easy to implement new functionality for the subclass. A disadvantage would be the limitation of Inheritance. In many programming languages one can only inherit from one superclass and even in languages where it is possible to use multi inheritance usually it is not advised, because of ambiguously. \n\nAs an example I take a smartphone to-do app. One area to use Delegation would be the elements of a list. We have a list and to access the elements in any way we have to create an element, then it makes sense to use delegation for the elements.\n\nFor the notes in the app we have two kinds of lists, a bullet list and a numbered list. For these it makes sense to have a superclass list and inherit that class in the subclasses bullet list and numbered list. Here Delegation doesn't make sense. \n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5591439,
      "meta": {},
      "text": "When using inheritance your class is a subclass of an existing implementation. This has the advantage that you can use your implementation for an existing API, because the new class has  an is-a relationship, what is very useful for database storage. \nBut with Inheritance many programming languages like Java limit the developer to extend only one class, while with delegation you can use as many as you want. \n\nWhen using delegation, an object inside your class that already has the functionality you need is created. To use it you simply have to call the method or functionality on your delegated receiver without caring or knowing how it works. This has the advantage that in opposite to inheritance only the used functionality is visible from outside so that there is no unwanted access or functionality and allowing the functionality of final classes. But you have to consider used delegated objects cause extra work-and storage-load for creation. \n\nFor example when designing the HomeScreen of a Smartphone, for storage and simplicity reasons all Apps should be inherited instances of „GeneralApp“, for accessing them by generalized instructions (e.G. „open“ or „close“) by the user. So for example, the „Settings-App“ should be extending a general App by Inheritance that contains the basic functionality for all apps. \nOn the other hand, when using external services in your apps it might be better to use Delegation for their functionality. If you want to include external reviews (from TripAdvisor) in your Maps implementation you for example only want specific functions to be usable like restaurant pictures or ratings, but not your app being an extension of TripAdvisor. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596465,
      "meta": {},
      "text": "By inheritance, a subclass inherits all of the variables and all of the methods in the superclass and extend it by new operations or override the existing ones\n\n advantage of inheritance: Straight forward to use\nSince the superclass is already designed, its easier to design the subclass based on the already existing superclass. in addition superclass gives the subclass many already defined methods that the subclass can expand upon.\n\ndisadvantage of inheritance: by inheritance the subclass inherit all methods of the superclass and all these methods might not be used.\n\nAn example of inheritance in context of smartphone would be how iPhone 12 inherit the cellular network abilities of iPhone 11 and expands upon it. iPhone 11 only support 4g while iPhone 12 support both 4g and 5g. In this was the face that 4g is being inherited from superclass is positive since some people might not have access to 5g.\n\n\nIn delegation the class uses  object of another class as an instance variable and delegates some functionality to this variable.\n\n advantage of  delegation: more flexible and only methods are introduced that are necessary\nthe delegate can easily be changed at run-time\n\nAn example of delegation in context of smartphone would be how common delegation pattern is in swift.\nfor example the UIApplicaitonDelegate in iOS system  modifies the behavior of iOS, like receiving a push notification, opening a URL. So this functionality are delegated instead of being supported by iOS directly which makes modification easier. ",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5585232,
      "meta": {},
      "text": "Inheritance means that a new subclass is created and this new subclass can use methods and attributres of the superclass and can offers new functionalities. Delegation on the other hand means that you use an object of another class as a variable and forward messages to the instance. \n\nInheritance\nAdvantage: we can minimize code duplicates as for almost same classes we can introduce a superclass and write the similar code of both classes in that superclass\nDisadavantage: no indepencie, because super und inherited class are tight together, can not be used independently\n\nDelegation\nAdvantage: run time flexibility, the delegate can easily be changed at run-time\nDisadavantage: less efficient as an object has to be created for the forwarding\n\nExample:\nInheritance\nSimilar to the voice assistant in E02 there could exist an AI with image recognition. So there is an implemented recognition AI which in general recognizes things. Then you implement subclasses for different objects to be recognized e.g. plants, documents, animals etc\nDelegation\nDelegation could be used when different apps want to use the volume buttons. An volume button class exists. And every application that needs a volume adjustment, implements the volume button object",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585393,
      "meta": {},
      "text": "Delegation is getting a certain functionality, form another class, in the current class by calling the methode in the other class. This is quite easy and quick, becaues it requires just an instance of the other class. A drawback is that the functionality of the function can´t be changed, for that the delegated classes implementation has to be changed. Additionally if there are many methodes in the same class, that is used, it is a lot of work, because every methode call has to be implemented independendly. In this case Inheritance is a useful tool. Inheritance is the taking over of all methods and attributes of the other class, here called parent class. The methods of the parent class can either be used or altered. An disadvantage is that only one Superclass is allowed to exist. Other Methods have to be implemented manually, by delegation or from an Interface be inherited. Also by inheritance all attributes and methods are inherited. This may be useless code. But this can be an big advantage if some of these attributes have to be changed in this class, beacause delegation can´t do this.\n\nThe example smartphone is an great example. It is an combination of an computer and an mobile phone. It has all the characteristics of an mobilephone, similar size, telephone number, etc and can use all the functionalities of a mobile phone. On the other hand it can use the internet like an computer. So a smartphone inherits from an mobilephone, because of its many similar attributes and functionalities. Additionally it can acts like a computer, which suggests that it uses the same functionalities of computers. So it just uses the functions of an computer via delegation.\n\n ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5590082,
      "meta": {},
      "text": "Inheritance is the concept to reuse components from a superclass, which e.g. already provides a specific implementation that can be used for the new subclass. An advantage of inheritance is that methods can easily be reused or overwritten, which therefore reduces complexity in the object structure of the project. A disadvantage is that unnecessary of even unwanted operations might be inherited, which therefore could increase complexity\n\nAn example in the context of smartphones is that a smartphone is a subclass of the superclass \"Computer\". A lot of concepts of computers (e.g. RAM, Memory Management) could directly be used when developing a smartphone. In this case the inheritance is the proper design decision as the smartphone *is a* computer and therefore implements all the methods already provided by a computer.\n\nDelegation is the concept to delegate certain functionalities of an object to another object which already implemented this functionality. This also has the advantages that you can delegate different functionalities to different other objects and not just to the super class. Therefore, delegation is more flexibel. On the other hand, a disadvantage is that the delegation to multiple other classes causes more dependencies, thereby increasing the project complexity.\n\nAn example in the context of smartphones is that a smartphone delegates certain functionalities to different hardware parts. E.g. a smartphone might delegate the task of storing large amounts of data to a cloud storage that the smartphone is connected with. This is a delegation task as a specific functionality (storing large amounts of data) is outsourced to another component (cloud storage)",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5591085,
      "meta": {},
      "text": "Definition wise, the difference between delegation and inheritance is that delegation is passing an operation from one object to another, where it's already implemented.  However, inheritance is the adaptation of every single attribute, method and characteristic of another class, which is the parent. \nInheritance is limited to just the parent class, so you have to pay attention to the direct relationship between the two classes, however, delegation is unlimited, since it can invoke functions from not only one but many other classes that are implemented independently. \nA disadvantage of inheritance is that the parent and the child are directly related to each other, so any changes in the parent class, the child classes have to accept.\nAn advantage would be that it is straight forward to use, considering the classes are tightly coupled. \nInheritance comes in handy in smartphones, since every phone has a date of release, brand, name etc, so smartphones could be in a parent class and derived types like iPhone, Samsung are child classes.\nA disadvantage of delegation is that it might be inefficient, you have to implement a new instance everytime you use a different class. \nAn advantage would be that it doesn’t force your code to adapt to all the methods and attributes of the supper class.  You choose the methods that are useful for you and call them on the instance in your class. \nDelegation can be used in the way that in the class smartphone, you can implement all functionalities of different phones, and then pick which method you need in your other class depending on the phone. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5592106,
      "meta": {},
      "text": "Inheritance works on a class level, whereas delegation works on an object level. With inheritance, the subclass \"inherits\" all data and behaviour of its superclass, and therefore all objects of that subclass are the same.\nWith delegation, different objects of the same class can have different behaviour, dependent on the delegation object their are assigned. \n\nIf you want all objects of that class to behave in the same way, but on different data, use inheritance.\nIf you want objects of that class to behave in a different way, use delegation.\n\nAn example for delegation could be different buttons on a smartphone. They might have similar data (all need size, position...), but their behaviour can be very different (home button vs back button...)\n\nAn example for inheritance could be the different settings menues. They all inherit from a base view (with a title, back button...), but then build their page dependent on what settings they show.",
      "score": 33.3,
      "language": "ENGLISH"
    },
    {
      "id": 5593027,
      "meta": {},
      "text": "When you use inheritance you have parent and child classes, the child classes implement the methods of the parent classes and might alter them (overright). Delegation on the other hand doesn't use parent and child classes, but instead uses methods of other classes to do their own method operations. So for example instead of creating a parent class \"animal\"  which has a Method \"breath\" and a child class \"dog\" that inherits from \"animal\" \n to get the \"breath\" method, you could use an already existing class \"human\" which has a method called \"breathe\" to implement the dogs \"breathe\" method.\n\nSmartphone examples:\nDelegation:\nIf you want to develop a flashlight app, you could use the already existing functionality of your camera to create a flashlight and delegate the duty to it. So you implement an app that just tells the system to do the camera flash, but for a constant time until the app says to shut it down again. I would use delegation in this example because it would be a lot easier to just use the code that already exists than to code everything again.\n\nInheritance:\nA smartphone allows you to use multiple browsers on your one device. As a creator of the software you could say that all the other not standard browsers have to be a child class of the original browser so that you can ensure that every browser has at least the same basic functionalities. I would use inheritance in this case because it is an easy way to ensure that the basic stuff is implemented by every browser.\n",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5593127,
      "meta": {},
      "text": "Delegation refers to creating a class that has an instantiated attribute of the type of the target object. All existing functions can simply be passed on that attribute. When inheriting, the implemented class extends the target class, therefore all available methods of the object are by default accessible through the new object.\n\nAn advantage of delegation is the easiness to adapt and abstract. Required method calls can be passed on to the object. New functions can be implemented onto the instantiated object and unwanted methods are simply not made available.\nA disadvantage is the efficiency, as for every delegate, the target object also has to be instantiated. Furthermore, method calls must pass through the delegate first.\n\nInheriting is advantegeous when implementing a class requiring additional features. By extending the parent, all functions are by-default accessible to the created subclass and additional functions can be implemented. \nThis is a disadvantage when not all functionality is allowed on this object, as methods can only be added but not removed or abstracted.\n\nThere are smartphones apps that use the camera, directly through the app (Whatsapp). However, not all of the camera features are wanted. Delegation gives access to the core camera functionalities, such as lens access and picture creation, but I dont want all features such as lens types&formats.\n\nAn example of inheritance are notifications in iOS. Basic functionalities are provided by a parent class. Different notification types (loud, small, urgent) are subclasses of the parent. Inheritance here makes all the necassary methods available, such as the pop-up and lighting up on the display. However, I need to extend that functionality to specifiy notifications.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593793,
      "meta": {},
      "text": "With inheritance you are simply creating a new class by subclassing an already existing related parent class, therefore being able to reuse all of the superclasses functionality, while still having the possibility to add and offer new one. \nDelegation on the other hand totally refrains from using any hierarchical relationship between the objects and simply sends the operation to another object where it is already implemented.\n\nInheritance\nCon:\nSince with inheritance the subclass is given the full functionality of the parent class, this kind of implementation might lead to some unwanted behavior in the child class. When implementing a stack or a queue like structure, simply inheriting from List will lead to multiple unwanted methods, like add or remove, existing in the List class also being available in our structure.\nPro:\nOn the other hand does being able to reuse most of the existing funtionality of a superclass help with reducing a lot of code duplications and ultimately makes for a better and more comprehensive programm structure.\n\nDeligation\nCon:\nOne disadvantage of deligation is that it, different to inheritance, is used on a object level. Therefore a new instance of the to be delegated class has to first be created to then call the method, which is generally speaking rather expensive when looking from a performance standpoint.\nPro:\nOn the other hand not being bound by the implementation of an existing superclass leads to a higher degree of flexibility at run time when using delegation.\n\nA typical example for inheritance in the context of smartphones would be the application class. Since all applications posses a name, a size, a creator and many more attributes that are the same, new apllication should all inherit from one parent app class to reduce code redundancies and provide them with needed functionality easily.\n\nA typical example for deligation in the context of smartphones would be if an app like instagram wants to be able to take a picture. Only part of the cameras functionality is needed or wanted here, as we dont need to take panorama or slow-mo shots and dont want to give it access to the gallery by default. Therefore instagram delegating taking a picture to the camera itself helps increase flexibility as well as data protection.\n\n\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594383,
      "meta": {},
      "text": "The Inheritance allows to create subclasses with needed functionality and to add more methods to suit the problem solution better. We don't have to create a new object but can create new methods instead. On the other hand, the subclasses depend on the superclasses, and the change in the superclass will affect ALL the subclasses at the same time, which can be uncomfortable. Also, some of the subclasses can be able to use methods, which should not be used, but were inherited from the super class.\nThe delegation needs other objects and allows to use of their methods. It cab handle changes in the structure well, but needs more resources to create and initialize used objects.\n\nSmartphones can be used as an example for inheritance. Most new models are the improved versions of the old ones. The same functionality + something new. \n\nThe smartphone system can be used as an example of delegation. Then the new app is installed, the smartphone uses it for certain functionality. With browser app it can access the web. But the app and the smartphone system exist on their own and are different objects.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5594647,
      "meta": {},
      "text": "Inheritance and delegation are both reuse techniques in software engineering. Inheritance uses the IS-A relationship for reuse : reusing implemented ( implementation inheritance) or specified but not yet implemented (specification inheritance) functionality from a super class by creating a sub class. The sub class can override operations of the parent class as well as offer new functionality. Inheritance is straightforward and easy to implement in code since it is supported by many programming languages but if changes occur to the super class( changing its signature for example) all the sub classes have to be recompiled and changed.\n\nDelegation is an alternative to inheritance for reusing functionality across multiple classes. Delegation uses the Has-A reference relationship : it reuses functionality of already existing objects by simply delegating /passing messages and method calls to object instances in the class. In the delegation model a client calls a receiver which delegates the request to a delegate object that executes the request. Delegation is more flexible to use ( runtime flexibility : the delegate can easily be changed at runtime) but it comes with a cost since an object instance has to be created to be able to call methods on it.\n\nAn example for inheritance would be to have a class Iphone extends a super class Smartphone since it reuses th methods in the parent class ( for example playMusic() / takePhoto() ..) but also offers new functionality ( playSiri()/ useApplePay()..) , an example for delegation would be a class SmartPhone which delegates a method takePhoto() call to an object instance of the class Camera since it is an already existing method in Camera and we only need to pass the duty to it.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594989,
      "meta": {},
      "text": "With inheritance, a new class is created through subclassing and it reuses the functionality of the superclass and it may add some new functionalities. An advantage is, that inheritance in generally straight forward, so easy to add new functionalities in subclasses and supported by many programming languages. The disadvantage is changes in the parent class also makes the subclass change.\nAn example would be having phone as a superclass and smartphone as a subclass. The inheritance becomes visible as phone has functionalities that are inherited to smartphone such as for example the functionality to make a call but smartphone still can have new functionalities such as the camera to take photos.\n\nDelegation is reusing functionalities from existing objects so instantiates objects and uses method calls. It takes an operation and transfers it to another object. It uses a client that calls the receiver that then sends a request of delegation which is then executed by the delegate. An advantage is that it is very flexible, however the disadvantage is that it is less efficient as object instance needs to be generated. \nAn example could be that a client calls the Apple iPhone that sends request to take an implemented functionality/operation such as tracking steps which is then delegated to another object for example the object Huawei phone where the method trackSteps() is then called.\n\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595622,
      "meta": {},
      "text": "Inheritance vs. delegation \n\nInheritance is the process where a class takes the properties of another (parent) class, delegation on the other hand is simply passing duties to another entity and can be an alternative of inheritance (e.g. reusing code among a variety of classes).\n-> Delegation is a behavior, inheritance is a well known model technique.\n\nOne advantage of Inheritance is that it is supported by all big object-oriented languages (it's conventional), a disadvantage is that inheritance is limited to a single parent class and it's less dynamic (restricted to compile time). One advantage of delegation is the run-time-flexibility and it affects only a subset of entities and even though it is \"less elegant\", it's straightforward and you can bring in functionality from multiple classes, but one disadvantage is that it delegation can't be type-checked without generics and it isn't supported by all languages. \n\nExample Inheritance: On the bigger scheme of all kinds of technologies, smartphones (as well as laptops, tablets, computers, etc...) have a few things in common (e.g. \"can be turned on/ off\", etc.) and therefore they all inherit from a subclass \"technological device\".\n\nExample Delegation: But smartphones don't have the same physical capacity as a stationed computer and therefore can't process as fast and big chunks of data, therefore delegates some functionalities to a connected computer, like storage.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595802,
      "meta": {},
      "text": "Inheritance: \nSubclass extends superclass and inherits all methods and attributes in superclass. We can override methods of superclass in subclass and implement new methods. \n\nAdvantages are that, for some funtionalities, instead of implementing new methods, we can spare time by simply using the ones in superclass.\n\nDisadvantages: not all methods in superclass, which we extend, are useful. Some of them may be redundancy.\n\nExample: Class Smartphone as superclass, Class Samsung, Xiaomi and so on as subclasses. Smartphone and other subclasses have some attributes in common, like operating system. Smartphone has some methods that can be used or overriden in subclasses such as installApp(), updateSystem().\n\nDelegation: \n(Differences)Instead of exteding superclass A, we make object instantiation of the class we want to use in our class B. We can create attribute of A in B or instantiate directly. Then we can call A's methods in B using instantiation of A as delegate.\n\nAdvantages: Instantiatioin of object is replacable at runtime, which offers high fexibility. And delegation in my opinion also makes the code more understandable, because the code seems simpler than overriding methods. \n\nDisadvantages: High costs because of object encapsulation.\n\nExample: \nSay, we have 2 classes iPhone and Smartphone. We don't use inheritance because many methods are just incompatible between iPhones and android phones, like openAppstore()/openPlaystore(), updateSystem() and we don't want methods redundancy. But many of the methods are still well usable, because phones have features in common, like call(), powerOn() and so on. So we can instantiate Smartphone in iPhone as delegate to implement correspoding methods by calling the ones in Smartphone.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596397,
      "meta": {},
      "text": "Bei Inheritance werden von einer anderen Klasse alle Attribute sowie Methoden übernommen und müssen implementiert werden, wohingegen bei Delegation lediglich die benötigten Methoden weitergegeben werde, um dann implementiert zu werden. Dies ist gleichzeitig auch ein Vorteil von Delegation, da man nicht gezwungenermaßen dann alles implementieren muss. Der Nachteil von Delegation dagegen ist, dass es etwas umständlicher zu programmieren ist, da Inheritance direkt in Java existiert.\n\nBeim Smartphone wäre ein Beispiel für die Vererbung, dass ein Smartphone die Eigenschaften von einem generellen Smartphone erbt (z. B. Sim Kartenslot). Hierbei wird Vererbung gewählt, weil die Eigenschaften an sich die gleichen bleiben und somit wiederverwendet werden können.\nBei Delegation könnte man einen Adapter für Aufladen (z. B. USB C auf Micro-USB) nehmen. Dieser kann z. B. dafür dienen, das Handy mit unterschiedlichen Ladekabel aufzuladen.",
      "score": 66.7,
      "language": "GERMAN"
    },
    {
      "id": 5596535,
      "meta": {},
      "text": "One class takes the property of another class by the process called inheritance (child class takes over the attributes and behaviour of the pre-existing class, which is referred to as super or parent class).  One of the key benefits of using inheritance is to minimize code duplication and it is also very convenient to be able to add new functionalities to the existing ones. Also, it is very straightforward to use and supported by many programming languages. However, one big disadvantage is that the inherited operations may exhibit some unwanted behaviour. It can also be difficult to adopt some new changes as they affect not only the parent class, but also the subclasses. For example, we can have a super class called \"Smartphone\" which provides some functionality like send and receive calls. Then, we have some child classes like AndroidSmartphone or IOSSmartphone, that add some new functionalities (IOSSmartphones add the airdrop function etc.)\n\n\nDelegation, on the other hand, is simply passing a duty off to something else by catching the operation and sending it to another object where it is already implemented. While generally very flexible, delegation can be more inefficient, because an object instance needs to be created. Delegation deals with actors that are usually made of other actors of a different nature. An example is that the smartphone itself has a storage (memory) and delegates some tasks to it in various scenarios. \n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585128,
      "meta": {},
      "text": "In inheritance, a subclass is formed from an already implemented class. The new subclass thus takes over the attributes and behavior of the already existing classes.\nAn advantage is that it is easy to implement new functionalities in the subclass. It is also supported by many programming languages.\nA disadvantage is that the inherited operations can show undesirable behavior.\nIn the context of smartphones, I would choose this concept when I feel that the new class is a natural extension of the existing class. For example, an update to a particular function. \n\nDelegation is an alternative to inheritance for reusing code between multiple classes.\nDelegation means that an object of another class is used as an instance variable and messages are passed to the instance. Therefore, object instantiation and method calls are used. \nOne advantage is that it is generally more flexible. Another advantage is that, compared to inheritance, delegation uses only methods that are really useful for the code.\nA disadvantage is that it might be inefficient because an object instance has to be created. \nIn the context of the smartphone, I would choose this concept if a new class is to be created that is different from other classes, such as a specific function. ",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5587160,
      "meta": {},
      "text": "Inheritance:  one class takes the property of another Class. The child class takes over the attributes and behavior of the parent class. \n- advantages: \n    * Easy to implement.\n    *reusability: When a class inherit from another class, it can access all the functionality of the parent class.\n    * cost reduction and efficient use of resources, as the child class uses resources that already implemented.\n    * reduce code redundancy\n-disadvantages: \n     *the subclass becomes dependent on the parent class implementation.\n     * the misuse of inheritance may lead to unwanted results and may give the user more access to the class, \n       which may affect the functionality of the class. \n-Example: The basic phones that we used 20 years ago is now upgraded to smartphones. So we can consider the smartphone as a child class of the parent class \"basic phone\". The smartphone contains all the features of the basic phone and has new features.\n    \nDelegation: using an object of another class as an instance variable. Delegation reuses implemented functionality in an existing object.\n- advantages: \n      * more flexible\n      * the delegate can easily be changed at run-time\n-disadvantages: \n      * delegation stops being beneficial if you delegate actions to only one class and all of its public methods.\n-for Example: Microsoft offers a service called delegate. You can pick someone in Teams to be your delegate—to receive and make calls on your behalf. ",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5587986,
      "meta": {},
      "text": "Inheritance: A subclass from a superclass is created. This subclass can use the implementations oft he superclass or can override the method and build a new functionality. However, the subclass can implement a functionality that is not wanted (the real functionality can be „manipulated“). Advantage: No further object is created, so it can be executed faster.\nAt smartphones, this can be used for receive a message. The message can be an image, a text message a video message or a voice message. In the superclass implements the receiving of the message and the subclasses (text,voice, video, image) can use this method and specify any additional requirements if necessary.\n\n\nDelegation: An operation is sent to another object, where the function is implement. The other object then executes the function and returns the result tot he „caller“. By that, the functionality of the function cannot be manipulated. However, an additional object hast o be initialized, which makes the operation slower.\nThis can be used at smartphones to decode messages. The key to decode a message should be provide by a third object which cannot be manipulated, so thtat a safe transmission oft he message is possible.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5591413,
      "meta": {},
      "text": "In inheritance, the subclass inherits all the functionalities from the super class and can modify / adjust them. Therefore, the subclass is an augmentation of the super class. In delegation, the class that actually handles the operation does not have to support all the operations from the receiver and instead, the receiver delegates the task to another class that supports the operations. In inheritance, both classes have overlapping functionalities, whereas in delegation this doesn't have to be the case.\n\n\nInheritance allows for easy implementation of a new functionality in the subclass.\nInheritance forces a subclass to be adjusted when its super class changes.\n\nDelegation is generally more flexible, as there is not a requirement to support all functionalities of the super class.\nDelegation can be rather inefficient because it requires the creation of an object instance where the action is delegated to.\n\n\nInheritance can be used in a mobile game. We can build a class named Car, which represents a car on the racetrack in the game, and then use inheritance to build different car types with individual features or collision behaviors by inheriting the general functionality from the Car class and augmenting it. As all the subclasses need to have a certain base functionality that all cars have inheritance makes the most sense, as we don't have duplicated code and can easily adjust the Car class and have the changes reflected in all subclasses.\n\nDelegation can also be used in the context of a smartphone app. If we have a social media platform and offer a sign-up page for users to register for the service, it would make a lot of sense to not bundle all the functionalities of updating the view, etc. in a single class (which would make it very hard to maintain), but instead when the user provides his information to delegate the actual activity of adding the user to the system to a different class e.g. SignupHandler.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5592215,
      "meta": {},
      "text": "Inheritance and delegation are two very different concepts used in in programming. Inheritance allows you to reuse functionality of a so-called superclass and then add further functionality for the subclass you are creating. One of the big advantages is that functionality does not have to be implemented more than once if its needed in multiple areas of the software. Code duplicates are not good for the scope of the software and also very hard to maintain since changes need to be implemented everywhere. One of the big disadvantages is that subclasses are directly dependent on the functionality of the superclass. This could become a problem once functionality is changed in the superclass and the subclass cannot make use of this new functionality anymore. Example: All smartphone apps share common functionality. The way they run on the device and how they interact with the operating system is standardized. These standard aspects can be reused for every application.\n\nDelegation on the other hand takes advantage of already existing objects in a different way. Their functionality is used through method calls on concrete object instantiations of them. One of the big advantages is huge run-time flexibility. The delegate meaning the object you are calling the function on can be changed at run-time. Ideally, there is no dependency on one delegate so that a delegate that fits best and works can be chosen at run-time. The disadvantage is that there needs to be delegate in the first place, meaning that every time functionality of another object is needed, an actual object instance needs to exist. Example: A gaming application that also lets users communicate with each other uses the services of a chat application like mail. The chat functionality doesn't have to be implemented in the game and is delegated to the chat application.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593555,
      "meta": {},
      "text": "Both inheritance and delegation are designed to improve code reusability.  Reuse of delegates implements functionality in existing objects. The receiver only needs to call the functions it needs from the delegator, so delegation is generally more flexible,but since an instance of the delegator needs to be created, the efficiency of the delegation may be affected.Reuse of inheritance implements functionality in superclasses. Inheritance is a very good choice if multiple classes have some of the same functionality. Inheritance makes the code simple, and new functionality can be easily implemented in subclasses. But the subclass must inherit all the methods in the superclass, even if those methods don't make sense to the subclass, and if the superclass changes, the subclass must change too.\nIf you need to develop multiple smartphone apps with similar functions, a superclass that includes all similar functions is the best choice. Each app only needs to inherit the superclass and add its own unique functions.For example, all social apps, including mobile phone SMS functions, need to have an enter text function, so this input function can be regarded as a superclass, and all apps that needs input can directly inherit it.\nA smartphone's photo album can usually be opened directly or through the camera. However, it is obviously inappropriate to use the mobile phone album as a subclass of the camera just because the function of opening the album, which means that the album needs to include all the functions of the camera. In this case, delegation is a good choice. The camera is the receiver. When it is necessary to open the mobile photo album through the camera, the camera app will send the request to the \"delegate\" mobile photo album.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594128,
      "meta": {},
      "text": "Während bei einer Delegation ein Objekt als Attribut instanziiert wird, um von diesem auf seine Methoden und Struktur zurückgreifen zu können, werden Methoden und Struktur bei der Vererbung im klassischen Sinne \"vererbt\", so dass diese vom Vererber an den Erben hinterlegt werden.\nEin großer Mangel der Delegation ist die Effizienz: Dieser gereicht die Instanziierung eines neuen Objektes zum Nachteil.\nEin Vorteil wiederum die Flexibilität. Nicht jede Methode ist zwangsweise sinnvoll oder von Nutzen und muss somit auch nicht unbedingt in der Klasse existieren.\nEin Vorteil der Vererbung ist es, Unterklassen auf einem vergleichsweise einfachen Weg neue Möglichkeiten zu geben.\nEin Nachteil hingegen, dass auch unerwünschte Methoden von der Oberklasse übernommen werden müssen.\n\nHeutzutage hat beinahe jedes Smartphone eine Kamera mit unterschiedlicher Funktionalität. Diese kann man als Delegation sehen. Die Möglichkeiten einer Videokamera oder eines Fotoapperates werden hierbei an das Mobilgerät übergeben. Jedoch nur solche, die der Hersteller auch für sinnvoll erachtet. Ein Smartphone benötigt ja beispielsweise kein Teleobjektiv. Dies würde ich wählen, da somit unnötige Funktionalität oder äußerlicher Aufbau einer Kamera vernachlässigt werden können, Grundfunktionalität und Gerüst aber erhalten bleiben.\n\nWorauf basieren unsere Smartphones heutzutage? Auf den Telefonen aus guten alten Zeiten. Man könnte beinahe schon sagen, sie sind ihre Nachfahren und als solche auch ihre Erben. Die gesamte Grundfunktionalität eines standardmäßigen Telefons ist in einem Smartphone zu finden. Weswegen sich auch sämtliche Methodik vererbern lässt. Ich würde die Vererbung hier wählen, da wir sowieso die Funktionalität standardmäßiger Telefone in einem Smartphone benötigen, und wir uns somit die Instanziierung eines neuen Objektes sparen können.\n",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5596229,
      "meta": {},
      "text": "Unterschiede:\nVererbung und Delegation sind Konzepte, um Wiederverwendung von Funktionalität zu ermöglichen. Vererbung: Klasse wird erweitert, indem davon geerbt wird und Operationen hinzugefügt / überschrieben werden. Bei Delegation wird die Operation dagegen an ein anderes Objekt weitergeleitet.\nVererbung ist \"White box reuse\", Delegation \"black box reuse\". Das heißt: Bei Delegation werden nur public Interfaces von anderem Objekt verwendet. Bei Vererbung kennen wir Quellcode und erweitern Funktionalität durch Unterklasse.\n\n+ Delegation: Flexibler: Zugriff über Interface (black box reuse), sodass man Implementierung der delegierten Funktionalitäten ändern kann, ohne dass Änderungen bei der Nutzung des Interfaces notwendig sind.\n\n- Delegation: Ineffizienter, zusätzlicher Overhead, da Instanz von dem Objekt, an das wir delegieren, erstellt werden muss\n\n+ Vererbung:\nEinfacher neue Funktionalität hinzuzufügen: Nur neue Funktionalität muss programmiert werden, andere Funktionen ohne zusätzlichen Code von Elternklassen geerbt. +Von vielen Programmiersprachen unterstützt.\n\n- Vererbung:\nUngewollte Methoden der Elternklassen in den Kindklassen vorhanden. (zB. List ist Elternklasse von Stack -> Stack hat (ungewollt) neben push und pop auch add-Methode)\n\n\nBeispiel Delegation:\nSmartphone-App mit Posts aus Foto und Text (vgl. Instagram). draw-Methode in Klasse \"Post\", die Post am Bildschirm anzeigt. Delegation, indem wir draw() an die Unterkomponenten (Foto und Text) \"weiterleiten\". In Post: Instanz von Foto und Instanz von Text, auf denen wir draw() aufrufen, wenn draw() in Post aufgerufen wird.  Delegation ist nützlich, da wir besser Kapselung erreichen (Foto und Text können in anderen Komponenten (nicht nur Posts) wiederverwendet werden, aber Liskovschen Substitutionsprinzip nicht gefolgt werden kann.\n\n\nBeispiel Vererbung:\nSmartphone-App mit haptischem Feedback (kurzes, starres Ruckeln, wenn Knopf gedrück; längere Vibration, wenn Nutzer Mitteilung bekommt). Vererbung eignet sich: Elternklasse HapticFeedback mit abstrakter Funktion play() (specification inheritance) und Funktion disableHapticFeedback() (implementation inheritance). Unterklassen von HapticFeedback, für verschiedenen Arten: ButtonPressedHapticFeedback, MessageReceivedHapticFeedback, die play-Methode überschreiben. Vererbung sinnvoll, da Liskovschen Substitutionsprinzip gefolgt werden kann (zB. ButtonPressedHapticFeedback kann wie HapticFeedback verwendet werden).\n",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5596303,
      "meta": {},
      "text": "Inheritance is the process by which one class takes the property of another other class. i.e. the new classes, known as derived or child class, take over the attributes and behavior of the pre-existing classes, which are referred to as base classes or super or parent class.\n+ Supported by most popular languages and easy to use\n- The subclass becomes dependent on the parent class implementation.This makes it harder to reuse the subclass, especially if part of the inherited implementation is no longer desirable\n\nDelegation is simply passing a duty off to someone/something else. \n+ Run-time flexibility – the delegate can easily be changed at run-time\n- Delegation is not directly supported by most popular object-oriented languages, and it doesn’t facilitate dynamic polymorphism.\n",
      "score": 75,
      "language": "ENGLISH"
    },
    {
      "id": 5596453,
      "meta": {},
      "text": "Difference:\n\nThe difference between inheritance and delegation is that, in inheritance, one class (Parent Class) is extended by another class (Child class/subclass). The child class inherits all properties and methods of the parent class, and it may offer more functionality if required.\n\nOn the other Hand, in delegation, a receiver will send the request/task to the delegate, which then executes the request. So in other worlds in delegation, one class delegates/sends the request to another class to be executed. \n\nInheritance:\nAdvantages:\n1. It is supported by many languages such as Java, C++ and Python\n2. Easy to use and extend functionality.\n\nDisadvantages:\n1. There is a privacy issue in inheritance. Inheritance may expose some methods of the parent class.\n2. Changes in the parent class can affect the subclass to change as well. \n\nDelegation:\nAdvantages:\n1. It is more flexible.\n\nDisadvantages:\n1. It is more inefficient. (Because an object instance needs to be created, send method call and wait for response).\n\nExample:\nInheritance:\nAn example for inheritance in smartphones would be software/firmware of a smartphone. 2 different Android smartphones might use the same Android Version 12, but may have different amount of functionality or features depending on the smartphone. (Some features are inherited and some are not). \n\nDelegation:\nAn example of delegation in Smartphones would be the GUI, such as the buttons on the screen. When a button is pressed, a corresponding action is executed through a delegate. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596485,
      "meta": {},
      "text": "The difference between delegation and inheritance is that by Delegation you have to create an instance, which calls the Methods, that we want to reuse. While by Inheritance the new class is a subclass of another class, and we can directly access to all the public and protected Methods and reuse them. \nDelegation:\n+ is more Flexible. it can easily be changed at the run time and it help us to provide only the methods, that we want. So the new class is not forced to provide all the methods, which the reused class is providing.\n- but might be more inefficient, because we have to instantiate an object and wait for the response of the methods, that we called.\nInheritance:\n+Easy to implement and add new functionalities to the new class\n- The new class is forced to provide all methods of the parent class, even the unwanted of them.\nExamples:\nIn Smartphones it is better to use delegation to create a user mode using the kernel mode, because the user has not the permission to access to all the functionalities provided in the kernel mode. However the multi-mode users on Netflix- App for example  should use inheritance, because we have multiple users. They could be kids or adult. Both must have the same and all functionalities as the parent class \"User\" :  watchMovie, addMovieToWishList ect... . but the suggested movies for an adult are not the same for a kid. so this functionality could be added in the subclasses. \n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596615,
      "meta": {},
      "text": "Wenn eine Klasse von einer anderen erbt, so ist die Unterklasse eine spezifischere Version der Oberklasse und erbt deren Methoden, da die Unterklasse alle Eigenschaften der Oberklasse besitzt. Vererbung versucht, diese gleichen Eigenschaften von Unterschiedlichen Klassen zusammenzufassen.\nWährenddessen setzt Delegation darauf, dass Klassen, die in ihrer Funktion ähnlich sind, gleiche Methoden wieder benutzen können (Reuse), wenn nicht eindeutig eine der beiden Klassen alle Eigenschaften der anderen übernehmen soll/kann.\n\nInheritance:\n+ Übersichtliche Struktur, mehrere Klassen mit gleichen Eigenschaften werden zusammengefasst\n- Wenn eine Oberklasse zuerst entsteht, könnte eine Unterklasse bestimmte Methoden nicht gebrauchen\n \nDelegation:\n+ Reuse von Methoden, ohne dass für alle ähnlichen Klassen eine extra Oberklasse definiert werden muss\n- bei zu vielen delegationen verliert man schnell den Überblick\n\nSmartphones:\nAlle Apps weisen bestimmte, gleiche Eigenschaften auf (starten der Apps, schließen, Benachrichtigungen senden, Berechtigungen abfragen, etc.), sodass diese Funktionen in einer Oberklasse zusammengefasst werden können.\nSollten bestimmte Apps Termine oder wichtige Ankündigungen speichern wollen, können diese Termine in einem lokalen Kalender gespeichert werden. Alle Termine verschiedenster Apps werden somit an den Kalender delegiert. ",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5596659,
      "meta": {},
      "text": "- Inheritance is used when we want to use all the functionalities(methods) of the superclass, hence we create the new class(subclass) which inherits from the subclass.\npros: intuitive, easy to use, supported by many\ncons: changes in superclass means subclasses are affected, some unused methods of the parent class are also inherited\n\n- Delegation is used when we want to just reuse certain functionalities of another class by creating an instance of the class and call method(s)\npros: more flexible\ncons: inefficient, as you have to create an instance of the class\n\neg: -newer generation of smartphones would inherit from the older generation, because the newer model are expected to have all the functionalities of the older model plus new ones.\n- smartphones can delegate some functionalities from PC, because smartphones are not expected to perform like a PC, but it can take some functionalities from a PC.",
      "score": 75,
      "language": "ENGLISH"
    },
    {
      "id": 5584946,
      "meta": {},
      "text": "Bei der Vererbung wird eine Unterklasse erstellt, in der die Funktionalität der Oberklasse erweitert wird.\nBei der Delegation wird dagegen ein Teil der Funktionalität auf eine andere Klasse abgebildet. Führt ein Client eine Methode des Receivers aus, delegiert dieser die Operation an den Delegate.\n\nGenerell ist Vererbung der geradlinigere Ansatz, der eine einfache Implementierung neuer Funktionalität ermöglicht. Dies ist jedoch nicht immer sinnvoll, da für Vererbung die Unterklasse ein Subtyp der Oberklasse sein sollte, was nicht automatisch gegeben ist, auch wenn die Unterklasse die Funktionalität erweitert. Wird Vererbung an unpassenden Stellen angewendet, führt dies zu unübersichtlichem Programmcode.\n\nDie Delegation ermöglich das einfache delegieren von Verarbeitungsschritten an ein andere Komponente. Es müssen bis auf eine Schnittstelle keine weitern Abhängigkeiten definiert werden. Die Komponenten lassen sich somit unabhängig voneinander verändern. Der Nachteil ist dabei, dass der Delegate auf keinerlei Funktionalität des Receivers zugreifen kann, da sie in keiner Vererbungshierarchie stehen.\n\nIn der Software eines Smartphones ließe sich zum Beispiel eine Klasse \"Call\" durch Vererbung sinnvoll um eine Unterklasse \"Videocall\" erweitern. \"Videocall\" ist dabei ganz klar ein Subtyp von \"Call\" und erweitert dessen Funktionität um die Bildübertragung.\n\nIn der Softwarearchitektur des LTE-Modems eine Smartphones kann Delegation verwendet werden. Die Netzwerkschnittstelle empfängt gebündelt alle Datensignale und leitet diese weiter. Die Verarbeitung von Sprachsignalen wird beispielsweise an die Telefon-App delegiert. Eine Vererbungshierarchie wäre in diesem Fall nicht sinnvoll, da die Telefon-App die Funktionalität des Modems zwar erweitert, jedoch kein Subtyp der Modems ist.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5584976,
      "meta": {},
      "text": "Inheritance is to extend a base class by a new operation or overriding an existing operation. We use inheritance when we want to \"copy\"/Expose the base class API.  In other words, Inheritance is for modeling \"is-a\". A computer \"is-a\" electronic system. It has the advantages that it is straightforward to use and easy to implement new functionality in the subclass. Disadvantages are the subclass will expose some unwanted methods of the parent class(may cause some privacy issues) and changes in parent class leads to changes in the subclass as well.\n\nDelegation aims on catching an operation and sending it to another object. We use delegation to reuse(\"copy\") functionality in an existing object. It is generally more flexible at the cost of efficiency-- an object instance needs to be created.\n\nFor example, the class Android is already implemented. It consists of the most common functionalities of a smartphone's operating system.  Users manipulate the mobilephones intuitively with their finger movement and application developers use Android technology to develop apps.  I use a Sumsung smartphone. It use One-Ui system based on Android 12. We can simplify it and regard the One-UI system as a subclass from Android System. One UI reuses most functionalities of Android, but extends some of them and change some graphical interfaces. \n\nExample for Delegation is the message app from system is a delegate to whatsapp app. Whatsapp reuses the functionality of Message to receive and to send messages. But we shouldn't use inheritance from Message, because we don't want to use Data volume to generate extra fees but to use internet to transfer information.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5592318,
      "meta": {},
      "text": "The implementation inheritance extends a base class by a new (forced) operations or overrides an existing operation, while the delegation just catches an operation and sends it to another object.\n\nIn general delegation is generally more flexible, because the operations are not fixed and can easily be pushed around.\nOn the other hand it may not be that efficient, because the object has to be created and instanced first and then used.\n\nInheritance is more straight forward to use. As a matter of fact this is a debatable topic, which is not always the case. But in most of the cases it is very straight forward to use and easy to implement. Moreover, it is supported by most of the important object-oriented programming languages. Furthermore, it is extremely easy to implement new functionalities in the subclass, if needed.\nUnfortunately, inheritance could expose unwanted methods of the parent class, therefore it could be a security issue but can mostly be fixed easily. But a more complex problem is if the parent class changes, the subclass might change as well.\n\nA concrete example for inheritance in smartphones is that every generation inherits the OS in its current eco system. As for example iPhone XR to 14 all extend from the macOS subsystem. But an example for delegation is the camera or apps for example. Usually the camera and most of the apps are not produced by Apple themselves but bought from another company and integrated in the phone. Its the same for apps which use the programming language Swift but are not made nor extend from Apple themselves.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594121,
      "meta": {},
      "text": "Inheritance means creating a subclass from an already existing class containing implementations that are the same or close to the one wanted, thus reusing the implemented functionality from the superclass. \nIn delegation we don't inherit the methods from the super class, but rather catch the operation and send it to another object that can already handle the operation. This makes it generally more flexible and therefore is one advantage over inheritance, but it also might be more inefficient as an object instance needs to be created. \nWhile inheritance is mostly easier to use and is supported by most programming languages with no problems,  the inherited methods can display unwanted behaviour.\nSome smartphone functionalities might run as a server side application, here most of the work is delegated to the server side. Therefore this is a form of hardware delegation in a smartphone.\nA smartphone game app might make use of inheritance for different characters in the game, as you could create a base class with a default character and then inherit this class every time you create a new character.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594123,
      "meta": {},
      "text": "Inheritance is about the subclass inheriting certain functions and methods from its superclass. The subclass can override the inherited methods and at the same time have further functions and methods which are not included in the superclass. \nDelegation on the other hand means that two classes are connected with each other, but they do not inherit from each other. Class A delegates a function to class B by calling a method of class B, also known as the delegate. Therefore, it is important that class A has an instance of Class B.\nFor example, there is a superclass Smartphone and there are different subclasses IPhone and AndroidPhone. Alongside, there are the following classes: HasLightningPort, HasUsbcPort, IsFoldable, HasIOS, HasAndroid HasWirelessCharging, which can be delegated by the classes IPhone and AndroidPhone. IPhone takes over the implementation of the class Smartphone and adds more attributes and methods/functions to its own convenience, as does AndroidPhone. At the same time, IPhone includes instances of HasLightningPort, HasIOS, and HasWirelessCharging, whereas AndroidPhone includes instances of HasUsbcPort, IsFoldable, HasAndroid, and HasWirelessCharging.\nI would choose delegation over inheritance when I do not want to use all methods and functions of a class, or I want to be able to change the delegate anytime I want to. \nOn the other hand, I will choose inheritance if I want to take over all methods and functions of a class. Though, the principle of inheritance might not be available in every programming language as it is part of object-oriented programming. And OOP is not available in C for example.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594212,
      "meta": {},
      "text": "Inheritance is the process by which one class takes the property of another other class. Delegation is simply passing a duty off to someone/something else.\n\nThe key difference is that inheritance uses the IS-A relationship for re-use; delegation uses the HAS-A reference relationship to do the same.\nSo, while inheritance is extending a base class by a new operation or overriding an existing operation, delegation means that you use an object of another class as an instance variable, and forward messages to the instance.\n\n\"+\" - advantage; \"-\" - disadvantage\nInheritance:\n+ Straightforward to use\n+ Supported by many programming languages\n+ Easy to implement new functionality in the subclass\n- Exposes some (unwanted) methods of the parent class\n- Changes in the parent class can force the subclass to change as well\n\nDelegation:\n+ Generally more flexible\n- Might be more inefficient, because an object instance needs to be created\n\nI can also add that delegation is better than inheritance for many cases because it makes you to think about each message you forward, because the instance is of a known class, rather than a new class, and because it doesn’t force you to accept all the methods of the super class: you can provide only the methods that really make sense.\n\nExample with smartphones:\nI can provide such an example: there are phones and there are smartphones. Which principle should be used for this \"system\"?\nPhone only deals with calls, receiving and doing it.\nSmartphone has lots of things to do (messaging in for example Telegram or Whatsapp, having Internet access, playing games and so on), but the calls thing is one of them.\nSo, Smartphone IS-A (which is a relationship that inheritance uses) Phone and we can extend Smartphone with Phone. There is not only no need to use delegation, but we have exact sign that we have to use inheritance. We need all the functions of the superclass Phone.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596317,
      "meta": {},
      "text": "Die grundlegende Unterscheidung liegt in erster Linie darin, dass bei \"Inheritance\" eine bereits existierende Klasse erweitert oder eine bereits implementierte Funktionalität überschrieben wird, während bei \"Delegation\" eine Funktion abgefangen wird und zu einem anderen Objekt gesendet wird. Die Vorteile von Inheritance sind, dass es ua. einfach zu bedienen ist, von vielen Programmiersprachen unterstützt wird und neue Funktionen einfach in die Unterklassen implementiert werden können. Auf der anderen Seite sind die Nachteile, dass die Vererbung einige Methoden der Unterklasse verfügbar macht, welche nicht verfügbar sein sollten und Änderungen in der Elternklasse auch die Unterklasse zu einer Änderung zwingen bzw. eine erneutes kompilieren erforderlich ist. Die Vorteile von Delegation sind, dass es Flexibel ist, da jedes Objekt zur Laufzeit durch ein anderes ersetzt werden kann, sofern es den gleichen Typ hat. Der Nachteile daran ist aber, dass es Ineffizient ist, da Objekte gekapselt sind. \n\nBeispiel 1: Ein Smartphone hat grundlegende Eigenschaften wie ein Display, Kamera etc. Diese stellt die Oberklasse \"Smartphone\" dar. Nun gibt es aber Unterklassen wie \"Samsung\", \"Apple\" & \"Sony\", welche von der Oberklasse Erben und in sich selbst wieder eigene Eigenschaften besitzen. Das hier passende Konzept wäre \"Inheritance\", da die Unterklassen von der Oberklasse einfach erben und die Eigenschaften in den Unterklassen nur spezifiziert werden.\n\nBeispiel 2: Die Funktion \"telefonieren\" für Smartphones ist bereits für ein Objekt implementiert und wird lediglich abgefangen und an ein anderes Objekt, das die Funktion braucht, weitergeleitet. Hier passt das Konzept \"Delegation\" am besten, da die Funktion bereits in einem anderen Objekt implementiert ist.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5596699,
      "meta": {},
      "text": "When using inheritance you extend another class and can add methods or override existing methods but are also able to use the methods of a parent class.\nAn advantage of inheritance is that you can easily add new functionality in a subclass. A disadvantage is that you may also inherit some useless or unwanted methods from the parent class.\nAn example for this in the context of smartphones are the buttons because they all have the same basic functionalities but only different actions when you click on them.\n\nWhen you use delegation you reuse functionality already implemented in another class through object instantiation and method calls on the created object.\nAn advantage of delegation is that you are more flexible than you would be using inheritance. A disadvantage is that it implementing something with delegation can be less efficient, because it always requires you to instantiate another object.\nAn example for this in the context of smartphones is using the camera in apps like instagram or snapchat where they just delegate your actions to the basic implementation of your smartphone camera.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585144,
      "meta": {},
      "text": "Inheritance is reusing an existing class, by creating a subclass and changing some or all of the functionality and it is possible to add new functionality, too.\n\nAn advantage for inheritance is, that the functionality of the object can be altered at its core.\nA disadvantage of inheritance is, that you need to be knowledgeable about the implementation of the existing class.\n\nA Smartphone class could inherit from a generic phone class, that would already have the methods call() and similar ones, and it could add it's own methods like browseInternet(), etc. I would choose that because the generic phone class would have all phone methods, which the smartphone all needs.\n\n\nDelegation is creating a wrapper class for an existing object, that passes on method calls to the existing object. There, some checks can be done before forwarding the call, but the deeper functionality can not be changed.\n\nAn advantage of delegation is, that you do not need to know anything specific about the implementation of the existing class.\nA disadvantage of delegation is, that you add additional overhead to method calls, because for each method call, at least one other method call has to be made.\n\nA smartphone could delegate its own call functions to a SIM card class, as all carriers do things of their own, and do not want to tell you how they do it. I would do it like that because you need to be able to do calls regardless of your carrier, and they will probably not tell you how they implemented their systems.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5586063,
      "meta": {},
      "text": "### Delegation ###\n\nDelegation is simply passing a duty off to someone/something else. \n \n*Delegation can be an alternative to inheritance.\n*Delegation means that you use an object of another class as an instance variable, and forward messages to the instance.\n\n### Inheritance ###\n\nInheritance in classical OOP is a term used to describe a situation where class B which is called the child class will inherit the methods and propertied declared on class A. In B you can then add further methods, etc. \n\n### When to use what ###\n* You want to express relationship (is-a) then you want to use Inheritance.\n* You want to be able to pass your class to an existing API expecting A’s then you need to use inheritance.\n* You want to enhance A, but A is final and can't be further be sub-classed then you need to use composition and delegation.\n* You want functionality of a method and do not want to override the method (because you are lazy, or the codebase gets ugly) then you should go for delegation.",
      "score": 33.3,
      "language": "ENGLISH"
    },
    {
      "id": 5587298,
      "meta": {},
      "text": "Delegation:\nPro: Very flexible to use\nCon: Needs multiple objects to work\nInheritance:\nPro: Easy to use, most object orientated Programming languages support inheritance\nCon: Not as flexible because one change to the super class change all subclasses\n\nDifference:\nDelegation spreads the functionality to many different objects. This means the one complex functionality is simplified in multiple smaller functionalities. Inheritance is quite the opposite. It combines a logical structure of classes into one object.\n\nSmartphone Example:\nDelegation: \nIf you want to simulate a smartphone with a program, it is smart to delicate the different functions like camera or Fingerprint sensor to its own objects. This gives you the highest flexibility in using each function.\nInheritance:\nIf you want to simulate multiple different smartphones there will  be functions which all smartphones have, like camera or speakers. These can be all in the super class. And all function which are exclusive to some smartphone can be specified in sub classes. ",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5592323,
      "meta": {},
      "text": "Um Code wiederzuverwenden gibt es mehrere Konzepte darunter Vererbung und Delegation.\nDer grundlegen Unterschied zwischen den beiden ist folgender:\nBei Vererbung wird jeder Methode der Superklasse übernommen.\nBei Delegation wird an eine Instanz der Klasse die aufgerufenen Methoden weitergegeben.\n\nEin Nachteil für Vererbung ist, dass man jede Method erstmal erbt, auch eigentlich unerwünschte.\nDiese muss man dann zum Beispiel überschreiben wenn sie nicht verwendbar sind. Auch für jeden Neuhinzugefügt Methode der Superklasse muss das geschehen !\nDafür wird durch Vererbung Polymorphie ermöglicht und es können auch Methoden, wo die  Oberklasse  parameter ist genutzt werden.  \n\nEin Vorteil von Delegation ist, dass man das verhalten der klasse auf die Delegiert wird ändern kann ohne die Klasse selbst verändern zu müssen !\nEin Nachteil von Delegation ist das die Zugehörigkeit zu einer Klasse nicht direkt ersichtlich wird und daher bei falscher Anwendung für unnötige Komplexität im Programm  sorgen kann.\n\nIm Kontext eines Handspiels will der Programmierer  teile einer Klasse der Graphic Library  des Handys  verwenden, da er nicht alle Methoden verwenden will wählt er Delegation als teil seines Design Patterns.\nEr gibt das für sein Spiel benötigt weiter und hat klar definiert welche Grafikoptionen sein Spiel braucht.\n\nEin andere Programmierer implementiert das Sicherheitssystem für verschieden iPhone Arten.\nDiese haben alle die selbe Oberklasse, die die grundlegen Funktionalitäten gibt und Kompatibilität garantiert.\nBei einem besonders neuen iPhone will er von der Hardware neue mitgeliefertes Verschlüsselungsverfahren verwenden. Er erstellt eine Unterklasse muss dort nur die Verschlüsselungsmethode überschreiben.\n",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5593430,
      "meta": {},
      "text": "inheritance makes subclassing from an implementation but Delegation\ncatch an operation and send it to another object where it is already implemented.\n\n+:Inheritance : Easy to implement new functionality in the subclass.\n+:Deligation : more flexible.\n-:Inheritance : Changing in the parent class can force the subclass to change .\n-:Deligation : can be more inefficient, because  creats an object instance .\n\nFor example we can use inheritance for implementing a Social Networks program (whatsapp,Telegram,…)\nAnd we want to have calendar in bankprogram and we have  phone calendar,we can use deligation because they can have different things to add events.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595538,
      "meta": {},
      "text": "Inheritance is sub classing an implementation by extending a base class by a new operation or\noverriding an existing operation.\nDelegation on the other hand is catching an operation and sending it to another object where it is already implemented.\nTherefore the difference is that inheritance implements the functionality in a superclass while Delegation implements the functionality in an existing object.\n\nIn Smartphones a valid use of inheritance would be a new implementation of an app the basic methods of opening and closing will be easy to inherit.\nIn Smartphones a valid use of Delegation would be the use of a calculator that simply delegates the commands to the operating system.",
      "score": 25,
      "language": "ENGLISH"
    },
    {
      "id": 5595710,
      "meta": {},
      "text": "Both techniques are used when reusing functionalities from already existing classes.\n\nIn the case of delegation, methods are first called on a reciever class, which then calls the existing method in the delegate class. Delegation is more flexible because the reciever is structurally independent from the reciever, but is also more inefficient because of the additional object that has to be created.\nInheritance uses existing functionalities by creating a subclass to the existing class. It is more straightforward and easier to implement, but changing the parent class can result in unwanted changes in the subclass.\n\nExaples:\nMany apps on a smartphone (e.g. messengers, QR-Code readers, games) require the function to take pictures with the smartphone camera. Instead of creating their own camera function, these apps often delegate the user to the already existing camera app.\n ",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5595986,
      "meta": {},
      "text": "The Inheritance and the delegation can be an alternative to each other:\nI. Inheritance\nthe inheritance is simply an \"is-a\" relationship. That's why we can define the \"Parent-Child\" relationship. The super class (or Parent ) contains all the methods that will be used by the other classes and maybe changed locally by them by Overriding them.\n \nThe inheritance is flexible, it makes the code easy to change, as we are supposed to adjust the methods only in one place, and the rest of the code will be automatically involved .\n\nBut the thing that makes inheritance not really the perfect choice is that the subclass should support all of the class preconditions of the parent class and all its methods.\n\ne.g: Facebook, one of the biggest apps uses surely the Inheritance, so when you change and information in your profile it will change everywhere(and even in Messenger) (e.g: changing Name)\n\nII. Delegation\nthe delegation represents the Use of functionalities of a  class in another class. This technique helps us avoid the repetition of writing classes with similar process that leads to similar results. \nSo a class will be instantiated in the other class(es) and we will call its methods as long as we need that.\n\nDifferently to the inheritance which let a class extend only one other class, the delegation lets classes use many other classes as they need. \n\nOtherwise Delegation is not directly supported by most popular object-oriented languages.\ne.g: all apps created with java can use it\n\n\n",
      "score": 50,
      "language": "ENGLISH"
    },
    {
      "id": 5596194,
      "meta": {},
      "text": "Inheritance is has to do with sub- and superclasses. Delegation is been implemented with the instances of the specific class and method calls on that instances. Therefore inheritance is done on the level of the whole class, whereas delegation is done on the level of an object.\n\nInheritance is rational if the subclass is a specialization of superclass or likewise the superclass is generalization of subclass. Delegation is good because you do not need to create a new class which is much more memory efficient and might have less overcomplication. \n\n\"Iphone\" would be the sublclass of parent class \"Smartphone\", since \"iphone\" is a specialization of a more broad term \"smartphone\"",
      "score": 25,
      "language": "ENGLISH"
    },
    {
      "id": 5583948,
      "meta": {},
      "text": "Bei Inheritance werden Funktionen einer Superklasse wiederverwendet oder redefiniert. Delegation benutzt die Funktionalität einer anderen Klasse, indem sie diese Klasse zum Beispiel als Attribut hat und aufgerufene Funktionen an diese Klasse weitergibt.\n\nInheritance:\n-  : Nicht ueberschriebene Funktionen einer Subklasse koennen ungewolltes Verhalten haben\n+ : Funktionalitaet einer Klasse kann leicht veraendert werden\n\nBsp.: Bei Smartphones werden neue Operating Systems inherited. Die Funktionalitaet des alten Sytems wird beibehalten oder ueberschrieben, jedoch werden auch neue Funktionen hinzugefuegt.\n\nDelegation:\n-  : Mehr overhead, da Funktionen weitergeleitet werden muessen\n+ : Klassen koennen flexibler verwendet werden\n\nBsp.: Den Aufbau von Smartphones kann man wie Delegation sehen. Es besteht aus vielen Bestandteilen welche verschiedene Aufgaben erfuellen. Wenn ein neues Smartphone auf den Markt kommt, muessen nur ein paar Bauteile ausgetauscht werden.\n\n",
      "score": 83.3,
      "language": "GERMAN"
    },
    {
      "id": 5585498,
      "meta": {},
      "text": "In Delegation the functionality of an object is extended or implemented by instantiating and calling methods on an object of a different type. The advantage of this approach is: its easy to change behaviour by swapping out different components in the Call chain, which can be easily achieved by a common interface and the bridge pattern. The disadvantage is that it can be computational expensive to create those additional objects. Regarding a Smartphone, an app might delegate certain operations to the Operating System via syscalls.\n\nIn inheritance an objects functionality is extended or argumented by inherenting from a base class and therefor gaining the functionality of the super class without the need to reimplement them. A advantage of this pattern is, that its well supported by many languages and very suited for specialization without needing to rewrite shared functionality. The disadvantage is, that a change in a parent class often dictates changes in a subclass as well.\nRegarding a smartphone, an app might inherit base functionality from a template, to prevent a developer from needing to write unnecessary boiler plate code.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5587740,
      "meta": {},
      "text": "With inheritance, you extend a base class with new operations or overwrite an existing implementation. However, this is not always a good solution because the base class may provide operations that are not necessarily allowed in the newly created subclass. (For example, extending a list class to implement a queue may be bad because the list class may support the pushFront() method, which is illegal in a queue.)\n\nWhen you use delegation, you do not extend the other class, but instead create an association with the base class.\nInstead of coding the same logic from scratch again , you simply delegate the process to the base class (for example, by just calling List.pushBack() in the Queue.enqueue() function). By modeling the system this way, you are not exposing any operations publicly that might be illegal for the given class.\n\n---------\n\nAn example of inheritance in the world of smartphones would be the classic hierarchical tree of mobile devices. For example: all smartphones can be turned on/off, can change volume, have a display, can take photos, etc. But there are many different brands that provide all the basic features, but still add new features that other brands don't offer. For example, if you compare Android phones to iPhones, you find that both extend the basic smartphone but add new and unique features. (For example, Android provides access to the Google-PlayStore, while the iPhone only supports the App Store.)\n\nDelegation is used, for example, when programming a smartphone app: If a user can select an image and upload it to the app, the programmer doesn't have to reprogram the entire file system access from scratch. Instead, he simply calls a specific function in the operating system to perform this task, thus \"delegating\" the operation to the operating system. Extending the operating system would not make sense, since an app is obviously not a natural subclass of an operating system.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5595999,
      "meta": {},
      "text": "Delegation means that once an object A receives an operation(i.e. method call) it sends it to a different object  B where a method is already implemented. Therefore, A simply \"transfers\" work to an already existing implementation of a different object B. However, this object A does not entirely use all of the functionalities of B, it just makes use of a few methods that are part of B.  If A did so this would be inheritance as A would use all of B's already existing functionalities and potentially extend them. Therefore inheritance is a stronger relation between two objects A and B, as A is actually a \"duplicate\" of B with some possible extensions, whereas using delegation A just \"outsources part of their work\" to B. \nAn advantage of inheritance is that one can reuse functionality from an already existing superclass which results in a clear structure of the system and there is no redundant duplication of code. However, inheritance leads to high coupling between two objects which makes maintenance more difficult.\nAn advantage of delegation is that already existing functionality can be reused. A disadvantage is that an object instance needs to be created resulting in less efficiency.\n\nIn the context of smartphones an example for inheritance is: A Phone is a superclass and various phone variants of Apple(Iphone 7,8,...) as well as phones of brands like Samsung, Nokia, etc. are the subclasses inheriting functionality from Phone. It is useful to use inheritance as all of the phones have common functionalities but every phone slightly differs from another one.\n\n",
      "score": 75,
      "language": "ENGLISH"
    },
    {
      "id": 5584470,
      "meta": {},
      "text": "Inheritance is the process that the new classes, known as subclasses, take over the attributes and behavior of the super class, while delegation is the process that you use an object of another class as an instance variable, and forward messages to the instance. Inheritance is a hierarchical relationship, whereas delegation is a horizontal relationship.  \nThe advantage of inheritance is that it is simple to use and broadly supported by many programming languages. Furthermore, you can easily to add new functionality in the subclass. The disadvantage of inheritance is that the subclass will accept all the methods of the super class, including unnecessary ones, and that if you make changes in the superclass you will need to change in the subclass as well.\nThe advantage of delegation is run-time flexibility – the object can easily be replaced at run-time by another one in the same type. The disadvantage of delegation is that it is inefficient, since objects are encapsulated, and a problem will be solved multiple times.\nIn the context of smartphones, an example of inheritance is \"communication\". As an abstract super class, you can have the class Communication, and as inherited subclasses you can have classes such as Email, Messenger, and so on. Attributes and methods of Input for example send() and attachFile() are passed to the subclasses.\nAs an example of delegation, instead of using methods of a superclass like inheritance, when the user wants to send a message on the smartphone, the class Email (as Receiver) can send the request of sending a message to the class Messenger (as Delegate) and Messenger can execute sending a message.\n \n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589100,
      "meta": {},
      "text": "Inheritance is understood as extending a class by adding new methods or adjusting exiting methods by overriding them. Thereby, the superclass is more general than the subclass with its more differentiated methods. A subclass often extends the functionality of the superclass. Operations can be performed using methods in the respective subclass or superclasses of the current subclass. On the other hand, delegation intercepts an operation and selectively delegates it to other objects. \n\nInheritance is beneficial because it avoids code duplication, since methods of superclasses can be easily reused. Furthermore, it is simple to implement and very useful to extend functionalities for a more specialised object. On the other hand, inheritance enables usage of unwanted methods of parent classes. Adjusting methods of superclasses might require to adjust methods in subclasses as well, which makes it sometimes static. Lastly, polymorphism can lead to a lot of frustration especially in Java.\n\nDelegation is way more flexible due to selected method calls. Methods can be easily adjusted without affecting, for instance, subclasses. Nevertheless, it requires more memory because more objects need to be instantiated, which might have an impact on performance and efficiency.\n\nA good example for inheritance is the operating system android in the context of smartphones. There is the base version of android. Smartphone manufactures can use the base version and extend and adjust it so that their preferences are met. They can override the design of buttons/app icons/... or can even add some new features, which are not implemented in the base version. I think, it makes more sense to extend the base version in order to maintain the basic functionality such as the google play store. Otherwise, a completely new operation system must be developed, which is way more costly and lacks many essential features.\n\nA good example for delegation is the smartphone processor, which delegates all operations to respective components. For instance, if the user wants to play music on Spotify, Spotify sends the operation to the processor, which catches it and delegates it to the speakers, which ultimately plays the song. Apart from the fact that it is not possible, Spotify doesn't send the operation directly to the speakers. As soon as an operation needs more than one component, it might get very complex to call all components separately. That's the reason why I would choose the processor as delegation instance.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596014,
      "meta": {},
      "text": "The difference between inheritance and delegation is in inheritance a class takes the property of another class (becoming a 'child class'), adopting the attibutes and methods of the parent class. The main advantage is that is allows an easy implementation and tracking of new functionalities in subclasses. Main disadvantage is inheritance exposes some (unwanted) methods of the parent class\n\nDelegation on the other hand is an object passing a duty to another object (i.e, method calls). The main advantage of delegation is run-time flexibility, as the delegate can be changed at run-time. \n The main disadvatage is that this might create an innefficent system due to several object instances being created.\n",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596094,
      "meta": {},
      "text": "- Inheritance works by extending from class that already provides similar functionality.\nDelegation on other hand works by redirecting calls for specific functionality to already existing classes. New functionality is obtained by combining functionality of the dependencies and adding own, new logic.\n- Delegation allows to hide functionality of old classes by simply not providing interfaces for corresponding methods (Advantage of delegation). This is not possible with pure inheritance. Here all methods from superclass are also available in subclass. => non application-relevant logic could be exposed.\n\nDelegation has advantage of keeping implementation effort low and the extended classes can also be used in original context as they still have old methods.\n\nAs examples involving smartphones, imagine you created an app that labels pictures of your camera containing stationery with descriptions of the corresponding objects. The application is meant for blind people: While dragging their finger across the picture, a voice assitant tells them what is shown at its location. We assume that you implemented the event handling of moving the finger across labels and reading out the content of the lables as a class (or set of classes), which also contains functionality for filtering objects based on material they're made out of (like wood, porcelain, etc.), so that only the filtered onjects are voiced.\n\nNow you my want to write a new application or add-on that is specialized on dining stationery. Here, inheritance makes sense, because almost all of the functionality that we have so far will also make sense in the new system. We can thus keep implementation effort low.\n\nIf, on the other hand, you want to make a system which has similar functionality for pictures containing your friends and people from your contacts, then inheritance doesn't make sense everywhere, as filters for material of objects don't apply to humans. We want to hide this functionality and should thus use delegation accordingly when implementing filtering capabilities.\n\n",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596490,
      "meta": {},
      "text": "Inheritance implemented functionality in the superclass, meanwhile delegation catches an operation and sends it to another object where the method is already implemented. \n\nOne disadvantage for the the inherited operation is that it however can lead to unwanted behavior. One advantage is that it would be more useful to express is-a relationship which may be useful for the logical programming behind.\n\nOne big advantage for the delegation operation is that the client/user cannot misuse the delegate since a receiver exists in between them. However, most popular object-oriented languages do not directly support delegation, and delegation itself doesn’t facilitate dynamic polymorphism.\n\nI'm taking an example from a website called AppUnite. For classes (on the website, about a media player class) that are final and unable to be inherited, I have to use delegation because those cannot be inherited. Otherwise for implementation that can be inherited and classes that apply every method its parents have, then I'll use inheritance. If I have a player class and I want to make three player subclasses (MediaPlayer, VideoPlayer, MusicPlayer), I would definitely just use the inheritance relationship.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596575,
      "meta": {},
      "text": "Inheritance is a procedure which a sub-class can be based on a parent class. So basically sub-class is the one derived from the parent and they share some set of attributes or methods. It is an is-a relationship and sub-class can be/should be more spesified. In the otherhand, delegation is passing a task to another class. It is more of a relationship between objects which one passes a method call to another. In other words, delegation is using an object of another class to make a message forward. So, they are not the same but delegation is an alternative to inheritance. The difference is basically that, in delegation you have to think about each message will be forwarded because unlike in inheritance it is a known class rather than a new class and it does not have to accept all the methods of the super class, only meaningful ones.  Main advantage of delegation is run-time flexibility and being easy-to-change, however delegation does not provide dynamic polymorphism. Main advantages of inheritance is no need to instantiate multiple classes and compose the delegators & sub-methods to forward calls, however inheritance is not useful when reusing code among multiple classes.\n\nSmartphone is a phone, however it is not enough to say it is just a phone because it is like phone+camera. So in this case in order to avoid high coupling, it is better to use delegation and write this class so that its functions invoke the corresponding classes.",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596414,
      "meta": {},
      "text": "For inheritance, you have a superclass for each subclass. The subclasses have to implement every method of the superclass, so in the superclass, there are methods which the subclasses have in common. In the subclasses, there are also the attributes from their superclass.\n\nFor delegation, there is an instance of the \"subclass\" as an attribute of the \"superclass\". So you can implement the methods you need by using the attribute and ignore the other methods or attributes.\n\nIt is practical to use inheritance if you can define a meaningful superclass and many subclasses which have many methods and attributes in common. In this case, you can easily refactor the methods in the superclass without refactoring it in every subclass.\n\nIf the \"subclasses\" do not have much in common, it is much better to use delegation. When using inheritance, you are forced to implement every method in the subclasses (or they exist at least).\nBut when delegation is used, you can focus on the methods you really need in the \"superclass\" and ignore unnecessary methods/attributes.\n\nIf you have the telephone application on your smartphone and this application is necessary to be able to call, I would use delegation so you can easily replace the old telephone app with an updated version.\n\nIf you program an application for both software systems (IOS, Android) which doesn't need updates, you could program the app (=superclass) and in the subclasses, you could adapt the apps on the software systems and they would have much in common.\n\n\n",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5584079,
      "meta": {},
      "text": "Difference:\nThe Implementation is different, for inheritance, the subclass has all the operations of superclass and could override an existing operation. While for delegation, new class need to instantiation an object and use the object to call method in existing class.\nInheritance:\nAdvantage:\nStraightforward to use\nEasy to implement new functionality in the subclass\nDisadvantage: \nInheritance exposes some unwanted methods of the parent class\nExample:\nthere are three different type of smartphones, their functions have different focus. But they have same functions, answer phone calls and receive text messages. in this case we use inheritance.\n\nDelegation:\nAdvantage:\nChanges in the Delegate-class cannot force the Receiver-class to change\nDisadvantage:\ninefficient, because an object instance needs to be created\nExample:\nSmartphone A has great camera capability. Smartphone B plays good music quality. Smartphone C is great for games. In this case we use delegation to implement unique fuctions.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5589186,
      "meta": {},
      "text": "Delegation is used when there is an ongoing operation in one class which sends it to another class.\nInheritance is used when there are two classes: a subclass and a superclass. The sub class inherits a function from its superclass where the the functionality is already implemented. The subclass can use this functionality or specify it. This can be archived with interfaces.\n\nA advantage of inheritance is that it is very easy to use since you can just add new code in every subclass depending on the desired functionality. But this concept leads to a strong coupling of two classes which can lead to unwanted result, since you can not use the classes independently from each other.\nA advantage of delegation is that it generally leads to better readable and understandable code. But it can be very time consuming in the development process, as there has to be a new object instance created everytime you want to delegate a process.\n\nExample:\nIn the context of smartphones there can be an app-class which represents a basic application with attributes like the name, the app icon and so on. This can easily be archived with inheritance. Every app installed on your smartphone can then be represented by a subclass of the app-class.\nAn example for delegation would be the view-class of a smartphone. If a user taps an app icon on the home menu there should be an action triggered which is then delegated to another class which handles the processes running on your smartphone. Then a new process should be started to launch the application.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589650,
      "meta": {},
      "text": "The inheritance implementation is realised by creating a new class by subclassing. This new class reuses the implemented functionality of the superclass and can offer new operations, all attribute and methods of superclass can be found in the new class. While this concept is very straightforward to use and supported by many programming languages, one has to consider that using inheritance implementation also means that unwanted methods of the parent class have to be implemented in this new class. Additionally, any changes in the parent class have to be changed in the subclasses as well.\n\nIn contrast, delegation is an alternative to inheritance for reusing code. Here, one reuses the functionality of existing objects by using object instantiation and method calls. For this concept one catches an operation and sends it to another object where this operation is already implemented which in other words means that a duty is passed to someone else. While delegation is often more flexible than inheritance implementation and instances can be changed at runtime, it can be less efficient because an object instance needs to be created and this is very expensive. \n\nAn iPhone (Apple) is a subclass of a Smartphone as it offers the same functionalities as the other smartphones (e.g. battery, touchscreen, camera), they express a relationship. An example a concept of delegation is when you double tap a word in the \"Books\" application of a smartphone, you are forwarded to Google where you can look this word up.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5590860,
      "meta": {},
      "text": "Inheritance directly inherits the methods into the using class and gives the class full control. Delegation uses a helper class in order to delegate the function call. This gives the user class only limited control.\nFor example smartphone apps that need access to functions of the operating systems need to be programmed with delegation since a smartphone app shouldn't have full access to the operating system. But new features added to the operating system can be done with inheritance since they don't need restricted control, because they are part of the operating system.",
      "score": 33.3,
      "language": "ENGLISH"
    },
    {
      "id": 5591045,
      "meta": {},
      "text": "The main difference between inheritance and delegation is, that when using inheritance you subclass from an implementation, while when using delegation you call an method on an instantiated object of another class where the fuctionality is already implemented.\nThis has the advantage, that a class user can only call the methods, that the class implementer created and not the methods of the delegate class. Using delegation might be less efficient, because an object has to be instantiated, but can be used more flexible.\nInheritance has the disadvantage, that changes in the superclass might lead to changing behavior in the subclass, but is often more straightforward to implement.\n\nAn example for inheritance would be the classification of phones. A smartphone could inherit from phone, an iOS-phone from smartphone and an iPhone 13 from iOS-phone. I would use inheritance in this example, because it is used to describe a taxonomy.\n\nAn example for delegation would be an smartphone app, that leds you play checkers and has an implemented piece called king, which is allowed to move in all 4 diagonal directions as far as the playing field allows. Now a normal checker is only supposed to be able to move forward diagonally one quare. This function could be implemented via delegation whille using the king as the delegate class. It is better to use delegation here, rather than inheritance, because we don't want the added functionlity of being able to move backwars in the checkers class.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5592731,
      "meta": {},
      "text": "Sowohl bei Vererbung, als auch bei einer Delegation, werden Funktionen einer übergeordneten Klasse in einer Untergeordneten Klasse verwendbar gemacht.\nAllerdings werden bei der Vererbung alle Funktionen einer übergeordneten Klasse übernommen und somit auch nicht gewollte Funktionen.\nEs ist also möglich nur bestimmte Funktionalitäten mit einer Delegation zu übernehmen. Dies ist auch der Haupt-Vorteil einer Delegation. Sollen jedoch alle Funktionalitäten übernommen werden eignet sich die Vererbung besser.\n\nBeispiel Smartphone:\nVererbung:\nEine Kamera App auf dem Smartphone erbt vom Betriebssystem die Funktionalitäten die eingebaute Kamera zu benutzen. Hierbei soll die App ihr Potential voll ausschöpfen und alle Funktionen der Kamera implementieren.\nAlso erbt eine Klasse der App von einer Oberklasse des OS alle Methoden und Attribute, um die Kamera vollständig zu benutzen.\n\nDelegation:\nBei einer Chat App, die für das Profilbild des Nutzers eine Kamera Funktion implementiert haben soll, ist es nicht nötig alle Funktionen der Kamera zu haben. Wichtig ist nur, dass eine simple Kamera Funktion gewährleistet ist. Falls sich die Kamerasteuerung in späteren OS Versionen ändern sollte, will man die App nicht verändern müssen. Also delegiert man die Bildaufnahme ans OS und hat lediglich eine Schnittstelle über die Das Betriebssystem das Bild an die App übergibt.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5584460,
      "meta": {},
      "text": "Delegation: An object needs the functionality of another object, so it captures that object and sends it to the other object for function invocation.\nAdvantage: Delegations are more versatile than inheritance. Any form of extension to a class that can be achieved by inheritance can be done by means of a delegate.\nDisadvantage: The main disadvantage of the delegate pattern is that the connections between classes and the class structure are not as clear and obvious as with inheritance.\nExample: Many mobile phones have OLED screen technology, but for example, Samsung mobile phones do not have this technology, it is necessary to find agents Fotoconn production of Samsung mobile phone screen, in the production process of Samsung mobile phones need to use the Oled interface, that is, new a Fotoconn with Samsung drawings production Fotoconn (new Samsung()).\n\nInheritance: getting the elements and methods of a base class.\nAdvantage: The use of inheritance allows for logical specification of the code and the overall structure of the code is very clear.\nDisadvantage: Once an object has been created, its type cannot be changed, which makes it impossible to achieve flexibility using inheritance alone.\nExample: The brands of mobile phones are changing, for example, new brands are constantly being added, and the functions of mobile phones change (games, address book, video, etc.) If they were not separated, many categories would have to be added to the original inheritance system for each additional function, or each time a brand is added.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5584794,
      "meta": {},
      "text": "Inheritance: The subclasses use the functionality of the superclass by adopting existing methods or overriding them. The subclass extends the superclass but still performs the methods itself.\n\nDelegation: An object of another class is used to add functionality to an existing class. Class A may have an attribute of the type B (from class B).  The delegate B performs the methods for the delegating class A.\n\nDifference: Delegation reuses the functionality of an object, inheritance reuses the functionality of a class.\n\nAdvantages and Disadvantages:\nInheritance is a common concept in programming and is used widely, therefore, learning the concept once can be helpful in working with different languages. Moreover, it's a very simple concept and easy to understand. Methods from the superclass can be taken over/implemented/overridden in the subclass to tailor the subclass to specific needs, making the best of reuse and adaptability. However, as methods from the superclass can be changed easily in the subclass, and changes in the superclass affect the subclass, errors are more likely.\n\nDelegation’s greatest advantage is the high degree of adjustability. The object used (the delegatee) can be changed if the type remains the same. This way, different/new needs can be fulfilled quickly. However, as objects are used within other objects, delegation requires more computing power.\n\nAn example of inheritance would be Smartphones with touchscreens (e.g. iPhone) and Smartphones without (e.g. Blackberries) as subclasses of Smartphones (superclass). They use the same main design and functionalities but differ in the exact implementation (i.e. one requires a physical keyboard and one does not).\n\nA smartphone consists of many components and should use delegation to distribute tasks to different classes. An object of the class “Smartphone” could have an attribute of the type “Camera”, which can be exchanged without having to change the smartphone itself.\n\nATTENTION: I took EIST last year, but sadly did not pass the final exam, and am therefore reusing my answer from last year (with some tweaks). Kind regards, Giulietta",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5588610,
      "meta": {},
      "text": "Unterschiede zwischen Inheritance und Delegation:\n1. bei Inheritance wird die Funktionalität vom Superklasse wiederverwendet, bei Delegation dagegen verwendet Funktionalität von existierenden Instanzen\n2. bei Inheritance wird einen Zusammenhang hergestellt, bei dem Unterklassen auch als Instanzen von Oberklassen benutzt werden können. Dei Delegation ist es nicht möglich.\n\nInheritance:\nVorteile:\n1. Leichte Implementierung neuer Funktionalitäten/Veränderung alter Funktionen in Unterklassen \nNachteile:\n1. Veränderungen in den Oberklassen führen zu Veränderungen in den Unterklassen.\n2. Unterklassen erwerben auch Methoden, die sie nicht brauchen oder nicht verwenden.\n\nDelegation:\nVorteile:\n1. Es werden nur die Methoden in delegierten Klassen verwendet, die man braucht. \nNachteile:\n1. Um die Funktionalität verwenden zu können, muss Objekt, deren Funktionalität verwendet wird, erstellt werden.\n\nUm die smartphones in einer UML-Diagram darzustellen, würde ich Inheritance verwenden, weil alle smartphones viele gleiche Funktionalitäten haben(sie können in einer Oberklasse zusammenfasst werden). Andere einzigartige Funktionalitäten sollen dann in separaten Klassen implementiert werden. Diese Klassen sollen dann auch von der Oberklasse erben. Somit erreicht man ein gutes übersichtliches System Design.\n\nDelegation eignet sich sehr schlecht für die Beschreibung von smartphones Hierarchie, weil für jedes smartphone eine separate Klasse erstellt werden muss. In jeder dieser Klassen muss man wieder Methoden, die typisch für alle smartphones sind z.B. Methode call(PhoneNumber), implementieren. Das führt zu mehreren Wiederholungen, was ein schlechtes System Design ist.",
      "score": 83.3,
      "language": "GERMAN"
    },
    {
      "id": 5592010,
      "meta": {},
      "text": "A class created by using inheritance extends a superclass with new operations or adaptations of existing operations. The resulting class is a subclass of the superclass it extends. \nWhen using delegation on the other hand a class is created with the intention of delegating requests to an already existing class. The new class uses the existing functionality of the class it delegates to, it does however not copy the existing class one-on-one but will most likely only make adapted versions of the existing functionality visible to the outside.\n\nadvantages and disadvantages:\ninheritance is an easy and straightforward to use concept. But there might be a situation in which unwanted functionality is exposed which is not of use to the subclass anyway. \nUsing delegation lets you reuse existing classes in the exact way you want to without having to risk an exposure of not needed functionality. The obvious disadvantage of this concept is however that the total sum of objects is higher (the object that was created using delegation and an instance of an already existing class).\n\nPhone examples:\nSay that there already is a stop watch feature implemented on a smartphone system. If you now want a timer feature as well (i.e. time counts down not up) I would recommend using delegation. That way you could use the functionality of the stop watch but modify it. In particular these modifications would be the time being displayed as counting down not up and also an alarm ringing when a certain time is hit (i.e. the time set by the user of the timer). An example where inheritance could be used would be the following: The possibility for users to authenticate themselves does already exist in form of a 4-digit code. If you now want to provide the possibility to use a 6-digit code this could be made possible by inheriting from the 4-digit-code-implementation.\n\nI tried to stick to the 250 words limit but it is hard if you give us three tasks in one assignment and deduct points for every nuance. I also tried to structure the text well. \n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593945,
      "meta": {},
      "text": "The main difference between inheritance and delegation is that with inheritance, the functionality is implemented in the superclass, while with delegation, the implemented functionality is in an existing object. When you have inheritance, you usually subclass from an existing implementation.\nOn the other hand, a delegation uses an object of another class as an instance variable and then calls a method on it.\n\nBoth have advantages and disadvantages:\nBy implementing delegation, you are very flexible, as delegation can be changed easily during runtime. A disadvantage is however, that sometimes it can be less effective, because you have to create an object instance.\n\nAn advantage of inheritance is, that you can easily implement new methods in the subclass. A disadvantage is, that the subclasses are dependent on the superclass. That means it can be that you have unwanted methods of the parent class and changes in the parent class also force the subclass to change\n\nApplications can be implemented as inheritance. The parent class would have functions like openApp() and closeApp() and the subclasses have additional specific functionalities.\n\nDelegation is for example siri. The user calls siri and sends a request (e.g. \"text mom\"). Siri then sends the request to the messaging service. The messaging service then sends a message to \"mom\".",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595819,
      "meta": {},
      "text": "Delegation is a method of reuse of functionality of an existing class using an object of this class to call the class methods. Сommunication takes place between the delegate and the client via that object. Inheritance is also a method of reuse of functionality but using subclasses. You implement just a subclass of a class, that functionality you want to reuse. \n\nDelegation:\n+ The class does not contain unnecessary methods that it inherited from the superclass.\n+ You can substitute different objects with different implementations of functionality into the field-delegate. \n- You have to write a lot of simple delegating methods.\n\nInheritance:\n+ You can use it straight\n+ Relative to delegetion fast to implement \n- You migth have methods, which you did not need in the subclass.\n- If you change something in the parent class it might lead to changes in subclasses.\n\nExample in the context of smartphones:\nIf I would implement an operating system for smartphones, that have different hardware, so I would use the delegation because it is easier to change the implementation without side effects or to limit some functionality for a concrete smartphone.",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596110,
      "meta": {},
      "text": "The advantage of Inheritance is that you can reuse a base system that has a lot of implementations with nuanced differences without having to rewrite the code multiple times.\nWith Delegation, you focus on fewer Methods that depend on a different system in their functionality.\n\nInheritance offers direct access to the data structure it operates on",
      "score": 16.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596181,
      "meta": {},
      "text": "Delegation is when you got an object of another class in your class. The whole purpose of this system is that you can use the objects methods directly in the class you initialized this object. Inheritance is when for example you want to create a multi class structure where one class got general information or methods you need in this structure. You access the methods by making your class extend the one you want your methods from. The advantage of delegation is that you can add and delete the object in your class quite easily without hurting the structure in any kind. The problem is you always need an object and can’t just use the methods you want. When operating a huge system will cost a lot of time. The advantage of inheritance is that you can easily spread newly added methods through out the whole system by adding it to the sub or super classes. The disadvantage is that your system will get a lot of dependencies and you might have to change sub classes because you made small adjustments in the superclass. In a context of smartphones an example for delegation is when you want to implement the flashlight for the camera. You want to use the calculating method of the calculator but do not want to implement it into your “Notes” app you use an object of the calculator class and let it handle the whole thing for you. An example for an inheritance is when you build the general software of the smartphone and you want to add all the apps we know of as standard apps. You might as well make a super class and let your apps inherent some basic attributes and methods like start the app or close or a logo and name.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596515,
      "meta": {},
      "text": "Inheritance is when there is a superclass with subclasses which extend or implement the superclass therefor the subclass must implement all the functionality. It provides high reusability. \nDelegation is if you just have an Object of another class and you have an instance attribute and you send messages to the instance. Therefor not the class has to implement the functionality the class you call must.\n\nIf we have to structure a project where we have multiple different smartphones and we want to have all their different functionalities modelled. I would use inheritance because the superclass will have all the basic attributes height, width, length , brand etc. and the subclass can have additional attributes functions for the smartphone.\n\nWe have different parts in a smartphone which all have their own functionality, but we cannot create a clear hierarchy therefor different components will have an Object of another class as an instance where they can use the functionality of that component. For example, we say the user wants to increase the audio level and presses the button the button will use an instance of the display to display how the audio level increased. (Probably the processer and some other stuff to but I wanted to make it as simple as possible)\n\n\n\n",
      "score": 33.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596520,
      "meta": {},
      "text": "With inheritance you are supposed to take over (\"inherit\") base structures, functionalities or properties of the hereditary class. You either can extend the provided base or override existing implementations. On the other hand, delegation refers to passing the duty off to other objects, i.e. \"delegating the code down\". \n\n\n\nInheritance:\n- Pro: In general, it's straight-forward to implement new functionalities in inheriting sub-classes. Either override or append the given structure.\n- Con: As far as security is concerned, you may unveil methods from the parent class which aren't supposed to be accessed outside of the own class.\n\nFor basic WebViews or main functionality (\"outer model\") of e.g. a Swift application inheritance is needed. Inheriting from a base structure which Apple provides you in order to have a \"main frame\" is required. Therefore you need to use (if not explicitly, definitely implicit) inheritance when developing a mobile application.\n\n\n\nDelegation:\n- Pro: Due to it's nature of passing needed functionalities down the chain, the software structure is more flexible overall and not prune to changes (like inheritance might be: Tremendous changes in a parent class can easily cause lot of work in sub-classes).\n- Con: Depending on the depth of the forwarding, delegation might be inefficient. The procedure of passing down the work requires an object instance to be created on the fly, thus being very runtime inefficient.\n\nDelegation is one of the most used concepts when developing a mobile application. A good example are the usage of location data. The GPS coordinates are provided by the OS and delegated to your code (\"catching the data\") whenever the GPS chip is able to grasp the proper position.\nYou obviously need to use delegation in this specific example, as e.g. iOS development wouldn't allow you otherwise (insufficient permission to directly access the GPS data -> authenticating down the delegation road e.g.)!\n\n",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596583,
      "meta": {},
      "text": "Inheritance\nIt is when a class extends a so-called super class taking all its attributes and behaviours, which then will also apply to the new child class. \n\n-Advantage-\nThat when there are different classes that are related or  need to be more specialized that depend on a general class the code doesnt need to be repeated and it can simply be passed all together to the child classes, and this can also serve to use polymorphism. \n\n-Disadvantage-\nThe child class takes all the attributes and behaviour of the super class. \n\n-Example-\nIn the context of smartphones, I would think maybe a banking app that has different account divisions, that maybe they all depend on the main acocunt and the subdivisions inherit the main account attributes. \n\nDelegation\nIs when an instance of an object is passed to another class as an instance variable. \n\n-Advantage-\nOnly pass the behaviour needed and not the whole class' methods, which makes it more flexible.\n\n-Disadvantage-\nNot possible to use polymorphism, and object instance has to be created. \n\n-Example-\nI would think for example in the smartphones camera application, video recording and photo taking need separate classes, but they both could have a save() method to keep the picture or the video in the memory, that could be delegated instead of inheretited because both classes do not need all the attributes the other one has. \n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5583655,
      "meta": {},
      "text": "Inheritance is implicitly extending a class from elsewhere, whereas delegation is explicitly including the functionality of a class from elsewhere. \n\nInherited classes inherit all functionalities from their parents, which encourages white box design. Delegated classes provide only the specified amount of functionalities. Their implementation is usually hidden, which encourages black box design.\n\nAn advantage of inheritance is its very elegant design: only few code is needed as children inherit implicitly. A disadvantage of inheritance is the potential for encapsulation issues, as children may inherit unwanted functionalities that should stay private.\n\nAn advantage of delegation is that the functionalities stay modular: Every functionality can be attributed to a specific class (mostly) without overlap. A disadvantage is that the interfaces between the classes must be implemented explicitly and thus delegation is less elegant.\n\nIn the context of smart phones, I would choose to implement internal functions using mostly inheritance and use delegation to connect to apps and external APIs. \n\nInternal smart phone functions usually build on each other and are thus best structured hierarchically using inheritance. The smartphone provides a settings menu with lots of sub-settings such as battery settings, display settings, sound settings and so on. The sound settings are again subdivided into media volume, call volume, ring volume and so on. \n\nMost apps on the smart phone such as location services by street view or social media like zulip  are created by 3rd parties. Delegation is the right choice here because services stay independent as black boxes from the rest of the smartphone. The user is free to add and remove the apps, while third parties are free to provide their functionalities but not their code implementation.",
      "score": 0,
      "language": "ENGLISH"
    },
    {
      "id": 5585130,
      "meta": {},
      "text": "Inheritance uses functionalities from the mother classes -> we use the keyword super. While delegation uses the methods of another instance -> you create a new object that already has implemented the functionalities you need. By delegation, you often only use some provided methods, so the maintainability might be hard -> you could not know that another class is using the methods through delegation -> here can errors come up. An advantage of delegation is that you don't need to implement methods twice -> less time effort. Also, for inheritance, you require the hierarchies and the cases where hierarchies make sense. But, of course, it has a high maintainability standard -> you easily recognize, when there is a method missing.\nSmartphone Example: Case you want to listen to music. Inheritance: You use the integrated speakers. Delegation: You use separate headphones.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5590043,
      "meta": {},
      "text": " Inheritance vs Delegation\nFirst lets define the term inheritance, the term means the act of passing down something which is in relation towards the context of what was given. Additionally to define the term delegation is to give power or authority, it could be referenced as spliting up tasks to others. \n\nThe advantage of inheritance in terms of smartphones can be in regards to the design of the new phone being inherited by the previous phone developed. In an example would be having the iphone 5s and the iphone 12 which inherited the design from the iphone 5s. However the disadvantage is that the inherited object in this case the iphone 12 cant be directly identical to the iphone 5s as it might not be what the designers might be after, hence changing the design vastly, thus impacting the question wheather the phone design is being inherited.\n\nThe advatage of delegation in terms of smartphones is constructed by the process of making the smartphones, hence the building process of the phone. On apple phones we can see on the back that it was designed in california but produced in china. This is due to the delgation process which apple took, due to the price of constrcuting a phone in china is immencely cheaper than in california. However the negative aspect is that due to the cheap price production is comes to the aspect of quality control and wheather or not the device produced comes to standard which apple forsets. Delegation can be helpful but comes at a price.   ",
      "score": 16.7,
      "language": "ENGLISH"
    },
    {
      "id": 5592218,
      "meta": {},
      "text": "Inheritance : a new class is created using subclassing and reuses funtionalities of superclass with the possibility of offering its own additional functionalities\nAdvantage : save time and effort by minimizing duplicate code\nDisadvantage : the inherited methods might exhibit unwanted behaviours in subclass\nExample : We have a superclass Smartphone and 2 subclasses - Iphone and Android phone. I choose this example because these subclasses both inherit basic functions of Smartphone like making a phone call, text, search, ... but each class also has its own functionality. Like in Iphone we might have a method call airdrop and in Android phone class we have method call shareScreen. \n\nDelegation : reuse functionality of existing object using object instantiation and method calls \nAdvantage : more flexible \nDisadvantage : an object instance have to be initialized\nExample : We have a class Smartphone and it has an instance of Interface Sound and a method makeSound. There are classes PhoneCall and Text both implementing Interface Sound. When the makeSound method in class Smartphone is called, the method makeSound in the InterfaceSound is called inside it and then method makeSound in either PhoneCall or Text is executed. \nI choose this example as delegation because Smartphone cannot directly make Sound and messes with the soundsystem but it has to go through the Interface Sound and from there the method is called\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594548,
      "meta": {},
      "text": "The inheritance is basically like a father/son relationship where the son can use the funtions of his father besides his own  function. The inheritance is supported by java and many other programming languages and its also pretty much inuitiv and simple to use but on the other side the son class can be so dependant of the parent class that any change in it can cause problems in the functions of the son class.As a smartphone example we can imagine a camera class which has as subclasses a front camera and a back camera which both implement functionalities from the parent class camera such as zooming modifying photo parametre and portrait mode. \n\n\nDelegation is simply passing a duty off to someone or something else. It  can be viewed as a bond between objects where one object passes certain method functionalities  to another object. It ensures a general flexibility but on the other side it can cause complexity since we always have to include an instance of the other class in our code. Lets take for example the iphone gui which (in terms of coding and personal imagination) has instances of the other apps like the camera the settings and the clock etcc... in order for the class to open them or run them when the user clicks on it.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5595192,
      "meta": {},
      "text": "Inheritance erweitert eine Mutterklasse in ihrer Funktionalität. Es können Funktionen erweitert oder neue Funktionalitäten hinzugefügt werden. Delegation fängt Methodenaufrufe ab und sendet diese an ein anderes Objekt weiter. Der Unterschied liegt darin, dass bei inheritance die Oberklasse in ihrer Funktionalität verändert wird und im Gegensatz dazu bei delegation die Oberklasse und ihre Funktionalitäten erhalten bleiben und nur verschachtelt werden.\nDelegation ist in der Regel etwas flexibler und übersichtlicher, aber dafür ineffizienter, da eine Instanz der Oberklasse geschaffen werden muss.\nInheritance ist leicht zu implementieren, kann aber unnötigen Code aus der Oberklasse erhalten, was den Code unübersichtlicher macht.\n\nSmartphones nutzen beide dieser Konzepte in vieler Hinsicht. Am simplesten wäre zum Beispiel ein passwortgesicherter Lockscreen. Die wichtigsten Funktionalitäten, wie beispielsweise der Notruf, werden für jeden Nutzer zur Verfügung gestellt. Allerdings erhält man nur durch das Passwort vollen Zugriff auf die Funktionalitäten des Handys. Dies passiert mittel Delegation. Meiner Meinung nach ist das ein gut umgesetztes Delegation Konzept, das in Notfall Situationen sehr hilfreich sein kann.\nDie meisten Smartphones besitzen eine Developer Modus, welcher zusätzliche Funktionen freischaltet sobald  er aktiviert wird. Im diesen Sinne erbt der Developer Modus vom Nutzer Modus, da er die selben Funktionen in gleicher oder auch erweiterter Form anbietet. Meiner Meinung nach ist dies ein gutes Beispiel wie Inheritance in Smartphones genutzt wird.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5595834,
      "meta": {},
      "text": "Bei inheritance existiert eine Klasse mit Funktionen, die nur noch spezifiziert werde soll. Die neue Klasse erbt von der bestehenden Klasse und ergänzt/ überschreibt fehlende Funktionen.\nVorteil:  Bei Veränderungen von Funktionen müssen nicht alle Klassen verändert werden. Veränderungen der Superklasse reichen.\nNachteil: Methoden der Superklasse sind nach außen gewollt oder ungewollt über die Subklasse sichtbar.\n\nBsp.: Jede Generation von Smartphones baut auf der Vorgängergeneration auf. Somit erbt das aktuellste Modell von den vorhergehenden. Um diese hierarchische Struktur zu beschreiben eignet sich  inheritance gut, weil dieses eine hierarchische Struktur beschreibt.\n\nBei delegation wird eine Referenz auf ein Objekt, dass die benötigten Funktionen schon enthält, in der neuen Klasse implementiert. Die Funktion in der neuen Klasse ruft nur noch über die Referenz die benötigte Funktion auf. Die Aufgabe wird also an das Objekt delegiert.\nVorteil: Nur nach außen gewollt sichtbare Funktionen sind nach außen für dritte sichtbar\nNachteil: Für Performanz kritische Programme ehr ungünstig, da alle Objekte auf die referenziert werden erstellt werden müssen.\n\nBsp.: Beim Spielen von Mobile Games auf dem Smartphone wird die komplexe Berechnung auf einem Server ausgelagert. Das Smartphone delegiert also die Berechnung an einen Server. Dieses Verhalten lässt sich gut mit dem delegation Prinzip wiederspiegelt, wo die Ausführung einer Funktion delegiert wird.\n\nAllen zusammen ist der unterschied, dass inheritance Klassen von einer Superklasse erben und somit bestehende Funktionalitäten erhalten und dass delegation Klassen ihre Funktionalität über ein erzeugtes Objekt, indem die Funktionalitäten bestehen,  über eine Referenz erhalten. ",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5596654,
      "meta": {},
      "text": "Inheritance: \nUtilized to reuse property and functionalities (attributes and methods) of an existing class. To do so, the desired class is subclassed from the existing class (superclass).\nAdvantages:\nIt is a fast and straightforward implementation since it uses a base (existing class) and builds on that. \nDisadvantages:\nThere are unwanted commands inherited from the superclass. There is a dependency on the superclass, which in some scenarios means less control.\nExample:\nFor developing an Android application it may be easier to create a subclass of an existing class for User Management (repository, login, logout, and Facebook/Google connection). This would make it quick to create the User Management functionality of the application but it generates a large dependency and takes away the flexibility to make changes class.\n\nDelegation: \nUtilized to reuse an existing object's functionality. To do so, the object must be instantiated and then the desired methods from this object have to be called. \nAdvantages:\nYou have more flexibility since you are only calling the functionality you need. It is easier to replace than in the case of inheritance.\nDisadvantages:\nIt is not as efficient because you need to create the instance of an object every time you need to use its methods.\nExample:\nIn the same context. The developer can choose to only use the \"Facebook/Google connection\" functionality of the \"User Management\" class. This way he has more flexibility to replace it in the future with other better functionality. Also, in case \"User Management\" crashes, only the method will crash, not the whole class.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596666,
      "meta": {},
      "text": "Inheritance is about classifying objects according to similarities which allows differentiating the common behavior of the general case with superclass and subclass. Delegation is about sending a message of an operation to another object.\nAdvantages of Inheritance  :\nInheritance can reduce redundancy and extend a class. Also, it can reduce the risk of the occurrence of inconsistency between classes because only change once for all subclasses.\nDisadvantages of Inheritance :\nMay cause undesirable changes within classes.\nAdvantages of Delegation:\nIt does not influence existing components and makes it become a more flexible design.\nDisadvantages of Delegation:\nneed extra time to create new projects makes it less efficiency.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5586312,
      "meta": {},
      "text": "With inheritance, you can extend classes through subclassing to implement new features or extend/modify already existing features.\nAn advantage is that with inheritance, it is really ease to extend already existing functionality through subclassing.\nA disadvantage is that when the parent class changes, the subclasses may need to be adjusted. This can lead to more work.\nAn example would be making \"Pro\" version for smartphones. Apple has their base phones, like the \"iPhone 13\", and then add more functionality to create \"better\" versions of these phones, like the \"iPhone 13 Pro\".\nInheritance is good when you already have a class with a specific feature set that you want to extend, but not if you need to hide specific details from the parent class.\n\nDelegation means that the operations run on one object get catched, and are then forwarded to another object.\nAn advantage is that delegation is more flexible than inheritance because you can specify what should be redirected where.\nA disadvantage is that because you need more than one object instance, it can be more inefficient to use.\nAn example would be the integrating a sim card module into a phone. They generally do not come from the same vendor as the vendor of the phone and are incorporated into the phone. The operating system delegates specific tasks like the connection to cell towers to the hardware sim card module.\nDelegation should be used when you want more control about which operations should be publicly available and used.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5587009,
      "meta": {},
      "text": "Inheritance is a situation where the child class inherits the properties (methods and attributes) from the parent class. Child class can also have its own customised implementation of methods declared on the parent class.\nAdvantage: Developers can avoid code duplication and access the methods and attributes from parent class directly.\nDisadvantage: Changes in the superclass causes adjustments in subclass.\nExample: While developing a chat app for smartphone, we can create a parent class \"Message\" and subclass \"TextMessage\" and \"ImageMessage\".  The \"TextMessage\" and \"ImageMessage\" have different attributes like String and Image. But they have more common attributes like sendingTime and methods like send(). Inheritance can help keep the same type of properties and implement the specific features in the subclass. \n\nDelegation is a situation where one class object uses the methods or attributes of another object. The way how delegation works is usually creating an instance of an object and then calling its methods.\nAdvantage: Developers don't have to accept all the properties from the super class. Only the attributes or methods which are needed are called.\nDisadvantage: It might be confusing when other developers try to understand the source code.\nExample: we use copy and paste so often on smartphone. We can create a class with copy() and paste() methods. These methods can be called directly with the class instance whenever needed. If we use inheritance, these two functions have to created in every parent class which causes code duplication. However, only an instance need to be created with delegation. ",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5593788,
      "meta": {},
      "text": "Inheritance and delegation:\n- inheritance means there is a parent class that provides the majority of the attributes and methods required in the child classes (at least similar ones)\n- new functionalities of the child classes have to be implemented first but due to similarities between the child and parent class it's usually not difficult to do\n- delegation means that a task is passed to another object: a Receiver gets a call to perform a task but it passes it to a Delegate that does the task instead \n- this requires that an object with the required functionality already exists\n- since delegation reuses existing methods -> no need to implement methods, only the delegating part\n- however, during runtime an additional class needs to be instantiated, in some cases only for one function\n\nExample of smartphones:\n- in the example of smartphones, the overall design (touch screen, front and rear cameras, phone and multi media capabilities) stays the same over multiple generations, therefore each generation could be seen as a child of the \"smartphone class\" (inheritance)\n- usually new functionalities are added (similar to adding methods or attributes to child classes) or some are altered, like Wi-Fi or Bluetooth versions (similar to overriding)\n- while some companies develop major components (i.e. CPU) themselves, there are also ones that buy from other manufacturers who will do the development instead (similar to delegation)\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595414,
      "meta": {},
      "text": "Inheritance means to create a new (child) class, which takes on the properties of the super class. Whereas delegation simply calls on an existing class. For delegation, an instance or an object of another class is required to be able to call for example a method from said class. The object needs to be instantiated, otherwise there will be a null pointer exception. For inheritance, the use of an object is not needed. \n\nA disadvantage of Inheritance is that some methods may be left unused, which may cause unnecessary memory waste. But on the other hand, inheritance can be very useful for reusability through generalization, so that the super class has the generalized methods and the child classes have the more specialized methods for their specific situation. \n\nDelegation is more flexible as we can delegate methods from multiple classes to the reusing one. ",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596316,
      "meta": {},
      "text": "Inheritance means an object is a subobject of another object and inherits all of its non-private functions. In contrast to this delegation describes using another object as  an attribute in order to use its functions.  Using delegation results in really good encapsulation and also the programmer can choose which methods to inherit to the subclass and which ones are not needed. Inheritance on the other hand leaves open more options to work with, e.g. polymorphism and overriding certain functions. Inheritance gives the user access to all non-private methods the superclass had and is therefore a possible security threat. Delegation requires another object to be saved as an attribute and then for every method of that object to be called again. This creates a lot of \"waste\" code. When calling someone over different apps like whatsapp or viber, the call differs from a normal phone call but still has a lot in common. Since inheritance is really good at creating subclasses that have many common traits but unique small disparities it would be my concept of choice for such calls. When using the camera on the other hand, all apps use the same camera, no matter what the purpose of its use is. This opens up a beautiful use case for delegation, allowing each app to delegate their camera-method-call to the smartphone-camera.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596358,
      "meta": {},
      "text": "Inheritance beschreibt eine Vererbung von Funktionalität aus einer bereits implementierten Elternklasse an die neue Kindklasse. Dadurch, dass die Kindklasse nicht steuern werden kann, welche Methoden und Attribute sie von der Elternklasse übernimmt, ist Vererbung eine Art des White Box Reuse. Die Möglichkeiten der Vererbung sind also beschränkt, sodass sie einfach einzusetzen ist, aber nicht allzu flexibel, da komplette Methodensignaturen und teilweise Implementierungen schon vorgegeben und außen sichtbar sind.\nIm Gegensatz dazu lässt sich Delegation vielseitiger einsetzen. In dieser Art der Spezifikation wird die zu implementierende Funktionalität an ein anderes Objekt weitergegeben, also werden dessen Methoden aufgerufen, ohne sie zu erben. Möglicherweise entsteht dadurch jedoch ein Overhead, wenn das Objekt erst erzeugt werden muss. ",
      "score": 83.3,
      "language": "GERMAN"
    },
    {
      "id": 5596652,
      "meta": {},
      "text": "The difference between inheritance and delegation is :\nInheritance uses an object that is more general and then the more specific object that inherits the attributes or methods from the superclass.\nDelegation on the other hand only sends an operation to an object that has already instantiated the operation.\nDelegation is more flexible in general terms but has a tendency to be more inefficient.\n\nInheritance is easier to use but can show some methods that maybe should be hidden.\n\nAn example of a delegation in the case of Smartphones would be the faceID that you use to unlock your phone but that you can use thanks to the delegation with other things such as unlocking passwords or paying.\n\nAn example of inheritance in the case of Smartphones would be the smartphone in general terms,\nso the smartphone is an upper-class of the classes IOs or Android, etc. The common features are defined in the smartphone class but the more specific things are defined in the subclasses.\n",
      "score": 75,
      "language": "ENGLISH"
    },
    {
      "id": 5583676,
      "meta": {},
      "text": "Difference1: Inheritance is a parent-child relationship and delegation is sender-receiver relationship. There is no hierarchical relationship in delegation but there is in inheritance. The concept are the fast the same\nbecause a child can inherit function from the parent or the sender can delegate a function to the receiver.\nDifference2: delegation is a \"has a\" approach whereas inheritance is \"is a\" approach.\nInheritance Advantage: helps reduce redundant code and supports code extensibility.\nInheritance Disadvantages: wrong usage of inheritance may lead to wrong solutions.\nDelegation advantage: higher flexibility in the testing ability and reusing the code\nDelegation disadvantage: understanding the system from an outsiders point of view is difficult with just looking the code. It needs to be run for the relationship to be able to be understood.\nDelegation in smartphones: If I want to send a photo from the cloud to someone then I call the functionality in my iPhone or in a specific app I am using then it receives the the request and delegates it to the Cloud server and then the it is downloaded if the conditions are true (for example password or something else)\nInheritance smartphones: There is the super-class Application and all the children the specific apps which have common functionalities are ARE apps. If I want to delete an app the method of the super class is called since it is implemented in the parent class.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5584864,
      "meta": {},
      "text": "Inheritance is a programming concept that allows you to structure your classes into subclasses and superclasses.\nAn advantage of inheritance is that it helps with reducing code by being able to access methods of the superclass in the subclass. However, this could also lead to the subclass being able to access methods that it shouldn't actually be using. \nAn exmample for this would be the subclasses \"Android\" and \"IOS\" for the superclass \"Operating System\", since every operating system provides more or less the same core functionality, yet android and ios are two different implementations of it.\n\nDelegation means that you shift a method call to another object that already provides the desired functionality.\nCompared to Inheritance, Delegation is not as strict since you can choose yourself which method calls you want to transfer and don't automatically reuse all the functionality. However, since you need to instantiate the delegate object, delegation might be slightly more inefficient.\nAn example is the method \"takePicture\" in the class \"UserInterface\" which is called when the user clicks a button within the camera application and which then calls the method \"takePicture of the class \"Camera\".\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5586690,
      "meta": {},
      "text": "When using the Inheritance the developper have to implement all the methods even when he doesn't need them, on the other hand when using the Delegation the developper only needs to instantiate the Upperclass as an attribute (Object) and then only call only the needed methods.\nWhile Delegation might be more flexible in some cases it can be more inefficient, because of the recources needed for an object instance needs to be created.\nWhen we look at the Inheritance it's easy to say that it's straightforward to use and the concept itself is supported by many programming languages. When using Inheriance it becomes so easy to implement new functionalities in the target subclass. But with all that said it ends up exposing some (unwanted) methods of the parent class, and when they get modified the subclass is forced to make the new changes as well.\nexp1: In our smartphones we have menus that include other menus and options. Some of those menus have alot of commun funktionalities and this requires Inheritance. (in a Whatsapp call for example the microphone, the cameras, the display when sharing the screen..)\nexp2: In other Situations where an App (GoogleMaps for example) only needs one Funktionality (the current Location) from a certain menu in order to funktion correctly, here Delegation is needed.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5589117,
      "meta": {},
      "text": "Difference:\n\nWhile Inheritance provides one superclass with predefined methods, allowing the subclasses to directly extend or override an operation, delegation creates an instance of an other object, that implements the needed operations.\n\nInheritance:\n\nAdvantage:\nIt is easy to introduce new functionalities and also provide a certain set of operations for different subclasses to make polymorphism possible.\n\nDisadvantage:\nThe implementation of the provided methods are not selective, so when an subclass already has a similar method and does not require the given operations, it still has to have them implemented.\n\nExample:\nYour smartphone has the ability to call people and save their numbers.\nThis brings you to a List of contacts.\nIt provides the ability to save a contact with number and name, and provides the operations of calling and messaging a person.\nI think inheritance fits this example, since  there are no operations that should be hidden away, making it more efficient and easier to use.\n\nDelegation:\n\nAdvantage:\nOnly methods that are really needed are actually used, since there is no need to implement all of the provided options, due to being an instance of a different object.\n\nDisadvantage:\nNot all programming languages support delegation.\n\nExample:\nWhen your smartphone is locked, you still can access the camera, but you can not access the gallery through the camera.\nI would use delegation in this case, since we are using an operation, already implemented in our device, but create an instance of the object, where the operation of accessing the gallery is not supposed to be used and so not called. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593112,
      "meta": {},
      "text": "Inheritance and delegation are two ways of using an object. In a class structure inheritance is created through super class and sub classes. A subclass can inherit methods and attributes from the super class. Delegation on the other hand is creating an instance of an object and using that in a specific way, taking advantage of specific attributes or methods instead of the whole super class. Personally, delegation is a more modular way of approaching a problem. \n\nWe can take a social media app as our first example of delegation. Here we want to implement some of the camera functionality, but not all of it like slow motion or timelapses. We only want to use the picture taking functionality. This is why delegation would be more fitting in this example. \n\nA communication app between different people can also be an example for inheritance. Here we have tutors, professors and students. All of them can inherit attributes or functionality from a super class called Person. But each of the different people can have additional attributes. ",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5593509,
      "meta": {},
      "text": "Bei Vererbung übernimmt eine Unterklasse die Funktionalität ihrer  Oberklasse und erweitert diese.\nVorteil: Unterklasse kann einfach um neue Funktionalität erweitert werden\nNachteil: Änderungen in der Oberklasse können Änderungen in der Unterklasse erzwingen\n\nBei Delegation wird ein Methodenaufrauf von einem Client über einen Receiver weitergegeben.\nVorteil: Sehr flexibel \t\nNachteil: Ineffizienter da Objekt erstellt werden muss\n",
      "score": 66.7,
      "language": "GERMAN"
    },
    {
      "id": 5594046,
      "meta": {},
      "text": "Whereas during implementation inheritance, a subclass inheritates e.g. methods or attributes from an already implemented class and thus reuses the functionalities this so-called superclass, during delegation, a client class calls a method in a receiver class that delegates the request to the delegate class that in the end executes the request and knows what to do. An advantage of inheritance is that it is easy to implement new functionalities, like methods or attributes, from the superclass in the subclass, but on the other side, inheritance makes the subclass kind of dependent on the superclass, as changes in the latter can lead to (unwanted) changes in the subclass as well. A benefit of delegation is that it comes along with a higher run-time flexibility, as the delegate class can easily be changes, whereas a disadvantage is that - unlike to inheritance - delegation is not very common in most of the object-oriented languages and thus, cannot be applied as often as inheritance, that is quite popular. \n\nExample:\nIn app development, inheritance can be used when a variety of apps need to be developed that all share the same base set of functionalities. E.g., there can be one base app with all the shared functionalities from which more customized apps, representing the subclasses, inheritate. \n\nOn iOS, delegation is a widely spread method, e.g. when using the UIKit framework. By using delegation, it can for example be validated that a user put a birth date in a text field where a birth date is required. Here, a delegate is set that is notified as soon as a user finished to fill out the respective form. \n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595743,
      "meta": {},
      "text": "The difference between delegation (black box reuse) and inheritance (white box reuse) is that when using delegation we create a new class that implements the functionality other existing classes whereas when using inheritance, we create a sub class by inheriting from one single class. When we use delegation, we do not need to know the code of the interfaces that we delegate the tasks to since we simply implement their functionalities. But when we use inheritance, we know the source code. The advantage of delegation is that you do not have to worry about the source code of the interfaces but simply rely on their provided methods. You could delegate tasks that you do not want to solve yourself to interfaces that can already solve that task.\nThe disadvantage is that your code could become relatively slow if you implement interfaces where you only need one method from but they offer 100 methods. Then those methods are also loaded in but are never used and could reduce the speed of the program.\nThe advantage of inheritance is that it tends to be faster than delegation since you would only implement methods that you would need which makes the system run faster than with delegation. On the other hand, you can only inherit from one mother class which limits you to reuse only one of the existing classes.\nExample for inheritance:\nLets say there is a smartphone with a touchscreen and now you also want to build a smartphone with a touchscreen but additionally with a mechanical keyboard at the bottom of the phone. Then the new class \"SmartPhoneWithKeyBoard\" could inherit from the class \"Smartphone\" and you would then have to add the additional functionality of a keyboard.\nExample for delegation:\nBut, let's say, there are already interfaces for all the different functionalities of a phone out there, for example one for the touchscreen, one for the keyboard, one for processing the data, and so on. Then you could also build the smartphone program  for the smartphone with a keyboard out of a combination of all the necessary interfaces.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596128,
      "meta": {},
      "text": "Difference between inheritance and delegation:\n- The difference is that in inheritance the concept of reuse is based on existing implemented functionalities in a parent class while in delegation reuse is used through delegating method calls on an existing object\n\nAdvantage inheritance:\n- very simple to extend existing functionalities in the subclass\n\nDisadvantage inheritance:\n- changes in the parent class also forces changes to the subclass\n\nAdvantage delegation:\n- the Receiver object doesn't need to have any knowledge of the Delegate object\n\nDisadvantage delegation:\n- less efficient due to instantiation of a new object\n\nExample Delegate: Smartphone App\n- The delegation pattern is very suitable for a smartphone app since the GUI (Client) calls the Controller (Receiver) which in turn delegates the request to the Model (Delegate). In this case the GUI has no contact with the underlying model. I chose this example for the delegating pattern because the pattern is very flexible and this makes it very easy to reuse existing functionalies in an app in new versions of this app.\n\nExample Inheritance: Smartphone Camera\n- Inheritance is used in Smartphones to describe the possible configurations of Smartphone cameras. A base camera has methods like takePicture or recordVideo. Then there are subclasses of a camera, for example a wideangle camera which has a new method takeWideanglePicture or a front camera which overrides the basemethod, because the frontcamera got no zoom functionality. I chose this example for inheritance because the base functionalities of a camera are the same or very similiar and its easy to extend the behaviour.\n\n ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596517,
      "meta": {},
      "text": "Während man bei der inheritance entweder eine bestehende klasse mit einer methode erweitert oder eine bestehende methode überschreibt, deligiert man bei der deligation eine methode an ein anderes Objekt. Die Delegation ist flexibler, dafür aber eher ineffizient; Die inheritance ist dafür sehr einfach, wird von vielen Programmiersprachen genutzt und es ist einfach neue subklassen zu erstellen. Allerdings können änderungen in der oberklasse auch die subklassen beeinflussen und es können methoden der oberklasse die nicht geteilt werden sollen einsehbar werden.\nDelegation: Ein Betriebssystem muss auf samrtphones verschiedener marken nutzbar sein, ohne das ein update alles crasht, weshalb hier delegation genutzt werden muss. Somit kann zum beispiel auf einem Motorola smartphone genauso wie auf einem samsung smartphone android laufen,ohne dass ein androidupdate dafür sorgt, dass evtl bei einem der smartphones nichts mehr funktioniert.\nInheritance: Wenn ich bestimmte einstellungen in meinem smartphone ändere, müssen sich auch die einstellungen in einigen apps ändern: Wenn ich den nicht stören modus meines smartphones aktiviere, muss sich z.b. auch die einstellung von whatsapp ändern, sodass keine benachrichtigungen mehr ohne öffnen der app kommen.",
      "score": 91.7,
      "language": "GERMAN"
    },
    {
      "id": 5596563,
      "meta": {},
      "text": "Both inheritance and delegation are 2 different methods of reuse.  The big difference between these both, is that while inheritance can be seen as \"white box reuse\", while delegation is \"black box reuse\". (black box reuse is modelled through aggregation and compostion, whereas white box reuse is modelled with inheritance)\n\n This highlights one of the big disadvantages inheritance has. \n\nWhen \"white box reuse\" is used, all the methods of the parent class are inherited by the subclass, even if you don't want this to be the case (unnecessary exposure)\n\nOn the other hand, this is one of the advantages of the delegation, where the user of the receiver cannot access the delegate class.\n\nInheritance also has many advantages in the sense of it being easy to implement and being relatively straightforward. It's also compatible with a broad spectrum of programming languages.\n\nDelegation isn't only good either, it can be very inefficient with the number of objects needed to be created and maintained during runtime\n\nAn example of delegation would be a that of a smartphone and it's internal storage, the phone is the reciever and the storage is the delegate. The phone will have the attribute storage, but the user won't directly access the storage itself, but rather invoke methods on it by using the phone (open storage, delete apps etc...).\n\nAn example of inheritance would be the abstract class smartphone with the subclasses of f.e. a S22 and a S22 ultra (specification inheritance). All the methods in \"smartphone\" will be implemented in the subclasses, but they may contain differing methods/attributes depending on the subclass\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585106,
      "meta": {},
      "text": "when using inheritance, the created objects will have all the basic functionalities of the inherited object, and it is complicated to restrain those functionalities without altering the inherited code. Aside from that, all the methods will be handled by the new object itself, and no other objects are involved except if explicitly declared so. However inheritance is really easy to implement, having just to add a keyword at the title of the object/class \n\nDelegation on the other hand is when the created object contains an object (delegated object) of another type, and most methods are handled by both of them, they go first through the created object that may apply a restraint or similar, and then they are delegated to the delegated object which handles them the way it would normally do, considering the changes made by the created object\n\nin the context of Smartphones...\n\n\t...delegation should be used in E.g. computers, because a phone does not have all the functionalities that a computer has, however it can do most of it, including browsing the internet, downloading images, etc. Therefore the phone would have to restrain some of the methods from computers before delegating them to the computer object.\n\n\t...inheritance should be used in E.g. smartphones and flip-phones, because smartphones have all the functionalities that flip-phones used to have, and more, so it is unnecessary to make any change to the code representing the flip-phone because it already works as intended.",
      "score": 50,
      "language": "ENGLISH"
    },
    {
      "id": 5585326,
      "meta": {},
      "text": "Bei Vererbung erbt eine Subklasse von einer Oberklasse und übernimmt standardmäßig alle Attribute und Funktionen. Letztere können anschließend noch überschrieben werden. I.d.R werden noch zusätzliche Attribute und Funktionen hinzugefügt, wodurch sich die Subklasse nun klar von der Oberklasse unterscheidet. Ein großer Vorteil hierbei ist, dass man standardisierte Funktionen nur einmal in der Oberklasse implementieren muss und diese von allen Subklassen verwendet werden können. Ein Beispiel anhand eines Smartphones wäre die Klasse Buttons, welche Grundfunktionen wie push() und Attribute wie place und weight besitzt. Home-, Power- und Lautstärke-Buttons erben so von der (abstrakten) Oberklasse und besitzen sofort die genannten Eigenschaften. Da der Code nur einmal geschrieben werden muss, würde ich mich in dem Fall für die Vererbung entscheiden.\nEin großer Nachteil der Vererbung ist, dass bei Änderung der Oberklasse alle Unterklassen betroffen sind und sozusagen nicht selbstständig über ihren Aufbau entscheiden können. Wenn nun der Home-Button in den Bildschirm integriert wird, fällt nun das Attribut weight weg und muss nun bei den anderen Unterklassen einzeln implementiert werden.\n\nBei Delegation hingegen agiert die Oberklasse als eine Art Controller, indem die verschiedenen Unterklassen als Attribute gespeichert werden. So ruft beispielsweise, wenn ein Handy ausgeschaltet wird, der Befehl stop() in der Oberklasse Handy nur die Funktion stop() des Arbeitsspeichers auf, welche sonst nicht direkt aufrufbar ist. Dadurch ergibt sich der Vorteil, dass die Klassen an sich sehr eigenständig konzipiert werden können und sich in der Oberklasse nichts verändert, da diese nur die Funktionen aufruft. Andererseits hat man so auch viel mehr Code zu schreiben, da man gewisse Funktionen anderer Unterklassen nicht aufrufen kann und sich der Code sehr schnell doppelt.\n",
      "score": 83.3,
      "language": "GERMAN"
    },
    {
      "id": 5586973,
      "meta": {},
      "text": "Inheritance is when one object is a subclass of another and reuses its methods and attributes. Delegation is when an object forwards requests to another object. \n\nAn advantage of inheritance is that it is easy to reuse and extend existing code. A disadvantage of inheritance is that subclasses might need to change to adapt to changes in the superclass.\n\nAn advantage of delegation is that it can make code more flexible. A disadvantage of delegation is that it can is more difficult to implement (cannot just reuse code from a superclass) and could be less efficient due to having to create more objects at runtime.\n\nFor example, if you have an abstract class for an App each other App can inherit from it since there is a lot of boilerplate code to get an app running which can easily be abstracted away with a superclass (similar to Java swing guis all inheriting JFrame at some point).\n\nIf you have a class for a network manager each class could delegate its network requests to the network manager. Here inheritance is not sensible since then every class would be its own network manager which could come into conflict with one another trying to access the one physical network card on the phone. Also this way apps don't need to change when the OS updates the network manager as subclasses might.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5589958,
      "meta": {},
      "text": "Bei der Vererbung (\"Inheritance\") wird eine Klasse um Methoden oder Attribute erweitert. Eine vererbte Klasse enthält daher alle Komponenten, die ihre \"parent\" Klasse besitzt, und möglicherweise mehr.\nDelegation bedeutet, dass eine Klasse eine andere Klasse als Attribut hat und so auf deren öffentliche Attribute und Funktionen zugreifen kann. Im Gegenteil zur Vererbung besitzt sie jedoch nicht automatisch selbst alle Attribute der anderen Klasse. Das hat den Vorteil, dass die Klasse keine Attribute und Funktionen hat, die sie möglicherweise gar nicht benötigt. Allerdings kann Delegation weniger effizient sein als Vererbung, da für die zweite Klasse, von der Funktionen verwendet werden, zusätzlich eine Instanz erstellt werden muss.\nEin Vorteil der Vererbung ist außerdem, dass sie recht einfach zu handhaben ist und Änderungen leicht angepasst werden können. Allerdings muss darauf geachtet werden, dass Änderungen in der Oberklasse Auswirkungen auf die vererbte Klasse haben kann.\n",
      "score": 83.3,
      "language": "GERMAN"
    },
    {
      "id": 5591857,
      "meta": {},
      "text": "The concept of Inheritance has two sub categories: Implementation Inheritance and Specification Inheritance. In the following I will be concentrating on Implementation Inheritance . Implementation Inheritance means that a class has already bin implemented and this class does something very similar as the class that the developer wants to create, the developer then uses the supeclasses methods to extend or change the subclasses methods. Inheritance has the positvie aspect that it is simple to implement non existing functionalities in a subclass, because you can already use the functions of the superclass. A downside of Inheritance is that if you make changes in the superclass, that these changses can have an effect on the subclasses.  Furthermore there is a third concept, namely Delegation. Delegation means that an entity sends a request or calls a method, this operation is then caught by an Object, this object does not have the right methods to work with this operation so it delegates or sends the operation to another object where the method which is needed to complete the operation is already implemented. The positive aspect of delegation is that in most cases it is easier to adjust, but a negative aspect is that it is quite costly and time conuming, because a new object instance musst be programmed. At the end of the day both concepts reuse implemented funtionallity, but Implementation Inheritance uses functionalities from the superclass while Delegation uses functionalities from unrelated classes. \n\nSmartphones also use both concepts. For example the Samsung S9 inherits functions from the S8 but also uses these functions to produce new functionalities. In this case it is essential to use inheritance, because starting from scratch everytime a new phone comes out or trying to delegate all the funtionalites would infeasible. \n\nIn contrast sometimes choosing delegation is the better decision. For example if I use google maps and want to play music at the same time, it would not make sense to inherit the entire spotify app, but rather delegate a few essential functions. \n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5592154,
      "meta": {},
      "text": "Inheritance means that you reuse functionality by implementing the class as a subclass of the class which already provides the functionality. Delegation means your class has an object of the class which already provides the functionality and your class just sends the operation to this object to reuse its functionality.\n\nAn advantage of inheritance is that you don't need an extra attribute in your class while a disadvantage could be that the inherited operations might exhibit bahavior you don't want to have.\n\nAn advantage of delegation is that you just have the exact same method doing the job and you can be totally sure that it works if you send the operation in the right way. A disadvantage is that you need an extra attribute in your class.\n\n",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5593366,
      "meta": {},
      "text": "Difference:\nWhen we inherit for example from class A, everything from class A must be inherited. \nWhen we delegate, a new instance of class A is generated and we can call the methods that we want from it. That's to say, we can choose only part of class A to be in our new class.\n\nAdvantage and Disadvantage:\nInheritance is easy to apply but it doesn't work if we don't want everything to be taken from the superclass.\nDelegation is flexible with partial use of the superclass, however, it demands more memory because it instantiates a new class.\n\nExample smartphone:\nThe entity classes implemented in a smartphone OS can use inheritance to structure the code, for example the class audio and video can inherit from the superclass multimedia.\nIf we retrieve a service from other apps from the internet, it may needs delegation.\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595417,
      "meta": {},
      "text": "Inheritance:\nIt refers to making subclasses from an implementation (parent class) or a specification (interface) to extend / implement the functionality wherever needed.\n\nAdvantage: Easy implementation, wide support by numerous programming languages\nDisadvantage: Compromises security by exposing access to unwanted methods\n\nDelegation:\nIt refers to adding a guard in between to make sure the Client (calling class) doesn't have access to all the methods in the implementation. Adds an extra layer of security. Whenever a particular function is required / request is made, it simply delegates the request to the respective object of the class, which does the actual work and returns the data back.\n\nAdvantage: Offers more flexibility when it comes to security (more secure approach)\nDisadvantage: Requires extra object creation/instantiation, which is expensive and inefficient\n\nSmartphone context:\nInheritance:\nExtending the functionality of the calculator app. Not all native smartphone calculators can draw graphs. But they can perform all basic operations. So the functionality to, for example, draw graphs, show limits, and solve linear & quadratic equations can be added by extending the already existing functionality to do simple math.\n\nDelegation:\nThe functionality to unlock the smartphone should not be given directly to the user. Rather, there should be a Receiver which can receive and process the request to unlock the smartphone, and delegate the function call only when the user is successfully authenticated.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596387,
      "meta": {},
      "text": "Inheritance and Delegation are the 2 main ways in which code is reused (not duplicated). Inheritance is easy to use, because it most of the functionality of the class from which it inherits, after which the new functionality can be easily added. The disadvantage of this method, is that all the functionality of the upper class is inherited, which means that if there are public methods in the upper class, they will be able to be accessed also form the lower class. In many cases would cause issues and would also violate the low coupling and high cohesion principle.\nInheritance might cause hard to maintain code, because changes in the higher class could cause changes in the class that inherits from that.\nOn the other hand, Delegation can mitigate many of the problems that inheritance has. The main problem of delegation is that it is harder to implement, because for every functionality that needs to be inherited from the delegated object, needs to have a method of its own that calls onto the functionality in the delegated object. Even if it is harder to implement, delegation solves the main problem with inheritance, because it will hide all the unwanted functionalities from the reused class. Delegation is usually more flexible, because not all functionalities must be taken into account, but can be inefficient, if constructing the object takes a lot of time.\n",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596646,
      "meta": {},
      "text": "When we compare the difference between inheritance and delegation we can see them as two different relationships:\n\nInheritance means that our class has an IS-A relationship with another class. \nTherefore, we duplicate a lot of the class code from the class we inheritate from and either remain its functionality or give it new functionality. The duplication of the code might lead to having or exposing some methods of the parent-class which are unwanted which is one disadvantage of inheritance. \n\nExample: When looking at the development of Smartphones or lets say iPhones we will always have base functionalities of the IPhone developed in a previous period. So we can say that there is a parent class called iPhone. Now as we now from Apple, they develop multiple versions of different iPhones (13, 13 Pro etc.). Each new version inheritates functionalities of the previous one, but also has new implementations of functionalities and additional features but at the end it IS-AN iPhone. \n\nDelegation means that our class has an HAS-A relationship with another class.\nTherefore, we have an instance variable inside our class that references to the object of another class to use its functionality. Having an instance variable inside our class means that we always need to instantiate it which is a disadvantage of delegation. \n\nExample: When we now look at our smartphone example we can consider the clock inside our iPhone as an object for delegation. Our smartphone is not only a clock but it has a clock and needs to use its functionality to tell the time, set an alarm or to remind us of the upcoming EIST lecture. We use an instance of the clock \"in\" our iPhone to use its functionality, so our smartphone HAS-A clock. \n\n",
      "score": 58.3,
      "language": "ENGLISH"
    },
    {
      "id": 5586473,
      "meta": {},
      "text": "\ninheritance is about  a class called subclass that inherits and takes all the attributes and the methods from another class called Superclass .\n Advantage : Understandablity ( provides a clear structure) /disadvantage : memory waste on case of unused methods \n\nDelegation is about using an object from another class as an instance variable and forwarding method calls to this varibale called delegate . \nAdvantage : run-time flexible / Disadvantage : not supported by all object oriented languages ",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5593569,
      "meta": {},
      "text": "The main difference between inheritance and delegation is, that inheritance bundles classes of the same type and delegation a method that is used in multiple, different classes.\n\nDelegation can be used to simplify the code writing process through centralizing a certain method that is used in many different classes that differ in their implementation in major ways.\nInheritance works similarily, but it uses a super-class that is a generalization of the sub-classes of that super-class.\n\nThis leads to centralized functions in both cases while inheritance is \"in-house\" and delegation externally.\n\nI am going to use the smartphone term a bit wider. The one \"class\" will be your typical mobile phone (e.g. iPhone) and the other the tablet (e.g iPad). They are all in the same \"super-class\" of smartphone.\n\nAn example where delegation could be used is with the buttons attached to the tablet and mobile. Usally both have a volume and power button with similar functionality.  In those cases you could define a method volume() in the \"super-class\" smartphone and from there out use them through inheritance reducing the code written twice or more.\n\nDelegation is used in apps using the different libraries from the OS. E.g. the system uses the IO-Library to get the touch inputs of the user to allow further functionality. The library is the part in the system delegated to. This is useful that not every developer needs to write e.g. IO-Functions for every system, that may differ in the implementation but not in the result that they put out.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594738,
      "meta": {},
      "text": "Inheritance and delegation are two different ways of reusing software. When using inheritance, a subclass is created that itself contains the functionalities of the superclass (subclassing).\nCompared to that, when using delegation the used class does not contain the functionality itself, but the tasks are delegated to object that are stored as attributes (aggregation or composition). \n\nAn advantage of inheritance is that it is easy and straightforward to use. In most programming languages, it only requires a few words to be added to the source code. On the other hand, inheritance can cause the subclass to inherit unwanted methods from the superclass.\n\nDelegation has the advantage that it only exposes the required functionality to the user and nothing more. However, it also has the disadvantage that it is less efficient, because it requires object insantiation to access delegated functionalities.\n\nAn example for delegation in the context of smartphones is the use of APIs within an application. Smartphones have different computational powers and in order to provide equal services to all smartphone users, I would delegate most functionalities to an external server which can be reached through an API. This would make computationally complex operations (e.g. sorting) accessible to any user with approximately the same speed.\n\nAn example for inheritance in the context of smartphones is the implementation of apps using pre-defined templates. When implementing an own application, the functionalities of the template are extended. I would use inheritance because the templates usually provide low-level implementations that are definitely required for the own application.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595846,
      "meta": {},
      "text": "Delegation vs. inheritance: both reuse some already implemented functionality, for delegation the functionality of an existing object, but for inheritance the functionality of a superclass. \n\n+Advantage of Inheritance:  Easy to implement new functionality in the subclass\n-Disadvantage of Inheritance: The client can misuse some methods that should not be publicly published.\n\n+Advantage of Delegation: The client can not misuse any methods in the delegate that are not publicly published.\n-Disadvantage of Delegation: Might be more inefficient, because an object instance needs to be created.\n\nExample:\nDelegation:\nIn case of a banking app, to prevent the client from changing the transfer that he already done we use the concept of the client calls receiver, and the receiver delegates to delegate.  The existence of the receiver makes sure that the client cannot “misuse\" the delegate and misuse the completed transfer.\nInheritance:\nIn case of android software, when we want to add a new functionality in an update it's easy to implement new functionality in subclasses.\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596188,
      "meta": {},
      "text": "Bei Inheritance erbt eine Klasse alle Attribute und Methoden der Elternklasse, und kann dadurch Attribute, Methoden oder Implementierungsdetails nach außen hin freigeben, die für die eigentliche Funktion der Klasse nicht erlaubt sind. Außerdem können auch unnötige Methoden nach außen angezeigt werden, wodurch es beim Auswahl einer Methode zum Aufrufen schnell übersichtlich wird.\nDelegation speichert ein Objekt mit den gewünschten Funktionen ab, und in der Klasse werden Funktionen erstellt, die nach außen hin sichtbar sind. Dadurch kann man besser kontrollieren, welche Funktionalitäten nach außen sichtbar sind und illegale Zugriffe oder Überfluss an Methoden verhindern, allerdings muss man auch im Gegensatz zu Inheritance extra Methoden schreiben, die den Funktionsaufruf weiterleiten. Dadurch wird der Aufruf langsamer und der Stack voller.\nBeispielsweise sehen Smarthphone Apps auf verschiedenen Geräten unterschiedlich aus, oder haben teilweise sogar etwas andere Funktionen, dementsprechen werden sie mit Delegation implementiert, damit nicht die falschen Funktionen auf den falschen Geräten ankommen\n",
      "score": 66.7,
      "language": "GERMAN"
    },
    {
      "id": 5585109,
      "meta": {},
      "text": "Using inheritance, a subclass receives functionality from the superclass and can extend the given functionality. Therefore the subclass has at least the functionality of the superclass (except of the private members of the superclass). Therefore the subclass exposes all the functionality of the superclass which is a disadvantage because sometimes that behaviour is not wanted (for example if a stack extends a list the methods remove, add... shouldn't be visible to the user). An advantage of inheritance is that it's very easy to add new functionality in the subclass.\n\nWith delegation, the available operations get delegated to an instance of a class which implements the functionality. So the client calls the receiver which sends the request to the delegate which ultimately processes the request. Using delegation it is possible to expose only specific functionality and the implementation can better be hidden from the user which is an advantage. A disadvantage is that an instance of the delegate needs to be created which can be more inefficient and take up a lot of resources.\n\nInheritance in the context of smartphones is for example that the functionality is inherited. Every smartphone and also their predecessors were able to make calls. So make a call is a functionality that all smartphone inherit. This makes sense because the core-functionality is the same for all kinds of smartphones. An example for delegation is an app where you can add a profile picture and the app delegates to the user the task of making a new or choosing an existing image.\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585793,
      "meta": {},
      "text": "Delegate is simply passing up a task to another class, wich the delegte class refers to, by calling a methode in the other class. Both classes are not cognate to each other. In inheritance the lower child class inherit frome the motherclass, they are cognated. In inheritance, the cild class can now directly call a methode frome the upper class. So the child class passing up the task not to another class, its directly using a method frome the mothers class.\nDelegate  has the advantage of a higher flexebility, but the disadvantage of beeing potencial more inefficent. On the other side in inharistance, when the parent class get changes, this also effect the child class, wich could have bad consequenzes. But inharistance has the advantage that it is supported in many programming languages.\nIa the context of smartphones, i would choose f.ex. a parentsclass Apps, where all actions all apps have to ensure (g.ex. the app has to have the functionality of beeing deinstalled) where described, but only theses, wich is an example for inheritance. On the other side i would use deligation for the connection between an app and the class widgets, where f.ex you can create a text widget for this app if supported. In this case, i only want to use some methodes frome widgets and not all when f.ex. the app doesn support picture widgets, the app shouldnt be allowed to create these, but support text widgets, so have a connection to widgets to create text widgets.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5586547,
      "meta": {},
      "text": "Inheritance refers to an OOP concept in which a subclass can extend a super class with additional attributes and methods. Without inheritance, classes that have similar functionality would need to exist all on there own and there would be a lot of code duplication. Inheritance allows for a technique called white box reuse. You can inherent from a class that already implements most functionality you need and just extend some small parts. The draw down is, that you need some knowledge about the details of the subclass and you cant hide certain functionality that has already been made public by the super class (Visibility issues), this can lead to problems if different developers use/implement sub and super class.\nDelegation is using an existing class and it's public methods (the interface to this class) to delegate the work to it. This is called a black box approach, because you don't need to understand how the class you are using works, just what the methods do on a high level. A benefit of this approach is that it prevents \"misuse\" of the delegate class, because the receiver that forwards the calls to the delegate can decide which functionality is offered to the caller. A downside is that there is a additional class in the code base which itself does not add to the functionality of the system and decreases runtime efficiency (slightly) because every call has to be forwarded and result in 2 total calls.\n\nIn a smartphone inheritance would be a good choice for something like an system menu, because it shares lots of common features across different devices. If a new device support a new technology such as NFC or bio-metric authentication, the menu can be subclassed and these new options can be added without affecting much the already well known and tested rest of the menu.\n\nDelegation would be a good option to talk to a class/interface that handles wireless communication. The methods and interface that is needed to connect to a wlan almost always stays the same, but the implementation might change often independent of the specific phone, e.g. when a newer faster standards is released or 5GHz support is added to previous 2.4GHz hardware.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5594069,
      "meta": {},
      "text": "Inheritance describes the process by which one class takes attributes and methods of an existing class (the super class), which serve as base for the new class. Delegation on the other hand, lets you use methods and attributes of another class, by redirecting the requested operation to an instance of this class and so take advantage of already implemented functionality.  An advantage for delegation is, that it is more flexibal in general. As example, the class which wants to use the functionalities of another class, does not have to accept all methods and attributes of the super class. Delegation makes it possible to only accept the functionalities needed. An disadvantage on the other hand is, that it might be inefficient becuase of the object instance that needs to be created. An advantage of inheritance on the other hand is, that it has the possibility to not only copy attributes or methods from the super class, but also to easily  extend the funciontality and implement new funcionality in the subclass. A disadvantage is, that because a subclass inherits methods from the parent class, it might expose unwanted methods. \nAn example where I would use the IS-A relationship of inharitance is a Class which as example does not only use the functions of a camera, but also needs to be used as camera object for other methods. In this case using delegation would not work, because the class can not be used as camera object. On the other hand a class which only needs to use the function of the smartphone camera, and not as a camera object itself, could create a camera instance and use the applicable function via delegation.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595767,
      "meta": {},
      "text": "Inheritance means a child-parent relationship between two classes. That means the child gets attributes and methods from his parent and is not an instance, but a class.\nMeanwhile, delegation means that an instance of a different \"3rd party\" class is used and messages are \"laid off\" to that instance.\n\nDelegations:\nAn advantage is that delegations are faster performance-wise because they do not have to inherit all the bulky load from the parent class, but can be instead instanciated directly.\n\nA disadvantage is that the attributes are not directly accessible and therefore if you want to edit something that is not exposed through a setter/getter, you don't have access to it.\n\nExample: \nThe camera function: We do not need any deeper access to the camera module, what day it was manufactured and the pixel... We just want a method to call to give us a photo back.\n\nInheritance:\nAn advantage is that inheritance can give broader access to the parenting methods and attributes and if the child method needs some special change that was not previously thought of, it's more likely this change can be done without changing anything in the parent class.\n\nA disadvantage is that inheritance could expose some methods and attributes that the child doesn't need, in case of functions that are important for the parent element, but not the child element. \n\nExample:\nWidgets - You probably want to enhance widgets with your own methods and design, not only lay off your methods to some system-defined ones.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596178,
      "meta": {},
      "text": "Inheritance:\n\tExtending a base class by a new operation or overriding an existing operation.\n\n\tAdvantage:\n\t—There is already a class that does almost the same as the new class should.\n\n\tDisadvantage:\n—The inherited operations might exhibit unwanted behaviour.\n\nDelegation:\n\tCatching an operation and sending it to another object.\n\n\tAdvantage:\n\t— More flexible\n\n\tDisadvantage:\n\t— Might be more inefficient, because an object instance needs to be created\n",
      "score": 75,
      "language": "ENGLISH"
    },
    {
      "id": 5596709,
      "meta": {},
      "text": "Inheritance is that a class has some subclasses, and the subclass can rewrite or directly use the function of the superclass. A delegation is a class that invokes a function from some interface to perform an operation. For inheritance, a class can only inherit from another class, and in delegation, a class can implement multiple different interfaces.\nThe advantage of delegation is that the same class can refer to multiple interfaces, which makes it more flexible. But at the same time, the disadvantage is that it is more difficult to implement than inheritance, because inheritance usually only needs to inherit the functions of the superior class, but the interface needs to rewrite the functions.\nThe advantage of inheritance is that it can directly use the functions of the superior class, or it can be rewritten, or in other words, it can conveniently use the functions of various superior classes. The downside is that if the superclass is changed, all subclasses connected to it may also be changed, so it lacks independence.\nTaking a smartphone as an example, the operations of a mobile app can be divided into left swipe, right swipe, double tap and so on. You can create a main class called actions, and then swipe left, swipe right, and double tap as subclasses for actions. You can also swipe left, swipe right and double-click as different interfaces, and then implement them in operations or other classes (such as touching the screen)",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5586534,
      "meta": {},
      "text": "Implementing Inheritance means that a class takes on properties of another class. So the child class (subclass) takes on attributes and behavior from the parent class.\nIn contrast to that, delegation means passing on an operating / a task to another object, where it has already been implemented.\n\nA disadvantage of inheritance is that the inherited operation might exhibit unwanted behavior. \nAn advantage of inheritance is that it is very easy to implement new functionality in a subclass.\n\nA disadvantage of delegation is that it is not directly supported by many programming languages.\nAn advantage of delegation is that the delegate can easily be changed at run-time and therefore its run-time flexibility.\n\nFor example delegation should be used for the functionality of home screen shortcuts on smartphones, which delegate the expected operation to the concrete App.\nAn exemplary use case of inheritance would be  that special messenger apps on a smartphone inherit the basic functionality from the standard messenger app of the system.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5588212,
      "meta": {},
      "text": "Inheritance and delegation are both concepts in the context of reusing components.\nInheritance can be used if a base class already exists that has similar functionalities as the desired class. We can extend this base class by new operations or override existing operations. \nAdvantages of inheritance are \n1) No instantiation of the parent class is needed \n2) It is easy to implement new functionality in the subclass.\nDownside of this concept are that \n1) Inheritance may expose some (unwanted) methods of the parent class and \n2) Changes in the parent class can force the subclass to change as well.\nIn the context of smartphones, we could have an abstract class “Camera”. The subclasses “FrontCamera” and “BackCamera” inherit functionalities from the parent class. The concept is preferred here as there is a close relationship between parent and child.\nDelegation reuses the functionality of existing objects by using object instantiation and method calls:\n1) The client calls the receiver, \n2) The receiver sends the request to the delegate, \n3) The delegate executes the request.\nAdvantage of delegation are \n1) it is flexible to use and \n2) the receiver makes sure that the client cannot invoke methods that are not public to the receiver.\nHowever, it might be inefficient since an object instance needs to be created.\nIn the context of smartphones, a click on the DisplayUI (Client) may call the method makeSound() in the class \"SoundBahavior\". This method delegates the execution of playing a sound to another class.\nThis concept is preferred here as the method call can invoke different segments of code at runtime.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595981,
      "meta": {},
      "text": "Inheritance describes the situation a  new class is created by subclassing. This is the process when one class (subclass) takes over  the property/ functionality  of another other class (super class) and maybe also offerering new functionality.  The advantage here is its straightforwardness and its easiness to implement new functionality into the subclasses.  A disadvantage being its difficult maintenance because changes in the parent class can force the subclass to change as well.\nAn example in the context of smartphones would be for instance in an mobile gaming app where you use gold  and diamonds as currency, that you use Inheritance while programming the class Diamonad as a subclass of the gold class because its needs the same methods, properties and functionalitys as the gold class and only a few others.\n\nDelegation on the other hand describes the process of is passing a duty/method off to another class by reusing functionality of existing objects using object instantiation and method calls. The advantage here is its Flexibility due to for instance not needing relationship between both classes.A disadvantage being its Inefficientcy in some cases, because an object instance needs to be created. Furthermore delegation is not directly supported by most popular object-oriented languages.\nAn example in the context of smartphones would be for instance in an app where you can create pictures with diffrent shape each with individual colours and functionlitys which the user can choose. In this case the class of the picture just creates an object of the shape and delegates the method of the colour or a functionality to it.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5588110,
      "meta": {},
      "text": "The difference between inheritance and delegation is that while inheritance implements the parent class directly, delegation uses an object of a class with instance variables.\n\nInheritance:\n\nAdvantages:\n1. Reduces the amount of code that has to be written as many of the attributes and methods are shared between the subclasses\n2. Helps with the organization of the system by providing a clear system structure\n3. Changes within the system are more flexible because only the parent class has to be changed\n\nDisadvantages:\n1. When there are too many levels of abstraction in the system this leads to the program having to jump through these levels of abstraction each time.\n2. Classes become strongly coupled meaning it's difficult for the classes to be independant\n\nDelegation:\n\nAdvantages:\n1. Classes are more independent meaning that it is easy for the class to have unique features that doesn't exist in other classes\n2. Easy to compose behaviour at run time\n\nDisadvantages:\n1. Less structured which can lead to the system being harder to change\n2. Relationships between classes are less obvious",
      "score": 50,
      "language": "ENGLISH"
    },
    {
      "id": 5591761,
      "meta": {},
      "text": "In Delegation wird eine Operation abgefangen und an ein anderes Objekt (welches bereits implementiert ist) weiter gesendet. Dadurch wird der bereits Implementierte Teil, durch object initialization wieder verwendet. Der Vorteil davon ist, dass besser Gesteuert werden kann, welche Methoden von den reused Object benutzt werden sollen und benutzt werden dürfen (Flexibilität). Ein Nachteil ist die Performance, da eine extra Objekt Instanz erzeugt werden muss.\n\nBei  Implementation inheritance wird auch bereits teilweise implementierter Code wiederverwendet, jedoch durch das Erben von einer Superclass und das verwenden der Super-methoden.  Bei Specification inheritance wird nur die Funktionalität bereits vorgegeben (z.B. Interfaces) aber noch nicht implementiert. Der Vorteil dieser Art der Implementierung ist, dass auch die Methoden Superklasse aufgerufen werden können und man kann sofort erkennen auf welche Struktur die Klasse/das Objekt aufgebaut ist. (z.B. erbt der Stack von List, wodurch auch alle Methoden von List für den Stack verfügbar bleiben). Dies kann evtl auch zum Nachteil werden, wenn man nicht jede Methode der Super Klasse nach draußen hin öffentlich haben will.\n\nSmartphone Beispiele:\nInheritance:\nBei Handy Chat Apps (wie WhatsApp, Threema usw) gibt es die möglichkeit Fotos zu machen bzw. Fotos zu verschicken. Hierbei kommt das Reuse Konsept  inheritance zum einsatzt, da die App eine eigene Kamera \"implementiert\" und die Funktionen von typischen Kamera Apps übernimmt, bearbeitet.\nDelegation:\nBei vielen Chat Apps kann man zudem auch Dateien verschicken, hierbei fangt die App die anfrage ab und gibt sie an die jeweilige Schnittstell/API des OS weiter über ein initialisiertes Objekt",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5593072,
      "meta": {},
      "text": "The focus of the two concepts 'delegation' and 'inheritance' targets the reuse of existing functionality, both having different approaches. Inheritance works with creating new classes through subclassing, thus the new class reuses the functionality of the superclass while also possibly adding new functionality. Delegation on the other hand achieves reuse through creating instances of existing classes that have the desired functionality and then calling methods on these instances. \n\nAn advantage of inheritance is the simplicity of implementing new functionality in the subclass. Through subclassing, the existing functionality can be reused and new aspects can easily be added and again inherited. On the other hand is the new subclass bound to its superclass and thus affected by changes in the superclass.\n\nAn advantage of delegation is the additional flexibility that is achieved by going with this concept instead of inheritance. When only one method of another class is needed, delegation is just more straightforward. A disadvantage lies in the performance of delegation: creating instances and calling methods on them is an extra step and thus requires time which in some cases a software doesn't have.\n\nExampleInheritance:\nWhen developing a game for a smartphone in which one can build with different kind of blocks I would definitely use inheritance and create subclasses for each type of block which adopt the basic functionality of the superclass. This makes it much easier and efficent to reuse and create new functionality.\n\nExampleDelegation:\nWhen implementing the operating system of a smartphone its better to use delegation and calling of already implemented methods in other classes for system time, with inheritance not making much sense in that scenario. \n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595111,
      "meta": {},
      "text": "The difference between inheritance and delegation is that in inheritance a subclass is created of the implementation which can access the methods of the superclass on top of adding new methods. In delegation a receiver catches the method call from the outside and delegates it to another object. The upside of inheritance is that it is very easy to implement with the use of subclass and superclass. The downside is that the subclass might inherit unneccesary methods which can lead to unwanted behaviour. The upside of delegation is that it allows for more flexibility, but it might be less efficient, because an object needs to be instantiated for the method call.\nAn example of delegation in the context of smartphones can be seen in the process of denying access to restricted websites on public networks. The router receives the request and evaluates it and sends the request to the server afterwards. So the router acts as the receiver and the server as the delegate.\nAn example of inheritance in the context of smartphones occures in the app \"Hay Day\". There is an activity where the player can feed or harvest the produced products of farm animals. The different kinds of farm animals inherit their method specification from the superclass, e.g. beFed(), produce() or beHarvested(), which are then implemented in the respective subclasses. An example is that the chicken produces eggs and needs chicken feed whereas the cow produces milk and needs cow feed.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595620,
      "meta": {},
      "text": "An implementation is an inheritance, when the needed features of class are \"inherited\" from a superclass. For delegation, we call a method in another class, where the needed feature is implemented.\n\nThere is a very strong connection between a class and its subclass. All of the implemented methods of the superclass can be accessed through the subclass, unless the method is overwritten. This makes it very easy to have methods of a general type available in more specific classes. If this kind of tight connection is not required, we should avoid using inheritance because unneeded methods can make their way to our class. I would use inheritance for the notification system of a smartphone. There are several types of notification like system notifications or app notifications. They are different but for handling both, we need certain methods which are exactly the same. It is clever to define an upper notification class, where the basic functionality of a notification is defined.\n\nDelegation makes our program quite modular, which is a good thing for designing systems. We can focus on developing features instead of thinking about hierarchies. We have more control over the concrete execution and we could even change the implementation being used during runtime. Delegation gets complicated if we want to implement similar classes that need similar methods. It gets quite cumbersome to define separate methods for all of the needed features. An example could be a Gesture Detector  in a mobile OS, which makes gesture detection available to all parts of the OS and other apps. Every developer can use delegation to access those features, since there is only one touch screen.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596249,
      "meta": {},
      "text": "Differences:\n\tInheritance adds functionality to a subclass or changes the current implementation while delegation merely fasts the problem forward to another object that may already have the implementation needed to solve a problem. \nInheritance:\n\tAdvantage:\n\t\tHigh compatibility with most programming languages resulting in a simpler implementation.\n\t\tIt is very easy to just add features.\n\tDisadvantage\n\t\tThe structure and functionality of the parent class is exposed, resulting in high coupling\n\tExample:\n\t\tFoldable smartphones may need their own implementation of supported software. Adding extra functionality for this specific use case is most easily done by inheritance to a subclass corresponding to foldable smartphones. In this instance you generally want access to the implementation of the superclass, therefore higher coupling is not as much of a problem.\nDelegation:\n\tAdvantage:\n\t\tHigher flexibility, because coupling is kept low by only delegating the task to another object\n\tDisadvantage:\n\t\tAn instance of another object is required to delegate the task, which might need to be newly generated\n\tExample:\n\t\tDelegating scanning of QR-codes to the camera in a smartphone instead of adding a new QR-code scanner to the smartphone. The already existing hardware and to some extent software with similar functionality can be reused, therefore saving resources.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596343,
      "meta": {},
      "text": "-> Inheritance is the term used to describe the process by which one class takes over the features of another class, i.e. the new classes called child classes take over the attributes and behavior of the already existing classes called parent classes.\n\tAdvantage: Easy to implement new functionality\n\tDisadvantage: Inheritance reveals some (maybe unwanted) methods of the parent class\n\tExample: There is a parent class called MobileDevice and there is a child class called Smartphone. \t\t \n        Smartphone has all of the attributes and methods that MobileDevice have and additionally it has his own \n        methods.\n\n-> Delegation means passing on a given task to someone/something else.\n\tAdvantage: Flexible\n\tDisadvantage: Could be inefficient\n\tExample: Siri does search the question on the internet and give the answer to us.\n\n\n\n",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5585125,
      "meta": {},
      "text": "Inheritance allows for the extension of functionality of an existing class in a new one. \n\nThis can be beneficial, as it is often very simple to add new functionality in subclasses, and removes the need to copy methods multiple times for different classes when they are not changed in any way, thus making the software structure more streamlined.\n\nIt can however be problematic when certain methods of the superclass should not be usable in the subclass, for example wehn implementing a stack from the functionality of a list-class. The list has functionality like adding and removing objects to and from any postion, but the stack should only allow creation and deletion on the top( front ).\n\nDelegation in this example acts as a filter / relay for method calls. \nAn additional class may be added between the stack and list, which can alter received method calls from the stack before delegating it to a list-object.\n\nThis enables more flexibility, as certain parameters, such as stack-size can be accounted for in the relay-class, before passing it to the list.\n\nHowever, with delegation more objects must be created, causing more communication overhead and computing requirement.",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5585225,
      "meta": {},
      "text": "Der Unterschied von Vererbung und Delegation ist, dass bei der Vererbung eine Unterklasse vielmehr von der Oberklasse erbt und diese nur um z.B. neue Methoden, Attribute erweitert oder alte überschreibt. Dagegen wird bei der Delegation eine Operation so implementiert, dass sie von einer Klasse eine Nachricht an die andere weiterleitet bzw. sendet. Sie verwendet also ein existierendes Objekt wieder. Die (zwei) von der Delegation betroffenen Klassen können unterschiedliche Namen für die (gleichen) Methoden haben, da nichts vererbt wird.\nDer Vorteil von Delegation ist, dass Objekte mit gleichen Typen bei der Laufzeit durch andere einfach ersetzt werden können und somit flexibel sind. Bei der Vererbung geht das nicht, da z.B. eine Veränderung in der Oberklasse zu Veränderungen in den Unterklassen führen kann. Zudem hat Vererbung den Nachteil, dass das Prinzip des \"information hiding\" (= möglichst wenig interne Klasseninformationen nach außen sichtbar machen und dadurch Subklassen nicht zu erlauben, Sachen zu löschen oder zu verändern) verletzt wird, da die Unterklasse alle Details der Oberklasse sieht und verändern könnte. Dagegen hat Vererbung den Vorteil, dass man dadurch den Programmieraufwand reduziert, übersichtliche Strukturen hat und Unterklassen schnell und leicht implementiert werden können. Zudem ist Vererbung in vielen Programmiersprachen möglich -Delegation nicht- und effizient. Durch die Kapselung von Objekten hat Delegation den Nachteil ineffizient zu sein. \n\nBeispiel: \nEin Smartphonebeispiel für Vererbung sind verschiedene Smartphonemodelle z.B. von Iphone. Dadurch kann Iphone13 die Oberklasse sein von der die Unterklassen Iphone13mini, Iphone13, Iphone13pro, Iphone13proMax erben. Vererbung wird gewählt, da die grundlegenden Funktionen und Methoden der Handys sind gleich oder nur leicht verändert, diese können aber in den Unterklassen angepasst werden: z.B. bessere Kamera (methode: zoomen()) für die Modelle pro und proMax. \nDelegation mit Smartphones kann so erfolgen, dass man das Konzept des Smartphones von anderen älteren Modellen verwendet und aud neuere Modeller (mit Anpassung) anwendet. Zudem können die Smartphones und Funktionen auch als Vorlage für Ipads dienen. Delegation wird hier gewählt, da der Aufbau und einige Funktion, wie z.B. Apps sehr ähnlich/gleich sind und einfach von älteren existierenden Systemen übernommen werden kann.\n\n\n\n\n//In Anlehnung an meine Abgabe vom letzten Jahr: \nhttps://artemis.ase.in.tum.de/courses/121/text-exercises/4238/participate/808573",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5586695,
      "meta": {},
      "text": "-Delegation is an alternative to inheritance for reusing code among multiple classes.\n-In the case of inheritance, a reusing class has an IS-A relationship with a reused class. In the case of delegation, the reused class HAS-A reference to the reused class. Whenever one class inherits another class, it is called an IS-A relationship. Whenever an instance of one class is used in another class, it is called HAS-A relationship. delegation allows the reused class to have an arbitrary interface – not one that is a subtype of the interface of the re-used class.\n\n- Delegation:\n   1.Advantage:\n        -It is better than inheritance for many cases because it makes you to think about each message you forward, because the instance is of a known class, rather than a new class, and because it doesn’t force you to accept all the methods of the super class: you can provide only the methods that really make sense.\n       - The primary advantage of delegation is run-time flexibility – the delegate can easily be changed at run-time.\n  2.Disadvantage:\n       -delegation is not directly supported by most popular object-oriented languages, and it doesn’t facilitate dynamic polymorphism.\n\n- Inheritance:\n  1.Advantage:\n      - There is no need to instantiate multiple classes.\n      - There is no need to define stub methods that forward calls – the more the reused methods the\nmore the effort involved in defining the stubs.\n      - Callbacks do not have to be public.\n  2. Disanvantage:\n      -Main disadvantage of using inheritance is that the two classes (parent and child class) gets tightly coupled\n\n-Example: Smartphone\n    - A smartphone A can inherit some functionalities like call, receive calls, text and send texts to another phone, or connenct with another phone via Bluetooth,..., that is, delegate to, phone that has connection (sim card)\n\n\n\n                 ",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5588772,
      "meta": {},
      "text": "Inheritance is to describe the situation where the subclass will inherit the methods and properties of the base class. \nPro: it has a high code reusability and readability, which is more straightforward \nCon: it creates a high dependency between the base and inherited class  and could lead to many additional changes \nSmartphones Example: If the old smartphone has the function of making phone calls. Then the new smartphone will also have the function of making calls. Mobile applications that inherit templates must have the same function. \n\nWhereas, delegation means passing a task off to anywhere else. In other words, it is used to simplify the functionalities into a common grouping. \nPro: it can easily be changed at run-time, high flexibility\nCon: it might be more complicated and inefficient to implement due to an additional object instance and it can increase the number of classes in the system design. \nSmartphones Example: The twitter app call the photo function from the Android operating system to take a photo and add into tweet. The Facebook app also call the same low-level functionality in the Android OS to take the photo and send in Facebook. They both pass the taking photo action to the Android OS. For delegation different mobile applications will get different authorization results when calling the permission system",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5587899,
      "meta": {},
      "text": "Delegation means creating an Object instance in another class oh which the Methods and functionality of the Object can be called. While this approach is generally more flexible, it is also inefficient because an Object instance needs to be created.\nIn smartphone software, a system provider such as Apple could provide a Control-Class, which can be instantiated within a developers app (through delegation) and give the developer access to certain system controls he/she needs for the app and therefore reuse the system-providers functionality.\n\nInheritance means extending a base class by a new one which can then provide additional functionality. While this approach is easy to use and new functionality is easily implemented in the subclass, is creates a dependency between the sub and superclass, which goes against other design principles such as low coupling. Higher coupling means, that changes in the parent-class might force changes to the subclass.\nWithin a smartphone system like iOS, developers first started authenticating users by TouchID, later FaceID was added. In this case letting FaceID inherit from the same parent-class from TouchID (lets call it Authentication) could make FaceID be able to reuse common functionality.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5592361,
      "meta": {},
      "text": "Inheritance extends a class by a subclass. The subclass inherits all methods of the superclass and can add further methods. Inheritance is supported by many programming languages. However, inheritance creates a strong relationship between super- and subclass which can lead to complications once the superclass is changed. \nDelegation distinguishes between Receiver and Delegate. Some operations of the Receiver are not implemented in this class itself but need to be delegated to the Delegate which provides the functionality. Delegation grants a higher degree of flexibility compared to inheritance. However, the delegation of a task requires communication between two initialised objects which needs more computing power. \nExample Delegation: An app simulating a darts match has a really important class which keeps track of the score of both players. It has a method named addScore() which adds points after a player successfully hits the target. Since this class is so important it is made final to avoid confusions that could be caused by inheritance. The addScore() method however can also be used to add points to a player's universal score. This function can now only be accessed by delegation. \nExample Inheritance: An app that converts currencies has a class for the conversion operation. The operation convert() is abstract and needs to be implemented depending on the two currencies that are used. Otherwise all other functionalities of the conversion class can remain the same. An efficient way to implement this is by using inheritance and changing the convert() method in each class. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596451,
      "meta": {},
      "text": "Inheritance vs. Delegation is a different in design and implementation of software algorithms, patterns, and general principles. Inheritance advantages can be viewed as more simple to use, more generalized support in programming languages (core supported design in OOP ergo subclassing in most languages) and easy extensibility of functionality in subclasses due to overriding, etc. Disadvantages of inheritance are the potential to unintentionally expose superclass methods (as they can potentially be used in sub classes if not explicitly changed) as well as changes in the top of the hierarchy (superclasses) leading to necessary subclass changes. \nAdvantages of delegation can be that it is generally more flexible (due to the ability to individually tailor a client call -> receiver -> delegate relationship). But a disadvantage could also arise from the same benefits, that instantiation of objects is needed to arise, which could lead to more complex models and runtime scenarios (for debugging or testing). \nOne could use inheritance in the context of smartphones to create many versions of an OS based so that the underlying superclass can contain generic OS information and subclasses can override specific phone type specifications (screen size, refresh rate, battery optimization, etc.), which would be beneficial to reduce duplicate code with simultaneously making multiple products.\nOne could use delegation in the context of smartphones to develop an app that loads data based on existing api's or data types (e.g. genreating user specific content from a JSON file that is encoded using a general JSON library),this would be beneficial to use existing libraries and modify it quickly to your use case.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5583937,
      "meta": {},
      "text": "Both delegation and inheritance are used for code reuse. But the difference is that inheritance uses the IS-A relationship for reuse, while delegation uses the HAS-A relationship to reuse code. Which means that for delegation a new class must be instantiated and call an existing method, while with inheritance you are creating a subclass and can invoke methods from the parent class.  \n\nThe advantages of using delegation are there's no need to instantiate multiple classes, its easy to use and its straightforward to add functionality in the subclass. But it also has drawbacks, inheritance may lead to unused data members which waste memory, inherited functions are also slower than normal functions because of the indirections and parent and sub-class get tightly coupled, so a change in parent will affect all subclasses.\n\nThe advantages of using inheritance are the reused class does not interfere with existing classes, multiple delegations can share the same class, and it's generally more flexible. But it's sometimes less efficient because it has to be instantiated.\n\nFor example the smartphone smartphone can be reused as an Iphone, Android and Window-sphone. (Inheritance) And when using an App to pay wirelessly like Samsung Pay the app doesn't do the actual payment but delegates it to the smartphone component and API. (Delegation)",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5584185,
      "meta": {},
      "text": "When using Inheritance a subclass is created which inherits all properties of another (parent)class. The child class (subclass) takes over all methods from the parent-class and implement them and potentially additional functions. \nThe primary advantage of inheritance is that there is no need to instantiate multiple classes and stub methods which forward the calls and thus it minimises duplicate code.\nThe biggest disadvantage however is that two classes get tightly bound together and cannot be used  independently. This decreases the execution speed and efficiency. \nAn example would be a \"Smartphone\" parent class with its subclasses iPhone, android phone, windows phone. I would determine specific smartphone features in the parentclass e.g camera, phoneservice, touchscreen,... that can be inherited by the other classes. Additionally there can be software specific features only in subclasses.\n\n\nWhen using Delegation one creates an instance variable of another class and forwards the duties to the instance. One calls a method on the created object. The functionality of existing classes is used. \nA big advantage of delegation is that developer can choose freely which methods are needed in another class and is not forced to simply accept/implement all of them. \nAdditionally it has a high run-time flexibility as it can be changed easily at run-time. \nA disadvantage of delegation is that it requires more effort because of the need to define stubs and to compose instances. \nI would use delegation for the object design of different smartphone apps. Not all apps (messenger vs. streaming app) have the same functionality and thus only need specific features which can be implemented via delegation. It wouldn't be efficient to make a parent class and let all apps inherit from it as they would implement redundant methods.   ",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5585927,
      "meta": {},
      "text": "* Inheritance has a clear parent-child / super-sub class hierarchy, in delegation there's a receiver passing any of the client's function calls on to the delegate, which effectively operate on the same level as each other.\n* Anything public in the parent/super class is also visible in the child/sub class; a delegate is entirely hidden to the client by the receiver.\n\n+ Inheritance is fairly straightforward to use thanks to the clear structure.\n- Due to the hierarchy, any changes on the super/parent level can have further effects on the sub/child level.\n\n+ Thanks to the receiver effectively hiding the delegate from the client, delegation is fairly secure.\n- Since function calls need to be passed from one class to the other, it may be less efficient or even provide a bottleneck.\n\n[[NOTE TO SELF: SMARTPHONES EXAMPLES STILL NEEDED]]",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5587261,
      "meta": {},
      "text": "Inheritance is roughly speaking a subclassing, in order to reuse (all) functionality implemented in a superclass. In Java this is denoted by \"extends\" for implementation inheritance or \"implements\" for specification inheritance next to the class declaration. Inheritance is advantageous when describing taxonomies, where the subclass has all the properties of the superclass. However, it introduces a tighter coupling/dependency with the parent, such that a lot of the parent functionality is exposed even when unnecessary, and a change in the parent class tends to affect the child as well.\n\nDelegation is instantiating an object within another one to reuse some functionality. In Java this is realised through the declaration of a global, usually private attribute of the delegate in the receiver class definition. Delegation is much more flexible than inheritance as the methods actually called on can be specified and restricted instead of allowing complete transparency. Object instantiation is however disadvantageous for performance.\n\n\nAn example in the context of smartphones:\n\nAll Android OS versions, even proprietary ones inherit from the Android open source project, which provides the indispensable core kernel functionality. An operating system developed without this taxonomy, i.e. lack of or only partial usage as in delegation, would not be classified under Android.\n\nThe basic user interface delegates tasks to the operating system. Not all functionality is visible or accessible directly through the UI, such as viewing and editing background system processes, the booting program in ROM, or interrupt and exception handlers, unless the root mode is activated. An inheritance relationship would expose these system critical functions unnecessarily.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5588865,
      "meta": {},
      "text": "Inheritance and delegation follow two different approaches. While inheritance gives the child the attributes and methods of the parent class and additionally gives the opportunity, that the child is enlarged by his own methods and attributes or even can overide a method of the parent class, on the other hand the delegation process simply means, that the called method or operation is given to antother instance and is executed there.\nAn advantage of inheritance is of course the flexibility in implementing new funtions in the child-class, as it is easy to override methods or to create new ones. But the disadvantage is, that inheritance gives ALL of the methods and attriutes from the parent-class to the child-class, even the ones that are not needed or not allowed. There is no opportunity to differ which of the methods is inherited to the child.\n\nIn the context of smartphones, my example would be the structure of  a new contact for inheritance: A basic new contact only has the surname, the name and the telephone number as attributes. It can be created and be deleted. This is the structure of the parent-class. Then there is the child: the business contact. The business contact can be shared in the company network and has an additional attribute, the e-mail adress. The system of inheritance fits perfectly, because the business contact only enlarges the parent-contact, reuses its functionality and has the same basis information.\n\nAn example of delegantion is the security system of the smartphone. The access right is handled by a proxy that delegates the request to the proxy server. By this architecture the access to the smartphone is safe by delegating the necessary methods.",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5592461,
      "meta": {},
      "text": "Difference: \nInheritance reuses an implemented functionality of the superclass/interface to create a new functionality. \nDelegation reuses the implemented functionality of an object to create a new functionality, hence an instance of an object is needed in the new class to reuse its implementation to create a new functionality.\n\nAdvantage Delegation: \nAs an instance of the reused object needs to be created, this form can be quite expensive (creation and initialization).\n\nDisadvantage Delegation: \nWith delegation, inheritance of unnecessary methods can be avoided by adding an \"intermediary\" receiver class, that only allows wanted functionalities to be given to the reusing class. Delegation is generally more flexible this way.\n\nExample Delegation: \nE.g when creating a Button on a smartphone GUI with some text in it, the Object \"TextField\" can be reused and new additional functionality can be added to the button. The new reusing class therefore does not have to be too closely related to the reused class.\n\nAdvantage Inheritance: \nInheritance is quite a common, well known and straight forward concept. The basic shell of the subclass is already given and new functionalities merely need to be added (easy). \n\nDisadvantage Inheritance: \nWhen functionality of a superclass/interface is used, the other inherited methods might add unwanted functionalities to the new class. Also, when the inherited methods in the superclass are changed, the new class also needs to be changed.\n\nExample Inheritance: \nDifferent kinds of notifications a smartphone sends could be made up of one superclass and new kinds of notifications can reuse this superclass and add new functionalities to create more specific notifications.\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595923,
      "meta": {},
      "text": "The inheritance approach is used when a new class is required that needs to a few additional functions. This is a good way to avoid having to rewrite the same code aka code duplication. However causes high cohesion between classes (sub- and super-class). This is something we want to avoid in our system.\n\nDelegation can be used as an alternative to inheritance. It means that we create an object of another class that we pass our request to and then the other class actually completes it. \nThe big advantage that delegation has, is that its much more flexible compared to inheritance. The objects that we pass the tasks to can easily be changed at runtime which generally increases the flexibility of the system.\nHowever, it does not support dynamic polymorphism. This means that the statically selected methods are always selected at runtime too. This limits the developers in their work and causes the need to potentially create new objects for every delegation which is inefficient and slow. \n\nSmartphone context:\n\nI am writing a program that applies different filters on photos. It would make sense to have the filters and effects be sub-classes of each other as they are often very similar and only slightly different. (inheritance)\n\nWhen making programming a launcher (application that provides custom user interface) it makes more sense to inform the existing user interface and have it perform the communication with the OS, instead of implementing all of the functionality yourself.  This saves time and provides a clear separation between the additional abstraction.\n\n",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596020,
      "meta": {},
      "text": "Inheritance is mostly used if you already have a class that has most of the wanted functionality however want to extend that functionality and class. You then use that class as superclass and create a subclass that inherits all functions of the superclass and at the same times implements its own functions extending the overall functionality. The upside of inheritance is, that it is easy to use however you are dependent on the superclass and each change will also effect your own class. \n\nDelegation on the other hand allows you to break up a class structure into \"Receiver\" and \"Delegate\". You delegate tasks to the \"Delegate\" and in turn receive the needed data. You then can implement your own functionality that uses the functionality of the delegated class. This has the upside of breaking up this dependency of inheritance because the \"Receiver\" doesn't mind if the inner workings of the \"Delegate\" change as long as the \"outside interface\" stays the same. This allows you to be more flexible. A downside however is, that delegation can be inefficient because you need to instantiate the object you are delegating to. \n\nAn example of inheritance in the context of smartphones would be if an app build in Kotlin would implement \"sites\" by extending their own class from the existing templates. \nAn example of delegation would be if an chat App developer would use an existing software that lets devices  communicate with each other via JSON data and extends that functionality by implementing a UI, the possibility to send text and build messages as well as GIFs ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596692,
      "meta": {},
      "text": "The diffrence between is that Inheritance is using parent classes or interfaces which provide methods for a subclass. This makes it really easy ti implement and to understand the usage but it makes your system also less flexible because if you change something in your parent class you have to change your subclass also. Delegation uses the unidirectional association between a receiver and a delegater, the receiver gets an object the delegater and uses it as atribute for the methods in delagation. This makes it way more flexible but also a bit ineffcient because you need an created object instance.\n\nAn example for inheritance in the usage of smartphones would be, the option to login with an parent account like facebook in diffrent apps, you would use the same user name and password for all apps this would make it really to use, but also the problem that if somthing hapends with the parent acount all of your accouts are affected.\n\nAn example for delagation would be the usage of google maps in diffrent apps, for example if someone shares you his or her position you can use google maps to find him or her. This example fits very well because you have the delagator (googlemaps) and  the client who calls the rceiver (sharing).\n\n",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596730,
      "meta": {},
      "text": "Inheritance:\nIn inheritance subclasses are able to override methods that are in superclass and also have unique methods that are not presented in superclass or other subclasses. But also the change in the superclass causea changes in subclasses. \nMany programming languages support inheritance.\nDelegation:\nExisting object functionality can be utilized in other classes. The receiver transfers the operation requested by the client to another object, which then conducts the operation.\nBecause objects are encapsulated, delegation is versatile but inefficient.",
      "score": 50,
      "language": "ENGLISH"
    },
    {
      "id": 5584701,
      "meta": {},
      "text": "\nWhen you model a smartphone system. If you have access to an operating System and you want to reuse it and enhance it a bit, I would use Inheritance. For once it is easier to implement inheritance than delegation. Also this way if the operating system gets an update yours will also get the new Features. This could be a downside if the update changes the internal structure of the operating system. In that case my code might not work anymore. But if you can expect this won't happen inheritance is a good choice. Another downside would be that i have to learn and understand the code of the operating system and also it binds me to the operating system, making a switch to another very difficult.\nBut if i use delegation i do not need to know any of the code from the subclass i use, only the Interface also it doesn't bind making a switch very easy. For example if i want my smartphone to have a camera i can just delegate a open source camera system .For the next version of my phone i can easily change the camera to a new one, if i want a better camera.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5585893,
      "meta": {},
      "text": "The main difference between inheritance and delegation is that in delegation we catch an operation and we send it to another object where it is already implemented. With inheritance instead of sending it to another object, we subclass it from an implementation.\n\n-Delegation:\n   +It is flexible.\n   - It can be inefficient because objects are encapsulated\n-Inheritance:\n   + Many programming languages support it\n   - It exposes some methods of the parent class\n\nAn example of Delegation in the context of smartphones could be Instagram. When you install Instagram it asks you to let him use the camera, this is because when you take a picture with Instagram the operation of taking a photo is sent to the camera of the phone, as we mentioned before, it can be inefficient because if you don't let Instagram use your camera, you cant take photos.\nAn example of Inheritance in the context of smartphones could be WhatsApp. In WhatsApp, you can send messages but these messages could be text, stickers, gifs... So here I supposed that it used Inheritance because we can see the different types of messages such as subclasses of the superclass message.\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5592378,
      "meta": {},
      "text": "Delegation is to use an instance of another class as a variable. You can simply \"delegate\" the responsibility for certain functionality to another class, by using it as an instance variable. Inheritance is deriving the child class from another class which is called as parent or super class. Derived class would have attributes and methods from its super class. For example, delegation can be described as cameras of the smartphones. When the user wants to take a picture with the smartphone, it delegates the request for the features those needed to take a picture to the camera to its camera which is one of the property of it. Inheritance is like generations of the smartphones. The second generation of certain smartphone series would be inherited many properties of the first one, while still it has its own specialities which makes the polymorphism.\n\nAdvantage of the delegation is flexibility. It can be changed at run-time since you can re-assign the instance variable. For example, assume that the service class instance is using a repository class as instance variable to access the database. You can easily change the service class to use mock up repository class instead of real one which would requires database connection for test purpose. However, it doesn't facilitate polymorphism, because you should/could not re-define the methods of the delegated class instance.\n\nPolymorphism is the good aspect of the inheritance, which means the child class could have different behavior from its super class by overriding the attributes or methods. For example, assume that there is a class called \"Animal\" with a method \"makeSound\" that print specific message on terminal. You can derive some child classes, such as \"Cat\" or \"Dog\", which can print different messages by overriding the method \"makeSound\". However inheritance must be defined before running the application, and it couldn't be changed on run-time. This makes inheritance less flexible.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593034,
      "meta": {},
      "text": "In inheritance there are actual \"parent\" classes that inherit all their property/behaviour (attributes, methods) to all their \"children\"- classes. Delegation on the other hand just passes the \"job\" to another class an example for that would be delegating the call of a specific method of another class to another existing class. An example for inheritance would be: Take a phone for example you could say the parent class of a phone ensures that all the general functionalities of phones are always existent (calling someone, sending a message) and the children would be for example an iPhone which has additional functionality that only the iPhone has but also all the functionality of the parent, in my example the calling and message sending (you would use inheritance so every buyer can be sure that the general functionalities are always given). Actually every app on a smartphone that doesn't automatically come with the phone is an example for delegation, lets say your phone doesn't have a calendar you go to an App Store and buy a calendar app, your phone now uses an instance of the calendar app to have more functionality (adding some activity to a specific day for example) without actually implementing it itself (you use delegation in this example because its impossible for a phone producer to identify every functionality anybody would want to have and implement them).",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593653,
      "meta": {},
      "text": "\nVererbung in der Java-Programmierung ist der Vorgang, durch den eine Klasse die Eigenschaften einer anderen Klasse übernimmt, während bei der Delegation die gefragte Aufgabe (Methodenaufruf) einfach an ein Objekt einer anderen Klasse (Delegat) übertragen wird.\nDelegation kann somit eine Alternative zu Vererbung sein.\n\n\nVererbung wird vorteilhaft von den meisten populären objektorientierten Sprachen unterstützt, fördert dynamischen Polymorphismus und ist generell einfach zu verwenden. Die direkte Verbindung der Klassen kann allerdings den Nachteil mit sich bringen, dass bei Veränderungen der Oberklasse die Unterklasse ungewollt angepasst werden muss.\nIn Verbindung mit Smartphones kann man als Oberklasse \"Smartphone\" mit Attributen wie Modell, Erscheinungsjahr, und Marke haben und abstrakten Methoden wie beispielsweise telefonieren() und nachrichtenSchreiben(). Unterklassen wären beispielsweise \"IOSPhone\" und \"AndroidPhone\", welche alle \"must-have\" Attribute und Methoden der Oberklasse übernehmen sollen. Für speziellere Funktionen wie beispielsweise Kamera können Interfaces implementiert werden. Für dieses Modell eignet sich Vererbung, da neue Smartphones sehr schnell und unproblematisch eingefügt werden können und alle essentiellen features direkt durch die Oberklasse erhalten.\n\n\nDer Hauptvorteil der Delegation ist die Laufzeitflexibilität, da das Delegat einfach zur Laufzeit gewechselt werden kann. Aber im Gegensatz zur Vererbung ist die Delegation ineffizienter, da jedes mal eine neue Objektinstanz erzeugt werden muss.\nIm Bezug auf ein Smartphone kann man sich das Beispiel wie bei der Vererbung vorstellen, nur dass \"Smartphone\" nun ein Interface ist und es eine Klasse (CloudManager) gibt, welche das Interface implementiert. Jede Klasse (wie bsp. \"IOSPhone\") welche \"Smartphone\" implementiert, hat die Möglichkeit Daten in der Cloud zu speichern. Eine Funktion welche von einem \"Smartphone\" aus über ein \"CloudManager\" Objekt (das Delegat) aufgerufen und ausgeführt wird.  Hierfür ist Delegation wichtig, da man den \"CloudManager\" unabhängig von den Smartphones flexibel ändern können muss.\n",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5594260,
      "meta": {},
      "text": "Delegation:\nFor delegation you need a new instance of the Object. Advantage is that you can adjust things whenever you create a new instance. The disadvantage is that you might have to adjust every instance incase something went wrong. For a smartphone delegation would be the next generation of the smartphone. So a new phone with  features of the old generation. I would choose delegation whenever big changes are being applied. \n\nInheritance:\nInheritance means you use an existing object for more adjustments. Meaning that you have one base product that can be changed into more specific products by adding new features. Good about that is that you don't have to adjust every product for changes in the base product. You only have to change the base product. \nA disadvantage is that mistakes in the base product automatically are also in the specific product.\nInheritance for a smartphone would be a software update. So you \"inherit\" the components of the phone and just change the software. I would use Inheritance whenever I want to do small adjustments like getting rid of smaller errors.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5595524,
      "meta": {},
      "text": "Delegation uses an actual instance of a class and calls methods upon it, whereas inheritance expands the original class (superclass) with more functionality, without instanciating the superclass. In inheritance, the functionality of the superclass is used by calling inherited methods on the instance of the subclass.\n\nAn advantage of delegation is control. The instance of the original class can be kept private, which means third party actors can only access the functionality that is meant to be visible to the outside. For inheritance, this is a disadvantage, since with inheritance, this might not always be possible, as inherited methods might provide functionality that would interfere with the intended functionality.\n\nA disadvantage of delegation is complexity. Here, everytime the new class is instantiated, an instance of the original class also has to be created and handled appropriately. Here, inheritance has an advantage, since only one instance has to be created. \n\nAn example of delegation in the context of smartphones is the matter of security and authentification. Many apps like the app store or banking apps offer a login using the fingerprint reader. Instead of each of these apps having to use their own algorithm for reading, profiling, and securely storing fingerprints, the can delegate that functionality to the operating system, which will then give back a simple 'yes' or 'no' answer as to whether the user should be allowed in.\n\nAn example of inheritance are apps themselves. Android apps have to inherit from the class 'application' in order to give the operating system an entry point to start the app, in the form of a method of the superclass that the subclass has to overwrite.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595856,
      "meta": {},
      "text": "The difference : inheritance taking over the attributes and behavior of  pre-existing classes which are called parent classes, the classe inheriting is the child class. While Delegating, is just giving the duty to some other class.\n\nInheritance: \n* advantage: Less code, as simply inheritance derives other classes that provide reusiblity.\n*disadvantage: parent class and child class become tightly coupled\n\nDelegation:\n* advantage: the fact that we don't have to rewrite the whole code of a method, we just delegate the job to another class\n* disadvantage:  higher dependancy on other classes\n\nExamples:\nInheritance: smartphones aren't programmed from scartch, every new model inherits from the previous model, and adds or overrides its functionalities.\nDelegation: when an app wants to change the brightness of the screen, it doesn't have a code that directly modifies it, but it delegates the job to the smartphone system\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596163,
      "meta": {},
      "text": "Delegation (black box reuse) calls functionailty of other classes without knowing the exact implementation of the class but merely its interface. Inheritance (white box reuse)  on the other hand implements / inherits all functionality directly, no other instances are involved.\n\nDelegation insures that the user can only access functionality which is permitted by the programmer. If you develop a stack by inheriting from a list, the user could invoke operations that modify the middle elements of the stack. With delegation this is not an issue.\n\nInheritance allows to customize already implemented functionality by modifying the key methods without having to adjust everything around it. Reusing the Stack example from above, you could inherit from the stack class, but add methods that allow push / pop operations processing multiple data or arrays  with a single call, further specifing the functionality by adding to existing methods.\n\nThe delegation concept can be found in the implementation of a smartphone when you look at how software communicates with the operating system. Delegating functionality allows the OS the uphold access privileges and managing threads and memory without the user interfering. \n\nInheritance on the other hand offers classes to inherit from which then can be used to communicate with the system in a normed procedure. A simple example are classes like JFrame from javax.swing which represent a full fledged GUI window frame with close button, minimize button, resize logic and other functionality which the developer can freely use. Only by further adding to these basic functionalities does the application as inteded come to life. (Adding a panel with a picture e.g.).\n\n",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5584281,
      "meta": {},
      "text": "Whilst inheritance is about a subclass taking the property (methods and attributes) of a parenting class and the behavior of specific methods can be changed by overwriting them, delegation simply uses the implementation of a method implemented by another class by creating an objact if this class and calling the method on that object.\n\nThats why inheritance is straight forward to use. A subclass has all the attributes and methods of the parenting class, if you want to edit a functionality, you simply overwrite that function.  And adding one additional to the parenting class means that all subclasses have the added functionality, but this on the downside also means that methods, that should be hidden when operating with an object of the subclass are also accessible, creating security issues.\n\nDelegation on the otherhand needs you to specifically delegate every single method you want the class to have and by that directly tackling the security problem created by inheritance. Also it allows some easy modification of input data before delegating and by that increasing flexibility. But often it is not that convienient to use as inheritance, as you can no longer be sure that it has every new method provided by the delegated class.\n\n",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5592851,
      "meta": {},
      "text": "When a child class inherits from a parent class this means that (almost) everything that can be used in the parent class is available in the child class. The advantage of inheritance comes from the idea, that all of the functionality of the parent class is usable in the child without any additional implmentation, saving time and reusing big chunks of code. The disadvantages comes when not all the functionality is needed - after too much inheritance a class can become very complex because of all the unnecessary functionality, it has.\n\nAn alternative to the inheritance is the delegation. The diffrence between the two is that in the delegation there isn't any direct inheritance. In the child, there is an instance of the parent and new methods accessing its methods. In this way only the needed methods are used and accessed and the structure is much more secure, because it isn't as open compared to inheritance. The cons are that additional implementation is needed and that it may use more resources. \n\nAn example for inheritance in smartphones is that a lot of applications use the basic functionality of the camera, but every one of them has a different interface and has new additional functionality.\n\nThere is a lot of driving navigation apps e.g. Waze, which use the Google/Apple basic navigation systems, but have removed a lot of the functionalities and information, included in the maps, because they aren't needed, while driving, and have added new functionalities such as speedometer, warnings etc.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5595618,
      "meta": {},
      "text": "\tDelegation is when a class or an objects contains certain object and can use it. Inheritance is when a class or an objects inherits all functions of its parent object/class and can add new functionalities on top of that. \n\tDelegation can limit the access to the functions of its delegated class by working as a proxy and more flexible in its implementation. At the same time it can be less effective because delegations need to create new object instance to be used.\n\tInheritance is strait easy to use and can be easily implemented in most of the languages but at the same time it doesn't limit the access to the functions of parent class and it can be tedious to override them to change their functionality.\n\tIn smartphones the delegation is used when you are using the camera. It presents not a raw usages of the camera but wraps it in the interface so that the user can access only certain functions and makes the usage more intuitive for average user.\n\tInheritance is often used when a new model of the phone is created. There they often inherit features of old versions of the phone thus making new version more intuitive for a user who buys this phone. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596426,
      "meta": {},
      "text": "Delegation means forwarding calls to an object instance while with inheritance you can reimplement certain functions\nDelegation advantage: Only a black box understanding of what the called functions do is usually needed\nDelegation disadvantage: Specific aspects of the implementation of the delegate functions cant easily be changed\nDelegation example: Use an off the shelf microphone component when building the smartphone and use the manufacturers driver to interact with it.\nInheritance example use a template for a banking app and reimplement only certain parts of it\n\n\n ",
      "score": 41.7,
      "language": "ENGLISH"
    },
    {
      "id": 5585135,
      "meta": {},
      "text": "Delegation provides another posibilty to get to use Reuse in terms of object design. The difference between inheritance and delegation is that you don't extend the operations of a superclass to be able to use the functionlaity, but you instatiate the object of the delegated class. In addition to that, in delegation 3 objects are involved: the client, who calls the receiver, who then sends the request to the delegate, who executes the requested operation. The advantage of delegation is that you can only use the desired operation and thus you are not forced to extend the whole funcitonality of the superclass.  If you want to implement a light version of a smartphone with certain and less functionality, it is better to use delegation for reuse, so you that you're not forced to extend the whole functionality, but only the desired one. A disadvantage of delegation is that creating objects is expensive and thus inefficient. The advantage of inheritance is that you can straightforward extends the functionality of the superclass and reuse it for your certain problem and additionally easily extent it with several methods. Let's say we have a smartphone and want to use the exact same functionality, but in addition to that we want to implement another function. The disadvantage is, that you are forced to extend the whole functionality of the superclass and thus \"expose\" the class. See first example. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585979,
      "meta": {},
      "text": "INHERITANCE means subclassing from an implementation.\nWe have a superclass with an implemented working method(s), that's why we are creating subclasses to use this method in those subclasses as well.\nPros:\n+In case of needing the full functionality of the superclass, it is a fast way. \nCons:\n-Obligation to inherit and override all other methods from the superclass (even if we actually needed only one)\n\nDELEGATION means reusing a method by sending the request to another class, and invoking a method on an object of this class.\nPros:\n+provide a needed functionality to a class;\n+we delegate the duty to someone else: all we care about is to call a needed method on an instance of a class, that has the needed functionnality.\n+in case the method is declared final in the other class, there is no way to enhance it: the only way is to delegate.\n+run-time flexibility: the delegate can easily be changed at run-time.\nCons:\n-black box reuse: we trust the functionality of the method that we are reusing on an inctances of the objects.\n\nEXAMPLES:\n1) iPhone, Android, RedMi etc - all smartphones should be able to make or receive a call, take a picture, browse the internet and many more functionalities. I would make all these brends the subclasses of the super class \"Smartphone\". - INHERITANCE\n2) Some models of RedMi phones have TouchID and FaceID both at a time unlike other smartphones. -DELEGATION.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5587584,
      "meta": {},
      "text": "Delegation is used to pass an operation on to a class where this operation is implemented by means of object instantiation and method calls, whereas inheritance is used to extend a super class with operations or override existing ones.\n\n\nAn advantage of inheritance is that it's easy to use and intuitive as it's very much in line with how we humans make sense of our world by recognizing patterns and sorting objects into subcategories. It stands to reason that this is why I was introduced to Inheritance in my first semester and Delegation is only being taught to me now.\n\nA common issue with inheritance is that the number of required subclasses grows exponentially as you introduce more different states and types. This is a problem that can be solved by using Delegation and delegating certain state-related work to a different class with its own subclasses (Bridge Pattern). A problem of delegation is, however, that an object has to be instantiated which may be costly depending on the object. Generally, delegation is more flexible in its uses.\n\nExamples using smartphones: \n1. Releasing a special version of a smartphone version that has extended functionality like an enhanced camera or being waterproof is analogous to having a subclass that inherits functionalities of a base class (the baseline version of the phone) and extends it (new camera + waterproof). \n\n2. There are smartphones and smartwatches. Smartwatches don't extend the functionality of smartphones and it makes no sense for them to inherit all the functionalities of a smartphone. Most smartwatches are used in conjunction with smartphones and borrow certain functionalities of a smartphone (the phone can be used to install and set up apps on your watch). This would be analogous to delegation.\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5588641,
      "meta": {},
      "text": "Inheritance: a subclass is inheriting methods from a parent class. It is connected through having something in common. The parent class is more general than the subclass, while the subclass is a specialization from the parent class. It is specifiying certain methods by overloading the method and the rest, it uses from the parent class as given. \nDelegation instead uses the methods of a different class by using a concret object of the other class. It catches a certain operation and calls that object to do certain things that it needs. While delegation is more flexible since you can have multiple objects you can refer to instead of having 1 single parent class in inheritance, it could be more inefficient since objects have to be available to perform the methods. Inheritance is a lot easier to implement and straight forward, since you just have 1 parent class that you are connected to. But since you are so deeply connected to the parent class, subclasses are always affected to changes that are happening in the parent class like for example changes in numbers of attributes. \n-example inheritance: I got one type of smartphone with all things like camera etc the same. But there are 3 types which differ in one aspect: the size of the display, one big small and normal. I would use inheritance since the rest is all the same. so i have one parent class, the normal and then 2 subclasses which specify the one thing that differentiates each other\n-example delegation: a smartphone has a concret capacity for its storage. If you use an additional micro sd card to extend your storage, you are depending on an \"concrete object\" of the class to use it.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589757,
      "meta": {},
      "text": "Inheritance and delegation are both design examples and likely to each other in my point of view, but they have a quite difference. First of all, when implementing for inheritance, we use predominantly polymorphism, and delegation(aggregation). But many architectural designs are made from a combination of them. \nWe use the delegation pattern when we need to reduce coupling and want to copy the functionality. We use inheritance when we feel that the class is just the extension of an already existing class, so we can just copy the base to prevent double methods. \n\nInheritance:\n \t\t    + can be used by many programming languages \n\t\t    + easy to use/implement\n\t\t    -  changes in parent class -> changes in subclass\n\t\t    - might expose some unwanted methods in parent class \n\nDelegation: \n\t\t    + more flexible ->\n\t\t    + encourages growth.\n\t\t    - less efficient (because of object instance) ->\n\t\t    - decrease in quality of work\n\nI would use delegation for smartphones, because it would be easier to make updates in software, updates -> new functionalities -> use inheritance for the unchanged features.  ",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5591065,
      "meta": {},
      "text": "Inheritance copies the properties of another class and assumes its behavior and attributes. Delegation merely forwards operations to another object to make use of its functionalities.\n\nInheritance (advantage) promotes code reusability while (disadvantage) increases coupling between base class and derived class so changes in parent class can cause change subclasses. Delegation (advantage) delegate can be changed with ease at run time while (disadvantage) an object instance is created therefore can be more inefficient.\n\nFor example asking for help of a virtual assistant in a smartphone. I would use delegation as the virtual assistant such as siri or alexa would need to only understand what the problem is but then can delegate the actual operation to another programm such as when asking a math question, siri can forward the problem to the inbuilt calculator and then display its answer. The virtual assistant meerly needs to redirect and forward the operations and not inherit the functions.\n\nFor example buttons such as the virtual keyboard. I would make a parent key button class and then multiple sub classes for each key on the keyboard with each different key name and desired output. Using inheritance as a key button object can be defined in a super however each key needs to be attributed a different output.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594493,
      "meta": {},
      "text": "The difference between delegation and inheritance can be compared to the difference between \"das selbe\" and \"das gleiche\" in German. \"Das selbe\" means something the same thing, but another object, which represents inheritance, because the class that extends the inheritor needs to implement all of the functions Itself. On the other hand there is \"das gleiche\" which means something is the same object, describes delegation pretty well, because the class to extend sends all requests forward to the extended class, which then processes all of those requests and sends them back to the called method.\n\nDelegation in phones can be seen for example in the Files app on the iPhone. On one hand there is access to iCloud and files stored on the drive in the Phone, but the user is also able to allow access to his other cloud storage systems, such as Google Drive, OneDrive or Dropbox. In that case the Files app works kinda as an interface for the user to change file data or add new files. I choose that example because I use this feature regularly to easily export files from iCloud to OneDrive, where I have more storage for less cost.\n\nInheritance can be explained by the relationship the iPhone has with the Apple Watch. The Watch can'T be used without an iPhone, but once set up it can work as a standalone device. It also automatically downloads all apps that the user had on his phone. Inheritance can be explained by equating the inheritor to the Apple Watch, because it receives all parent methods and uses them, but runs them on its own.",
      "score": 8.3,
      "language": "ENGLISH"
    },
    {
      "id": 5594746,
      "meta": {},
      "text": "The difference between inheritance and delegation is how it interacts with the original class. Where inheritance copies all the methods to the new subclass and then adds the new extending methods, delegation only has it's necessary functions and an instance of the original class, in order to forward tasks to the original class in case the methods in it is required.\nInheritance has it's advantage of easy implementation, needless of instantiating multiple classes, composing delegators etc., where it is weak in flexibility, having to have the parent class in the same local place, as it is binded together. Inheriting a class will also lead getting forced to change the subclass whenever the parent class has made a change.\nDelegation contributes in flexibility, being able to hold both classes in different locations, as well as it's ability to instantiate and make use of multiple classes. Though, it is not supported in many programming languages.\n\nIn the context of smartphones, inheritance would be a great option, as some applications are correlated to each other and have similar, synchronizing functionalities, making it a good opportunity to use inheritance. It's con would also be gone, because a smartphone is has a local storage. For example, google tasks and google calendar both saves tasks, schedules and reminders and can be implemented with inheritance.\n\nThough, delegation would also be a good choice, because many functions do not require the methods of others.\nNowadays, you can store everything online, using cloud. This would be fitting to the concept of delegation, unbound in all kinds. Also, having functions to make use of multiple classes, instead of just one, is advantageous in many situations, such as using the GPS to locate yourself and look for reviews of nearby restaurants on google map.  ",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5595626,
      "meta": {},
      "text": "Definition: Delegation means that an object takes adopts the tasks of another object. The object that adopts the tasks possesses a reference to the original object and can access its properties and methods. \nAdvantage: The advantage of delegation over inheritance is that it is more flexible. \nDisadvantage: The disadvantage is that it can lead to strong coupling between objects and thus makes the code more complicated.\n\nDefinition: Inheritance means that one class is derived from an already existing class. \nThe derived class can create new properties and methods on its on but also possesses all the parents class' properties and methods. \nAdvantage: The advantage of inheritance is, that it allows to reuse the code of the parent class. \nDisadvantage: The disadvantage is that a lot of unnecessary code could be generated.\n\nAn example for inheritance in the context of smartphones would be if there was a parent Phone class that provides all functionalities/properties that every phone has. For example: every phone has the ability to call someone or to write messages. This could all be combined into a single parent class so it isn't needed to implement the same thing for each phone over and over again.\n\nAn example for delegation in the context of smartphones would be if the different models/child-classes of the phones had specific features that only that phone/phone type has. An example could be the new proprietary text selection software in pictures of the iPhone. The Pictures App would then simply delegate the Text Recognition System to do the work.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595911,
      "meta": {},
      "text": "Inheritance and delegation are both methods of reusing existing code. They differ in their visibility of the reused code. Namely delegation allows for Blackbox reuse, where functionality from a different object is used, which can be inefficient because an object must be initialized but has the advantage that one only cares about the functionality that one needs decreasing the mingling necessary to use the object, therefore not exposing unwanted functionality of the used object, also decreasing the impact of changes of the used object (its class). Inheritance one the other hand extends a class with another, extending or overriding its functionality, tying them together in a good way (new functionality is easier to implement) and in a bad way (changes to parent class can force changes in the subclasses). So, in the context of smartphones your app might use apple´s payment system with a delegation (through well-defined methods) as you don’t want to mingle with the implementation, potentially expose unwanted functionality and don’t want to subject yourself to the need of changing your code whenever apple makes changes to the payment system. But on the other hand, you might want to use inheritance to reuse code from an app framework (graphical elements -GUI-) to modify and add functionality more easily.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596640,
      "meta": {},
      "text": "Inheritance in Java is when a class is already implemented that does the same as the desired class so you extend the base class, by taking on the properties of the base class. \nDelegation also reuses functionality, but in a different, more flexible way. With delegation you create an object of another class as an instance variable and forward messages.\nWith both Inheritance and Delegation you can therefore use a functionality of another class. The main difference is that with delegation you get access to this functionality by instantiating a new object of that other class while with inheritance you express a relationship between the two classes and create a dependency.\nTherefore one advantage of delegation is that you have more run-time flexibility while one disadvantage of inheritance is that changes in the parent class can force changes in the subclass as well. On the other hand, one advantage of Inheritance is that it's more straightforward and easy to use, and gives a good understanding of the relationship between the classes while delegation is not often supported by most popular object-oriented languages and can be more complex.\nIn the context of smartphones one example where you would use delegation is the use of a messaging App. The messaging app wants to reuse some functionality of the telephone book app, for example opening a contact chat but we don't want all functionality of the telephone book app exposed to the messaging app. One example where you would use inheritance is the creation of a new phone model: you wouldn't want to have to reimplement all functionality of the former model, so you just want to inherit from it and then you can still add a lot of new functionality an methods to the new model.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5584561,
      "meta": {},
      "text": "Firstly Both delegation and inheritance are designed to improve code reusability, the difference between this is they are in different ways to achieve it : \ninheritance is the process  by which one class takes the property of another other class, this means, subclasses take over the attributes and methods of the pre-existing classes(superclass). Delegation catch just an operation and send it to another object where is already implemented.  And delegation can be an alternative to inheritance, but the opposite is not absolutely true. \n\nThe advantage of inheritance is very easy to use and it is supported by many programming language. the advantage is, it destroys the encapsulation of classes, and if we change something in superclass, the subclass must be changed as well;\n\nthe advantage of delegation is more flexible, if the subclass only needs to reuse a small part of the methods of the super class, it can direct use delegation but not inheritance. but some time it will reduce efficiency because we need to create an object instance.(disadvantage)\n\nExample on delegation: The phone needs to be sent to the factory for repair, but the phone itself is not self-repairing and it is not practical to give the phone the ability to self-repair, so I need to give it torepair shop to deal with, which is a delegation. \nI came up with this because the fingerprint lock on my phone was broken.\n\nExample on inheritance:  I have an address book on my phone which is stored locally and in the cloud, when I download whatspp and choose inherit the phone numbers from the address book, this is an inheritance between apps. \nI use this example because I just received a whatsapp message and saw the address book.",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5585867,
      "meta": {},
      "text": "Inheritance vs. Delegation\n\nInheritance is a mechanism wherein a new class is derived from an existing class. In Java, classes may inherit or acquire the properties and methods of other classes. A class derived from another class is called a subclass, whereas the class from which a subclass is derived is called a superclass.\nPro: Inheritance is directly supported by java\nCon: You can or have to use all methods from the super class (e.g. bad when you make a stack  out of a list)\nAn example of inheritance in the context of the smartphone could be the clock app. here you can first select what type of clock it should be (stopwatch, alarm clock) and then what ringtone the alarm clock should have.\n\nDelegation means that you use an object of another class as an instance variable, and forward messages to the instance and thus simply passing a duty off to someone/something else. When you delegate, you are simply calling up some class which knows what must be done. You do not really care how it does it, all you care about is that the class you are calling knows what needs doing.\nPro: due to the fact that the method is executed by an instantiated object, you can restrict the use of methods (e.g. push and pop when making a stack out of a list)\nCon: delegation is not directly supported by most popular object-oriented languages (like java), and it doesn’t facilitate dynamic polymorphism.\nan example of delegation in the context of the smartphone could be the picture gallery. here you have basic functions like delete picture or edit picture, but you can't change anything within the functions, because they are instantiated with the object of the gallery.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5586311,
      "meta": {},
      "text": "Inheritance:\n\nInheritance exists when there is a hierarchical class taxonomy. This means that a child class, also known as subclass, inherits the properties of the parent class, also known as superclass. \n\nAdvantage:\n\tInheritance allows for a much simpler design of objects in the system, as taxonomies make it clear that certain objects share certain core properties. \n\nDisadvantage:\n\tInheritance results in the coupling of different classes, which mean that changing the code of a super class would also effect all of the children classes.\n\nSmartphone example\n\tIn addition to calling and texting, the parent class “SmartPhone” has web browsing and software application capabilities. The subclass “iPhone10” has a Siri capability while the subclass “SamsungGalaxy12” has an Alexa capability. Inheritance should be used to model this situation because both iPhone10 and SamsungGalaxy12 have web-browsing and software application capabilities, meaning that they share certain core functions that can be inherited from a parent class. Each mobile phone then has its own specialized functions, which is why they should be subclasses. I would choose inheritance to model the relationships between different kinds of smart phones.\n\nDelegation\n\nDelegation occurs  when a class is composed of another existing class. A method that is called on one class can then be sent, or “delegated”, to another class to be executed. \n\nAdvantage:\n\tDelegation provides more flexibility than inheritance because it allows for certain decisions to be made at runtime.\n\nDisadvantage:\n\tDelegation can be more inefficient because more objects are required to execute certain methods, as the object the method is invoked upon has to pass on the method to a delegated object.\n\nSmartphone example\nCertain components of a smartphone do not possess the capability of executing certain methods, so the method is delegated to the component that can execute the method. For instance, if I look something up with the web browser and request that the results be read out loud to me, the web browser may delegate the reading of the lookup results to an associated audio player within the smartphone. I would choose delegation when modeling an individual smartphone.\n \n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593035,
      "meta": {},
      "text": "Inheritence simply means that subclasses which inherit functionality from their superclass can reuse methods and implementations (as well as public attributes or other non-private parts of the class). Through this inheritence functionality of a higher/ more top-level class can be invoked from the lower class.\nWith delegation, the two involved classes are not related through inheritence, but the instance of an object of one class is used as an instance-variable in another class and therefore delegates method invocations to the other class. This is also one big advantage of the delegation specification because it is very flexible and easy to control as you can change the way that a method is delegated and add conditions or additional boundaries etc. and you do not need to accept all inherited methods like in the inheritence approach. However, inheritence is easier to implement as you only need to create subclasses that automatically inherit the functionality and can invoke the methods without creating a new class and an instance variable of an object of this class. This makes it also more efficient than delegation sometimes because there are less objects created.\nIn the concept of smartphones (which is a little abstract) that could mean that a certain app that requires hardware sensors or other services from the phone directly inherits functionality from the system through some way or it delegates its requests to an interims service or system component that can then provide the app with the necessary information.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593187,
      "meta": {},
      "text": "Inheritance is when an object is created from another object. The new object has all the same characteristics as the old object, plus any additional characteristics that are defined in the new object. An advantage of inheritance is that it is easy to create new objects from existing objects. A disadvantage of inheritance is that it can lead to a lot of duplicate code if the objects have many characteristics in common.\n\nDelegation is when an object delegates some of its responsibilities to another object. The advantage of delegation is that it can lead to more flexible and extensible code. The disadvantage of delegation is that it can be more difficult to understand code that uses delegation than code that uses inheritance.\n\nFor example, if you were creating a smartphone app that had a list of contacts, you could use inheritance to create a Contact class that had all the characteristics of a contact (name, phone number, email address, etc.). Then you could create a subclass for each type of contact (e.g., Family, Friend, Coworker, etc.) that would inherit all the characteristics of a Contact.\n\nAlternatively, you could use delegation to create a Contact class that only had the name and phone number of a contact. Then you could create a ContactList class that would keep track of a list of contacts. The ContactList class would be responsible for storing the contacts and providing methods for adding, removing, and finding contacts.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5593710,
      "meta": {},
      "text": "Beschreibung:\nInheritance beschreibt die Vererbung. Wenn eine Klasse beispielsweise von einer anderen erbt, so ist sie eine Unterklasse dieser. Dabei kann die Mutterklasse abstrakt sein, sodass nur instanzen der Unterklasser erstellt werden können oder auch nicht. In beiden Fällen stellt die Mutterklasse eine allgemeinre Form der Unterklasse dar. Bei deligation hingegen besitzt die Klasse eine Instanz der anderen Klassse. Auf dieser instanz können dann sämtliche funktionen aufgerufen werden. Die Instanz wird teil der Klasse.\n\nBeispiel incl. vor und nachteile:\nIm Falle des Smartphones könnte man z.B als abstrakte Oberklasse das Smartphone wählen, welchen telefonieren kann, ein touchdisplay hat, etc. Unterklasse von dieser abstrakten klasse wäre dann z.B ein Android-phone und ein IOS-Phone welche beide verschiedene, aber auch speziellere versionen der Oberklasse Smartphone sind. Aus diesem Grund ist in dem Fall die Vererbung gut geeignet, da hier die Grundlegenden Dinge in der Oberklasse gesetzt sind und diese dann auch bei z.B gesetzlichen änderungen direkt auf alle anderen smartphones anwendbar sind.\n\nEin Beispiel für Delegation wäre zum Beispiel die Kamera, welche das Smartphone braucht um Fotos zu machen. Da die Kamera ein Teil von dem Smartphone ist und man auf dieser Instanz methoden wie takePicture() ausführen will ist es hier geeignet sich für die Delegation zu entscheiden. Vererbung wäre hier Fehl am Platz, da das Smartphone keine Kamera ist, sondern eine Kamera verwendet.\n",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5596493,
      "meta": {},
      "text": "Inheritance is a process during which one class takes the property of another class meaning that the so-called child classes take over attributes and methods of a pre-existing class called the parent class. When using delegation, the object of another class is used as an instance variable and the programmer uses the instance to forward messages. The main advantage of the delegation is that the delegate can be easily changed during runtime. One of the advantages of the inheritance is avoiding duplication. However, delegation is not supported on many OOP and the disadvantage of inheritance is that the subclasses become dependent on the parent class implementation.\n\nWhen creating an update for an app on a smartphone I would use inheritance since I would like to use already implemented methods and attributes.\nWhen creating an app which uses information stored on the phone, I would use delegation to access the methods I need since I do not want to modify them but just use their functionalities . ",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5587269,
      "meta": {},
      "text": "The difference between inheritance and delegation is that delegation reuses an existing class/object for some functionality (e.g. use an implemented List class to model a Queue) and inheritance extends a more general class by new functions or overrides existing ones(e.g let the queue class inherit from the List class and add enqueue and dequeue operations).\n\nInheritance:\n\tPro:\n\t\tEasier to implement if you want to add classes that use all functionality of the superclass(e.g. \n\t\tdifferent species of animals which are subclasses of each other so dog might be a subclass of \n\t\tmammal, which could be a subclass of animal and the dog class needs all of the attributes and \n\t\tmethods of its superclasses)\n\n\tCon:\n\t\tAllows the use of methods, which shouldn't be used (if queue inherits from the list, you could use the \n\t\tadd method of list, which shouldn't be possible in a queue)\n\nDelegation:\n\tPro:\n\t\tPrevents the use of unwanted methods of the delegated class (queue is implemented by delegating\n\t\tthe enqueue and dequeue methods to the List class by making use of the add and remove method. \n\t\tTherefore the queue can't use the add and remove methods directly)\n\n\tCon:\n\t\tCan be more inefficient as all the functionality isn't in one object directly, but in an object which\n\t\tcontains another object(e.g queue contains a list, which needs to be instantiated to use its methods)\n\t\t\nSmartphone:\n\tInheritance:\n\t\tOne example of Inheritance in smartphones is the Samsung A51 and A50, because the A51 \"inherits\" \n\t\tthe functions of the A50 and extends them with some new features.\n\n\tDelegation:\n\t\tAn example of delegation in smartphones is navigation, as this is usually not implemented directly by\n\t\tthe smartphone manufacturer but it is delegated to other companies such as e.g. google maps.\n\t\t\n\t\t\n\t\t\n\t\t\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5591013,
      "meta": {},
      "text": "Inheritance: reuses the functionality of the superclass. The subclasses can implement functionality in the superclass (implementation inheritance) or specified the operations but not yet implemented(specification inheritance).\n\nADVENTAGE: straightforward to use and easy to impement\n\nDISADVANTAGE: implementation not flexible. If the parentclass has some changes, the subclasses have to be changed as well, which can be problematic.\n\nDelegation: reuses implemented functionality in existing objeect with object instantiation and method calls.\n\nADVENTAGE: Because there is no superclasses, we dont need to implement any \"forced\" methods. So we can implement the functionalities that we actually need. So it is more flexible tha inheritance.\n\nDISADVENTAGE: Encapsulation of object can lead to a bad efficiency and you have to enclose the objects using many simple delegating methods.\n\nEXAMPLE: \nSmartphones:  smartphones should have the functionality: call(), and all those smartphones have the same functionality while calling. They can inherit from the class Smartphone and use exist call() method. \nBut if we dont want any model affected by changes in Smartphone. We can use delegation. Then we just need to implement an object Smartphone and use call(). It's more flexible if we change Smartphone and no more different model should be recomplied.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596145,
      "meta": {},
      "text": "When using inheritance you assume that the inheriting class is a subclass of the inherited class. For example you would use inheritance in a class \"Racecar\" when you need the functionality of the class \"Car\". This procedure is straight forward and easy to use. On top of that you can easily add functionality to the subclass. A problem arises, when the subclass isn't actually connected to the parent class. For example if you have the class \"Credentials\" and the \"subclass\" \"User\" and there is a function in \"Credentials\" which allows you to add your credentials , you would use delegation, which is basically using an object of another class to forward an action to it, because inheritance in this instance, could expose functionalities of the parent class to the subclass which shouldn't be accessible by the subclass. In this example \"User\" might use a function of \"Credentials\" which unauthorisedly displays the credentials of other users.\n\nAn example for smartphones are the buttons to regulate the sound volume. In this case you want the VolumeButton class to use delegation to change the volume variables in the System class. Otherwise you would expose the System. As a developer you might have access to the VolumeButton class and if it inherits from the System class, you would have unauthorised access.\n\nInheritance would be convenient and useful to use with a parent class \"Button\" and you want to implement the VolumeButton and the PowerButton. Instead of writing to separate classes with functionalities on their own, it would be more effective to just write a Button class with basic functionality which every button should have. Then VolumeButton and PowerButton inherit from Button and if need be additional functionalities can be added to the subclasses.",
      "score": 58.3,
      "language": "ENGLISH"
    },
    {
      "id": 5583702,
      "meta": {},
      "text": "Inheritance is limited to a single parent class (and ancestors) but it can sometimes be non-obvious where your code is going. Delegation is less elegant, but you can bring in functionality from multiple other classes and the flow is clearly visible. As far as invoking external functions is concerned, delegation is generally preferred for just this reason, inheritance should be reserved for cases where you want to implement a class whose behavior specifically is like the base class, so it can essentially be treated as an instance of the base class by other code. \n\nDelegation is generally more flexible but might be more inefficient because an object instance needs to be created. \n\nWith inheritance, it is easy to implement new functionality in the subclass. But on the other side inheritance exposes some (unwanted) methods of the parent class.\n\nInheritance: \nHere you could take as an example that every cell phone has basic functions and also basic attributes. However, depending on the type, each cell phone has additional functions and components that are added to the inherited features. Accordingly, each cell phone model inherits from the \"basic cell phone\", but has additional features that are different depending on the model and then class.\n\nDelegation:\nHere you could take as an example that each cell phone gets certain additional functions as an attribute. Thus, several cell phone models can be assigned the same additional function. This is very suitable if the additional functions do not differ and then simply the cell phone can be added. Especially with many models, this is much easier.\n\n",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5583740,
      "meta": {},
      "text": "In inheritance we reuse functionality by using the already implemented functionality in a superclass. The disadvantage of inheritance is that we might own some methods that we don't need from a parent class. Also changes in the parent class will cause changes in a subclass as well. And if we have many subclasses, then we should make changes in many subclasses and it can lead to mistakes. However, it's easy to implement  new functionality in subclasses because we can use already implemented methods of the parent class. Example: An OS of a new smartphone model can extend the OS of an older model and to the new phone OS can be added some new functionality.\n\nIn delegation we instantiate the existing object and then call methods on it. Then this object executes a call.\nDelegation can be more inefficient, because the instantiating of an object needs additional space and time to be created, but in general it's more flexible.  The example could be delegating connection to the internet to our smartphone. So it connects to the internet via mobile data.  And then we connect to it from a laptop which can't connect to the internet itself. ",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585119,
      "meta": {},
      "text": "The difference between inheritance and delegation ist, that inheritance uses a base classy which can be extended by new operations or a existing operation can be overrided. \n\nIn contrast the delegation is catching an operation and sending it to another object, by using a receiver.\nThe advantage of delegation is that it is quite flexible because you can easily replace any object at runtime by another one of the same type.   The disadvantage is that it is quite inefficient because of encapsulating. \nThe advantages of inheritance is that it's easy to implement new functionality in the subclass and that it's in general easy to use.  \n\nAdditionally it's supported by most programming languages (like java). The disadvantage is that with inheritance you are forced to change the subclass, when the parent class is changed and that it exposes methods of the parent class. \n\nIn General I would use inheritance, because it's easy to integrate and because of the efficiency, especially by games.   But if I have a class, where I need just some methods  of a super class or flexibility, I would use delegation.  \n\n\n\nExample:",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5588984,
      "meta": {},
      "text": "Inheritance is about extending a base class by a new operation or overriding an existing operation, whereas delegation is about catching an operation and sending it to another object. Inheritance is pretty straightforward to use and supported by many programming languages. However, changes in the parent class can force the subclass to change as well. Delegation is generally more flexible, but might be more inefficient due to the creation of an additional object instance. One example of inheritance in the context of smartphones would be the inheritance of the method takePhoto() of a third-party smartphone app (e.g., Snapchat) from the operating system. The original method was developed by the OEM of the operating system (e.g. Apple for iOS or Google for Android). For the developer its pretty straightforward and easy to reuse the method takePhoto() from the operating system but if e.g. Apple changes functionalities in the method takePhoto() it enforces also changes in the functionalities of takePhoto() in e.g. Snapchat. Delegation would be appropriate if the developer from Snapchat wants to create the method addFilter() and reuses also the method takePhoto() from the operating system in addFilter() when taking a photo with the filter. Here, delegating takePhoto() is generally more flexible but could be also more inefficient because in addFilter() the developer needs to create a new object instance. ",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5591271,
      "meta": {},
      "text": "First of all, inheritance and delegation are both methods to reuse software. Inheritance can be used, if softare needs to be developed, which is similar to an already existing class. In this case the existing class/code can be reused in a way, that the self written code extends the class as subclass and is able to implement further methods. An advantage of this method is, that it is quite easy to reuse any code just like that. A problem of iheritance is that the new subclass also implements all methods from the superclass, which might be unwanted. An Example for inheritance could be the implementation of a contact app for smartphones. To develop this app it would be very usefull to inherit the class \"contact\" from the telephone app.\nA different way for reuse of software is delegation. Delegation uses the existing implementation of certain methods. If software needs to be developed, from which similar functionality already exists in other methods, the idea of delegation is to use existing or instantiate objects of these classes, in order to call their methods. In delegation the client calls a reveiver, if methods can and should be used because of their functionality. This request is then sent to the delegate, where the request is processed and specific methods are called. \nAn smartphone example of delegation is a texting app. When implementing the texting app, it is very usefull to reuse e.g. the texting methods from the standard text app, as the functionality of texting is quite the same. The differences of your texting app can still be implemented manually without the worry that all other methods of the standard texting app are implemented as well.",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5591530,
      "meta": {},
      "text": "Inheritance means, that you reuse the implemented functionality of the super class without depending on this super class or any other class to be instantiated. The super class already exists and does almost the \nsame as the desired class. Delegation on the other hand needs another instantiated object, which is offering the functionality needed. The operation is caught and sent to an already existing object. by method calls.\nThe problem with inheritance is, that unwanted methods of the super class might become accessible, as well as changes of the super class affect the subclass as well. Delegation might be more inefficient, since it relies on another object being instantiated and follows the client-receiver-delegate model.\nAn example for delegation in the context of smartphones would be apps. The client can install different apps on his smartphone in order to add functionalities to it. The functionalities depend on the apps being installed. The smartphone works as the receiver delegating the method call to the app. I would choose delegation here, because it allows you to add and remove functionalities flexibly to your smartphone, without inheriting unneeded functions. \nAn example for inheritance would be the development of smartphones. With each generation the smartphones become more sophisticated and offer more functionalities. I chose inheritance here, since we want to implement all the functions from the preexisting model as well. \n",
      "score": 66.7,
      "language": "ENGLISH"
    },
    {
      "id": 5592468,
      "meta": {},
      "text": "When inheriting from a class. You specify the functionality of the super class to meet the needs of the problem. \nThe advantage of Inheritance is that is a clean way structured way of  adding on to functionality to an preexisting project.  Using inheritance in an inconvenient setting, can also make the project structure less comprehensible.\n\nWhen applying Delegation, a class uses an object of another class and uses its functionality in a different way than initially intended in the Objects design i.e. using a list to implement a stack. Delegation provides an easily coded way to solve a problem. Methods often can be mapped over and you don't have to go through the trouble of incorporating it into the structure of a super class. On the other hand, when delegating a functionality the performance can be diminished. ",
      "score": 16.7,
      "language": "ENGLISH"
    },
    {
      "id": 5594013,
      "meta": {},
      "text": "Firstly, they can be alternatives for each other and it depends on the specifics of the code and context which one is more appropriate to use.\n\nDifference between inheritance and delegation:\nDelegation: Delegation reuses the functionality that has already been implemented in an existing object (has-a-relationship).\nInheritance: Inheritance reuses an implemented functionality from a superclass (is-a-relationship).\n\nAdvantage and disadvantage for each:\nDelegation:\n+ An advantage of delegation is run-time flexibility – the delegate can easily be changed at run-time.\n- A little less straightforward to implement than inheritance.\n\nInheritance:\n+ Directly supported by most popular object-oriented programming languages.\n- Forces you to accept all the methods of the super class even if they do not make much sense (+ tight coupling with parent class). If the signature of superclass is changed, all subclasses must be adjusted.\n\nExample for each in the context of smartphones:\nInheritance: One could imagine an \"app\" superclass which includes basic functionality, for example for a uniform and simple navigation, of all (pre-installed) apps on a smartphone. Using inheritance could make sense as it can give a solid foundation for the development of additional apps in the portfolio. (Basically: interface specification)\n\nDelegation: Smartphones use GPS chips, which delegate coordinates to ones code, for example in an app, whenever new location-information are acquired. It makes sense to use delegation because coupling can be greatly reduced - only a protocol is needed to communicate requirements between classes. The responsibilities of the 2 \"classes\" are separated.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5594839,
      "meta": {},
      "text": "Delegation is simply passing a duty of to something else, while inheritance means a child object uses some of the functionality of the parent object. \"The child class inherits from the parent Class\". In programming child classes can reuse attributes and methods of their parent class. \n\nA big advantage of Inheritance is the reuse of already written code. And it is perfect for showing relationships between classes. \nOne of the downsides of inheritance is that it increases coupling between parent and child classes. If the parent class is changed it automatically leads to changes in functionality in the inheriting class. \n\nOne Advantage of delegation is that it is not necessary to understand the exact implementation to use it. Since The system doesn't depend on the exact implementation, it is easily changeable and can be switched, even at runtime. \nDisadvantages are lack of control, for example if the System delegated to is changed, and Lack of proper understanding of the exact implementation easily leads to unforeseen behavior.\n\nOne example of delegation for Smartphones is the usage of external Services like Google Maps. If an Smartphone app like a delivery Service wants to show a map they are likely to delegate that part to an external service like Google Maps. \n\nOne example of inheritance for Smartphones is the class inheritance in java. Most Android Applications are developed in java. Therefore they heavily use and benefit from java inheritance between classes. \n\n\n \n\n\n ",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5584858,
      "meta": {},
      "text": "Inheritance is to subclass from an already existing implementation und to reuse the already implemented methods from the superclass. On the other side there is Delegation which allows you to reuse already existing methods from objects by instantiating them and directly calling there methods. Therefore you need a client which calls the receiver which delegates the call to the delegate and the delegate executes the request.\n\nA advantage of delegation is that they are more flexible but on the other side they are not so efficient because the instantiation ob an object ist not that efficient.\n\nTherefore inheritance is easy to use but on the other side it exposes some methods from the parent class you may not want.\n\nTo implement different smartphone types I would use inheritance because different smartphone models habe often the same functionality e.g. to call someone and so it would be easier to implement these functions from a parent class which already has it implemented. On the other side I would use delegation if i want to implement a new app which uses basic functionalities of your phone. For example an app uses your camera: You can instantiate a camera object and use the functionality of it (This is a very simplified example and of course important aspects such as access permissions were not taken into account)",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589485,
      "meta": {},
      "text": "While inheritance is extending a base class by a new operaton or overriding an existing operation, delegation is catching an operation and sending it to another object. \n\nInheritance is easy to implement new functionality in the subclass, but when something changes in the parent class, it could force the subclass to change as well.\n\nDelegation is generally more flexible, but might be more inefficient, because an object instance needs to be created.\n\nInheritance can be seen in the context of smartphones. Smartphones are inherited from digital devices such as television and laptop. Moreover, things that can be inherited by smartphones are various sorts of smartphones. Examples are Android, Apple, Windows phone and Amazon's Fire phone. That is why i choose this example.\n\nDelegation can be found as well. In the manufacturing process of smartphones, prototype should be created at first step. And this prototype will be delegated to software installation team. And this team installs software in this delegated prototype. When software installation is finished, smartphones will be tested. In this process, smartphones and its' electric components will be delegated to the next step having  (maintaining) its functionalities. Because of this delegation i choose this example.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595233,
      "meta": {},
      "text": "Inheritance is the process of extending a predefined (and potentially already implemented) functionality of a base class by creating a child or subclass. This makes it easy for the programmer to implement, but can be a source of a lot of additional work when the parent class changes. In that case, one might actually not be able to use Inheritance anymore as functionality changed too much.  \nA call recording app, for example, uses the functionality of the standard call API of the OS, calls it, extends it by recording and in the end outputs it as a .mp3 file. \n\nDelegation on the other hand delegates a request and work to another already existent object. This does not change the functionality in any way, but simply uses it. This process is very flexible as one mainly creates a \"wrapper\"-like class to then delegate the function calls. As no functionality but another layer of calls gets added here, this can be a source of bad performance.\nIf one saves a file on your phone, the app simply delegates the saving to the existing filesystem object of the OS.",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596031,
      "meta": {},
      "text": "Inheritance: Man spart Code indem man von einer Oberklasse erbt und somit die Methoden der Oberklasse zu Verfügung hat. Vorteil wäre, dass man ganz einfach neue Funktionalitäten einbetten kann. Dafür muss man nur eine neue Methode in der erbenden Klasse hinzufügen. Ein Nachteil ist, dass man alle Methoden der Oberklasse erbt auch die, die man nicht will. \n\nDelegation: Man spart Code, indem man ein Objekt von der gewünschten Klasse, mit den geforderten Methoden, instanziiert. Die Aufrufe werden dann an dieses Objekt weitergeleitet, wenn der Receiver den call als valide betrachtet. Vorteil: Der Client kann nicht auf Funktionen zugreifen, bei denen er keine Berechtigung hat. Nachteil: Man muss von der Klasse, dessen Funktionalität man benutzen will, ein Objekt instanziieren. \n\nSmartphone: Delegation: Das Handy leitet, wenn man den Knopf drückt fürs Foto schießen, den Befehl an die Kamera weiter. Delegation passt besser, da das Weiterleiten eine bessere Option ist, als Vererbung.\nInheritance: Attribute wie Modell, Erscheinungsjahr und Marke sowie die Funktionalitäten wie Telefonieren und Texte schreiben sollten in einer Oberklasse definiert sein. Man erbt dann von dieser Klasse und nutzt dann diese Methoden. Denn die Attribute und Funktionalitäten werden an vielen Stellen wieder gebraucht und delegation wäre zu aufwendig und unnötig.\n ",
      "score": 83.3,
      "language": "GERMAN"
    },
    {
      "id": 5596098,
      "meta": {},
      "text": "Delegation is a kind of black box reuse: The inner workings of the existing classes that are combined via aggregation and composition do not have to be known to the author of the new class. \n(pro) The author of the new class has full control over which functionality of the existing class is exposed to the user of the new class. \n(con) That means that delegating much functionality of the existing class to the user of the new class requires much manual effort (each method call has to be forwarded). \n\nIn comparison inheritance is a kind of white box reuse. The functionality of existing classes is reused (and reoffered) by subclassing the existing classes. That sometimes requires deeper knowledge of the inner workings of the subclassed class. \n(con) If the behaviour of the base class does not comply with the wanted behaviour of the new class, inheritance cannot be used, as it directly exposes the base classes behaviour to the user.\n(pro) Inheritance can happen in a way, that no other parts of the program have to be changed, because base classes and subclasses always share the base classes interface. So the rest of the program can treat the subclass like the base class which allows for less code changes and makes inheritance the often simpler solution.\n\nExamples in the Context of Smartphones:\nInheritance: A Smartphone is a mobile phone. it inherits the functionality to make and receive calls and can be used the same way as mobile phones. It only adds functionality but does not change the base functionality.\n\nDelegation: A Smartphone contains a screen. It delegates its functionality to the user (the user can see the output), but the user can not control the screen output directly (like on a computer monitor)",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596201,
      "meta": {},
      "text": "Bei der Vererbung übernimmt eine sogenannte Unterklasse die Attribute und Methoden einer Oberklasse.\nDadurch kann man die Funktionalität einer bereits existierenden Klasse einfach erweitern ohne sie ändern zu müssen. Allerdings werden dadurch möglicherweise Eigenschaften der Oberklasse nach außen gekehrt, die man eigentlich verbergen will, z.B. Methoden. Des Weiteren können Änderungen an der Oberklasse auch die Unterklasse ungewollt beeinflussen.\n \nBei der Delegation wird die Aufgabe an eine andere Klasse weitergeleitet. Dies hat den Vorteil, dass man nicht alle Methoden der Oberklasse übernehmen muss, sondern die Möglichkeit hat, nur die Methoden zu verwenden, die sinnvoll sind. dafür muss man aber gegebenenfalls mehr Rechenleistung für die Instanziierung der verschiedenen Klassen aufbringen.\n\nMan könnte Smartphone-Hardware als Unterklasse der vorhergehenden Generation sehen. Es wird die veraltete Hardware als Basis genommen und wie eine Unterklasse erweitert. Man sollte selbstverständlich  diesen Ansatz wählen, um nicht jede Generation von 0 anfangen zu müssen.\n\nEin Beispiel für Delegation wäre das Telefonieren. Das Smartphone muss diese Funktionalität nicht selbst implementieren, sondern die Anfrage nur an den entsprechenden Mobilfunkprovider weiterleiten, der die Anfrage umsetzt. Diese Funktionalität ist sinnvoll, da es so zu keinen Kompatibilitätsproblemen zwischen den Herstellern kommt.",
      "score": 75,
      "language": "GERMAN"
    },
    {
      "id": 5596263,
      "meta": {},
      "text": "The difference between delegation and inheritance is that in the first case some action would be delegated by one object to another object, that adds a new step between client and delegate - the receiver. The main advantage of this concept is that it is really flexible. Inheritance on the other hand means that there is a possibility to extend a class by adding new otheds or overriding the old ones. Inheritance is easy to use, it is easy to add a functionality in the subclass and inheritance is implemented in many programming languages. The disadvantages of the inheritance is that it makes the unwanted methods of a parent class visible and the changes in the parent class could lead to changes in the subclass. The disadvantage of delegation is that it could be inefficient because we should create a new instance of an object. \n\n ",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5585564,
      "meta": {},
      "text": "Difference:  In an inheritance, there is an existing class and a new subclass is created, that uses the existing functionalities of the superclass and has additional methods. In a delegation there is a class and it uses an instance of another class and those method calls to use those functionalities.\n\nAdvantages:\nInheritance:  It is very easy to add new methods in the subclass and it is programmable in several different programming languages\nDelegation:  It is very flexible because it is easy to change the instance object\n\nDisadvantages:\nInheritance:  When you change methods in the parent class, you also have to change them in the subclasses\nDeligation:  It is very inefficient.\n\nDelegation:  You have a class Smartphone with the methods ledOn(), switchOn(), switchOff() etc. And we have a second class called RingSound, which has the method to start and stop the ring(Hope this is the right translation for \"Klingelton\") of the smartphone. And now you implement an object in Smartphone called sound with the type RingSound. This new object can now call the methods startRing() and stopRing() of the class RingSound.\n\nThe first Part is from my solution from last year\n",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5587797,
      "meta": {},
      "text": "Delegation and inheritance are both ways of reusing code, however they differ in certain areas.\n\nWhen using delegation one reuses functionalities that are already implemented by an instance of an existing object and its methods. A certain operation is catched and delegated to this object by a receiver that makes sure the delegate is not misused. This is a very flexible way to reuse code, nevertheless it is not performant as at least one additional object instance needs to be created. A smartphone mail app might be a good way to use delegation, as it would just need to provide a GUI and could delegate most of the functionalities to a server which manages the requests.\n\nInheritance on the other hand extends an already existing base by introducing further taxonomies of hierarchically related structures. The functionalities of the implemented superclass are reused by the introduced subclasses. This is especially useful, when an existing class is already fullfilling almost the same as a new desired class as it is very easy to introduce new functionalities using inheritance. Another advantage is the fact that many programming languages, i.e. Java, support inheritance and therefore it is a straight forward concept to use. However there are disadvantages as well: Changes in the superclass can affect the subclasses and unwanted methods might be exposed. A smartphone calender app could use inheritance to store appointments of different types. A superclass \"Appointment\" could specify basic attributes for date and time used by every appointment and different subclasses are able to extend this logic.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589112,
      "meta": {},
      "text": " When using inheritance, a new class is created by subclassing, whereas when using delegation, a new class is created by through the aggregation of existing classes.\n\nDelegation advantage: Generally more flexible\nDelegation disadvantage: Might be more inefficient, because an object instance needs to be created\n\nInheritance advantage: Straightforward to use\nInheritance disadvantage: Inheritance exposes some (unwanted) methods of parent class, too\n\nWhen looking at smartphone hardware, the concept of delegation is well applicable. Because the smartphone hardware consists of multiple other hardware components, like a camera, display, CPU, etc.\n\nWhen looking at a line of smartphones from a smartphone manufacturer, say the Samsung Galaxy A line, then inheritance is well applicable, because the phones from one line are similar to each other and there are \"extends\" relationships between phones and a sort of \"prototypical\" Samsung Galaxy A smartphone. \n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5590004,
      "meta": {},
      "text": "Inheritance is a process by which one class takes the property of another class, and takes over the attributes, aswell as the behavior of the pre-existing class, and extends upon it.\nInheritance can also be divided into two fields: implementation and specification.\nInheritance is best used whenever the \"identity\" of an object is of importance, meaning what it \"can do\" and what it \"has\", hence the best words to describe it are \"is a\"\nDelegation on the other hand sends its \"work\" to another object, via any relationship, meaning it is not restricted to the classes methods and attributes, as well as to extending it.\nWhile in Inheritance the \"identity of an object\" is important, in delegation it is left away, and the only thing that matters is what the object does, and where the \"work\" goes, hence the words \"has a\"\n\nAn example with smartphones:\nInheritance:\n\t- whenever a new series of phones is produced, it needs to have more functionality over the last \n           generation (\"supposed to extend on the last generation\") ,\n\t   but it also needs to have the older functions of the older generations.\nDelegation:\n\t- phones should not have built in wifi, they should only be able to connect to an already existing network, \n           which the phone company doesn't have to create, as there are other companies who do that.",
      "score": 33.3,
      "language": "ENGLISH"
    },
    {
      "id": 5593449,
      "meta": {},
      "text": "Inheritance consists of subclasses acquiring all of the attributes and methods defined in the superclass, whereas by delegation you create another class with additional functionalities that uses instances of the original class to supply the first. \nThe point of using inheritance is to reuse the code from the existing class and define a class in terms of another class when they are both in the same logical domain , which makes it simpler to create and sustain an application, it is also pretty straightforward to use. However it's not really practical because any change that happens in the parent class must also happen in the child class.\nWhile the purpose of delegation is to enable an object to use another object that helps supply information or perform a specific assignment instead of doing the task itself, which makes it really flexible. In the other hand it may be inefficient because an object needs to be created.\nAn example for inheritance in the context of smartphones : The brands of smartphone for example, they all enherit from the same Class \"Smartphone\" since they are all smartphones. We could put as subclasses Apple, Samsung; LG, Mi ...ect .\nUsing delegations in the operating systems of smartphones is a clever idea because it is easier to fix bugs independently from other classes that way one error does not interfere with the other classes like when using inheritance.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595714,
      "meta": {},
      "text": "Inheritance is the process by which one class takes the property of another class. i.e. the new classes, known as derived or child class, take over the attributes and behavior of the pre-existing classes, which are referred to as base classes or super or parent class. \nADVANTAGES:\nInheritance allows us to inherit all the properties of base class and can access all the functionality of inherited class. It implements reusability of code.\n\nDISADVANTAGES:\nImproper use of inheritance or less knowledge about it may lead to wrong solutions. Also sometimes, data members in base class are left unused which may lead to memory wastage.\n\nDelegation is simply passing a duty off to someone/something else.  Delegation means that you use an object of another class as an instance variable, and forward messages to the instance. \nADVANTAGES:\nDelegation is run-time flexibility – the delegate can easily be changed at run-time. \n\nDISADVANTAGES:\nBut unlike inheritance, delegation is not directly supported by most popular object-oriented languages, and it doesn’t facilitate dynamic polymorphism.\n\nWhen you are upgrading the model of an existing smartphone, you use inheritance as the new model inherits all the existing features  while  adding some new features as well. The Activity and Health apps are supported by each other. Since Activity app in smart watch transfers data to Health app in the smart phone, we can use delegation here.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595869,
      "meta": {},
      "text": "While both inheritance and delegation are a form of reuse of different functionalities in order to avoid code duplications and useless repetitions, we can distinguish some differences between them. \nInheritance is a form of hierarchical structure that represents the process of passing certain functionalities (attributes / methods) from the superclass to the subclass. In other words, the subclass, which extends the superclass, has access to the functionalities of the parent class. Inheritance has two main goals; describing the taxonomies in order to make the analysis object model clearer and specifying the interface, thus increasing improving the extensibility. One of the inheritance's advantages is that it offers flexibilty in implementing new functionalities in the subclass. On the other hand, changes occuring in the superclass might affect the subclass and impose also changes in its functionalities. A good inheritance example related to smartphones can be different smartphone types' classes (Apple, Samsung, Xiaomi...) that are inheriting the main properties of the parent class (smartphone) like setAlarm, takePhotos ... These different smartphones have a lot of functionalities in common that can be implemented in a parent class, to which they will eventually have access as subclasses.\nDelegation is the process of reusing the functionalities of already existing instances. This is represented through a relationship involving three main objects; our class \"receiver\" called by the \"client\" sends a request to the \"delegate\" in order to evaluate its functionlities. Delegation can be consequently really flexible. But this reuse form is unfortunately not supported by a lot of programming languages like c++ where the programmer has to put in a lot of work to use delegation, which can be a disadvantage. A good smartphone example realted to delegation would be having an acces to your wallet (ApplePay for instance) on your phone and being able to pay only using your phone. An object card is created and used to have access to the functionalities of the real card (pay..)",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596185,
      "meta": {},
      "text": "+ inheritance:  ist wenn eine klasse die eigenschaft des anderen klasse übernimmt. Child klasse übernimmt die eigenschaft und das verhalten der Super klasse.\n+ delegation: kann als beziehung zwischen objekte betrachtet, bei dem das eine objekt bestimmte methodenaufruft an ein anderes objekt weiterleitet, sozusagen als der delegierter betrachtet wird.\n+smartphone: user account (Iphone account zb.), icloud , icloudDrive, icloudFoto\n\t\t\twenn  iphoneAccount auf icloud zugreif dann kann es mit delegation implementiert werden. \n\t\t\tda icloud auch icloudDrive und icloudFoto hat kann driven foto von icloud als inheritace \n\t\t\timplementiert werden",
      "score": 25,
      "language": "GERMAN"
    },
    {
      "id": 5596187,
      "meta": {},
      "text": "Bei Inheritance wird eine bereits bestehende Klasse durch Vererbung durch eine Kind-Klasse um Operationen/Logik/Funktionalität erweitert. Bei Delegation entsteht diese Erweiterung der Operationen/Logik/Funktionalität dadurch, dass bestimme Operationen an ein anderes Objekt weitergegeben werden, in welchen diese Funktionalität bereits vollständig implementiert ist.\n\nEin Vorteil von Inheritance ist, dass viele Programmiersprachen das Prinzip der Vererbung unterstützen und es somit in vielen Sprachen angewendet werden kann.\nEin Nachteil von Inheritance ist, dass sobald sich etwas in der Eltern-Klasse ändert teilweise alle Kinder-Klassen auch angepasst werden müssen.\n\nEin Vorteil von Delegation ist, dass einfach zu implementieren ist und sehr flexibel ist.\nEin Nachteil von Delegation ist, dass immer ein zu dem eigentlichen Objekt immer noch ein zusätzliches erstellt werden muss. Dadurch ist es unter Umständen nicht so performant wie Inheritance.\n\nIm Smartphone Kontext könnte man Delegation z.B. verwenden wenn man eine Datei in einer App in den Download-Order des Nutzers speichern möchte. Dort würde man z.B. nur eine neues Objekt der FileExplorer Klasse erstellen und diesem sagen, dass die Datei abgespeichert werden soll. Wie die Klasse dies macht und was für Funktionen die Klasse noch kann ist einem egal, weshalb man in diesem Fall auch Delegation statt Inheritance nutzen solle.\n\nMöchte man aber nun hingegen seine eigene Kamera App programmieren, so kann man gut das Prinzip der Inheritance anwenden. Man kann von der Standard Kamera Klasse erben und neue Methode hinzufügen oder bestehende verändern. Auch ist es egal, ob in der Klasse Methoden der Eltern-Klasse verfügbar sind, da diese unter Umständen sowieso benötigt werden.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5596195,
      "meta": {},
      "text": "Inheritance describes a hierarchical relationship between different classes. It is implemented using inheritance. On the other hand, delegation is implemented using composition or aggregation. The delegate can be of a different type as the delegator. With inheritance, the methods of the base class or children are directly called. With delegation, the calls are forwarded to the delegate.\n\nAn advantage of delegation is that it offers more runtime flexibility, delegates can be swapped at runtime. A disadvantage is that redirections induce a performance overhead.\n\nAn advantage of inheritance is that it allows to reuse the functionality of the base class without any effort, no need to forward calls as in delegation. A disadvantage is that the subclasses need to follow the same API as the base class (e.g. if we implement a queue from a list, we may want to remove/rename methods).\n\nIn the case of a smartphone, a good use for inheritance would be to implement user interface components. We can have a base class for displayable elements, then specializations for clickable ones and finally different kinds of widgets, app icons, buttons. Delegation could be used for the internet hotspot: data transfers are delegated to different classes implementing the bluetooth, wired and wifi hotspot.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5596519,
      "meta": {},
      "text": "While inheritance and delegation both used to increase code reusability, the first one describes the situation where the child class inherits the functionality from the parent class. In the second one we use the functionality from already existing objects. An advantage of using inheritance is that then a change in the code is required, it is enough only to change the parent class, the changes in all of the children classes aren't required. At the same time this advantage could be a disadvantage because of the high coupling. An advantage of delegation is the low delegation at the same time it doesn’t help in the sense of dynamic polymorphism. As an example for smartphone the functionality of the phonebook is almost the same for the different types of smartphones, so we can see it as the parent class of each separate class for a smartphone.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585111,
      "meta": {},
      "text": "Delegation:\n\nDelegation is the invocation of an operation on another object. In order to call an operation on an object, it must first be created. So delegation consists of two steps, creating an object and calling methods on it. \nOne advantage of delegation is flexibility. You are not in an inheritance hierarchy with the object, so you don't inherit functionality from the object. Also, you can delegate operations to any number of objects. \nOne disadvantage of delegation is inefficiency. The first step of delegation, creating an object, is often expensive.\n\nInheritance:\n\nInheritance is the extension of a superclass. With inheritance, you inherit the functionality of the superclass and can extend it. You can use the already existing functionality of the superclass in the extension.\nAn advantage of inheritance is that you can use the already existing functionality of the superclass and don't have to create a new object for it.\nA disadvantage of inheritance is that you are dependent on the superclass. Since you are \"building\" it into your class, the subclass may have to be changed when the superclass changes.\n\nSmartphone examples:\n\nThere are many screens in a smartphone: the home screen, the app library, the news screen etc. For these screens it makes sense to create a superclass \"Screen\" that implements common features and the different screens inherit from it.\n\nHowever, if e.g. the news screen wanted to play a sound, then inheritance makes no sense here, instead the news screen creates an object of the audio player and calls a method on it that plays the desired sound.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585649,
      "meta": {},
      "text": "Difference between inheritance and delegation.\nIn inheritance the subclass must always be of the same type as the parentclass. Meaning that the usage of one parentclass method in an childclass should not be unwanted behaviour. In an implementation this contraint doesn't exist\n\nInheritance:\n+\nSimple yet useful concept\n-\nUnwanted and unsupported functions (or attributes) of parent class are still available.\n\nDelegation:\n+\nMore flexible and more accurate implementation.\n-\nObject that additionaly needs to be created might be unncessary\n\nSmartphones\nLet us suppose that any Android mobile phone needs a functionality X which is implemented by the smartphone-manufacturer. \nFor inheritance, Google could provide a basic application that needs to be adjusted by the manufacturer. For example, changing weights, adding or adding functionality. The resulting application would now be a modified subclass of the original class, the basic application.\nFor delegation instead, Google could provide interfaces. Where the interface get's its information from, software or maybe its own hardware component, isn't specified any further.\n\nIt's hard to determine, which variation is more suited. It simply depends too much on what kind of application it is. But in general, the rule of thumb is, the larger and more important the application, delegation becomes more useful. A larger application has to many dependencies, conditions for it to have a parent class. Much more control is needed.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5586340,
      "meta": {},
      "text": "Difference: \nInheritance: a class is already implemented that does almost the same as the desired class, meanwhile delegation: functionality of existing objects using object instantiation and method calls. \nDelegation can avoid a problem caused by inheritance : the  inherited operations might exhibit unwanted behaviour , but it will be more inefficient.\nInheritance is extending a base class by a new operation or overriding an existing operation. \nWhile delegation is catching an operation and sending it to another object. \n\ninheritance\n--advantage : \nStraightforward to use \n--disadvantage : \nChanges in the parent class can force the subclass to change as well \n--example:\nWe use lots of free Apps in our phones, but there are some VIP memberships. In these cases , the developers use most of the inheritance to improve customer experience. \nFor instance,  a social media App allows all the customer to edit and post their profile. \nBut the people who paid for a membership can view the history record who looked at their profile and when. \n--reason:The developer should first finish the normal basic classes and functions , then use inheritance to extend the base class by a new operation or override an existing operation for VIP users.\n\ndelegation \n--advantage: \nGenerally more flexible \n--disadvantage:\nMight be more inefficient , because an object instance needs to be created. \n--example:\nOn Google Maps , if you choose a specific bakery , it shows up with a profile view and with a website address , you can click on that address and open it with your \"Safari\". Through clicking a Website address on Google Maps to open your \"Safari\" and browse that website. \n--reason:  the example using delegation to catch an \"click website address\"operation and send it to another object \"Safari\".\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5587427,
      "meta": {},
      "text": "With inheritance, the functionalities of an object are reused by subclassing frim an existing implementation. \n+ Adding new functionalities to the subclass / slightly modifying the existing ones, is very simple\n- some inherited functionalities might case behavioral problems, e.g calling a method available though the \"super\"-class, that the subcalss is not designed to handle\n\n\nIn delegation you simply give a duty to another object, that already has the necessary implementation to complete the duty.\n+ Only reuses a specific functionalities, leaving out everything that might cause problems, also more flexible as the delegated task can easily be changed\n- Needs to create an additional delegate object -> more expensive\n\n\nDelegation: Apps and functionalities that can take pictures like whatsapp and snapchat should delegate the camera , as they only need 1 (or very few) functionalities from the camera subsystem/class and dont share any other similarities with it, so inheriting from it might exppose some unwanted funtions.\n\nInheritance: \nThe app logos on the screen could be implemented with inheritance, as the all need a logo adn they all hould open when \"tapped\", but some are more unique and display things as number of notifications or spinning \"clock-hands\" (Uhrzeiger?). They need all the functionalities of a basic app logo, and implementing the extra ones can be achiieved very easily.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595745,
      "meta": {},
      "text": "Bei inheritance erweitert bzw. speziefiziert man eine superklasse während man bei delegation eine operation weiterreicht an ein anderes object was diese schon implementiert hat.Delegation ist flexibler da man nichts neues in einem objcet implementieren muss sondern es einfach von einem anderen object verwendet aber man muss dieses objekt instansiieren was bei größeren projekten ineffizent sein könnte.\nBei inheritance lassen sich neue funktionalitäten einfach hinzufügen aber vieleicht bekommt man methoden von der superclasse die man garnicht braucht in seiner unterklasse und wenn man was in der superklasse ändert ändert es sich auch in der unterklasse. Aber es ist einfach zu nutzen und wird von sogut wie allen programiersprachn unterstüzt.\n",
      "score": 83.3,
      "language": "GERMAN"
    },
    {
      "id": 5595894,
      "meta": {},
      "text": "If you want to reuse a function you can either make use of inheritance or delegation. The difference between the two is the instantiation of a new object for the delegation because you need an object of the class that provides the method you want to use. Using inheritance however means that a class inherits from another class and therefore is able to access its methods. Another difference is, that we neither have to implement the method nor call it in a function. \nThe advantage of delegation is that you don't inherit all the methods of the super class as in inheritance but you can access specific methods. A negativ aspect is by contrast is that it isn't supported by all object-programming languages.\nInheritance is smart to use because the program will be shorter, you don't have to define an extra method, and you have a better overview over your code. However if the parent class changes, the sub class will change too, so you can't control code changes. \nRegarding smartphones: If iPhone releases a new iPhone we want to reuse the functions of the last version for example charging the iPhone. Inheritance is the best idea because we have an is-an relationship between iPhone and iPhone14 (we want all its functions). Delegation would be more useful if iPhone releases wireless headPhones which also need the function charge but don't need any other functions. The instantiation of a iPhone for the class headPhones is not too severe because each pair needs a smartphone anyways.\n",
      "score": 83.3,
      "language": "ENGLISH"
    },
    {
      "id": 5596708,
      "meta": {},
      "text": "Inheritance is a process where one class takes the properties of another. For example, child classes taking over attributes, methods and other implemented behaviours of already implemented classes, also knows as parent classes/super classses. We had an example in the Bumpers game, where the Car classes would inherit from the Super Class Car. While the child classes can contain their own implementation, it is best to stick to some form of consistency to avoid duplication and errors. In delegation, this is not the case. It is not as bound as inheritance.\nA disadvantage here is parent and child class could get tightly coupled and lose their independency to each other and cause problems. The child is too dependant on the parent class.\n\nDelegation on the other hand, can be used as an alternative to inheritance. Delegation is simply giving duty/passing duty to someone else. Whereas inheritance uses a IS-A relationship for re-usage, delegation uses a HAS-A reference do to just that as well more efficiently. Delegation is designed to lean the code towards a behavioural approach without much issue. \n\n\n\n\nHad no more time.... started too late... hopefully this gets some points\n\n",
      "score": 58.3,
      "language": "ENGLISH"
    },
    {
      "id": 5584803,
      "meta": {},
      "text": "Delegation is a black box reuse and uses a HAS-A relationship for reuse(reuse through aggregation, instance of class has to be created). On the contrary inheritance is a white box reuse, which uses a IS-A relationship for reuse. This means we can simply use the keyword \"this.\" to call functions without having to create an object like in delegation.\n\nA problem with inheritance comes up when we for example have two inheritance trees and we want to add a new class that uses functionalities of both trees. The issue here is that inheritance is forcing us to maintain the structure, whereas with delegation one can achieve much more flexibility. However inheritance is beneficial when one specifically wants to express an is-a relationship.\n\nDelegation also comes in handy when creating a new class and one only wants to use few functionalities of an other class. With inheritance your new class would have to have all functionalities of the parent class.\nCon of Del. On the other hand delegation does not support dynamic polymorphism(overriding of methods), which can be useful when a subclass needs a specific implementation of a method.\n\nSay we have a Display class that is responsible for displaying stuff on the phone screen using the Android software. And SystemSoftware class stores system software and things related to it.\nHere Delegation makes sense. Display class HAS-A SystemSoftware object(one way of modelling it).\n\nThere is a Sound class and then there are child classes NotificationSound, RingtoneSound, etc. all of them inherit form class Sound, because basic attributes and methods, like volume, tone etc. are applicable for all these classes.\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5585855,
      "meta": {},
      "text": "Inheritance and delegation are both concepts to solve code duplication, but they have entirely different approaches. \nThe first one creates a hierarchy, where the child class will inherit the methods and properties declared by the parent class. For example, a simple idea of a smartphone with minimal functionality is a parent class of any other kind of smartphone, from iPhone to BlackBerry. When creating a subclass, you don't have to implement every basic process, like receiving a call or sending a message. \nAdvantages: easy to implement; leads to less development and maintenance costs.\nDisadvantages: makes the two classes (base and inherited class) get tightly coupled and in some way, violates encapsulation; the overuse of inheritance makes the program more complex\nThe second one is when multiple classes hand over the responsibility for a particular task to another class or method. Here, an example would be many types of smartphones, and another class, that represents a specific behavior, like Shortcut. Phones that don't need it simply don't use this class.\nAdvantages: easier to change run-time, compared to inheritance;\nDisadvantages: delegating too many functions is inefficient, as you have to create a new class for every action",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5591381,
      "meta": {},
      "text": "Inheritance occurs when a subclass uses functionality of the superclass whereas delegation means an already implemented functionality is caught and then sent to the other object where it is already implemented.\nAn advantage of inheritance is its widespread support in programming languages but it may expose some unwanted methods of the superclass.\nAn advantage of delegation is its flexibility as you do not have to pay attention to things such as polymorphism but it is generally more inefficient because you may need to create a new object to gain the functionality.\n\nExamples:\nIf I have a clock app and want to have an alarm app on my smartphone the alarm app would inherit from the clock app because it is a more specific use of the clock with some additional functionality and should have good performance.\nIf I add a second camera to a smartphone and need image processing capabilities instead of using inheritance I would use delegation so both cameras can access the same image processing chip needing only one component.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595268,
      "meta": {},
      "text": "Inheritance in java is when there is a super class and the according subclasses inherit the properties of the super class. \nDelegation is when you are giving responsibility for a specific task to a different method or class.\n\nInheritance advantage: Using inheritance minimizes code as e.g. the same methods or attributes can be used in the subclasses \nInheritance disadvantage: You can't just delete a super class if a subclass inherits from it so you first have to make changes to the subclass(es).\n\nDelegation advantage: Delegation is more adaptable than inheritance as you can easily alter it during runtime.\nDelegation disadvantage: As you have to make an instance of an object, it is probably not that efficient.\n\nFor example every smartphone has the functionality (method) shut down and turn on. As these functionalities are similar for every e.g. iPhone, there could be a superclass iPhone with how to turn it on/ off and adapt the method in a subclass slightly if it is necessary.\n\n",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596543,
      "meta": {},
      "text": "With inheritance, you inherit from another class with the same features, so you don't have to create a new class with the same features again. So you  take over the attributes/methods of already existing classes. Its very simple to implement and the inheritance structure is clear to everyone. But in more complex situations it is not as agile as delegation because you always inherit features once they are implemented.\n\nWith Delegation you use an object of another class to forward certain methods to the object. Its efficient because in a complex system you use delegation to delegate to certain features only if its necessary and if not you just use the base features and not the whole system at once. Its not so easy to implement (costly) and the structure can be not immediately clear to externals.",
      "score": 75,
      "language": "ENGLISH"
    },
    {
      "id": 5586974,
      "meta": {},
      "text": "Inheritance is achieved by extending the superclass, namely overriding operations from it or/and adding new operations, or implementing an specification; delegation is in contrast achieved by catching an operation in a receiver object and sending it to the delegate object which implements the operation. The source of reused functionalities is therefore different: inheritance reuses already implemented/specified functionalities from the superclass while delegation reuses functionalities of an existing object.\n\nInheritance is supported by many programming languages and thus works well out-of-the-box; but it's also possible to expose unwanted methods of the parent class, which causes  inherited operations to exhibit unwanted behaviours. Delegation is generally more flexible thanks to its object-level reuse, but also potentially more inefficient because instances needs to be created.\n\nInheritance example: to implement both voice and video calling features, a smartphone system might have two classes called VoiceCall and VideoCall, which both extends a superclass called Call, because the subclasses can reuse common functionalities from superclass Call like dial, hands-free, hang up and so on. It also makes sense structurally, because VoiceCall and VideoCall are also two kinds of Call.\n\nDelegation example: to allow the smartphone to play audio, its system might have a delegate object called audioPlayer which has a public method play(AudioFile). As for examples, Music player app might call audioPlayer.play(MusicFile), while Games might call audioPlayer.play(GameBackgroundMusic). By this way, all logic in audioPlayer can be flexibly reused in all other classes, regardless of their inheritance relationship.",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5589929,
      "meta": {},
      "text": "Bei der Vererbung sind alle Methoden der Oberklasse ebenfalls in der Unterklasse aufrufbar und geben dadurch möglicherweise ungewollten Zugang zu weiteren Funktionen. Delegation ist eine neue unabhängige Klasse dessen Objekt auf die Methoden einer anderen Klasse(bei Vererbung die Oberklasse) zugreift und damit die Verwendung einschränkt auf die eigenen Methoden.\nVererbung: Pro: viele Funktionen sind bereits da und weitere können sehr leicht hinzugefügt werden.\n\t\tCon: es müssen die Methoden der Oberklasse verwendet werden dürfen, ohne dass dabei eigentlich unerlaubte Zugriffe passieren.\nBeispiel: Ein neues Handys hat immer die grundlegenden Funktionalitäten die Handys im Allgemeinen haben (z.B. können telefonieren, Fotos machen, in einem Store Apps herunterladen, ...). Diese Funktionalitäten bilden sozusagen die Oberklasse für alle weiteren Handys die Entwickelt werden. Dabei kann auch etwas verbessert/verändert werden ( z.B. eine bessere Kammera zum Fotos machen) aber alle Funktionalitäten müssen vorhanden sein.\nDelegation: Pro: Freie Auswahl welche Methoden in den eigenen Aufgerufen werden sollen. Es können auch Methoden aus unterschiedlichen anderen Klassen aufgerufen werden, je nachdem wie es gebraucht wird.\n\t\tCon: Braucht mehr Speicherplatz und hat mehr \"coupling\" zwischen den Klassen.\nBeispiel: Beim Responsive Design gibt es ein Programm oder Ansätze für ein Programm, welche nicht komplett übernommen werden müssen, jedoch hilfreiche Funktionen bieten die aufgerufen und verwendet werden können.",
      "score": 100,
      "language": "GERMAN"
    },
    {
      "id": 5595580,
      "meta": {},
      "text": "The difference between inheritance and delegation:\nIf u use inheritance u take the property of one class for another class so the child classes have the same attributes and behavior of the pre existing classes the so called super/parent classes\nwhile delegation is just passing a duty off to something else for example like in the first homework of this week where we had to pass the duty of the connect method to the networkconnection interface.\n\nInheritance:\nAdvantage:\nIt is easy to implement new functionallities in the subclasses so for example if u have a super class for birds \nit is easy to individulise each subclass\nDisatvantage:\nSometimes inheritance can expose unwanted methods of the super class. For example if u have the method fly for your superclass birds but u implement a subclass of a kind of bird which can´t fly.\n\nDelegation:\nAdvantage:\nDelegation is more flexible. It does not force you to accept all the methods of the super class so u can use only the methods which really make sense.\nDisatvantage:\nit is not directly supportetd by all of the most popular object-oriented languagges.\n\nExample in the context of smartphones:\nIf a smartphone company creats a new smartphone it is easy to use inheritance because the basic concept stays the same and u can just implement new subclasses with new functionalities so to create a new generation of smartphones I would use inheritance.\nI would use delegation for example in a situation when u close an app because u would have the function already implenentet in a class and then u can just call the closing method in each app on the smartphone.\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5588142,
      "meta": {},
      "text": "Inheritance means reusing all the methods of a parent class and extending it by adding more. \n\nDelegation means using another class, but not necessarily knowing the implementation and only using the methods that are needed, the rest are left alone. The methods of the delegated class are also not part of the new class.\n\nAn example for inheritance would be an app class with functions like render(), showButton(), runInBackground(). A messenger app would inherit all methods of the app class, but also add methods like sendMessage(), changeProfilePicture().\n\nAs for delegation, an example would be a notification class, the messenger app might want to send notifications, and therefore calls the corresponding notifications methods. But it doesn't know anything about the implementation and only uses the methods it needs. It doesn't inherit the methods, since they are not fitting in the messenger app class.",
      "score": 33.3,
      "language": "ENGLISH"
    },
    {
      "id": 5593779,
      "meta": {},
      "text": "Inheritance means that we use \"extends\" in Java to extend a superclass by a new operation or overriding an existing operation.  \nIn inheritance, the subclass has all the methods of the subclass, and can continue to add methods that the superclass does not have. So, we could straightforward to use inheritance and easily implement new functionality in the subclass. What's more, inheritance can be supported by many programming languages.\nHowever, as inheritance extends methods of the superclass, sometimes unwanted methods are also inherited, it is redundant. If there are changes in the superclass, subclass has to be changed as well, sometime it is unnecessary.\n\nDelegation means catching an operation and sending it to another object. That is, using object instantiation and method calls, one class represents (reuse) the functionality of existing class.\nUsually, it is more flexible than inheritance. And it has clear responsibilities and high scalability. If subclass only needs to reuse several methods in superclass, it can be achieved through delegation. \nHowever, sometimes delegation might be more inefficient, because creating new object instance requires additional work, and some implementation might be very complex. It may also cause processed requests more slowly due to the addition of delegation objects.\n\nIn the example of smartphones, the system update could be inheritance. Apple Smartphone's IOS 2nd generation extended the functions of 1st generation and add more new functionalities. \nFor delegation it could be the shortcut of samrtphone desktop. The shortcut is a proxy for the functions it refers to. I could creat a shortcut for emergency call, directly and easily click on it to call for help without a series of operations：open the call menu, press the phone number and finally make the call.\n\n\n\n\n\n",
      "score": 100,
      "language": "ENGLISH"
    },
    {
      "id": 5595341,
      "meta": {},
      "text": "Inheritance is used when you have a class and you let a subclass inherit from that class, because it is very similar and functions similarily but has some additional aspects that distinguish the subclass from the super/parent class. On a smartphone we have the front and the back camera. Both are cameras and can be implemented differently as subclasses and both inherit from the abstract class camera. Inheritance makes sense as both subclasses have common attributes and functions (e.g. taking a picture) but may differ in some (e.g. resolution).\nAdvantage: Making use of reuse (subclass reusing super/parent class stuff)\nDisadvantage: coupling between sub and parent class\n\n\nDelegation: delegating task/function to a class with implemented function\nOn a smartphone we can have classes for buttons delegate the function they trigger to the class. For example clicking a button triggering the taking photo function in the camera class. This makes sense as function is well defined in the camera class with all the attributes and we don't need to implement it in the button class, as buttons can be used differently according to the mode the phone is in (camera mode, main menu mode etc.).\nAdvantage: No need to implement the function.\nDisadvantage: coupling -> too tight coupling may break the whole thing if something is changed and doesn't work properly",
      "score": 91.7,
      "language": "ENGLISH"
    },
    {
      "id": 5596319,
      "meta": {},
      "text": "\tThe concepts of inhertitance and delegation exists within many programming languages. However, I will be using Java as an example. Inheritance implies that there is a parent-child relationsship between two classes; where child is required to inherit its parents attributes and some methods, in addition to instantiating itself via its parents constructor. Delegation is different in the sense that there is no parent-child relationship taking place at any time. Instead it has a class that forwards specific method calls to another class, referred to as its delegate. No inheritance of any type of attributes or methods takes place in delegation. \n\tBoth of these concepts obviously have different use cases and come with their own advantages and disadvantages. Inheritance always implies some kind of relationship and enforces certain requirements upon the inheriting class. It can however be very useful for parsing instances of a class to a system or API that needs to recognize the relationship between parsed objects. In addition to that, it can be great for creating more specialzed versions of a class, that still fullfill the broad functionality of their parent. \n\tDelegation on the other hand, provides much more flexibility but less attachment between classes. The delegate of a class can easily be changed at any time without having to break any type of bond. Furthermore, it can be useful if you only need a small part of a class' functionality, without having to inherit all of it. \n\tBoth of these concepts can be utilized within the context of a smartphone, when a specific application utilizing partial functionality of another one and vice-versa. An example of delegation could be the video player utilizing similar interface and internal structure as a music player, without either of these classes having to inherit one another. Inheritance could come in the form of an another version of an application, being the child of its predecessor and utilizing all of its functionality, while implementing its own new methods. ",
      "score": 66.7,
      "language": "ENGLISH"
    }
  ],
  "bonus_points": 0,
  "example_solution": "Inheritance reuses a specified or implemented functionality from a super class, while delegation reuses implemented functionality in an existing object. \nDelegation is more flexible to use, inheritance is straightforward and easy to implement.\nInheritance has one disadvantage: if you change the signature of the superclass, all the subclasses have to be recompiled. On the other hand, a bad use of delegation might lead to high coupling\n\nExamples:\n- Inheritance: \"FoldableSmartphone\" and \"Smartphone\" the FoldableSmartphone extends the Smartphone with a hinge and the option to fold the screen. This should NOT be delegated because the FoldableSmartphone should have at least the same attributes as the Smartphone class.\n- Delegation: PhysicalCamera and CameraApp should be coupled by delegation. The CameraApp uses the \"take a photo\" functionallity of a PhysicalCamera to make the user's action of clicking a button actually take a photo, therefore it delegates this responsibility.",
  "grading_criteria": [
    {
      "id": 6427,
      "title": "plagiarism",
      "structured_grading_instructions": [
        {
          "id": 15122,
          "credits": 0,
          "feedback": "You plagiarised the slides. We noted it down and will preserve us the right to revoke the bonus from you",
          "usage_count": 1,
          "grading_scale": "Bad",
          "instruction_description": "Add this one if the student plagiarised the slides / the internet"
        }
      ]
    },
    {
      "id": 6428,
      "title": "Assessment of the Difference",
      "structured_grading_instructions": [
        {
          "id": 15123,
          "credits": 1,
          "feedback": "Correct explanation of the difference, well done!",
          "usage_count": 1,
          "grading_scale": "Good",
          "instruction_description": "Apply this instruction if the difference is well explained"
        },
        {
          "id": 15124,
          "credits": 0.5,
          "feedback": "Your explaination is corerct, however it is not clear",
          "usage_count": 1,
          "grading_scale": "Weak",
          "instruction_description": "Apply this instruction if the difference is explained, however it is still unclear"
        },
        {
          "id": 15125,
          "credits": 0,
          "feedback": "You did not explain the difference",
          "usage_count": 1,
          "grading_scale": "Weak",
          "instruction_description": "Apply this instruction if the difference is not explained"
        }
      ]
    },
    {
      "id": 6429,
      "title": "Assessment of the Advantages",
      "structured_grading_instructions": [
        {
          "id": 15126,
          "credits": 1,
          "feedback": "Correct advantage, well done!",
          "usage_count": 2,
          "grading_scale": "Good",
          "instruction_description": "Apply this instruction **for each** correctly explained difference"
        },
        {
          "id": 15127,
          "credits": 0,
          "feedback": "You did not explain advantages",
          "usage_count": 2,
          "grading_scale": "Bad",
          "instruction_description": "Apply this instruction, if the student did not mention an advantage"
        },
        {
          "id": 15128,
          "credits": 0,
          "feedback": "This advantage is wrong",
          "usage_count": 2,
          "grading_scale": "Bad",
          "instruction_description": "Apply this instruction, if the student did mention a wrong advantage"
        }
      ]
    },
    {
      "id": 6430,
      "title": "Assessment of the Disadvantages",
      "structured_grading_instructions": [
        {
          "id": 15129,
          "credits": 1,
          "feedback": "Correct disadvantage, well done!",
          "usage_count": 2,
          "grading_scale": "Good",
          "instruction_description": "Apply this instruction **for each** correctly explained disadvantage"
        },
        {
          "id": 15130,
          "credits": 0,
          "feedback": "You did not explain disadvantages",
          "usage_count": 2,
          "grading_scale": "Bad",
          "instruction_description": "Apply this instruction, if the student did not mention an advantage"
        },
        {
          "id": 15131,
          "credits": 0,
          "feedback": "This disadvantage is wrong",
          "usage_count": 2,
          "grading_scale": "Bad",
          "instruction_description": "Apply this instruction, if the student did mention a wrong disadvantage"
        }
      ]
    },
    {
      "id": 6431,
      "title": "Assessment of the Example",
      "structured_grading_instructions": [
        {
          "id": 15132,
          "credits": 0.5,
          "feedback": "Correct example, well done!",
          "usage_count": 2,
          "grading_scale": "Good",
          "instruction_description": "Apply this instruction **for each** well explained example"
        },
        {
          "id": 15133,
          "credits": 0,
          "feedback": "The explanation of the example is missing",
          "usage_count": 2,
          "grading_scale": "Poor",
          "instruction_description": "Apply this instruction **for each** example without any explanation, e.g. \"Inheritance: \"Smartphone\" and \"FoldableSmartphone\""
        },
        {
          "id": 15134,
          "credits": 0,
          "feedback": "You did not explain any example",
          "usage_count": 2,
          "grading_scale": "Bad",
          "instruction_description": "Apply this instruction, if the student did not mention an advantage"
        },
        {
          "id": 15135,
          "credits": 0,
          "feedback": "Please stick to the problem statement. You did not refer to a smartphone-related example",
          "usage_count": 2,
          "grading_scale": "Bad",
          "instruction_description": "Apply this instruction, if the student did not use smartphone-related examples"
        }
      ]
    }
  ],
  "problem_statement": "Describe the difference between inheritance and delegation. Also provide an advantage and disadvantage for each concept.\n\nAdditionally come up with an example in the context of **smartphones** for **each** concept and explain why you would choose it.\n\n\n*Requirement: Use your own words and do not just copy the lecture slides nor internet sources! Limit yourself to around 250 words*",
  "grading_instructions": "<ins>General Grading Scheme:</ins>\n- 1 point for a good explaination of the difference \n- 1 point for advantages (1x inheritance, 1x delegation) --> up to 2 points\n- 1 point for disadvantages (1x inheritance, 1x delegation) --> up to 2 points\n- 0.5 points for the example (1x inheritance, 1x delegation) --> up to 1 point\n\n<ins>General Rules:</ins>\n- If the student provides more ad-/disadvantages and examples than necessary, the worst one counts. (You can still provide feedback, but under no circumstances publish the evaluation guidelines)\n- The 250-word limit is a soft limit, the hard limit is at 500 words. In such cases, please assess the submission with 0 points and reference to the 250-word limit. DO NOT communicate the 500-word limit to the students!\n- In case one submission is suspicious of plagiarism, please report the assessment-link with a brief explanation to the plagiarism subteam o Confluence"
}