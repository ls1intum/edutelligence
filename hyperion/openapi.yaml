components:
  responses:
    UnauthorizedError:
      content:
        application/json:
          schema:
            properties:
              detail:
                type: string
            type: object
      description: Authentication failed - API key is missing or invalid
  schemas:
    ActionUpdate:
      description: Base class for all action updates, including progress updates and
        final results.
      properties:
        timestamp:
          anyOf:
          - type: string
          - type: 'null'
          description: Timestamp when this update was generated.
          title: Timestamp
        update_type:
          description: Type of update defined by the specific action.
          title: Update Type
          type: string
      required:
      - update_type
      title: ActionUpdate
      type: object
    CallbackAuth:
      description: Authentication details for job callbacks.
      properties:
        header_name:
          default: X-Callback-Auth
          title: Header Name
          type: string
        secret:
          title: Secret
          type: string
      required:
      - secret
      title: CallbackAuth
      type: object
    ComponentHealth:
      description: Health status of an individual system component.
      properties:
        details:
          nullable: true
      required:
      - status
      title: ComponentHealth
      type: object
    ConsistencyCheckInput:
      description: Input model for consistency check action.
      properties:
        action:
          const: consistency_check
          default: consistency_check
          title: Action
          type: string
        problem_statement:
          description: The description of the exercise containing tasks
          title: Problem Statement
          type: string
        solution_repository:
          additionalProperties:
            type: string
          description: Files in the solution repository, mapping file paths to content
          title: Solution Repository
          type: object
        template_repository:
          additionalProperties:
            type: string
          description: Files in the template repository, mapping file paths to content
          title: Template Repository
          type: object
        test_repository:
          anyOf:
          - additionalProperties:
              type: string
            type: object
          - type: 'null'
          description: Files in the test repository, mapping file paths to content
          title: Test Repository
      required:
      - problem_statement
      - template_repository
      - solution_repository
      title: ConsistencyCheckInput
      type: object
    ConsistencyCheckProgressUpdate:
      description: Progress update for consistency check action.
      properties:
        files_processed:
          anyOf:
          - type: integer
          - type: 'null'
          description: Number of files processed so far.
          title: Files Processed
        progress:
          anyOf:
          - maximum: 100.0
            minimum: 0.0
            type: number
          - type: 'null'
          description: Optional progress indicator as percentage.
          title: Progress
        status_message:
          description: Current status message of the consistency checking process.
          title: Status Message
          type: string
        timestamp:
          anyOf:
          - type: string
          - type: 'null'
          description: Timestamp when this update was generated.
          title: Timestamp
        total_files:
          anyOf:
          - type: integer
          - type: 'null'
          description: Total number of files to process.
          title: Total Files
        update_type:
          const: consistency_check_progress
          default: consistency_check_progress
          title: Update Type
          type: string
      required:
      - status_message
      title: ConsistencyCheckProgressUpdate
      type: object
    ConsistencyCheckResult:
      description: Final result for consistency check action.
      properties:
        issues:
          description: List of consistency issues found
          items:
            $ref: '#/components/schemas/ConsistencyIssue'
          title: Issues
          type: array
        status:
          default: success
          description: Status of the consistency check
          title: Status
          type: string
        summary:
          default: ''
          description: A summary of all consistency issues
          title: Summary
          type: string
        timestamp:
          anyOf:
          - type: string
          - type: 'null'
          description: Timestamp when this update was generated.
          title: Timestamp
        update_type:
          const: consistency_check_result
          default: consistency_check_result
          title: Update Type
          type: string
      title: ConsistencyCheckResult
      type: object
    ConsistencyIssue:
      description: Data model representing a consistency issue found in the exercise.
      properties:
        description:
          description: Description of the consistency issue
          title: Description
          type: string
        file_path:
          description: Path to the file with consistency issue
          title: File Path
          type: string
      required:
      - file_path
      - description
      title: ConsistencyIssue
      type: object
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          title: Detail
          type: array
      title: HTTPValidationError
      type: object
    HealthCheck:
      description: Response model for system health information.
      example:
        components:
          system:
            details:
              platform: macOS-14.3.1-arm64
            status: OK
        status: OK
        timestamp: '2025-03-06T12:00:00'
        uptime_seconds: 3600
        version: 1.0.0
      properties:
        components:
          additionalProperties:
            $ref: '#/components/schemas/ComponentHealth'
          description: Status of individual components
          title: Components
          type: object
        status:
          description: Overall system status
          title: Status
          type: string
        timestamp:
          description: Time when health check was performed
          format: date-time
          title: Timestamp
          type: string
        uptime_seconds:
          description: Application uptime in seconds
          title: Uptime Seconds
          type: integer
        version:
          description: Application version
          title: Version
          type: string
      required:
      - status
      - version
      - uptime_seconds
      title: HealthCheck
      type: object
    JobRequest:
      description: 'Job creation request model with discriminated union for action-specific
        input data.

        This allows the OpenAPI schema to properly document the different possible
        input types.'
      properties:
        action_name:
          description: Name of the AI action to perform.
          title: Action Name
          type: string
        input_data:
          description: Input data for the AI action.
          discriminator:
            mapping:
              consistency_check: '#/components/schemas/ConsistencyCheckInput'
              test_action: '#/components/schemas/TestActionInput'
            propertyName: action
          oneOf:
          - $ref: '#/components/schemas/ConsistencyCheckInput'
          - $ref: '#/components/schemas/TestActionInput'
          title: ActionInput
      required:
      - action_name
      - input_data
      title: JobRequest
      type: object
    JobResponse:
      description: Job response model with proper schema name.
      properties:
        action_name:
          description: Name of the AI action.
          title: Action Name
          type: string
        callback_auth:
          anyOf:
          - $ref: '#/components/schemas/CallbackAuth'
          - type: 'null'
          description: Authentication for callback.
        callback_url:
          description: URL for callback.
          format: uri
          maxLength: 2083
          minLength: 1
          title: Callback Url
          type: string
        created_at:
          description: Timestamp of job creation.
          title: Created At
          type: string
        error_message:
          anyOf:
          - type: string
          - type: 'null'
          description: Error message if the job failed.
          title: Error Message
        input_data:
          description: Input data for the AI action.
          discriminator:
            mapping:
              consistency_check: '#/components/schemas/ConsistencyCheckInput'
              test_action: '#/components/schemas/TestActionInput'
            propertyName: action
          oneOf:
          - $ref: '#/components/schemas/ConsistencyCheckInput'
          - $ref: '#/components/schemas/TestActionInput'
          title: ActionInput
        job_id:
          description: Unique identifier for the job.
          title: Job Id
          type: string
        status:
          $ref: '#/components/schemas/JobStatus'
          default: pending
          description: Current status of the job.
        updated_at:
          description: Timestamp of last update.
          title: Updated At
          type: string
        updates:
          description: All updates for this job.
          items:
            discriminator:
              mapping:
                consistency_check_progress: '#/components/schemas/ConsistencyCheckProgressUpdate'
                consistency_check_result: '#/components/schemas/ConsistencyCheckResult'
                test_action_progress: '#/components/schemas/TestActionProgressUpdate'
                test_action_result: '#/components/schemas/TestActionResult'
              propertyName: update_type
            oneOf:
            - $ref: '#/components/schemas/ConsistencyCheckProgressUpdate'
            - $ref: '#/components/schemas/ConsistencyCheckResult'
            - $ref: '#/components/schemas/TestActionProgressUpdate'
            - $ref: '#/components/schemas/TestActionResult'
            title: ActionUpdate
          title: Updates
          type: array
      required:
      - job_id
      - action_name
      - input_data
      - callback_url
      - created_at
      - updated_at
      title: Job
      type: object
    JobStatus:
      description: Status states for a job.
      enum:
      - pending
      - in_progress
      - completed
      - failed
      title: JobStatus
      type: string
    JobStatusResponse:
      description: Response for a job status request.
      properties:
        action_name:
          title: Action Name
          type: string
        created_at:
          title: Created At
          type: string
        error_message:
          anyOf:
          - type: string
          - type: 'null'
          title: Error Message
        job_id:
          title: Job Id
          type: string
        status:
          $ref: '#/components/schemas/JobStatus'
        updated_at:
          title: Updated At
          type: string
        updates:
          items:
            $ref: '#/components/schemas/ActionUpdate'
          title: Updates
          type: array
      required:
      - job_id
      - action_name
      - status
      - created_at
      - updated_at
      title: JobStatusResponse
      type: object
    TestActionInput:
      description: Input model for test action.
      properties:
        action:
          const: test_action
          default: test_action
          title: Action
          type: string
        language:
          default: en
          description: Language code
          title: Language
          type: string
        options:
          anyOf:
          - type: object
          - type: 'null'
          description: Additional options for processing
          title: Options
        text:
          description: Text to process
          title: Text
          type: string
      required:
      - text
      title: TestActionInput
      type: object
    TestActionProgressUpdate:
      description: Progress update for test action.
      properties:
        items_processed:
          anyOf:
          - type: integer
          - type: 'null'
          description: Number of items processed
          title: Items Processed
        progress:
          anyOf:
          - maximum: 100.0
            minimum: 0.0
            type: number
          - type: 'null'
          description: Progress percentage
          title: Progress
        status_message:
          description: Current status message
          title: Status Message
          type: string
        timestamp:
          anyOf:
          - type: string
          - type: 'null'
          description: Timestamp when this update was generated.
          title: Timestamp
        update_type:
          const: test_action_progress
          default: test_action_progress
          title: Update Type
          type: string
      required:
      - status_message
      title: TestActionProgressUpdate
      type: object
    TestActionResult:
      description: Final result for test action.
      properties:
        items:
          description: Processed items
          items:
            $ref: '#/components/schemas/TestItem'
          title: Items
          type: array
        summary:
          description: Summary of the processing
          title: Summary
          type: string
        timestamp:
          anyOf:
          - type: string
          - type: 'null'
          description: Timestamp when this update was generated.
          title: Timestamp
        total_score:
          description: Total score of all items
          minimum: 0.0
          title: Total Score
          type: number
        update_type:
          const: test_action_result
          default: test_action_result
          title: Update Type
          type: string
      required:
      - summary
      - total_score
      title: TestActionResult
      type: object
    TestItem:
      description: An item in the test results.
      properties:
        content:
          description: Content of the test item
          title: Content
          type: string
        id:
          description: Unique identifier for this item
          title: Id
          type: string
        score:
          description: Score between 0 and 1
          maximum: 1.0
          minimum: 0.0
          title: Score
          type: number
      required:
      - id
      - content
      - score
      title: TestItem
      type: object
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          title: Location
          type: array
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
      required:
      - loc
      - msg
      - type
      title: ValidationError
      type: object
  securitySchemes:
    ApiKeyAuth:
      description: API key authentication
      in: header
      name: X-API-Key
      type: apiKey
info:
  contact:
    email: felixtj.dietrich@tum.de
    name: Felix T.J. Dietrich
  description: Hyperion is an AI-powered FastAPI microservice that empowers instructors
    by generating and refining programming exercises. By integrating with modern learning
    management systems and CI build agents, Hyperion delivers context-aware suggestions
    and code stubs to enhance educational content.
  title: Hyperion
  version: 0.1.0
openapi: 3.1.0
paths:
  /health:
    get:
      description: "## Perform a Health Check\n\nEndpoint to perform a health check\
        \ on the service. This endpoint can be used by:\n\n- Container orchestrators\
        \ like Docker or Kubernetes to ensure service health\n- Load balancers to\
        \ determine if the service should receive traffic\n- Monitoring tools to track\
        \ service availability\n\nThe endpoint returns information about system health\
        \ including uptime and version.\n\nReturns:\n    HealthCheck: Health status\
        \ information"
      operationId: get_health_health_get
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
          description: Return HTTP Status Code 200 (OK) with system health information
      security: []
      summary: Perform a Health Check
      tags:
      - healthcheck
  /health/live:
    get:
      description: 'Simple liveness check endpoint that returns 200 OK when the service
        is running.

        This endpoint is lightweight and can be called frequently by infrastructure.'
      operationId: get_liveness_health_live_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Simple liveness check that always returns OK if service is
            running
      security: []
      summary: Liveness Check
      tags:
      - healthcheck
  /jobs/:
    post:
      description: Creates a new job to be processed in the background. The caller
        provides an action name and input data in the request body, and callback URL
        and an optional callback auth secret in headers.
      operationId: create_new_job_jobs__post
      parameters:
      - description: URL to send status updates and final results.
        in: header
        name: callback-url
        required: true
        schema:
          description: URL to send status updates and final results.
          format: uri
          maxLength: 2083
          minLength: 1
          title: Callback-Url
          type: string
      - description: Secret for callback authentication.
        in: header
        name: X-Callback-Auth-Secret
        required: false
        schema:
          anyOf:
          - type: string
          - type: 'null'
          description: Secret for callback authentication.
          title: X-Callback-Auth-Secret
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobRequest'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResponse'
          description: Job accepted
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        '500':
          description: Internal server error
      summary: Create a new background job for an AI action
      tags:
      - jobs
  /jobs/{job_id}:
    get:
      description: Retrieves the current status of a job, along with any updates and
        final results.
      operationId: get_job_status_by_id_jobs__job_id__get
      parameters:
      - in: path
        name: job_id
        required: true
        schema:
          title: Job Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusResponse'
          description: Successful Response
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        '500':
          description: Internal server error
      summary: Get job status and results
      tags:
      - jobs
  /run:
    get:
      operationId: run_run_get
      parameters:
      - in: query
        name: query
        required: true
        schema:
          title: Query
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                title: Response Run Run Get
                type: string
          description: Successful Response
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Run
security:
- ApiKeyAuth: []
