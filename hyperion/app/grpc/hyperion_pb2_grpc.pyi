"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import hyperion_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(
    collections.abc.AsyncIterator[_T],
    collections.abc.Iterator[_T],
    metaclass=abc.ABCMeta,
): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class DefineBoundaryConditionStub:
    """*****************************
    **   Service Definitions  ***
    ****************************

    Exercise Creation Step 1: Define Boundary Conditions
    """

    def __init__(
        self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]
    ) -> None: ...
    ...

class DefineBoundaryConditionAsyncStub:
    """*****************************
    **   Service Definitions  ***
    ****************************

    Exercise Creation Step 1: Define Boundary Conditions
    """

    ...

class DefineBoundaryConditionServicer(metaclass=abc.ABCMeta):
    """*****************************
    **   Service Definitions  ***
    ****************************

    Exercise Creation Step 1: Define Boundary Conditions
    """

    ...

def add_DefineBoundaryConditionServicer_to_server(
    servicer: DefineBoundaryConditionServicer,
    server: typing.Union[grpc.Server, grpc.aio.Server],
) -> None: ...

class DraftProblemStatementStub:
    """Exercise Creation Step 2: Create Draft Problem Statement"""

    def __init__(
        self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]
    ) -> None: ...
    ...

class DraftProblemStatementAsyncStub:
    """Exercise Creation Step 2: Create Draft Problem Statement"""

    ...

class DraftProblemStatementServicer(metaclass=abc.ABCMeta):
    """Exercise Creation Step 2: Create Draft Problem Statement"""

    ...

def add_DraftProblemStatementServicer_to_server(
    servicer: DraftProblemStatementServicer,
    server: typing.Union[grpc.Server, grpc.aio.Server],
) -> None: ...

class CreateSolutionRepositoryStub:
    """Exercise Creation Step 3: Create Solution Repository"""

    def __init__(
        self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]
    ) -> None: ...
    CreateSolutionRepository: grpc.UnaryUnaryMultiCallable[
        hyperion_pb2.SolutionRepositoryCreatorRequest,
        hyperion_pb2.SolutionRepositoryCreatorResponse,
    ]

class CreateSolutionRepositoryAsyncStub:
    """Exercise Creation Step 3: Create Solution Repository"""

    CreateSolutionRepository: grpc.aio.UnaryUnaryMultiCallable[
        hyperion_pb2.SolutionRepositoryCreatorRequest,
        hyperion_pb2.SolutionRepositoryCreatorResponse,
    ]

class CreateSolutionRepositoryServicer(metaclass=abc.ABCMeta):
    """Exercise Creation Step 3: Create Solution Repository"""

    @abc.abstractmethod
    def CreateSolutionRepository(
        self,
        request: hyperion_pb2.SolutionRepositoryCreatorRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        hyperion_pb2.SolutionRepositoryCreatorResponse,
        collections.abc.Awaitable[hyperion_pb2.SolutionRepositoryCreatorResponse],
    ]: ...

def add_CreateSolutionRepositoryServicer_to_server(
    servicer: CreateSolutionRepositoryServicer,
    server: typing.Union[grpc.Server, grpc.aio.Server],
) -> None: ...

class CreateTemplateRepositoryStub:
    """Exercise Creation Step 4: Create Template Repository"""

    def __init__(
        self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]
    ) -> None: ...
    ...

class CreateTemplateRepositoryAsyncStub:
    """Exercise Creation Step 4: Create Template Repository"""

    ...

class CreateTemplateRepositoryServicer(metaclass=abc.ABCMeta):
    """Exercise Creation Step 4: Create Template Repository"""

    ...

def add_CreateTemplateRepositoryServicer_to_server(
    servicer: CreateTemplateRepositoryServicer,
    server: typing.Union[grpc.Server, grpc.aio.Server],
) -> None: ...

class CreateTestRepositoryStub:
    """Exercise Creation Step 5: Create Test Repository"""

    def __init__(
        self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]
    ) -> None: ...
    ...

class CreateTestRepositoryAsyncStub:
    """Exercise Creation Step 5: Create Test Repository"""

    ...

class CreateTestRepositoryServicer(metaclass=abc.ABCMeta):
    """Exercise Creation Step 5: Create Test Repository"""

    ...

def add_CreateTestRepositoryServicer_to_server(
    servicer: CreateTestRepositoryServicer,
    server: typing.Union[grpc.Server, grpc.aio.Server],
) -> None: ...

class FinalizeProblemStatementStub:
    """Exercise Creation Step 6: Finalize Problem Statement"""

    def __init__(
        self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]
    ) -> None: ...
    ...

class FinalizeProblemStatementAsyncStub:
    """Exercise Creation Step 6: Finalize Problem Statement"""

    ...

class FinalizeProblemStatementServicer(metaclass=abc.ABCMeta):
    """Exercise Creation Step 6: Finalize Problem Statement"""

    ...

def add_FinalizeProblemStatementServicer_to_server(
    servicer: FinalizeProblemStatementServicer,
    server: typing.Union[grpc.Server, grpc.aio.Server],
) -> None: ...

class ConfigureGradingStub:
    """Exercise Creation Step 7: Configure Grading"""

    def __init__(
        self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]
    ) -> None: ...
    ...

class ConfigureGradingAsyncStub:
    """Exercise Creation Step 7: Configure Grading"""

    ...

class ConfigureGradingServicer(metaclass=abc.ABCMeta):
    """Exercise Creation Step 7: Configure Grading"""

    ...

def add_ConfigureGradingServicer_to_server(
    servicer: ConfigureGradingServicer,
    server: typing.Union[grpc.Server, grpc.aio.Server],
) -> None: ...

class ReviewAndRefineStub:
    """Exercise Creation Step 8: Review and Refine"""

    def __init__(
        self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]
    ) -> None: ...
    CheckInconsistencies: grpc.UnaryUnaryMultiCallable[
        hyperion_pb2.InconsistencyCheckRequest,
        hyperion_pb2.InconsistencyCheckResponse,
    ]

    RewriteProblemStatement: grpc.UnaryUnaryMultiCallable[
        hyperion_pb2.RewriteProblemStatementRequest,
        hyperion_pb2.RewriteProblemStatementResponse,
    ]

class ReviewAndRefineAsyncStub:
    """Exercise Creation Step 8: Review and Refine"""

    CheckInconsistencies: grpc.aio.UnaryUnaryMultiCallable[
        hyperion_pb2.InconsistencyCheckRequest,
        hyperion_pb2.InconsistencyCheckResponse,
    ]

    RewriteProblemStatement: grpc.aio.UnaryUnaryMultiCallable[
        hyperion_pb2.RewriteProblemStatementRequest,
        hyperion_pb2.RewriteProblemStatementResponse,
    ]

class ReviewAndRefineServicer(metaclass=abc.ABCMeta):
    """Exercise Creation Step 8: Review and Refine"""

    @abc.abstractmethod
    def CheckInconsistencies(
        self,
        request: hyperion_pb2.InconsistencyCheckRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        hyperion_pb2.InconsistencyCheckResponse,
        collections.abc.Awaitable[hyperion_pb2.InconsistencyCheckResponse],
    ]: ...
    @abc.abstractmethod
    def RewriteProblemStatement(
        self,
        request: hyperion_pb2.RewriteProblemStatementRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        hyperion_pb2.RewriteProblemStatementResponse,
        collections.abc.Awaitable[hyperion_pb2.RewriteProblemStatementResponse],
    ]: ...

def add_ReviewAndRefineServicer_to_server(
    servicer: ReviewAndRefineServicer,
    server: typing.Union[grpc.Server, grpc.aio.Server],
) -> None: ...
