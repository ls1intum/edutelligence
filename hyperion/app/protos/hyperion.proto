syntax = "proto3";

package de.tum.cit.aet.artemis.hyperion;

// --- Java-specific file-level options ---
option java_package        = "de.tum.cit.aet.artemis.hyperion.proto";
option java_outer_classname = "HyperionServiceProto";
option java_multiple_files = true;
option java_generic_services = false;


/***********************
 ***   Core types    ***
 ***********************/
 
// Represents a file in a repository with content
message RepositoryFile {
  string path = 1;
  string content = 2;
}

// Represents a collection of files that form a repository
message Repository {
  repeated RepositoryFile files = 1;
}

enum ProgrammingLanguage {
  EMPTY = 0;
  JAVA = 1;
  PYTHON = 2;
}

enum ProjectType {
  PLAIN = 0;
  MAVEN = 1;
  GRADLE = 2;
}

// Represents a programming exercise with all associated data
message ProgrammingExercise {
  // Unique identifier for the exercise
  int32 id = 1;

  // Title of the exercise
  string title = 2;
  
  // Programming language used
  ProgrammingLanguage programming_language = 3;

  // Package name for the exercise
  string package_name = 4;

  // Type of project (e.g., Maven, Gradle)
  ProjectType project_type = 5;

  // Repository containing template files
  Repository template_repository = 6;

  // Repository containing solution files
  Repository solution_repository = 7;

  // Repository containing test files (optional)
  Repository test_repository = 8;
  
  // Problem statement describing the exercise requirements
  string problem_statement = 9;
  
}

/*********************
 ***   Messages    ***
 *********************/

// Request for creating solution repository
message SolutionRepositoryCreatorRequest {
  ProgrammingLanguage programming_language = 1;
  ProjectType project_type = 2;
  string difficulty = 3;
  int32 points = 4;
  int32 bonus_points = 5;
  repeated string constraints = 6;
  string title = 7;
  string short_title = 8;
  string description = 9;
}

// Response from creating solution repository
message SolutionRepositoryCreatorResponse {
  ProgrammingLanguage programming_language = 1;
  ProjectType project_type = 2;
  string difficulty = 3;
  int32 points = 4;
  int32 bonus_points = 5;
  repeated string constraints = 6;
  string title = 7;
  string short_title = 8;
  string description = 9;
  Repository solution_repository = 10;
}

message InconsistencyCheckRequest {
  string problem_statement = 1;
  Repository solution_repository = 2;
  Repository template_repository = 3;
  Repository test_repository = 4;
}

message InconsistencyCheckResponse {
  string inconsistencies = 1;
}

message RewriteProblemStatementRequest {
  string text = 1;
}

message RewriteProblemStatementResponse {
  string rewritten_text = 1;
}


/******************************
 ***   Service Definitions  ***
 ******************************/


// Exercise Creation Step 1: Define Boundary Conditions
service DefineBoundaryCondition { }

// Exercise Creation Step 2: Create Draft Problem Statement
service DraftProblemStatement {}

// Exercise Creation Step 3: Create Solution Repository
service CreateSolutionRepository {
  rpc CreateSolutionRepository(SolutionRepositoryCreatorRequest) returns (SolutionRepositoryCreatorResponse) {}
}

// Exercise Creation Step 4: Create Template Repository
service CreateTemplateRepository {}

// Exercise Creation Step 5: Create Test Repository
service CreateTestRepository {}

// Exercise Creation Step 6: Finalize Problem Statement
service FinalizeProblemStatement {}

// Exercise Creation Step 7: Configure Grading
service ConfigureGrading {}

// Exercise Creation Step 8: Review and Refine
service ReviewAndRefine {
  rpc CheckInconsistencies(InconsistencyCheckRequest) returns (InconsistencyCheckResponse) {}
  rpc RewriteProblemStatement(RewriteProblemStatementRequest) returns (RewriteProblemStatementResponse) {}
}
