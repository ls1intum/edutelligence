syntax = "proto3";

package de.tum.cit.aet.artemis.hyperion;

// --- Java-specific file-level options ---
option java_package        = "de.tum.cit.aet.artemis.hyperion.proto";
option java_outer_classname = "HyperionServiceProto";
option java_multiple_files = true;
option java_generic_services = false;


// Represents a file in a repository with content
message RepositoryFile {
  // File path relative to the repository root
  string path = 1;
  
  // File content
  string content = 2;
}

// Represents a collection of files that form a repository
message Repository {
  // Files contained in the repository
  repeated RepositoryFile files = 1;
}

enum ProgrammingLanguage {
  EMPTY = 0;
  ASSEMBLER = 1;
  BASH = 2;
  C = 3;
  C_PLUS_PLUS = 4;
  C_SHARP = 5;
  DART = 6;
  GO = 7;
  HASKELL = 8;
  JAVA = 9;
  JAVASCRIPT = 10;
  KOTLIN = 11;
  MATLAB = 12;
  OCAML = 13;
  PYTHON = 14;
  R = 15;
  RUBY = 16;
  RUST = 17;
  SWIFT = 18;
  TYPESCRIPT = 19;
  VHDL = 20;
}

enum ProjectType {
  MAVEN_MAVEN = 0;
  PLAIN_MAVEN = 1;
  MAVEN_BLACKBOX = 2;
  PLAIN_GRADLE = 3;
  GRADLE_GRADLE = 4;
  PLAIN = 5;
  XCODE = 6;
  FACT = 7;
  GCC = 8;
}

// Represents a programming exercise with all associated data
message ProgrammingExercise {
  // Unique identifier for the exercise
  int32 id = 1;

  // Title of the exercise
  string title = 2;
  
  // Programming language used
  ProgrammingLanguage programming_language = 3;

  // Package name for the exercise
  string package_name = 4;

  // Type of project (e.g., Maven, Gradle)
  ProjectType project_type = 5;

  // Repository containing template files
  Repository template_repository = 6;

  // Repository containing solution files
  Repository solution_repository = 7;

  // Repository containing test files (optional)
  Repository test_repository = 8;
  
  // Problem statement describing the exercise requirements
  string problem_statement = 9;
  
}

// Exercise Creation Step 1: Define Boundary Conditions
service DefineBoundaryCondition { }

// Exercise Creation Step 2: Create Draft Problem Statement
service DraftProblemStatement {}

// Exercise Creation Step 3: Create Solution Repository
service CreateSolutionRepository {}

// Exercise Creation Step 4: Create Template Repository
service CreateTemplateRepository {}

// Exercise Creation Step 5: Create Test Repository
service CreateTestRepository {}

// Exercise Creation Step 6: Finalize Problem Statement
service FinalizeProblemStatement {}

// Exercise Creation Step 7: Configure Grading
service ConfigureGrading {}

// Exercise Creation Step 8: Review and Refine
service ReviewAndRefine {
  rpc CheckConsistency(ConsistencyCheckRequest) returns (ConsistencyCheckResponse) {}
  rpc RewriteProblemStatement(RewriteProblemStatementRequest) returns (RewriteProblemStatementResponse) {}
}

message ConsistencyCheckRequest {
  string problem_statement = 1;
  Repository solution_repository = 2;
  Repository template_repository = 3;
  Repository test_repository = 4;
}

enum ArtifactType {
  PROBLEM_STATEMENT = 0;
  TEMPLATE_REPOSITORY = 1;
  SOLUTION_REPOSITORY = 2;
  TEST_REPOSITORY = 3;
}

message ArtifactAnchor {
  ArtifactType type = 1;
  string file_path = 2;  // Path in the repository, empty for problem statement
  
  // Location reference - use what makes sense for the context
  oneof location_reference {
    TextRange text_range = 3;
    LineRange line_range = 4;
    StructuralReference structural_ref = 5;
  }
}

message TextRange {
  int32 start_index = 1;
  int32 end_index = 2;
}

message LineRange {
  int32 start_line = 1;
  int32 end_line = 2;
}

message StructuralReference {
  string element_type = 1;    // e.g., "class", "method", "variable"
  string element_name = 2;    // e.g., "Student", "getName"
  repeated string path = 3;   // Hierarchical path: ["package.name", "ClassName"]
}

enum ConsistencyIssueSeverity {
  LOW = 0;
  MEDIUM = 1;
  HIGH = 2;
  CRITICAL = 3;
}

enum ConsistencyIssueType {
  STRUCTURAL = 0;           // Class structure, inheritance, signatures
  BEHAVIORAL = 1;           // Logic implementation, algorithm differences  
  SPECIFICATION = 2;        // Problem statement vs implementation alignment
  TESTING = 3;              // Test coverage and assertion consistency
}

enum ConsistencyIssueCategory {
  // STRUCTURAL Issues (0-19) - Core class/method structure mismatches
  CLASS_MODIFIER_MISMATCH = 0;          // abstract vs concrete, interface vs class
  INHERITANCE_HIERARCHY_MISMATCH = 1;   // extends/implements different classes/interfaces
  METHOD_SIGNATURE_MISMATCH = 2;        // return type, parameters, visibility, static
  CONSTRUCTOR_SIGNATURE_MISMATCH = 3;   // parameters, visibility mismatch
  ATTRIBUTE_DECLARATION_MISMATCH = 4;   // type, visibility, static modifiers
  MISSING_REQUIRED_ELEMENT = 5;         // class, method, attribute missing entirely
  UNEXPECTED_ELEMENT_PRESENT = 6;       // extra classes/methods not in specification
  
  // BEHAVIORAL Issues (20-39) - Implementation logic differences  
  ALGORITHM_IMPLEMENTATION_DIFFERENT = 20;   // Different approach to solve same problem
  VALIDATION_LOGIC_MISMATCH = 21;            // Different input/runtime validation
  ERROR_HANDLING_MISMATCH = 22;              // Different exception handling approach
  EDGE_CASE_HANDLING_DIFFERENT = 23;         // Different boundary condition handling
  RETURN_VALUE_LOGIC_DIFFERENT = 24;         // Same signature but different return logic
  
  // SPECIFICATION Issues (40-59) - Problem statement alignment problems
  REQUIREMENT_NOT_IMPLEMENTED = 40;         // Problem statement requirement missing
  CONSTRAINT_VIOLATION = 41;                // Violates specific constraints (e.g., "use ternary")
  UML_DIAGRAM_DEVIATION = 42;               // Implementation doesn't match UML
  TASK_INSTRUCTION_IGNORED = 43;            // Specific [task] instructions not followed
  PACKAGE_STRUCTURE_MISMATCH = 44;          // Wrong package names/structure
  NAMING_CONVENTION_VIOLATION = 45;         // Violates specified naming requirements
  
  // TESTING Issues (60-79) - Test and assertion consistency
  TEST_CASE_SPECIFICATION_MISMATCH = 60;    // Test doesn't match what problem describes
  TEST_ASSERTION_INADEQUATE = 61;           // Test exists but doesn't verify correctly
  TEST_COVERAGE_INCOMPLETE = 62;            // Missing tests for specified functionality
  TEST_DATA_INCONSISTENT = 63;              // Test data doesn't match problem examples
  TEST_METHOD_NAME_MISMATCH = 64;           // Test name doesn't match specification
}

message ConsistencyIssue {
  string description = 1;
  ConsistencyIssueSeverity severity = 2;
  ConsistencyIssueType type = 3;
  ConsistencyIssueCategory category = 4;
  
  // Primary location where issue was detected
  ArtifactAnchor primary_location = 5;
  
  // Related locations across artifacts
  repeated ArtifactAnchor related_locations = 6;
  
  // Simple suggested fix as a string
  string suggested_fix = 7;
}

message ConsistencyCheckResponse {
  repeated ConsistencyIssue issues = 1;
}

message RewriteProblemStatementRequest {
  string text = 1;
}

message RewriteProblemStatementResponse {
  string rewritten_text = 1;
}
