syntax = "proto3";

option java_multiple_files = true;
option java_package = "de.tum.cit.aet.hyperion";
option java_outer_classname = "HyperionProto";
option objc_class_prefix = "Hyperion";

package hyperion;

/***********************
 ***   Core types    ***
 ***********************/

message RepositoryFile {
  string path = 1;
  string content = 2;
}

message Repository {
  repeated RepositoryFile files = 1;
}

enum ProgrammingLanguage {
  EMPTY = 0;
  ASSEMBLER = 1;
  BASH = 2;
  C = 3;
  C_PLUS_PLUS = 4;
  C_SHARP = 5;
  DART = 6;
  GO = 7;
  HASKELL = 8;
  JAVA = 9;
  JAVASCRIPT = 10;
  KOTLIN = 11;
  MATLAB = 12;
  OCAML = 13;
  PYTHON = 14;
  R = 15;
  RUBY = 16;
  RUST = 17;
  SWIFT = 18;
  TYPESCRIPT = 19;
  VHDL = 20;
}

enum ProjectType {
  MAVEN_MAVEN = 0;
  PLAIN_MAVEN = 1;
  MAVEN_BLACKBOX = 2;
  PLAIN_GRADLE = 3;
  GRADLE_GRADLE = 4;
  PLAIN = 5;
  XCODE = 6;
  FACT = 7;
  GCC = 8;
}

enum BuildStatus {
  BUILD_SUCCESS = 0;
  BUILD_FAILURE = 1;
  BUILD_TIMEOUT = 2;
  BUILD_ERROR = 3;
}

enum ReviewCommentType {
  SUGGESTION = 0;
  ISSUE = 1;
  IMPROVEMENT = 2;
  QUESTION = 3;
}

/******************************
 ***   Exercise Messages    ***
 ******************************/

message ProgrammingExercise {
  int32 id = 1;
  string title = 2;
  ProgrammingLanguage programming_language = 3;
  string package_name = 4;
  ProjectType project_type = 5;
  Repository template_repository = 6;
  Repository solution_repository = 7;
  Repository test_repository = 8;
  string problem_statement = 9;
}

message BuildResult {
  BuildStatus status = 1;
  string output = 2;
  repeated string errors = 3;
  repeated string warnings = 4;
  string test_results = 5;
}

message ReviewComment {
  ReviewCommentType type = 1;
  string file_path = 2;
  int32 line_number = 3;
  string comment = 4;
  string suggested_code = 5;
  int32 severity = 6;
}

message ReviewComments {
  repeated ReviewComment comments = 1;
  string summary = 2;
  string recommendation = 3;
}

message ImplementCommentsRequest {
  Repository solution_repository = 1;
  ReviewComments review_comments = 2;
  ProgrammingLanguage programming_language = 3;
  repeated int32 comment_indices = 4;
}

message ImplementCommentsResponse {
  Repository improved_solution_repository = 1;
  bool success = 2;
  string changes_description = 3;
  string error_message = 4;
}

message CreateInitialSolutionRequest {
  string problem_statement = 1;
  ProgrammingLanguage programming_language = 2;
  ProjectType project_type = 3;
  repeated string competencies = 4;
  repeated string constraints = 5;
}

message CreateInitialSolutionResponse {
  Repository solution_repository = 1;
  bool success = 2;
  string error_message = 3;
}

message AutoFixSolutionRequest {
  Repository solution_repository = 1;
  BuildResult build_result = 2;
  ProgrammingLanguage programming_language = 3;
  ProjectType project_type = 4;
}

message AutoFixSolutionResponse {
  Repository fixed_solution_repository = 1;
  bool success = 2;
  string changes_description = 3;
  string error_message = 4;
}

message ReviewSolutionRequest {
  Repository solution_repository = 1;
  string problem_statement = 2;
  ProgrammingLanguage programming_language = 3;
}

message ReviewSolutionResponse {
  ReviewComments review_comments = 1;
  bool success = 2;
  string error_message = 3;
}

/******************************
 ***   Service Definitions  ***
 ******************************/

service Health {
  rpc Ping (PingRequest) returns (PingResponse) {}
}

// Exercise Creation Step 1: Define Boundary Conditions
service DefineBoundaryCondition {}

// Exercise Creation Step 2: Create Draft Problem Statement
service DraftProblemStatement {}

// Exercise Creation Step 3: Create Solution Repository
service CreateSolutionRepository {
  rpc ImplementComments(ImplementCommentsRequest) returns (ImplementCommentsResponse) {}
  rpc CreateInitialSolution(CreateInitialSolutionRequest) returns (CreateInitialSolutionResponse) {}
  rpc AutoFixSolution(AutoFixSolutionRequest) returns (AutoFixSolutionResponse) {}
  rpc ReviewSolution(ReviewSolutionRequest) returns (ReviewSolutionResponse) {}
}

// Exercise Creation Step 4: Create Template Repository
service CreateTemplateRepository {}

// Exercise Creation Step 5: Create Test Repository
service CreateTestRepository {}

// Exercise Creation Step 6: Finalize Problem Statement
service FinalizeProblemStatement {}

// Exercise Creation Step 7: Configure Grading
service ConfigureGrading {}

// Exercise Creation Step 8: Verify Configuration
service VerifyConfiguration {
  rpc CheckInconsistencies(InconsistencyCheckRequest) returns (InconsistencyCheckResponse) {}
}

/*****************************
 ***   Utility Messages    ***
 *****************************/

message InconsistencyCheckRequest {
  string problem_statement = 1;
  Repository solution_repository = 2;
  Repository template_repository = 3;
  Repository test_repository = 4;
}

message InconsistencyCheckResponse {
  string inconsistencies = 1;
}

message PingRequest {
  string client_id = 1;
}

message PingResponse {
  string status = 1;
  string version = 2;
  int64 timestamp = 3;
}
