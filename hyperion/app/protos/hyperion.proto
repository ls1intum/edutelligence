syntax = "proto3";

option java_multiple_files = true;
option java_package = "de.tum.cit.aet.hyperion";
option java_outer_classname = "HyperionProto";
option objc_class_prefix = "Hyperion";

package hyperion;

/***********************
 ***   Core types    ***
 ***********************/

message ProgrammingExercise {
  int32 id = 1;
  Repository template_repository = 2;
  Repository solution_repository = 3;
  Repository test_repository = 4;
  ProblemStatement problem_statement = 5;
  BoundaryConditions boundary_conditions = 6;
}

message Repository {
  string name = 1;
  repeated RepositoryFile files = 2;
}

message RepositoryFile {
  string path = 1;
  string content = 2;
}

message ProblemStatement {
  string title = 1;
  string short_title = 2;
  string description = 3;
}

message BoundaryConditions {
  string language = 1;
  string technical_environment = 2;
  ProjectType project_type = 3;
  ProgrammingLanguage programming_language = 4;
  string difficulty = 5;
  int32 points = 6;
  int32 bonus_points = 7;
  repeated string constraints = 8;
}

enum ProgrammingLanguage {
  EMPTY = 0;
  JAVA = 1;
  PYTHON = 2;
}

enum ProjectType {
  PLAIN = 0;
  MAVEN = 1;
  GRADLE = 2;
}

message PingRequest {
  string client_id = 1;
}

message PingResponse {
  string status = 1;
  string version = 2;
  int64 timestamp = 3;
}

/******************************
 ***   Exercise Messages    ***
 ******************************/

message BoundaryConditionsDefinerRequest {

}

message BoundaryConditionsDefinerResponse {
  BoundaryConditions boundary_conditions = 1;
}

message ProblemStatementDrafterRequest {
  BoundaryConditions boundary_conditions = 1;
}

message ProblemStatementDrafterResponse {
  BoundaryConditions boundary_conditions = 1;
  ProblemStatement problem_statement = 2;
}

message SolutionRepositoryCreatorRequest {
  BoundaryConditions boundary_conditions = 1;
  ProblemStatement problem_statement = 2;
}

message SolutionRepositoryCreatorResponse {
  BoundaryConditions boundary_conditions = 1;
  ProblemStatement problem_statement = 2;
  Repository solution_repository = 3;
}

message TemplateRepositoryCreatorRequest {
  BoundaryConditions boundary_conditions = 1;
  ProblemStatement problem_statement = 2;
  Repository solution_repository = 3;
}

message TemplateRepositoryCreatorResponse {
  BoundaryConditions boundary_conditions = 1;
  ProblemStatement problem_statement = 2;
  Repository solution_repository = 3;
  Repository template_repository = 4;
}

message TestRepositoryCreatorRequest {
  BoundaryConditions boundary_conditions = 1;
  ProblemStatement problem_statement = 2;
  Repository solution_repository = 3;
  Repository template_repository = 4;
}

message TestRepositoryCreatorResponse {
  BoundaryConditions boundary_conditions = 1;
  ProblemStatement problem_statement = 2;
  Repository solution_repository = 3;
  Repository template_repository = 4;
  Repository test_repository = 5;
}

message ProblemStatementFinalizerRequest {
  BoundaryConditions boundary_conditions = 1;
  ProblemStatement problem_statement = 2;
  Repository solution_repository = 3;
  Repository template_repository = 4;
  Repository test_repository = 5;
}

message ProblemStatementFinalizerResponse {
  BoundaryConditions boundary_conditions = 1;
  ProblemStatement problem_statement = 2;
  Repository solution_repository = 3;
  Repository template_repository = 4;
  Repository test_repository = 5;
}

message GradingConfiguratorRequest {
  BoundaryConditions boundary_conditions = 1;
  ProblemStatement problem_statement = 2;
  Repository solution_repository = 3;
  Repository template_repository = 4;
  Repository test_repository = 5;
}

message GradingConfiguratorResponse {
  BoundaryConditions boundary_conditions = 1;
  ProblemStatement problem_statement = 2;
  Repository solution_repository = 3;
  Repository template_repository = 4;
  Repository test_repository = 5;
}

message InconsistencyCheckRequest {
  BoundaryConditions boundary_conditions = 1;
  ProblemStatement problem_statement = 2;
  Repository solution_repository = 3;
  Repository template_repository = 4;
  Repository test_repository = 5;
}

message InconsistencyCheckResponse {
  string inconsistencies = 1;
}

/******************************
 ***   Service Definitions  ***
 ******************************/

// TODO: The return value should be the specific solution to this function, not all prev results.
//       => Independence between steps.

service Health {
  rpc Ping (PingRequest) returns (PingResponse) {}
}

// Step 1: Define Boundary Conditions
service BoundaryConditionsDefiner {
  rpc DefineBoundaryConditions(BoundaryConditionsDefinerRequest) returns (BoundaryConditionsDefinerResponse) {}
}

// Step 2: Create Draft Problem Statement
service ProblemStatementDrafter {
  rpc DraftProblemStatement(ProblemStatementDrafterRequest) returns (ProblemStatementDrafterResponse) {}
}

// Step 3: Create Solution Repository
service SolutionRepositoryCreator {
  rpc CreateSolutionRepository(SolutionRepositoryCreatorRequest) returns (SolutionRepositoryCreatorResponse) {}
}

// Step 4: Create Template Repository
service TemplateRepositoryCreator {
  rpc CreateTemplateRepository(TemplateRepositoryCreatorRequest) returns (TemplateRepositoryCreatorResponse) {}
}

// Step 5: Create Test Repository
service TestRepositoryCreator {
  rpc CreateTestRepository(TestRepositoryCreatorRequest) returns (TestRepositoryCreatorResponse) {}
}

// Step 6: Finalize Problem Statement
service ProblemStatementFinalizer {
  rpc FinalizeProblemStatement(ProblemStatementFinalizerRequest) returns (ProblemStatementFinalizerResponse) {}
}

// Step 7: Configure Grading
service GradingConfigurator {
  rpc ConfigureGrading(GradingConfiguratorRequest) returns (GradingConfiguratorResponse) {}
}

// Step 8: Verify Configuration
service ConfigurationVerifier {
  rpc CheckInconsistencies(InconsistencyCheckRequest) returns (InconsistencyCheckResponse) {}
}
