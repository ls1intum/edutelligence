syntax = "proto3";

package de.tum.cit.aet.artemis.hyperion;

// --- Java-specific file-level options ---
option java_package        = "de.tum.cit.aet.artemis.hyperion.proto";
option java_outer_classname = "HyperionServiceProto";
option java_multiple_files = true;
option java_generic_services = false;


// Represents a file in a repository with content
message RepositoryFile {
  // File path relative to the repository root
  string path = 1;
  
  // File content
  string content = 2;
}

// Represents a collection of files that form a repository
message Repository {
  // Files contained in the repository
  repeated RepositoryFile files = 1;
}

enum ProgrammingLanguage {
  EMPTY = 0;
  ASSEMBLER = 1;
  BASH = 2;
  C = 3;
  C_PLUS_PLUS = 4;
  C_SHARP = 5;
  DART = 6;
  GO = 7;
  HASKELL = 8;
  JAVA = 9;
  JAVASCRIPT = 10;
  KOTLIN = 11;
  MATLAB = 12;
  OCAML = 13;
  PYTHON = 14;
  R = 15;
  RUBY = 16;
  RUST = 17;
  SWIFT = 18;
  TYPESCRIPT = 19;
  VHDL = 20;
}

enum ProjectType {
  MAVEN_MAVEN = 0;
  PLAIN_MAVEN = 1;
  MAVEN_BLACKBOX = 2;
  PLAIN_GRADLE = 3;
  GRADLE_GRADLE = 4;
  PLAIN = 5;
  XCODE = 6;
  FACT = 7;
  GCC = 8;
}

// Represents a programming exercise with all associated data
message ProgrammingExercise {
  // Unique identifier for the exercise
  int32 id = 1;

  // Title of the exercise
  string title = 2;
  
  // Programming language used
  ProgrammingLanguage programming_language = 3;

  // Package name for the exercise
  string package_name = 4;

  // Type of project (e.g., Maven, Gradle)
  ProjectType project_type = 5;

  // Repository containing template files
  Repository template_repository = 6;

  // Repository containing solution files
  Repository solution_repository = 7;

  // Repository containing test files (optional)
  Repository test_repository = 8;
  
  // Problem statement describing the exercise requirements
  string problem_statement = 9;
  
}

// Exercise Creation Step 1: Define Boundary Conditions
service DefineBoundaryCondition { }

// Exercise Creation Step 2: Create Draft Problem Statement
service DraftProblemStatement {}

// Exercise Creation Step 3: Create Solution Repository
service CreateSolutionRepository {}

// Exercise Creation Step 4: Create Template Repository
service CreateTemplateRepository {}

// Exercise Creation Step 5: Create Test Repository
service CreateTestRepository {}

// Exercise Creation Step 6: Finalize Problem Statement
service FinalizeProblemStatement {}

// Exercise Creation Step 7: Configure Grading
service ConfigureGrading {}

// Exercise Creation Step 8: Review and Refine
service ReviewAndRefine {
  rpc CheckConsistency(ConsistencyCheckRequest) returns (ConsistencyCheckResponse) {}
  rpc RewriteProblemStatement(RewriteProblemStatementRequest) returns (RewriteProblemStatementResponse) {}
}

message ConsistencyCheckRequest {
  string problem_statement = 1;
  Repository solution_repository = 2;
  Repository template_repository = 3;
  Repository test_repository = 4;
}

enum ArtifactType {
  PROBLEM_STATEMENT = 0;
  TEMPLATE_REPOSITORY = 1;
  SOLUTION_REPOSITORY = 2;
  TEST_REPOSITORY = 3;
}

message ArtifactAnchor {
  ArtifactType type = 1;
  string file_path = 2;  // Path in the repository, empty for problem statement
  
  // Location reference - use what makes sense for the context
  oneof location_reference {
    TextRange text_range = 3;
    LineRange line_range = 4;
    StructuralReference structural_ref = 5;
  }
}

message TextRange {
  int32 start_index = 1;
  int32 end_index = 2;
}

message LineRange {
  int32 start_line = 1;
  int32 end_line = 2;
}

message StructuralReference {
  string element_type = 1;    // e.g., "class", "method", "variable"
  string element_name = 2;    // e.g., "Student", "getName"
  repeated string path = 3;   // Hierarchical path: ["package.name", "ClassName"]
}

enum ConsistencyIssueSeverity {
  LOW = 0;
  MEDIUM = 1;
  HIGH = 2;
  CRITICAL = 3;
}

enum ConsistencyIssueCategory {
  SEMANTIC_MISMATCH = 0;
  MISSING_IMPLEMENTATION = 1;
  EXTRA_IMPLEMENTATION = 2;
  TEST_COVERAGE_GAP = 3;
  NAMING_INCONSISTENCY = 4;
  TYPE_MISMATCH = 5;
  BEHAVIORAL_INCONSISTENCY = 6;
}

message ConsistencyIssue {
  string description = 1;
  ConsistencyIssueSeverity severity = 2;
  ConsistencyIssueCategory category = 3;
  
  // Primary location where issue was detected
  ArtifactAnchor primary_location = 4;
  
  // Related locations across artifacts
  repeated ArtifactAnchor related_locations = 5;
  
  // Simple suggested fix as a string
  string suggested_fix = 6;
}

message ConsistencyCheckResponse {
  repeated ConsistencyIssue issues = 1;
}

message RewriteProblemStatementRequest {
  string text = 1;
}

message RewriteProblemStatementResponse {
  string rewritten_text = 1;
}
