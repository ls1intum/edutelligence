# Development Dockerfile for Hyperion
# Pre-installs build dependencies and Poetry for fast container startup

FROM python:3.13-alpine AS base

# Install system dependencies once
RUN apk update && \
    apk add --no-cache \
    gcc \
    musl-dev \
    postgresql-dev \
    rust \
    cargo \
    curl \
    git

# Install Poetry once
RUN pip install poetry==2.1.1

# Configure Poetry 
ENV POETRY_NO_INTERACTION=1 \
    POETRY_VENV_IN_PROJECT=1 \
    POETRY_CACHE_DIR=/opt/poetry_cache

# Set up the application structure
WORKDIR /app
RUN mkdir -p /app/hyperion /app/shared

# Copy shared library
FROM base AS shared-deps
COPY shared/ /app/shared/

# Development stage with dependencies
FROM shared-deps AS development

# Copy Poetry configuration files
COPY hyperion/pyproject.toml hyperion/poetry.lock /app/hyperion/

# Change to hyperion directory for Poetry install
WORKDIR /app/hyperion

# Install dependencies including dev extras for hot-reload and testing
RUN poetry install --no-root

# Set Python path
ENV PYTHONPATH=/app/hyperion:/app \
    PYTHONUNBUFFERED=1

# Expose the development port
EXPOSE 8000

# Use poetry run to ensure all dependencies are available
CMD ["poetry", "run", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
