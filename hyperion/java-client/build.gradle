plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.google.protobuf' version '0.9.5'
}

group = 'de.tum.cit.aet'
version = '0.1.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

dependencies {
    api 'io.grpc:grpc-protobuf:1.71.0'
    api 'io.grpc:grpc-stub:1.71.0'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.25.5'
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.71.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

sourceSets {
    main {
        proto {
            srcDir 'proto'
        }
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

// Disable javadoc errors from generated code
tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

clean {
    delete protobuf.generatedFilesBaseDir
}

// Incremental task to copy proto file from main Hyperion project
task copyProtoFile {
    def srcProto = file('../app/protos/hyperion.proto')
    def destProto = file('proto/hyperion.proto')
    
    inputs.file(srcProto)
    outputs.file(destProto)
    
    doLast {
        if (!srcProto.exists()) {
            throw new IllegalStateException("Source proto file not found at ${srcProto.absolutePath}")
        }
        
        destProto.parentFile.mkdirs()
        copy {
            from srcProto
            into destProto.parent
        }
        
        println "âœ… Proto file copied from ${srcProto} to ${destProto}"
    }
}

// Single task to build and publish the Java client
task buildClient {
    group = 'build'
    description = 'Builds the Hyperion Java gRPC client and publishes it to Maven Local'
    
    dependsOn copyProtoFile, build, publishToMavenLocal
    
    // Capture project properties at configuration time
    def projectGroup = project.group
    def projectName = project.name
    def projectVersion = project.version
    
    doLast {
        println ""
        println "ðŸŽ‰ Hyperion Java gRPC client built and published successfully!"
        println "ðŸ“¦ Use in your project with:"
        println "   implementation '${projectGroup}:${projectName}:${projectVersion}'"
    }
}

// Make protobuf and compile tasks depend on proto file copying
tasks.withType(AbstractCompile) {
    dependsOn copyProtoFile
}

tasks.named('generateProto') {
    dependsOn copyProtoFile
}

tasks.named('processResources') {
    dependsOn copyProtoFile
}
